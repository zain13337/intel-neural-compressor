Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (57)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3], "id": [0, 1, 2, 3, 156, 203, 205, 241, 251, 253, 254, 255, 256, 289, 291, 292, 293, 294, 411, 561, 593, 597], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 17, 103, 172, 177, 187, 189, 207, 217, 227, 229, 254, 264, 265, 292, 324, 327, 332, 506, 523, 526, 529, 547, 564, 575, 577, 579, 580, 583, 590, 593, 595, 597], "date": [0, 1, 2, 3], "2022": [0, 1, 2, 3, 172, 528, 560, 594], "12": [0, 544, 556, 559, 600], "09": [0, 600], "17": [0, 594, 600], "22": [0, 3, 559, 600], "310141": 0, "v1": [1, 2, 3, 144, 199, 200, 239, 255, 256, 258, 293, 294, 296, 305, 551, 556, 561, 564, 587, 592, 593, 600], "14": [1, 2, 172, 246, 247, 553, 559, 594, 600], "6f0d0f71d92e": [1, 2], "08": [1, 204, 242, 596, 600], "31": [1, 600], "07": [1, 2, 594, 599, 600], "16": [1, 546, 547, 587, 594, 600], "24": [1, 597, 600], "229939": 1, "update_dataload": 1, "db_session": [1, 393], "sqlalchemi": [1, 380, 393, 554, 559], "orm": [1, 380, 393], "session": [1, 144, 186, 226, 305, 393, 562, 595], "sourc": [1, 5, 6, 8, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 161, 163, 164, 165, 166, 167, 168, 169, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 323, 324, 325, 326, 327, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 403, 405, 406, 407, 408, 409, 411, 413, 414, 420, 421, 423, 424, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 449, 450, 452, 453, 455, 456, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 525, 528, 560, 562, 575, 577, 579, 580, 582, 588], "updat": [1, 72, 161, 163, 167, 247, 283, 342, 393, 463, 490, 544, 553, 554, 561, 562, 568, 573, 576, 586, 587, 597, 598], "dataload": [1, 17, 19, 146, 148, 150, 156, 175, 176, 187, 198, 208, 227, 238, 243, 250, 273, 278, 287, 288, 308, 329, 332, 340, 367, 391, 393, 415, 456, 469, 475, 483, 494, 499, 525, 528, 529, 544, 549, 550, 551, 556, 557, 561, 562, 563, 585, 590, 591, 594, 595, 596, 599], "exist": [1, 51, 156, 169, 205, 305, 426, 494, 553, 561, 569, 587, 597], "databas": [1, 189, 229, 358, 361, 363, 366, 367, 368, 371, 372, 377, 381, 382, 386, 391], "update_transform": 1, "transform": [1, 42, 48, 139, 141, 142, 143, 187, 188, 189, 190, 191, 192, 194, 196, 198, 227, 228, 229, 230, 231, 232, 234, 236, 238, 250, 288, 367, 391, 393, 415, 494, 496, 525, 526, 546, 547, 549, 550, 551, 552, 556, 562, 565, 570, 571, 572, 573, 587, 588, 591, 594, 595, 599, 600], "13": [2, 3, 308, 544, 559, 594], "9e89549a08c8": [2, 3], "29": [2, 594, 600], "41": [2, 594, 600], "291905": 2, "11": [3, 544, 559, 561, 563, 594, 597], "03": [3, 600], "34": [3, 600], "52": [3, 594, 600], "916541": 3, "block": [4, 163, 167, 281, 307, 327, 511, 558, 584, 587, 594], "mask": [4, 163, 164, 187, 227, 254, 283, 292, 587, 600], "run_migrations_offlin": 5, "run": [5, 17, 144, 156, 164, 167, 172, 175, 176, 186, 203, 205, 226, 241, 282, 283, 297, 308, 312, 329, 441, 487, 509, 511, 524, 529, 544, 545, 551, 554, 555, 562, 563, 565, 567, 569, 570, 571, 573, 575, 576, 577, 579, 580, 582, 587, 588, 590, 592, 593, 595, 597, 599], "migrat": [5, 594, 598], "offlin": [5, 339, 523, 562, 590, 594], "mode": [5, 41, 42, 43, 108, 148, 196, 236, 254, 292, 305, 324, 339, 529, 544, 558, 559, 575, 579, 590, 591, 597], "thi": [5, 43, 84, 108, 130, 137, 139, 143, 146, 150, 155, 157, 163, 164, 165, 166, 172, 175, 176, 186, 187, 188, 189, 190, 191, 192, 194, 204, 207, 213, 214, 226, 227, 228, 229, 230, 231, 232, 234, 242, 251, 254, 255, 256, 258, 267, 268, 270, 271, 272, 273, 278, 281, 283, 285, 286, 287, 289, 292, 293, 294, 296, 297, 307, 308, 312, 317, 327, 329, 338, 339, 523, 524, 525, 526, 529, 544, 546, 547, 549, 550, 551, 555, 558, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 573, 575, 577, 579, 580, 581, 582, 583, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598], "configur": [5, 15, 17, 18, 43, 116, 145, 150, 156, 167, 168, 172, 175, 176, 178, 189, 192, 205, 210, 229, 232, 243, 247, 249, 260, 261, 262, 264, 273, 278, 282, 286, 287, 288, 297, 307, 308, 317, 329, 331, 332, 337, 338, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 445, 475, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 509, 511, 525, 526, 529, 544, 547, 561, 562, 569, 583, 584, 587, 590, 592, 596, 597, 600], "context": [5, 17, 339, 589], "just": [5, 95, 177, 202, 204, 207, 209, 210, 212, 217, 242, 307, 526, 562, 572, 576, 582, 585, 590, 594, 596, 597], "url": [5, 189, 229, 560], "an": [5, 17, 65, 66, 68, 103, 139, 146, 150, 155, 164, 172, 180, 185, 189, 204, 208, 213, 220, 225, 229, 242, 250, 251, 255, 256, 264, 265, 287, 288, 289, 293, 294, 297, 327, 403, 521, 523, 525, 526, 528, 529, 546, 547, 548, 553, 561, 562, 563, 565, 569, 570, 573, 582, 584, 587, 588, 590, 593, 594, 595, 596, 597], "engin": 5, "though": [5, 594], "i": [5, 17, 42, 43, 46, 47, 51, 52, 55, 58, 62, 68, 80, 83, 103, 130, 139, 144, 146, 149, 150, 155, 156, 157, 161, 164, 165, 167, 171, 172, 175, 176, 177, 185, 186, 187, 188, 189, 190, 191, 194, 196, 200, 204, 205, 207, 211, 213, 214, 217, 225, 226, 227, 228, 229, 230, 231, 234, 236, 239, 242, 251, 254, 256, 258, 260, 265, 273, 278, 282, 283, 287, 289, 292, 294, 296, 297, 307, 308, 313, 318, 327, 329, 338, 339, 403, 442, 482, 486, 492, 494, 502, 509, 523, 524, 525, 526, 528, 529, 530, 532, 536, 539, 542, 544, 545, 546, 547, 549, 550, 551, 553, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 575, 576, 577, 579, 580, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600], "accept": [5, 172, 327, 523, 544, 545], "here": [5, 254, 292, 327, 544, 547, 551, 552, 553, 555, 556, 561, 570, 577, 580, 582, 587, 590, 592, 593, 600], "well": [5, 175, 176, 297, 308, 329, 526, 528, 547, 587, 590, 592, 594, 599], "By": [5, 172, 251, 289, 561, 564, 575, 576, 579, 597], "skip": [5, 595, 597], "creation": [5, 355], "we": [5, 42, 65, 66, 68, 72, 84, 139, 148, 154, 155, 156, 172, 186, 205, 207, 226, 251, 254, 289, 292, 315, 523, 525, 529, 546, 551, 553, 555, 561, 562, 569, 570, 573, 577, 580, 582, 583, 584, 585, 587, 589, 590, 593, 594, 595, 597, 598], "don": [5, 139, 155, 163, 171, 172, 525, 544, 587, 597], "t": [5, 65, 66, 68, 139, 155, 163, 171, 172, 204, 207, 242, 256, 294, 525, 529, 544, 549, 551, 562, 583, 587, 590, 597, 599], "even": [5, 544, 587, 594], "need": [5, 17, 42, 103, 107, 148, 156, 172, 175, 176, 177, 185, 186, 189, 196, 204, 207, 209, 210, 217, 225, 226, 229, 236, 242, 287, 296, 297, 307, 308, 317, 329, 338, 339, 525, 529, 544, 546, 547, 549, 551, 558, 562, 563, 565, 567, 568, 571, 575, 576, 577, 579, 580, 582, 583, 587, 589, 590, 591, 592, 594, 596, 597, 599], "dbapi": 5, "avail": [5, 172, 301, 442, 530, 532, 536, 539, 542, 544, 552, 556, 558, 575, 579, 586, 587, 597, 600], "call": [5, 17, 148, 151, 164, 254, 283, 292, 525, 526, 529, 544, 546, 557, 571, 573, 583, 587, 590, 594, 595, 596], "execut": [5, 42, 51, 164, 171, 172, 283, 287, 308, 309, 311, 329, 332, 338, 339, 341, 342, 445, 449, 453, 457, 458, 461, 464, 476, 479, 487, 488, 510, 544, 549, 550, 562, 563, 567, 568, 575, 576, 579, 582, 583, 585, 587, 590, 593, 597, 600], "emit": 5, "given": [5, 17, 65, 66, 68, 102, 103, 114, 144, 150, 204, 242, 254, 292, 308, 403, 480, 494, 526, 587, 594, 596], "string": [5, 42, 43, 114, 144, 158, 163, 164, 165, 166, 167, 168, 172, 189, 206, 211, 229, 243, 247, 249, 251, 254, 260, 261, 262, 264, 265, 273, 278, 281, 282, 283, 284, 285, 286, 289, 292, 301, 305, 332, 339, 352, 494, 561, 594, 596], "script": [5, 251, 252, 255, 256, 289, 290, 293, 294, 341, 342, 428, 445, 449, 453, 455, 458, 461, 467, 551, 558, 565, 569, 572, 573, 576, 588], "output": [5, 42, 51, 55, 57, 72, 96, 103, 108, 144, 150, 163, 169, 171, 172, 175, 176, 209, 213, 246, 247, 251, 281, 289, 296, 297, 305, 308, 329, 335, 336, 339, 449, 453, 525, 529, 544, 549, 550, 551, 553, 555, 557, 561, 562, 564, 573, 582, 583, 585, 587, 589, 590, 594, 595, 596, 597, 599], "run_migrations_onlin": 5, "onlin": [5, 523, 593], "In": [5, 157, 163, 164, 165, 172, 186, 214, 226, 254, 281, 283, 292, 307, 523, 525, 526, 528, 529, 544, 546, 547, 549, 550, 551, 561, 562, 572, 575, 576, 579, 584, 585, 587, 590, 591, 593, 594, 595, 596, 597], "scenario": [5, 356, 529, 544, 545, 549, 562, 587], "associ": [5, 254, 292, 381, 382], "connect": [5, 161, 283, 380, 381, 383, 384, 385, 387, 388, 389, 390, 544, 582, 586, 587, 593], "adaptor_registri": [6, 529], "cl": [6, 151, 158, 163, 164, 165, 166, 189, 196, 204, 206, 211, 229, 236, 242, 265, 272, 276, 281, 283, 285, 307, 320, 339], "The": [6, 8, 15, 18, 36, 42, 51, 72, 111, 117, 119, 144, 150, 151, 156, 157, 158, 161, 163, 164, 165, 166, 167, 168, 169, 172, 175, 176, 177, 187, 188, 189, 190, 191, 195, 196, 204, 206, 209, 211, 214, 216, 217, 227, 228, 229, 230, 231, 235, 236, 242, 243, 249, 251, 252, 253, 255, 256, 258, 260, 261, 262, 264, 265, 267, 268, 270, 271, 272, 273, 276, 278, 281, 282, 283, 284, 285, 286, 289, 290, 291, 293, 294, 296, 297, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 324, 326, 327, 329, 330, 332, 334, 335, 338, 339, 359, 360, 362, 365, 369, 370, 373, 374, 376, 378, 379, 386, 391, 394, 396, 397, 398, 399, 400, 401, 402, 415, 422, 423, 475, 523, 525, 526, 529, 530, 532, 536, 539, 542, 544, 545, 546, 547, 549, 551, 553, 555, 557, 558, 559, 561, 562, 563, 564, 567, 568, 570, 573, 575, 576, 577, 579, 580, 582, 583, 584, 585, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600], "decor": [6, 36, 65, 66, 68, 144, 151, 163, 164, 166, 204, 211, 242, 258, 265, 272, 276, 281, 283, 285, 296, 307, 320, 323, 339, 489, 525, 526, 529, 597], "us": [6, 17, 36, 42, 46, 47, 68, 101, 103, 114, 146, 150, 156, 158, 161, 163, 164, 166, 168, 169, 171, 172, 175, 176, 185, 186, 187, 188, 189, 190, 191, 194, 203, 204, 205, 206, 211, 225, 226, 227, 228, 229, 230, 231, 234, 241, 242, 246, 247, 249, 251, 252, 254, 258, 259, 260, 265, 272, 273, 276, 278, 281, 283, 284, 285, 286, 287, 289, 290, 292, 296, 307, 312, 315, 317, 320, 323, 324, 327, 330, 331, 332, 333, 339, 386, 391, 396, 397, 401, 403, 415, 422, 424, 449, 453, 494, 506, 523, 524, 525, 526, 529, 544, 545, 546, 547, 549, 550, 551, 553, 555, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 573, 575, 577, 579, 580, 582, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600], "regist": [6, 36, 151, 158, 161, 163, 164, 165, 166, 189, 196, 204, 206, 211, 229, 236, 242, 258, 265, 272, 276, 281, 283, 285, 296, 307, 320, 323, 526, 529, 547, 551, 561, 562, 583, 584, 594, 597], "all": [6, 17, 36, 43, 61, 95, 151, 153, 156, 157, 163, 164, 167, 172, 177, 178, 185, 189, 196, 204, 205, 211, 214, 216, 217, 225, 229, 236, 242, 247, 251, 254, 256, 258, 265, 272, 276, 277, 281, 287, 289, 292, 294, 296, 298, 307, 320, 323, 332, 339, 343, 355, 367, 391, 396, 397, 410, 412, 415, 416, 422, 441, 448, 450, 454, 455, 457, 460, 466, 471, 475, 488, 511, 523, 528, 529, 544, 546, 547, 551, 555, 559, 562, 565, 573, 576, 577, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 594, 596, 597], "subclass": [6, 36, 151, 163, 164, 166, 182, 186, 189, 196, 204, 211, 222, 226, 229, 236, 242, 258, 265, 272, 276, 281, 283, 285, 296, 307, 320, 323, 529], "paramet": [6, 15, 17, 18, 42, 43, 65, 66, 68, 84, 103, 114, 130, 144, 145, 146, 149, 150, 151, 156, 157, 158, 161, 163, 164, 165, 166, 167, 168, 169, 171, 172, 175, 176, 186, 187, 189, 196, 200, 204, 206, 211, 216, 226, 227, 229, 236, 239, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 258, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 276, 278, 281, 282, 283, 284, 285, 286, 289, 290, 292, 293, 294, 296, 297, 301, 305, 307, 308, 312, 320, 324, 326, 327, 329, 332, 336, 338, 339, 356, 381, 382, 392, 403, 474, 494, 496, 506, 525, 544, 546, 547, 549, 551, 558, 561, 562, 576, 582, 583, 587, 590, 593, 594, 596, 597, 599], "framework_specific_info": [6, 8, 15, 18, 43, 45, 529], "base": [6, 17, 36, 44, 45, 84, 103, 114, 118, 120, 130, 140, 146, 150, 151, 157, 161, 172, 177, 180, 185, 187, 189, 196, 204, 214, 217, 220, 225, 227, 229, 236, 242, 258, 264, 266, 272, 273, 276, 278, 283, 296, 298, 305, 306, 307, 317, 320, 324, 354, 494, 526, 528, 529, 547, 550, 551, 555, 562, 570, 571, 573, 582, 586, 587, 590, 593, 595, 597, 600], "framework": [6, 8, 15, 17, 18, 43, 156, 158, 173, 174, 178, 179, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 201, 204, 206, 207, 211, 218, 219, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 238, 240, 242, 249, 258, 259, 286, 296, 297, 298, 299, 301, 318, 324, 332, 341, 367, 391, 393, 415, 442, 449, 453, 458, 461, 476, 482, 494, 528, 529, 544, 551, 552, 556, 557, 558, 559, 561, 562, 563, 587, 588, 590, 595, 596, 597, 598, 599], "layer": [6, 8, 15, 18, 42, 44, 45, 114, 115, 116, 117, 119, 120, 148, 154, 158, 163, 167, 172, 206, 213, 281, 282, 330, 332, 339, 506, 529, 550, 558, 587, 592], "mxnet_util": 7, "util": [7, 16, 20, 103, 108, 109, 137, 138, 145, 146, 147, 149, 160, 162, 172, 213, 244, 250, 252, 282, 288, 290, 316, 354, 391, 415, 422, 432, 466, 471, 475, 530, 551, 562, 565, 590, 597, 598], "ox_util": 7, "oper": [7, 20, 42, 102, 108, 144, 163, 172, 200, 239, 281, 506, 525, 544, 545, 546, 553, 582, 590, 594, 596, 597], "activ": [7, 20, 32, 150, 171, 172, 213, 247, 324, 399, 529, 544, 550, 555, 562, 583, 586, 589, 590, 594, 595, 599], "argmax": [7, 20, 32], "attent": [7, 20, 32, 172, 187, 227, 523, 549], "binary_op": [7, 20, 32], "concat": [7, 20, 32, 143], "conv": [7, 20, 32, 56, 60, 64, 69, 70, 71, 90, 107, 154, 171, 172, 525, 562, 587, 589, 590, 597], "direct_q8": [7, 20, 32], "embed_layernorm": [7, 20, 32], "gather": [7, 17, 20, 32, 172, 281, 482], "gavgpool": [7, 20, 32], "gemm": [7, 20, 32, 171, 172, 587], "lstm": [7, 20, 32], "matmul": [7, 20, 32, 50, 57, 63, 71, 92, 107, 126, 135, 163, 171, 172, 247, 281, 553, 555, 597], "maxpool": [7, 20, 32, 127, 136, 555], "op": [7, 17, 20, 32, 42, 43, 50, 55, 63, 64, 65, 66, 67, 68, 69, 70, 72, 76, 79, 83, 86, 89, 90, 91, 92, 94, 103, 105, 107, 121, 122, 123, 129, 131, 132, 133, 134, 139, 142, 144, 145, 146, 149, 150, 154, 171, 172, 247, 313, 315, 317, 324, 325, 334, 399, 400, 510, 529, 544, 555, 562, 563, 587, 590, 591, 592, 594, 595, 597, 599], "pad": [7, 20, 32, 69, 70, 187, 204, 227, 242, 547, 596], "pool": [7, 20, 32], "resiz": [7, 20, 32, 187, 188, 200, 204, 227, 228, 239, 242, 546, 547, 596], "split": [7, 20, 32, 42, 80, 203, 204, 241, 242, 525, 594, 596], "calibr": [7, 15, 17, 18, 20, 42, 47, 87, 88, 150, 156, 171, 172, 175, 176, 249, 286, 297, 308, 334, 503, 529, 546, 547, 557, 558, 590, 597, 599], "quantiz": [7, 15, 17, 18, 20, 42, 46, 47, 86, 90, 92, 94, 97, 105, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 145, 146, 148, 150, 154, 156, 157, 171, 172, 175, 176, 200, 207, 214, 239, 247, 248, 249, 250, 260, 287, 288, 297, 313, 315, 317, 329, 330, 334, 338, 339, 475, 483, 499, 529, 534, 544, 546, 547, 551, 552, 553, 555, 557, 558, 561, 563, 564, 565, 570, 572, 573, 576, 585, 588, 592, 595, 596, 597, 598, 599], "tf_util": 7, "graph_rewrit": [7, 109], "bf16": [7, 55, 85, 109, 145, 171, 172, 324, 529, 555, 562, 563, 567, 572, 576, 582, 591, 597], "gener": [7, 17, 46, 47, 85, 109, 120, 144, 150, 167, 175, 176, 177, 186, 189, 190, 191, 192, 204, 217, 226, 229, 230, 231, 232, 242, 247, 251, 259, 289, 297, 308, 312, 327, 329, 341, 344, 345, 346, 347, 348, 349, 350, 351, 392, 461, 467, 468, 478, 519, 525, 529, 544, 546, 549, 561, 562, 563, 565, 570, 575, 577, 579, 580, 582, 584, 586, 587, 588, 590, 591, 594, 595, 596, 597], "int8": [7, 21, 22, 42, 85, 109, 121, 122, 123, 129, 131, 132, 133, 134, 139, 144, 155, 156, 171, 172, 200, 239, 245, 246, 247, 324, 326, 338, 525, 529, 544, 545, 547, 550, 555, 562, 567, 570, 572, 573, 576, 582, 589, 590, 591, 592, 593, 594, 595, 596, 599], "onnx": [7, 18, 19, 32, 41, 42, 85, 109, 138, 154, 171, 172, 183, 223, 245, 246, 247, 248, 297, 304, 337, 342, 445, 528, 529, 530, 546, 552, 553, 555, 556, 558, 564, 567, 572, 573, 588, 589, 597], "qdq": [7, 85, 109, 110, 111, 138, 150, 171, 172, 245, 246, 247, 529, 553, 558, 572, 573, 590], "graph_bas": [7, 85, 109], "quantize_graph": [7, 109], "qat": [7, 109, 110, 149, 172, 247, 260, 305, 550, 551, 553, 558, 562, 590], "quantize_graph_bas": [7, 109, 110], "quantize_graph_bn": [7, 109, 110], "quantize_graph_concatv2": [7, 109, 110], "quantize_graph_conv": [7, 109, 110], "quantize_graph_for_intel_cpu": [7, 109, 110], "quantize_graph_matmul": [7, 109, 110], "quantize_graph_pool": [7, 109, 110], "transform_graph": [7, 109], "bias_correct": [7, 109, 141], "graph_transform_bas": [7, 109, 141], "insert_log": [7, 109, 141], "rerange_quantized_concat": [7, 109, 141], "graph_convert": [7, 109], "graph_converter_without_calib": [7, 109], "graph_util": [7, 109], "quantize_graph_common": [7, 109], "tf2onnx_convert": [7, 109], "torch_util": [7, 208, 250, 288, 594], "bf16_convert": [7, 49, 85, 109, 147], "hawq_metr": [7, 147], "symbolic_trac": [7, 147], "tensorflow": [7, 49, 51, 73, 74, 75, 85, 93, 99, 100, 101, 102, 103, 104, 108, 109, 110, 112, 115, 128, 138, 141, 144, 171, 172, 186, 187, 188, 189, 192, 194, 196, 204, 206, 211, 226, 227, 228, 229, 232, 234, 236, 242, 246, 247, 248, 249, 252, 254, 258, 259, 260, 286, 290, 292, 296, 297, 305, 308, 318, 339, 401, 402, 414, 415, 422, 471, 472, 473, 475, 526, 528, 529, 544, 546, 549, 550, 552, 553, 555, 556, 558, 559, 562, 564, 572, 573, 588, 589, 593, 597, 599], "kerasadaptor": 8, "mxnetadaptor": 15, "do": [15, 18, 157, 171, 172, 186, 187, 226, 227, 243, 247, 251, 254, 284, 289, 292, 338, 523, 544, 547, 551, 555, 558, 559, 561, 562, 577, 580, 587, 591, 592, 597], "inspect": [15, 18, 544, 592, 595], "tensor": [15, 17, 18, 19, 42, 68, 103, 144, 146, 150, 161, 163, 164, 165, 204, 242, 245, 247, 281, 283, 305, 317, 339, 525, 547, 587, 590, 592, 595, 596, 597], "dict": [15, 17, 18, 42, 43, 114, 144, 145, 146, 150, 151, 156, 161, 163, 164, 165, 166, 167, 168, 169, 172, 175, 176, 186, 205, 211, 226, 245, 247, 253, 254, 255, 256, 258, 261, 264, 265, 266, 273, 276, 278, 281, 282, 283, 284, 285, 291, 292, 293, 294, 296, 297, 305, 308, 312, 313, 317, 323, 326, 327, 329, 330, 332, 338, 339, 340, 342, 345, 353, 354, 356, 361, 363, 364, 366, 368, 371, 372, 377, 381, 382, 393, 399, 403, 411, 420, 438, 439, 440, 442, 445, 447, 452, 456, 459, 462, 463, 464, 467, 469, 472, 479, 480, 482, 484, 490, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 506, 510, 511, 525, 561, 587, 589, 590, 594, 595, 597], "specif": [15, 18, 44, 102, 114, 167, 171, 172, 187, 188, 189, 190, 194, 196, 211, 227, 228, 229, 230, 234, 236, 260, 267, 268, 270, 271, 272, 381, 382, 523, 526, 529, 544, 549, 555, 557, 561, 562, 563, 564, 565, 569, 570, 572, 576, 582, 584, 587, 589, 597, 599], "mxnet": [16, 17, 182, 186, 189, 192, 196, 204, 222, 226, 229, 232, 236, 242, 249, 258, 286, 296, 297, 302, 308, 528, 529, 546, 552, 555, 558, 559, 562, 563, 564, 589, 597, 599], "init": [16, 20, 153, 159, 162, 547, 561], "optyp": [17, 171, 172, 245], "enum": 17, "type": [17, 42, 43, 72, 94, 103, 114, 120, 130, 144, 145, 146, 150, 151, 158, 163, 164, 165, 166, 167, 169, 171, 172, 185, 187, 189, 196, 204, 206, 211, 225, 227, 229, 236, 242, 247, 248, 251, 252, 254, 258, 265, 272, 276, 281, 283, 285, 289, 290, 292, 296, 305, 307, 312, 313, 320, 324, 326, 327, 338, 352, 357, 381, 382, 424, 482, 490, 524, 529, 544, 547, 551, 555, 558, 562, 563, 583, 590, 593, 596, 597, 599], "isiter": 17, "obj": [17, 103, 167, 186, 216, 226, 243, 249, 260, 261, 262, 264, 273, 278, 282, 286, 297, 307, 308, 329, 332, 339], "bool": [17, 144, 149, 150, 163, 172, 187, 189, 200, 204, 227, 229, 239, 242, 247, 252, 258, 281, 290, 296, 323, 327, 338, 339, 403, 411, 430, 442, 445, 479, 482, 494, 513, 547, 561, 589, 596], "check": [17, 65, 66, 103, 144, 150, 167, 189, 229, 245, 282, 338, 339, 442, 445, 482, 494, 524, 528, 544, 551, 559, 566, 568, 570, 577, 580, 581, 592], "whether": [17, 103, 114, 144, 163, 171, 172, 185, 187, 200, 204, 225, 227, 239, 242, 252, 254, 258, 281, 290, 292, 296, 332, 338, 339, 445, 529, 547, 561, 590, 596], "object": [17, 42, 43, 72, 84, 103, 114, 130, 145, 146, 149, 150, 156, 157, 161, 163, 164, 165, 166, 167, 168, 169, 171, 172, 175, 176, 177, 187, 188, 189, 204, 205, 207, 216, 217, 227, 228, 229, 242, 243, 247, 249, 254, 262, 264, 267, 268, 270, 271, 272, 273, 278, 281, 282, 283, 284, 285, 286, 288, 292, 297, 305, 306, 308, 312, 329, 332, 338, 339, 419, 494, 506, 507, 511, 525, 526, 534, 544, 545, 546, 547, 554, 561, 562, 564, 585, 587, 589, 590, 596, 597, 598, 600], "iter": [17, 19, 103, 144, 156, 164, 166, 172, 175, 176, 180, 185, 189, 190, 207, 220, 225, 229, 230, 283, 285, 297, 308, 329, 332, 525, 526, 529, 545, 547, 562, 587, 589, 590, 595, 597, 599], "return": [17, 42, 43, 51, 65, 66, 68, 72, 103, 114, 144, 145, 146, 149, 150, 151, 156, 158, 163, 164, 165, 166, 167, 169, 175, 176, 189, 196, 200, 204, 205, 206, 211, 216, 229, 236, 239, 242, 247, 248, 251, 252, 254, 255, 256, 258, 264, 265, 272, 276, 281, 282, 283, 285, 289, 290, 292, 293, 294, 296, 297, 301, 305, 307, 308, 312, 320, 324, 326, 327, 329, 332, 338, 339, 403, 482, 494, 525, 526, 547, 551, 561, 564, 584, 587, 590, 594, 595, 597], "true": [17, 83, 111, 142, 144, 156, 171, 172, 185, 187, 189, 190, 203, 204, 205, 225, 227, 229, 230, 241, 242, 247, 252, 258, 276, 290, 296, 307, 323, 327, 332, 338, 479, 482, 494, 547, 551, 555, 561, 562, 565, 568, 569, 589, 590, 594, 595, 596, 597, 599], "els": [17, 144, 172, 185, 225, 307, 494, 570, 595], "fals": [17, 19, 41, 45, 46, 47, 69, 70, 87, 90, 97, 100, 101, 103, 111, 129, 134, 139, 142, 143, 144, 149, 150, 156, 158, 171, 172, 177, 179, 184, 186, 187, 189, 200, 204, 205, 206, 207, 213, 217, 219, 224, 226, 227, 229, 239, 242, 254, 258, 292, 296, 307, 327, 332, 411, 430, 482, 494, 513, 529, 547, 555, 561, 562, 575, 579, 589, 590, 594, 595, 596, 599], "boolean": [17, 494], "ensure_list": 17, "x": [17, 52, 72, 186, 204, 226, 242, 312, 327, 551, 553, 563, 564, 587, 590, 594, 595, 596, 598], "ensur": [17, 204, 242, 312, 544, 551, 553, 590, 596], "list": [17, 42, 51, 103, 144, 145, 146, 150, 156, 163, 171, 172, 175, 176, 180, 187, 200, 204, 205, 220, 227, 239, 242, 246, 247, 251, 252, 254, 255, 256, 258, 265, 273, 278, 281, 284, 289, 290, 292, 293, 294, 296, 297, 305, 308, 323, 327, 329, 330, 352, 354, 356, 361, 363, 364, 366, 368, 371, 372, 377, 381, 382, 393, 403, 406, 411, 437, 442, 445, 449, 453, 479, 486, 487, 488, 494, 506, 513, 525, 528, 529, 547, 555, 559, 562, 565, 570, 572, 575, 576, 579, 584, 587, 589, 590, 591, 594, 595, 597], "input": [17, 19, 42, 43, 51, 58, 62, 65, 66, 68, 69, 70, 72, 80, 81, 83, 84, 103, 107, 108, 114, 120, 144, 145, 148, 149, 150, 154, 171, 172, 175, 176, 187, 188, 189, 191, 200, 203, 204, 209, 227, 228, 229, 231, 239, 241, 242, 245, 246, 247, 296, 297, 301, 305, 308, 329, 338, 339, 341, 437, 449, 453, 458, 461, 467, 526, 529, 544, 545, 546, 547, 549, 550, 551, 553, 555, 557, 561, 562, 564, 565, 570, 587, 589, 590, 594, 595, 596, 599], "check_mx_vers": 17, "version": [17, 51, 102, 150, 172, 246, 247, 288, 442, 482, 494, 523, 525, 529, 544, 555, 559, 560, 562, 575, 577, 579, 580, 586, 588, 597, 598], "str": [17, 145, 146, 149, 150, 151, 158, 172, 187, 188, 189, 196, 200, 204, 206, 210, 211, 227, 228, 229, 236, 239, 242, 246, 247, 248, 251, 252, 254, 256, 258, 265, 276, 289, 290, 292, 294, 296, 323, 326, 327, 332, 339, 341, 342, 345, 352, 353, 354, 356, 358, 381, 382, 393, 399, 400, 403, 405, 406, 411, 420, 421, 423, 424, 426, 428, 430, 435, 438, 439, 440, 442, 445, 449, 453, 458, 461, 463, 464, 467, 468, 479, 482, 487, 490, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 506, 510, 511, 547, 561, 589, 595, 596], "mx": 17, "__version__": 17, "combine_cap": 17, "current": [17, 42, 68, 102, 148, 161, 163, 164, 172, 260, 267, 268, 270, 271, 272, 281, 283, 312, 318, 525, 526, 529, 544, 551, 555, 559, 561, 562, 565, 569, 582, 584, 587, 590, 597], "new": [17, 144, 156, 177, 189, 204, 205, 217, 229, 242, 282, 307, 506, 524, 551, 562, 563, 576, 582, 583, 587, 588, 590, 592, 593, 596, 598, 599], "combin": [17, 150, 171, 172, 175, 176, 200, 214, 239, 297, 308, 329, 339, 525, 529, 558, 562, 585, 588, 590, 591, 596, 597], "capabl": [17, 45, 324, 545, 555, 562, 563, 573, 589, 590, 597, 599], "contain": [17, 65, 66, 68, 72, 137, 144, 146, 156, 157, 163, 164, 166, 167, 172, 175, 176, 187, 188, 189, 227, 228, 229, 243, 247, 249, 254, 255, 256, 260, 273, 276, 278, 281, 282, 283, 284, 285, 286, 292, 293, 294, 297, 308, 329, 332, 338, 343, 347, 355, 361, 363, 364, 366, 367, 368, 371, 372, 375, 377, 386, 391, 396, 397, 401, 404, 410, 415, 416, 422, 441, 448, 450, 451, 454, 455, 457, 460, 466, 471, 475, 547, 549, 558, 561, 583, 587, 595, 597, 598], "make_nc_model": 17, "target": [17, 42, 100, 166, 167, 172, 282, 285, 312, 407, 547, 551, 562, 587, 595, 596, 597, 599], "sym_model": 17, "ctx": 17, "input_desc": 17, "convert": [17, 42, 46, 47, 48, 50, 51, 52, 53, 54, 64, 72, 84, 97, 98, 100, 101, 102, 103, 129, 134, 138, 145, 150, 171, 172, 187, 200, 203, 204, 227, 239, 241, 242, 246, 254, 260, 282, 292, 324, 327, 525, 562, 563, 567, 590, 591, 594, 596, 597], "symbol": [17, 145, 149, 150, 251, 289, 297, 308, 525, 564], "model": [17, 19, 32, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 114, 116, 138, 144, 145, 146, 148, 149, 150, 154, 156, 157, 164, 166, 167, 171, 172, 175, 176, 183, 186, 187, 189, 204, 205, 208, 209, 216, 223, 226, 227, 229, 242, 243, 245, 246, 247, 248, 249, 250, 258, 259, 260, 261, 264, 267, 268, 270, 271, 272, 273, 278, 282, 283, 284, 285, 286, 287, 288, 296, 297, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 327, 329, 335, 338, 339, 341, 342, 343, 367, 383, 385, 387, 391, 392, 403, 408, 409, 410, 413, 414, 415, 439, 440, 442, 445, 448, 449, 450, 451, 453, 454, 455, 460, 461, 466, 471, 475, 476, 483, 494, 499, 509, 510, 514, 521, 525, 526, 528, 529, 534, 545, 546, 547, 549, 550, 551, 552, 557, 558, 560, 561, 563, 565, 570, 572, 573, 576, 582, 584, 585, 586, 588, 590, 592, 593, 595, 596, 597, 598, 599], "neural": [17, 146, 156, 157, 163, 171, 172, 199, 200, 201, 204, 205, 208, 211, 214, 239, 240, 242, 244, 250, 257, 258, 260, 273, 278, 281, 284, 286, 287, 288, 295, 296, 297, 301, 308, 315, 316, 322, 329, 474, 481, 494, 521, 524, 529, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 563, 564, 566, 567, 570, 572, 573, 575, 577, 579, 580, 581, 584, 585, 588, 590, 592, 595, 596, 597, 599, 600], "compressor": [17, 156, 157, 163, 171, 172, 199, 200, 201, 204, 205, 208, 211, 214, 239, 240, 242, 244, 250, 257, 258, 260, 281, 284, 286, 287, 288, 295, 296, 297, 301, 308, 316, 322, 329, 474, 481, 494, 521, 524, 526, 529, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 563, 564, 565, 566, 570, 572, 573, 575, 577, 579, 580, 581, 584, 585, 587, 588, 590, 592, 595, 596, 597, 598, 599, 600], "tupl": [17, 103, 150, 172, 175, 176, 200, 204, 239, 242, 247, 297, 308, 323, 329, 494, 547, 561, 562, 590, 596], "symnet": 17, "arg": [17, 51, 103, 187, 188, 189, 227, 228, 229, 281, 312, 327, 335, 336, 344, 346, 348, 349, 350, 351, 361, 363, 364, 366, 368, 371, 372, 377, 546, 547, 551, 562, 571, 590, 595, 596], "aux": 17, "data": [17, 42, 53, 103, 144, 146, 148, 150, 154, 171, 172, 175, 176, 205, 207, 247, 248, 250, 288, 297, 308, 312, 324, 326, 329, 332, 339, 342, 345, 353, 354, 356, 380, 392, 403, 419, 420, 430, 438, 439, 440, 442, 445, 462, 464, 479, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 506, 510, 518, 528, 529, 544, 546, 547, 551, 555, 556, 559, 561, 562, 563, 590, 591, 592, 593, 594, 595, 596, 597], "descript": [17, 130, 247, 248, 327, 524, 525], "ncmodel": 17, "fuse": [17, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 89, 90, 91, 92, 94, 129, 134, 149, 150, 154, 525, 594, 595], "suppli": 17, "get_framework_nam": 17, "get": [17, 42, 43, 65, 66, 68, 102, 103, 144, 150, 156, 161, 163, 164, 165, 166, 169, 172, 180, 204, 205, 211, 213, 220, 242, 247, 248, 281, 283, 285, 305, 317, 324, 326, 332, 339, 353, 354, 356, 393, 403, 420, 424, 437, 442, 445, 463, 474, 482, 490, 494, 510, 511, 544, 554, 558, 559, 562, 568, 594, 597, 598, 601], "name": [17, 42, 43, 51, 65, 66, 68, 102, 103, 108, 114, 144, 145, 146, 149, 150, 151, 156, 161, 163, 164, 165, 166, 169, 171, 172, 187, 188, 189, 192, 196, 202, 204, 205, 209, 212, 213, 227, 228, 229, 232, 236, 242, 245, 246, 247, 253, 258, 276, 281, 283, 285, 291, 296, 301, 305, 307, 324, 326, 330, 332, 339, 403, 405, 442, 443, 444, 445, 482, 494, 496, 525, 544, 547, 551, 555, 560, 561, 562, 564, 568, 575, 579, 583, 586, 587, 590, 592, 593, 595, 597, 599, 600], "prepare_model_data": 17, "nc_model": [17, 273, 278, 329], "data_x": 17, "prepar": [17, 150, 474, 525, 528, 547, 551, 556, 590], "loader": [17, 175, 176, 297, 308, 329, 335, 590], "dataloaderwrap": 17, "prepare_model": 17, "create_data_exampl": 17, "exampl": [17, 146, 150, 156, 171, 172, 187, 188, 189, 200, 204, 227, 228, 229, 239, 242, 254, 255, 256, 258, 284, 292, 293, 294, 296, 297, 307, 308, 327, 329, 367, 385, 391, 415, 439, 440, 441, 442, 494, 523, 524, 528, 534, 544, 557, 558, 565, 568, 569, 570, 573, 591, 592, 596, 597, 598, 601], "prepare_dataload": 17, "io": 17, "ndarray_to_devic": 17, "ndarrai": [17, 65, 66, 68, 204, 242, 330, 554, 596], "devic": [17, 77, 87, 88, 89, 90, 91, 92, 95, 105, 129, 134, 143, 171, 172, 549, 562, 563, 565, 568, 573, 582, 587, 589], "is_model_quant": 17, "query_quantizable_nod": 17, "queri": [17, 45, 144, 172, 324, 380, 381, 383, 384, 385, 387, 388, 389, 390, 590], "node": [17, 42, 48, 51, 52, 53, 54, 58, 60, 62, 65, 66, 68, 72, 75, 78, 80, 81, 82, 96, 100, 101, 103, 108, 130, 144, 245, 247, 305, 405, 407, 410, 415, 473, 475, 529, 544, 551, 595, 597], "map": [17, 42, 103, 172, 204, 242, 245, 247, 249, 253, 255, 256, 258, 273, 278, 283, 286, 291, 293, 294, 296, 444, 547, 551, 561, 562, 575, 579, 587, 590], "quantize_sym_model": 17, "qconfig": [17, 595], "accord": [17, 120, 156, 172, 187, 188, 189, 204, 227, 228, 229, 242, 315, 317, 324, 332, 526, 529, 547, 551, 587, 591, 594, 596, 597], "run_forward": 17, "b_filter": 17, "collector": [17, 146, 330], "none": [17, 41, 42, 43, 45, 46, 47, 61, 87, 100, 102, 103, 108, 114, 138, 144, 146, 148, 150, 156, 157, 158, 167, 168, 169, 171, 172, 175, 176, 177, 179, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 200, 204, 205, 206, 207, 214, 216, 217, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 239, 242, 243, 246, 247, 249, 254, 258, 259, 260, 261, 264, 273, 278, 282, 286, 292, 296, 297, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 324, 327, 329, 330, 332, 338, 339, 341, 342, 353, 354, 358, 361, 363, 364, 366, 368, 371, 372, 377, 380, 381, 382, 393, 430, 442, 449, 453, 458, 461, 462, 464, 474, 479, 480, 482, 485, 487, 494, 500, 502, 503, 504, 511, 529, 547, 561, 590, 595, 596, 597], "pre_batch": 17, "post_batch": 17, "forward": [17, 528, 562, 587, 589, 590, 594, 595], "propag": [17, 98], "filter": [17, 187, 188, 189, 190, 191, 192, 194, 198, 227, 228, 229, 230, 231, 232, 234, 238, 250, 288, 339, 403, 496, 546, 547, 558, 587, 595], "which": [17, 53, 81, 108, 146, 148, 161, 163, 164, 166, 171, 172, 187, 188, 189, 200, 205, 227, 228, 229, 239, 251, 256, 265, 267, 268, 270, 271, 272, 276, 281, 282, 283, 285, 289, 294, 301, 307, 312, 339, 492, 523, 525, 526, 529, 544, 546, 547, 549, 551, 554, 555, 558, 561, 562, 563, 564, 566, 570, 573, 576, 582, 583, 585, 587, 589, 590, 591, 592, 595, 596, 597, 598, 599], "batch": [17, 150, 177, 179, 180, 185, 186, 207, 217, 219, 220, 225, 226, 329, 544, 546, 549, 550, 562, 585, 587, 596, 597, 600], "infer": [17, 103, 249, 286, 305, 307, 308, 329, 528, 529, 549, 550, 562, 563, 582, 584, 587, 588, 590, 594, 595, 597], "collect": [17, 42, 202, 204, 207, 209, 210, 212, 242, 256, 258, 294, 296, 330, 339, 445, 482, 494, 553, 590, 595, 597], "inform": [17, 42, 146, 161, 163, 164, 165, 166, 167, 172, 175, 176, 207, 209, 210, 281, 283, 284, 285, 287, 296, 356, 481, 482, 488, 523, 524, 527, 528, 529, 530, 532, 536, 539, 542, 549, 553, 555, 562, 564, 577, 580, 583, 587, 591, 592, 595, 599, 600, 601], "dure": [17, 163, 166, 172, 281, 285, 307, 562, 563, 564, 584, 585, 587, 590, 595, 599], "prior": [17, 86, 597], "after": [17, 42, 76, 150, 163, 164, 172, 187, 200, 204, 207, 227, 239, 242, 247, 283, 313, 327, 480, 526, 544, 546, 547, 549, 550, 553, 558, 561, 562, 575, 576, 579, 583, 584, 585, 587, 590, 591, 593, 594, 595, 596, 597], "count": [17, 526, 547], "int": [17, 42, 103, 144, 150, 172, 186, 187, 188, 200, 204, 226, 227, 228, 239, 242, 246, 247, 252, 254, 258, 265, 290, 292, 296, 327, 339, 358, 393, 437, 480, 482, 485, 494, 502, 547, 561, 562, 589, 596], "make_symbol_block": 17, "gluon": [17, 297, 308, 564], "symbolblock": 17, "make_modul": 17, "parse_tune_config": 17, "tune_cfg": [17, 144, 145, 150, 529, 597], "quantizable_nod": 17, "strategi": [17, 150, 171, 172, 173, 189, 229, 288, 476, 494, 504, 528, 529, 534, 551, 558, 562, 570, 582, 588, 589, 590, 591, 592, 598, 599], "config": [17, 113, 114, 116, 120, 150, 156, 161, 163, 164, 165, 166, 167, 171, 175, 176, 187, 216, 227, 267, 268, 270, 271, 272, 273, 278, 281, 282, 283, 284, 285, 288, 297, 324, 325, 327, 329, 332, 338, 339, 341, 354, 393, 438, 449, 453, 458, 461, 475, 483, 494, 497, 499, 505, 526, 528, 534, 544, 545, 549, 550, 551, 553, 556, 558, 562, 563, 564, 585, 587, 589, 590, 591, 593, 595, 597], "tune": [17, 43, 156, 171, 172, 175, 176, 187, 189, 227, 229, 249, 286, 297, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 323, 324, 325, 326, 329, 339, 378, 379, 392, 415, 445, 450, 463, 475, 483, 499, 529, 544, 546, 547, 551, 558, 560, 562, 563, 582, 584, 587, 588, 591, 592, 593, 595, 599], "from": [17, 42, 43, 59, 65, 66, 68, 103, 144, 150, 156, 157, 158, 161, 163, 164, 165, 166, 167, 172, 175, 176, 177, 180, 184, 187, 188, 189, 190, 191, 192, 194, 199, 200, 206, 207, 210, 217, 220, 224, 227, 228, 229, 230, 231, 232, 234, 239, 243, 245, 246, 247, 248, 251, 254, 255, 256, 260, 265, 281, 282, 283, 285, 289, 292, 293, 294, 297, 305, 307, 308, 324, 326, 327, 332, 338, 339, 392, 403, 426, 438, 439, 440, 442, 467, 487, 492, 494, 511, 523, 525, 526, 529, 545, 546, 547, 549, 550, 551, 552, 553, 554, 556, 558, 561, 563, 564, 565, 569, 570, 571, 573, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598], "distribute_calib_tensor": 17, "calib_tensor": 17, "calib_cfg": 17, "tensor_to_nod": 17, "distribut": [17, 139, 155, 171, 172, 177, 179, 180, 184, 185, 186, 207, 217, 219, 220, 224, 225, 226, 334, 482, 528, 549, 559, 577, 580, 588, 590, 592, 594, 598, 600], "depend": [17, 175, 176, 205, 297, 308, 329, 524, 544, 554, 555, 589, 590, 597], "algorithm": [17, 150, 168, 251, 258, 266, 288, 289, 296, 332, 334, 526, 529, 549, 550, 555, 558, 571, 576, 587, 590, 595, 599], "set": [17, 42, 55, 94, 103, 113, 144, 150, 156, 167, 169, 171, 172, 175, 176, 177, 187, 189, 192, 204, 205, 210, 211, 217, 227, 229, 232, 242, 247, 254, 260, 273, 278, 282, 287, 292, 297, 305, 308, 327, 329, 339, 341, 381, 382, 403, 449, 453, 461, 506, 511, 523, 526, 544, 545, 547, 549, 551, 555, 557, 558, 559, 561, 562, 563, 565, 567, 569, 583, 587, 589, 590, 593, 594, 597, 599], "kl": [17, 172, 330, 334, 555, 562, 597, 599], "minmax": [17, 555, 590, 599], "calib_model": 17, "qsym_model": 17, "calib_data": 17, "calibdata": 17, "threshold": [17, 152, 330, 334, 561], "amp_convert": 17, "amp_cfg": 17, "support": [17, 42, 95, 102, 148, 154, 158, 163, 164, 171, 172, 175, 176, 186, 187, 189, 196, 200, 204, 206, 207, 208, 211, 216, 226, 227, 229, 236, 239, 242, 250, 258, 260, 265, 281, 283, 287, 288, 296, 297, 301, 307, 308, 318, 324, 327, 329, 332, 334, 442, 476, 494, 521, 528, 544, 562, 565, 570, 573, 576, 582, 588, 591, 593, 594, 597, 598], "amp": [17, 565, 572, 586], "wrap": [17, 103, 114, 158, 206, 254, 292, 352, 525, 551, 577, 580], "dataiterload": 17, "data_it": 17, "collectorbas": 17, "calibcollector": 17, "include_tensors_kl": 17, "include_tensors_minmax": 17, "num_bin": [17, 330], "8001": [17, 330], "tensorcollector": 17, "include_nod": 17, "qtensor_to_tensor": 17, "build": [17, 113, 151, 152, 154, 155, 247, 248, 261, 264, 300, 302, 304, 305, 306, 403, 463, 494, 511, 529, 544, 559, 564, 575, 577, 579, 580, 583, 588, 593, 597], "up": [17, 98, 204, 242, 282, 380, 544, 551, 552, 555, 558, 573, 577, 580, 582, 588, 589, 590, 593, 596, 597, 599], "namecollector": 17, "cache_kl": 17, "cache_minmax": 17, "tensors_kl": 17, "tensors_minmax": 17, "onnxruntimeadaptor": 18, "rt": 18, "onnxrt_qlinearopsadaptor": [18, 529], "onnxrt_integeropsadaptor": 18, "onnxrt_qdqadaptor": 18, "onnxrtaug": 19, "model_wrapp": 19, "dump_op_typ": 19, "black_nod": 19, "white_nod": 19, "backend": [19, 44, 154, 171, 172, 173, 174, 178, 179, 183, 187, 188, 190, 191, 192, 193, 194, 198, 201, 204, 210, 211, 218, 219, 221, 223, 227, 228, 230, 231, 232, 233, 234, 238, 240, 242, 259, 297, 298, 299, 301, 318, 525, 551, 557, 558, 562, 563, 571, 589, 596, 599], "cpuexecutionprovid": [19, 590], "reduce_rang": [19, 41, 171, 172, 589], "augment": 19, "dump": [19, 247, 339, 590, 595], "activationoper": 21, "onnx_quant": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 85, 99, 109], "removableactivationoper": 21, "remov": [21, 42, 54, 55, 58, 72, 78, 81, 82, 83, 94, 96, 247, 256, 294, 380, 426, 523, 524, 562, 575, 579, 587, 595], "qactivationoper": 21, "children": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40], "initi": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 42, 103, 114, 144, 158, 164, 175, 176, 184, 187, 206, 224, 227, 282, 283, 308, 324, 329, 381, 382, 474, 526, 544, 546, 547, 561, 581, 587, 590, 594, 597], "qoper": [21, 36, 171, 172], "format": [21, 42, 51, 144, 172, 187, 188, 189, 227, 228, 229, 247, 254, 260, 292, 324, 327, 445, 547, 551, 553, 561, 562, 563, 564, 565, 590], "argmaxoper": 22, "qargmaxoper": 22, "attentionoper": 23, "qattentionoper": 23, "qattent": 23, "binari": [24, 144, 258, 296, 554, 561, 577, 580], "binaryoper": 24, "qbinaryoper": 24, "qbinari": 24, "concatoper": 25, "qconcatoper": 25, "qconcat": 25, "convoper": 26, "qconvoper": 26, "qlinearconv": 26, "direct8bit": 27, "direct8bitoper": 27, "qdirectoper": 27, "qdirect": 27, "embedlayernorm": 28, "embedlayernormalizationoper": 28, "qembedlayernormalizationoper": 28, "qembedlayernorm": 28, "gatheroper": 29, "qgatheroper": 29, "qgather": 29, "globalaveragepool": 30, "globalaveragepooloper": 30, "qglobalaveragepooloper": 30, "qlinearglobalaveragepool": 30, "gemmoper": 31, "qgemmoper": 31, "qgemm": 31, "lstmoper": 33, "matmuloper": 34, "qmatmuloper": 34, "qlinearmatmul": 34, "maxpooloper": 35, "qmaxpooloper": 35, "qmaxpool": 35, "op_registri": 36, "op_typ": [36, 325], "qop_registri": 36, "padoper": 37, "qpadoper": 37, "qpad": 37, "averagepool": 38, "pooloper": 38, "qpooloper": 38, "qlinearaveragepool": 38, "resizeoper": 39, "qresizeoper": 39, "qresiz": 39, "splitoper": 40, "qsplitoper": 40, "qsplit": 40, "q_config": [41, 247, 529], "static": [41, 45, 148, 154, 172, 248, 308, 324, 511, 529, 558, 562, 565, 570, 571, 572, 573, 576, 582, 594, 597, 600], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 77, 129, 134, 139, 150, 155, 171, 172, 175, 176, 246, 247, 258, 296, 313, 317, 324, 332, 338, 339, 528, 529, 544, 555, 556, 561, 562, 563, 572, 589, 590, 591, 592, 593, 594, 595, 597, 599, 600], "add_qdq_pair_to_weight": [41, 171, 172, 590], "optypes_to_exclude_output_qu": [41, 171, 172, 590], "dedicated_qdq_pair": [41, 171, 172, 590], "helper": [42, 43, 108, 114, 144, 150, 187, 188, 189, 203, 227, 228, 229, 241, 245, 246, 247, 305, 337, 488], "onnxrt": [42, 187, 189, 196, 204, 227, 229, 236, 242, 258, 296, 337, 397, 398, 413, 415, 422, 475, 529, 563], "dtype_to_nam": 42, "dtype_map": 42, "dtype": [42, 100, 103, 171, 172, 190, 191, 200, 204, 230, 231, 239, 242, 247, 248, 547, 553, 555, 565, 589, 590, 594, 595, 596, 599], "its": [42, 58, 94, 146, 164, 172, 183, 189, 204, 223, 229, 242, 245, 252, 253, 283, 290, 291, 312, 523, 544, 547, 549, 560, 561, 563, 573, 575, 579, 582, 583, 586, 587, 593, 596, 597], "represent": [42, 359, 360, 362, 365, 369, 370, 373, 374, 376, 378, 379, 505, 523, 525, 550, 587, 590], "quanttyp": 42, "repres": [42, 163, 164, 165, 167, 189, 194, 229, 234, 254, 256, 258, 292, 294, 296, 361, 363, 364, 366, 368, 371, 372, 375, 377, 492, 523, 547, 553, 590, 597], "valu": [42, 53, 65, 66, 68, 87, 88, 103, 139, 144, 150, 155, 156, 161, 167, 168, 169, 171, 172, 175, 176, 187, 190, 191, 200, 204, 205, 227, 230, 231, 239, 242, 254, 258, 282, 292, 296, 297, 308, 312, 317, 324, 327, 329, 330, 332, 339, 352, 354, 356, 361, 363, 364, 366, 368, 371, 372, 377, 381, 382, 403, 405, 476, 480, 494, 502, 505, 525, 544, 547, 555, 561, 562, 568, 584, 587, 589, 590, 594, 596, 597, 599], "make_quant_nod": 42, "make": [42, 103, 139, 155, 163, 164, 166, 185, 225, 281, 283, 285, 339, 523, 524, 529, 544, 545, 546, 555, 561, 562, 570, 575, 579, 582, 590, 591, 593, 594, 597], "quantizelinear": [42, 553], "make_dquant_nod": 42, "axi": [42, 172], "dequantizelinear": [42, 553], "is_b_transpos": 42, "wheter": 42, "inuput": 42, "b": [42, 72, 187, 227, 247, 547, 561, 587, 594, 597], "transpos": [42, 71, 163, 204, 242, 246, 281, 596], "split_shared_bia": 42, "share": [42, 80, 96, 107, 554, 555, 594, 597], "float_to_float16": 42, "float": [42, 146, 163, 164, 165, 167, 172, 187, 200, 227, 239, 252, 254, 255, 256, 283, 290, 292, 293, 294, 327, 342, 400, 455, 480, 494, 502, 505, 547, 561, 589, 590, 594, 596], "float16": [42, 547], "float_to_bfloat16": 42, "bfloat16": [42, 563, 565, 573, 591], "cast_tensor": 42, "tensorproto": [42, 103], "remove_init_from_model_input": 42, "collate_pr": 42, "result": [42, 144, 146, 150, 200, 204, 239, 242, 251, 254, 255, 256, 258, 289, 292, 293, 294, 296, 315, 338, 342, 360, 374, 392, 523, 526, 528, 544, 546, 549, 551, 558, 560, 561, 562, 570, 571, 582, 583, 584, 587, 588, 590, 593, 594, 595, 596, 597, 598, 600], "quantize_data_with_scale_zero": 42, "qtype": [42, 529], "scheme": [42, 150, 511, 529, 546, 555, 573, 597, 599], "scale": [42, 98, 139, 148, 154, 155, 200, 204, 239, 242, 247, 553, 590, 593, 594, 596, 597], "zero_point": [42, 247], "zero": [42, 164, 167, 204, 242, 283, 339, 528, 587, 590, 594, 596, 597], "point": [42, 200, 239, 255, 256, 265, 293, 294, 312, 561, 582, 590, 594, 596, 597], "To": [42, 254, 292, 307, 524, 544, 547, 551, 553, 563, 566, 569, 575, 577, 579, 580, 589, 591, 592, 594, 597, 599], "pack": [42, 59], "weight": [42, 58, 59, 120, 139, 146, 148, 155, 161, 163, 164, 165, 171, 172, 247, 281, 283, 315, 324, 339, 399, 529, 544, 550, 553, 555, 557, 561, 562, 584, 587, 589, 590, 594, 595, 597, 599], "comput": [42, 103, 146, 150, 251, 252, 255, 256, 258, 289, 290, 293, 294, 296, 339, 528, 550, 553, 561, 562, 563, 565, 576, 587, 588, 590, 594, 597], "linear": [42, 154, 163, 172, 247, 281, 525, 549, 553, 562, 587, 594, 597], "when": [42, 51, 62, 68, 144, 164, 167, 171, 172, 187, 188, 196, 204, 227, 228, 236, 242, 252, 282, 283, 290, 308, 329, 494, 511, 523, 526, 544, 546, 547, 562, 573, 575, 576, 579, 583, 587, 590, 594, 596, 597], "uint8": [42, 200, 239, 254, 292, 326, 529, 547, 555, 589, 590, 596, 599], "rmin": [42, 590], "rmax": [42, 590], "0": [42, 51, 88, 103, 144, 152, 154, 158, 171, 172, 177, 179, 184, 186, 187, 190, 191, 194, 200, 204, 206, 207, 217, 219, 224, 226, 227, 230, 231, 234, 239, 242, 247, 249, 258, 265, 273, 278, 286, 296, 307, 313, 327, 525, 544, 547, 549, 551, 553, 554, 555, 556, 559, 560, 561, 562, 563, 568, 570, 575, 579, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 599], "2": [42, 51, 72, 103, 107, 148, 152, 154, 156, 163, 164, 172, 188, 205, 228, 254, 256, 258, 283, 292, 294, 296, 307, 312, 327, 525, 529, 547, 549, 555, 556, 558, 559, 560, 561, 563, 584, 586, 587, 590, 592, 593, 594, 596, 597, 598], "1": [42, 52, 72, 87, 103, 107, 111, 142, 144, 148, 150, 152, 154, 155, 156, 158, 164, 171, 172, 177, 179, 184, 186, 187, 188, 190, 191, 194, 195, 200, 204, 205, 206, 207, 217, 219, 224, 226, 227, 228, 230, 231, 234, 235, 239, 242, 249, 254, 255, 256, 258, 273, 278, 283, 286, 287, 292, 293, 294, 296, 307, 308, 327, 332, 342, 464, 523, 525, 528, 529, 546, 547, 549, 553, 555, 556, 559, 561, 563, 566, 568, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599], "m": [42, 146, 163, 172, 281, 549, 559, 565, 567, 570, 573, 577, 580, 600], "where": [42, 172, 254, 258, 292, 296, 549, 575, 579, 583, 587, 594, 595], "max": [42, 102, 139, 155, 171, 172, 204, 242, 255, 256, 293, 294, 312, 339, 528, 544, 559, 562, 587, 590, 594, 596, 597], "ab": [42, 161, 283, 590, 594], "np": [42, 204, 242, 312, 551, 596], "arrai": [42, 144, 204, 242, 254, 265, 292, 339, 596], "sym": [42, 555, 590, 599], "asym": [42, 555, 599], "calculate_scale_zp": 42, "quantize_rang": 42, "calcul": [42, 58, 161, 167, 172, 190, 191, 230, 231, 255, 256, 281, 283, 293, 294, 317, 330, 547, 561, 562, 573, 584, 587, 590, 593, 594, 597, 599], "quantize_data": 42, "add": [42, 50, 62, 107, 117, 144, 167, 171, 172, 187, 189, 211, 227, 229, 282, 324, 352, 392, 494, 524, 525, 544, 546, 547, 551, 553, 555, 561, 562, 563, 577, 580, 593, 595, 597], "necessari": [42, 523, 526, 564, 583, 593, 597], "intermedi": [42, 146, 158, 172, 206, 308, 525, 558, 587, 590], "trasnform": 42, "full": [42, 187, 188, 189, 227, 228, 229, 339, 528, 544, 547, 554, 556, 559, 560, 583, 587], "equat": [42, 256, 258, 294, 296, 590, 594], "r": [42, 139, 155, 544, 559, 583, 586, 590, 600], "": [42, 103, 139, 144, 155, 163, 164, 168, 169, 172, 186, 189, 203, 204, 205, 207, 209, 216, 226, 229, 241, 242, 256, 281, 283, 294, 296, 297, 301, 308, 339, 480, 523, 526, 549, 551, 555, 558, 562, 563, 570, 573, 575, 579, 582, 585, 586, 587, 588, 589, 590, 592, 593, 594, 597, 599], "q": [42, 105, 107, 129, 594], "z": [42, 549, 594], "real": [42, 190, 207, 230, 551, 588, 590], "origin": [42, 150, 164, 167, 172, 187, 204, 205, 227, 242, 267, 268, 270, 271, 272, 282, 283, 313, 326, 339, 342, 524, 547, 570, 587, 590, 596, 597, 599], "quantize_data_per_channel": 42, "per": [42, 148, 154, 156, 172, 205, 334, 529, 544, 586, 591, 600], "channel": [42, 139, 148, 154, 155, 163, 172, 200, 204, 239, 242, 281, 529, 558, 559, 565, 567, 572, 587, 596, 600], "dequantize_data_with_scale_zero": 42, "tensor_valu": 42, "scale_valu": 42, "zo_valu": 42, "dequant": [42, 55, 86, 89, 90, 91, 92, 94, 146, 150, 339, 525, 594, 595], "sacal": 42, "dequantize_data": 42, "valueinfo": 42, "tensor_nam": [42, 144], "new_dtyp": 42, "cast": [42, 55, 553, 591, 596], "info": [42, 150, 163, 167, 202, 207, 212, 247, 281, 301, 336, 339, 482, 494, 510, 525, 544, 553, 564], "quantizedvalu": 42, "new_quantized_nam": 42, "scale_nam": 42, "zero_point_nam": 42, "quantized_value_typ": 42, "quint8": 42, "linearli": 42, "intial": 42, "quantizediniti": 42, "quantized_data": 42, "quantizationmod": 42, "quantizedvaluetyp": 42, "quantformat": [42, 247], "quantize_nparrai": 42, "arr": [42, 339], "low": [42, 175, 176, 190, 191, 230, 231, 249, 259, 286, 297, 529, 545, 547, 551, 562, 563, 588, 590, 594, 597], "high": [42, 190, 191, 230, 231, 547, 559, 588, 597], "numpi": [42, 65, 66, 68, 103, 144, 204, 242, 248, 254, 265, 292, 554, 596], "attribute_to_kwarg": 42, "attribut": [42, 81, 102, 103, 150, 168, 169, 410, 411, 415, 475, 529, 546, 555, 557, 562, 589, 599], "kwarg": [42, 103, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 133, 135, 172, 189, 202, 204, 209, 212, 229, 242, 296, 297, 298, 300, 302, 304, 305, 306, 308, 323, 325, 327, 329, 335, 336, 338, 339, 344, 346, 348, 349, 350, 351, 361, 363, 364, 366, 368, 371, 372, 377, 546], "make_nod": 42, "find_by_nam": 42, "item_list": 42, "find": [42, 65, 66, 68, 103, 144, 258, 265, 296, 312, 339, 510, 529, 544, 568, 575, 579, 582, 583, 587, 593, 595, 597], "item": [42, 167, 169, 172, 203, 241, 282, 324, 392, 480, 551, 594, 597], "get_smooth_scales_per_op": 42, "max_vals_per_channel": 42, "input_tensors_2_weight": 42, "input_tensors_2_weights_nod": 42, "alpha": [42, 154, 161, 165, 590], "smooth": [42, 148, 154, 171, 172, 587], "same": [42, 81, 144, 172, 187, 204, 227, 242, 254, 292, 339, 529, 545, 546, 547, 549, 551, 555, 562, 566, 570, 575, 579, 586, 587, 589, 590, 594, 595, 596, 597], "one": [42, 107, 108, 113, 150, 163, 166, 204, 214, 242, 251, 254, 258, 260, 281, 284, 285, 289, 292, 296, 526, 529, 544, 549, 550, 551, 555, 556, 558, 559, 561, 562, 563, 565, 566, 570, 571, 573, 575, 576, 579, 582, 583, 584, 585, 587, 589, 590, 592, 594, 596, 597], "mul": [42, 52, 63, 64, 67, 154, 553], "todo": [42, 187, 190, 227, 230, 254, 292, 324], "individu": [42, 163, 281, 523, 594], "each": [42, 44, 146, 172, 185, 189, 192, 200, 204, 225, 229, 232, 239, 242, 252, 254, 255, 256, 290, 292, 293, 294, 317, 524, 529, 544, 547, 549, 550, 555, 562, 563, 567, 573, 576, 582, 584, 587, 593, 594, 595, 596, 597, 598], "A": [42, 52, 72, 73, 101, 114, 144, 150, 157, 161, 163, 164, 165, 166, 167, 172, 189, 204, 207, 209, 210, 216, 229, 242, 243, 251, 254, 255, 256, 258, 261, 264, 265, 266, 273, 276, 278, 281, 282, 283, 284, 285, 289, 292, 293, 294, 296, 297, 301, 305, 312, 329, 547, 552, 555, 561, 562, 564, 575, 576, 579, 582, 587, 588, 590, 594, 596, 597, 599], "save": [42, 103, 167, 172, 189, 216, 229, 246, 247, 287, 305, 308, 329, 330, 335, 339, 525, 529, 546, 557, 562, 563, 564, 566, 570, 575, 579, 585, 587, 590, 594], "correspond": [42, 146, 172, 187, 227, 251, 254, 258, 289, 292, 296, 332, 529, 555, 562, 587, 589, 590, 593, 594, 597], "paper": [42, 549, 587], "onli": [42, 51, 61, 68, 84, 107, 113, 139, 148, 154, 155, 156, 163, 164, 171, 172, 187, 205, 207, 211, 227, 260, 281, 283, 318, 327, 494, 506, 529, 545, 546, 549, 551, 553, 555, 562, 563, 570, 583, 587, 589, 590, 594, 595, 597, 599], "have": [42, 72, 81, 144, 163, 164, 185, 207, 225, 251, 254, 281, 283, 289, 292, 327, 523, 524, 544, 546, 547, 551, 555, 560, 561, 562, 563, 565, 582, 584, 587, 590, 594, 597], "get_smooth_scales_per_input": 42, "insert_smooth_mul_op_per_input": 42, "shape_info": 42, "insert": [42, 75, 103, 105, 107, 111, 142, 154, 247, 525, 558, 562, 565, 587, 590, 591, 595], "inupt": 42, "shape": [42, 103, 144, 163, 190, 191, 200, 204, 230, 231, 239, 242, 254, 292, 415, 422, 426, 437, 475, 528, 544, 547, 555, 556, 562, 594, 596], "ad": [42, 164, 187, 227, 251, 289, 312, 544, 563, 565, 570, 573, 577, 580, 587, 595], "new_init_tensor": 42, "new_added_mul_nod": 42, "adjust_weights_per_op": 42, "adjust": [42, 573, 590, 594], "ha": [42, 65, 66, 68, 72, 163, 164, 205, 251, 281, 283, 289, 327, 524, 526, 529, 544, 546, 553, 558, 562, 563, 568, 582, 589, 590, 591, 593, 594, 597], "whose": [42, 148, 154, 163, 282, 557, 587, 597], "adjustd": 42, "adjust_weights_per_input": 42, "insert_smooth_mul_op_per_op": 42, "befor": [42, 105, 107, 154, 163, 164, 166, 172, 187, 227, 247, 281, 283, 285, 380, 524, 544, 547, 549, 550, 551, 554, 555, 559, 562, 577, 580, 587, 590, 593, 595, 597], "name_2_nod": 42, "kei": [42, 144, 146, 167, 169, 172, 265, 282, 305, 327, 330, 332, 339, 502, 528, 544, 553, 588, 595, 597], "trt_env_setup": 42, "environ": [42, 156, 205, 288, 442, 474, 475, 483, 523, 544, 545, 575, 579, 582, 597], "variabl": [42, 156, 165, 172, 189, 205, 229, 312, 544, 559, 587, 597], "tensorrt": [42, 590], "provid": [42, 100, 103, 108, 175, 176, 204, 242, 249, 254, 273, 278, 286, 287, 292, 297, 308, 329, 333, 335, 403, 479, 488, 526, 528, 529, 544, 545, 546, 550, 551, 552, 553, 558, 559, 562, 563, 564, 565, 569, 573, 576, 582, 583, 587, 589, 590, 595, 597, 598, 599, 600], "get_ops_recurs": 43, "prefix": [43, 144, 145, 149, 565, 570, 595], "graph_info": 43, "templateadaptor": 43, "tampl": 43, "dictionari": [43, 65, 66, 68, 145, 146, 150, 168, 169, 172, 203, 241, 254, 261, 264, 266, 292, 361, 363, 364, 366, 368, 371, 372, 377, 381, 382, 384], "yaml": [43, 167, 168, 169, 175, 176, 187, 189, 205, 227, 229, 243, 249, 260, 261, 262, 264, 273, 278, 286, 287, 297, 338, 339, 347, 353, 354, 438, 494, 505, 529, 557, 561, 562, 584, 587, 589, 595, 596], "file": [43, 103, 144, 153, 167, 168, 172, 175, 176, 187, 188, 189, 192, 203, 204, 210, 213, 227, 228, 229, 232, 241, 242, 243, 247, 249, 254, 260, 261, 262, 264, 273, 278, 282, 284, 286, 287, 292, 297, 307, 308, 338, 339, 347, 403, 449, 453, 463, 486, 494, 511, 526, 529, 544, 551, 554, 557, 560, 561, 562, 564, 568, 577, 580, 581, 582, 583, 584, 587, 589, 590, 595, 596], "pytorchadaptor": 43, "api": [43, 68, 73, 108, 215, 249, 254, 286, 292, 308, 323, 324, 327, 339, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 510, 511, 524, 525, 530, 532, 536, 539, 542, 553, 558, 562, 567, 571, 572, 573, 592, 593, 597, 601], "pytorch_ipexadaptor": 43, "intel": [43, 163, 208, 211, 244, 250, 257, 258, 281, 284, 288, 295, 296, 316, 322, 474, 521, 523, 524, 526, 527, 529, 546, 547, 548, 549, 550, 552, 553, 555, 556, 560, 563, 564, 565, 570, 572, 573, 584, 585, 586, 587, 588, 590, 591, 592, 595, 597, 598, 599], "extens": [43, 494, 526, 528, 529, 555, 558, 559, 562, 563, 564, 566, 571, 572, 573, 577, 580, 581, 587, 588, 597, 598, 599], "ipex": [43, 150, 171, 172, 558, 562, 567, 571, 572, 600], "pytorch_fxadaptor": 43, "fx": [43, 150, 171, 308, 318, 558, 571, 572, 588, 590, 591, 600], "graph": [43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 128, 130, 134, 137, 138, 139, 141, 142, 143, 144, 186, 226, 247, 249, 288, 298, 305, 415, 437, 448, 449, 454, 455, 473, 475, 498, 510, 525, 529, 547, 549, 551, 557, 561, 564, 565, 590, 591, 595], "querybackendcap": [44, 529], "defin": [44, 84, 146, 163, 164, 165, 166, 172, 175, 176, 261, 262, 264, 265, 266, 273, 278, 281, 282, 283, 285, 297, 308, 329, 338, 417, 418, 419, 506, 523, 526, 529, 544, 546, 547, 549, 550, 555, 558, 561, 562, 583, 585, 587, 590, 593, 594, 595, 597, 599], "interfac": [44, 84, 111, 168, 249, 273, 278, 286, 287, 332, 340, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 456, 462, 469, 481, 558, 562, 573, 586, 590, 592], "adapt": [44, 523, 528, 547, 573, 588], "should": [44, 52, 113, 114, 172, 175, 176, 185, 187, 189, 204, 209, 225, 227, 229, 242, 247, 252, 290, 296, 297, 308, 327, 329, 339, 403, 525, 526, 529, 544, 547, 549, 551, 561, 562, 563, 568, 577, 580, 582, 584, 590, 596, 597, 599], "implement": [44, 108, 139, 143, 175, 176, 182, 185, 186, 187, 189, 222, 225, 226, 227, 229, 251, 289, 297, 307, 308, 315, 329, 546, 547, 562, 573, 583, 587, 590, 592, 595, 597, 599], "inherit": [44, 157, 158, 164, 166, 171, 184, 204, 206, 214, 224, 242, 283, 285, 526, 529, 547], "own": [44, 72, 185, 204, 225, 242, 307, 526, 544, 546, 547, 558, 561, 584, 593, 598], "tensorflowadaptor": 45, "stock": [45, 571], "spr": 45, "tensorflow_itexadaptor": 45, "itex": [45, 107, 171, 172, 246, 590], "tensorflowqueri": [45, 529], "local_config_fil": 45, "performance_onli": [45, 46, 47, 105, 129, 134, 143, 171, 562], "itex_mod": [45, 46, 87, 105, 129, 134], "quant_mod": [45, 324], "graphconvert": 46, "qt_config": 46, "recip": [46, 171, 172, 247, 249, 286, 553, 562, 597], "int8_sequ": 46, "fp32_op": [46, 48, 105], "bf16_op": [46, 48, 105, 591], "data_load": [46, 47, 529], "fake_qu": [46, 86, 105, 129, 134], "qdq_enabl": 46, "new_api": [46, 47, 69, 70, 75, 77, 90, 97, 129, 134, 139], "use_bf16": [46, 47, 171, 589], "without": [47, 88, 144, 164, 204, 242, 283, 326, 494, 523, 544, 546, 549, 551, 561, 562, 573, 587, 588, 589, 597, 598], "graphconverterwithoutcalib": 47, "recover_config": 47, "rewrit": [48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 105, 106, 107, 216], "bf16convert": [48, 591], "biasadd": [50, 57, 62, 64, 107, 555], "convertaddtobiasaddoptim": 50, "conv2d": [50, 57, 58, 59, 63, 64, 69, 123, 133, 139, 555, 594, 595, 597], "addv2": [50, 67, 555], "layout": 51, "convertlayoutoptim": 51, "optim": [51, 72, 73, 77, 78, 114, 116, 168, 172, 208, 214, 216, 249, 250, 266, 286, 288, 312, 329, 330, 342, 367, 381, 382, 388, 391, 392, 394, 395, 396, 397, 398, 401, 402, 415, 475, 476, 486, 492, 498, 502, 509, 514, 526, 528, 545, 549, 550, 551, 555, 556, 558, 559, 562, 564, 565, 567, 569, 570, 573, 576, 586, 587, 588, 589, 590, 591, 593, 594, 595, 597, 599], "nchw": 51, "nhwc": 51, "It": [51, 163, 175, 176, 213, 256, 258, 265, 281, 286, 294, 296, 297, 308, 313, 317, 329, 529, 544, 549, 562, 568, 571, 576, 582, 583, 587, 590, 593, 597, 599], "4": [51, 156, 163, 172, 196, 199, 200, 204, 236, 239, 242, 251, 252, 254, 289, 290, 292, 327, 523, 529, 544, 545, 551, 552, 555, 558, 559, 561, 562, 570, 586, 587, 594, 596, 597, 600], "abov": [51, 529, 549, 587, 590, 594], "graph_def": [51, 144, 246, 297, 305, 308, 437, 473], "leakyrelu": [52, 594], "convertleakyreluoptim": 52, "below": [52, 64, 72, 171, 172, 287, 524, 525, 528, 529, 544, 546, 549, 551, 557, 561, 565, 567, 575, 576, 579, 582, 584, 585, 587, 589, 590, 593, 594, 595, 597, 598], "subgraph": [52, 64, 103, 149, 553], "maximum": [52, 163, 164, 172, 187, 204, 227, 242, 252, 283, 290, 312, 547, 562, 587, 590, 596], "note": [52, 163, 254, 292, 318, 526, 544, 551, 553, 555, 559, 562, 567, 570, 575, 579, 582, 587, 590, 594, 595, 597, 598, 599], "coeffici": [52, 587], "less": [52, 144, 172, 339, 545, 549, 562, 587], "than": [52, 144, 187, 204, 227, 242, 339, 526, 528, 545, 547, 557, 561, 584, 585, 587, 590, 593, 594, 596], "convers": [52, 172, 260, 529, 562, 563, 590, 591, 594], "valid": [52, 65, 66, 103, 164, 167, 171, 172, 189, 229, 254, 282, 283, 292, 305, 442, 494, 511, 524, 526, 528, 529, 547, 549, 552, 555, 558, 560, 562, 573, 587, 590, 592], "nan": 53, "random": [53, 144, 172, 200, 204, 239, 242, 266, 288, 312, 316, 339, 524, 526, 562, 589, 594, 596, 599], "convertnantorandom": 53, "const": [53, 54, 61, 62, 65, 66, 68, 80, 96, 288, 393, 475, 483], "consist": [53, 61, 524, 525, 544, 553, 594, 597], "placehold": [54, 185, 225], "convertplaceholdertoconst": 54, "train": [54, 78, 148, 154, 157, 164, 172, 175, 176, 187, 189, 204, 214, 227, 229, 242, 243, 260, 283, 288, 308, 332, 502, 526, 528, 529, 534, 547, 549, 550, 553, 558, 563, 565, 571, 582, 585, 587, 588, 593, 594, 597, 599], "rerewrit": 55, "dequantizecastoptim": 55, "b16": 55, "dilat": 56, "contract": 56, "dilatedcontract": 56, "spacetobatchnd": 56, "batchtospacend": 56, "pattern": [56, 57, 59, 76, 94, 105, 106, 107, 129, 134, 160, 162, 164, 165, 168, 172, 189, 229, 250, 271, 272, 274, 279, 283, 288, 324, 399, 510, 529, 547, 555, 558, 562, 583, 585, 589, 594, 600], "inject": [57, 562], "dummi": [57, 190, 191, 230, 231, 248, 258, 296, 528, 544, 547, 556, 561, 562], "injectdummybiasaddoptim": 57, "fusion": [57, 59, 68, 76, 107, 124, 125, 126, 129, 130, 131, 135, 525, 529, 555], "expanddim": 58, "expanddimsoptim": 58, "next": [58, 180, 220, 327, 526, 544, 589, 597], "featch": 59, "reshap": [59, 65, 66, 71, 594], "fetchweightfromreshapeoptim": 59, "handl": [59, 144, 148, 154, 336, 511, 525, 527, 546], "fold": [60, 61, 247, 555], "batchnorm": [60, 65, 119, 525, 594], "foldbatchnormnodesoptim": 60, "graphfoldconstantoptim": 61, "sequenc": [61, 103, 163, 172, 187, 203, 204, 227, 241, 242, 252, 256, 281, 290, 294, 529, 547, 555, 587, 596], "self": [61, 172, 307, 529, 544, 546, 547, 558, 561, 593, 595, 597], "supported_op_typ": 61, "fusebiasaddandaddoptim": 62, "second": [62, 171, 172, 187, 227, 313, 339, 403, 544, 562, 575, 579, 583, 594, 597, 599], "columnwis": 63, "fusecolumnwisemuloptim": 63, "depthwiseconv2dn": [63, 69, 123, 133, 555], "math": [64, 590], "fuseconvwithmathoptim": 64, "elimin": 64, "sub": [64, 205, 247, 526, 594, 597], "realdiv": [64, 67], "decompos": [65, 66], "fusedecomposedbnoptim": 65, "input_graph_def": [65, 66, 68], "small": [65, 66, 67, 315, 526, 544, 587, 597], "node_name_from_input": [65, 66, 68], "node_nam": [65, 66, 68, 144, 247, 305], "strip": [65, 66, 68, 81, 82, 144, 595], "off": [65, 66, 68, 524], "port": [65, 66, 68, 511, 544], "other": [65, 66, 68, 148, 154, 186, 226, 256, 294, 305, 511, 523, 524, 525, 544, 555, 558, 559, 560, 562, 564, 584, 586, 587, 590, 596, 597, 600], "underli": [65, 66, 68], "node_from_map": [65, 66, 68], "node_map": [65, 66, 68], "pull": [65, 66, 68], "def": [65, 66, 68, 175, 176, 308, 327, 329, 525, 529, 546, 547, 549, 550, 551, 561, 562, 590, 594, 595, 597], "entri": [65, 66, 68, 146, 211, 249, 287, 400, 403, 494, 560], "index": [65, 66, 68, 103, 172, 180, 185, 189, 220, 225, 229, 265, 339, 511, 547, 561, 583, 594], "everi": [65, 66, 68, 163, 164, 172, 281, 283, 529, 570, 575, 579, 587, 597], "identifi": [65, 66, 68, 254, 292, 305], "want": [65, 66, 68, 171, 172, 185, 187, 225, 227, 283, 313, 329, 525, 529, 544, 547, 551, 559, 561, 562, 563, 570, 582, 583, 584, 593, 595, 597], "nodedef": [65, 66, 68], "rais": [65, 66, 68, 103, 163, 164, 167, 254, 281, 282, 283, 292, 297, 327, 494, 528, 587], "valueerror": [65, 66, 68, 254, 292, 327, 554], "If": [65, 66, 68, 72, 156, 171, 172, 175, 176, 189, 204, 229, 242, 282, 297, 308, 327, 329, 524, 525, 544, 545, 547, 551, 553, 559, 560, 561, 562, 563, 568, 576, 577, 580, 582, 584, 590, 593, 594, 595, 596, 597], "isn": [65, 66, 68], "present": [65, 66, 68, 544, 588, 594], "values_from_const": [65, 66, 68], "node_def": [65, 66, 68], "extract": [65, 66, 68, 189, 229, 326, 494, 547], "access": [65, 66, 68, 168, 169, 335, 339, 478, 494, 511, 544, 577, 580], "valid_reshape_input": [65, 66], "reshape_in0_ndef": [65, 66], "reshape_in1_ndef": [65, 66], "ar": [65, 66, 103, 163, 164, 172, 187, 204, 227, 242, 254, 258, 265, 281, 282, 283, 287, 292, 296, 309, 311, 312, 327, 332, 338, 339, 494, 523, 524, 525, 526, 529, 544, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 568, 570, 573, 576, 582, 584, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 599], "bypass_reshap": [65, 66], "input_node_map": [65, 66], "input_nam": [65, 66, 100, 138, 172, 246, 247, 553], "get_const_dim_count": [65, 66], "number": [65, 66, 103, 150, 163, 171, 172, 185, 188, 200, 204, 225, 228, 239, 242, 255, 256, 258, 281, 293, 294, 296, 312, 327, 332, 339, 426, 482, 544, 545, 547, 551, 561, 587, 590, 593, 596, 597], "dimens": [65, 66, 103, 179, 204, 219, 242, 547, 549, 587, 596], "instancenorm": [66, 594], "fusedecomposedinoptim": 66, "gelu": 67, "fusegeluoptim": 67, "sqrt": 67, "erf": 67, "samll": 68, "layernorm": [68, 594], "fuselayernormoptim": 68, "remap": 68, "smaller": [68, 204, 242, 549, 562, 587, 596], "case": [68, 72, 156, 172, 186, 203, 204, 205, 226, 241, 242, 249, 273, 278, 286, 307, 494, 544, 546, 549, 550, 551, 555, 557, 561, 566, 570, 582, 583, 584, 587, 588, 590, 592, 596, 598, 599, 600], "fusedbatcnormv3": 68, "And": [68, 525, 545, 562, 568, 594], "further": [68, 172, 523, 563, 564, 565, 567, 576, 582], "restrict": [68, 172, 587, 593], "2d": [68, 594], "3d": [68, 588, 594], "kera": [68, 114, 189, 196, 211, 229, 236, 300, 305, 415, 422, 432, 551, 564, 572, 573, 600], "fusepadwithconv2doptim": 69, "excluded_op_nam": [69, 70, 168, 172, 562, 587], "cfg": [69, 70, 150, 168, 324, 332], "itex_qdq_mod": [69, 70], "conv3d": [69, 123], "fusepadwithfp32conv2doptim": 70, "fusetransposereshapeoptim": 71, "cse": [72, 96], "graphcseoptim": 72, "introduc": [72, 524, 529, 553, 555, 562, 587, 590, 592, 594, 598], "ident": [72, 78, 523, 549], "three": [72, 167, 187, 227, 309, 311, 525, 529, 544, 546, 553, 559, 563, 576, 585, 590, 591, 593, 594, 595], "c": [72, 189, 229, 544, 547, 554, 559, 597], "d": [72, 549, 557, 583, 600], "those": [72, 317, 339, 549, 550, 557, 562, 585, 587, 590, 597], "child": [72, 595], "b1": 72, "c1c2": 72, "d1": [72, 339], "c1": 72, "c2": 72, "memori": [72, 249, 273, 278, 286, 307, 339, 546, 550, 562, 563, 565, 584, 587, 590, 594, 597], "bound": [72, 204, 242, 254, 292, 312, 561, 596], "like": [72, 94, 96, 144, 172, 175, 176, 177, 189, 217, 229, 249, 258, 283, 286, 287, 296, 305, 308, 329, 524, 525, 526, 529, 544, 549, 550, 558, 570, 585, 587, 590, 592, 597], "relu": [72, 76, 107, 525, 555, 594, 595], "relu6": [72, 555], "graphdef": [72, 144, 305, 564], "grappler": [73, 555], "grappleroptim": 73, "input_output_nam": 73, "opt_cfg": 73, "python": [73, 144, 189, 208, 229, 250, 288, 327, 339, 442, 521, 524, 525, 544, 547, 551, 554, 559, 562, 567, 573, 576, 582, 588, 596], "wrapper": [73, 100, 101, 102, 103, 120, 145, 158, 186, 204, 206, 207, 209, 210, 216, 226, 242, 254, 258, 292, 296, 301, 305, 511, 591], "leverag": [73, 526, 528, 549, 553, 565, 582, 585, 590, 597], "built": [73, 173, 174, 178, 183, 187, 188, 193, 195, 197, 198, 200, 201, 204, 209, 211, 218, 221, 223, 227, 228, 233, 235, 237, 238, 239, 240, 242, 287, 296, 299, 307, 308, 329, 526, 529, 547, 551, 562, 575, 579, 584, 590, 596, 597, 599], "convert_add_to_biasadd": [74, 85, 109], "convert_layout": [74, 85, 109], "convert_leakyrelu": [74, 85, 109], "convert_nan_to_random": [74, 85, 109], "convert_placeholder_to_const": [74, 85, 109], "dequantize_cast_optim": [74, 85, 109], "dilated_contract": [74, 85, 109], "dummy_biasadd": [74, 85, 109], "expanddims_optim": [74, 85, 109], "fetch_weight_from_reshap": [74, 85, 109], "fold_batch_norm": [74, 85, 109], "fold_const": [74, 85, 109], "fuse_biasadd_add": [74, 85, 109], "fuse_column_wise_mul": [74, 85, 109], "fuse_conv_with_math": [74, 85, 109], "fuse_decomposed_bn": [74, 85, 109], "fuse_decomposed_in": [74, 85, 109], "fuse_gelu": [74, 85, 109], "fuse_layer_norm": [74, 85, 109], "fuse_pad_with_conv": [74, 85, 109], "fuse_pad_with_fp32_conv": [74, 85, 109], "fuse_reshape_transpos": [74, 85, 109], "graph_cse_optim": [74, 85, 109], "grappler_pass": [74, 85, 109], "insert_print_nod": [74, 85, 109], "move_squeeze_after_relu": [74, 85, 109], "pre_optim": [74, 85, 109], "remove_training_nod": [74, 85, 109], "rename_batch_norm": [74, 85, 109], "split_shared_input": [74, 85, 109], "strip_equivalent_nod": [74, 85, 109, 144], "strip_unused_nod": [74, 85, 109, 144], "switch_optim": [74, 85, 109], "print": [75, 146, 258, 296, 327, 544, 551, 561, 562, 587, 594, 597], "insertprintminmaxnod": 75, "pre_node_nam": 75, "post_node_nam": 75, "pass": [75, 144, 156, 339, 437, 506, 525, 529, 545, 547, 549, 550, 551, 553, 557, 561, 562, 583, 587, 589, 590, 591, 594, 599], "sampl": [75, 171, 172, 180, 185, 187, 188, 189, 200, 204, 220, 225, 227, 228, 229, 239, 242, 258, 265, 296, 312, 426, 526, 528, 547, 552, 558, 583, 590, 596, 597, 599, 600], "move": [76, 525, 589, 592], "squeez": [76, 525], "movesqueezeafterreluoptim": 76, "match": [76, 100, 254, 255, 292, 293, 549, 583], "pre": [77, 114, 175, 176, 187, 227, 297, 308, 329, 547, 549, 550, 562, 563, 570, 587, 588, 590, 595, 597], "entranc": [77, 178], "preoptim": 77, "removetrainingnodesoptim": 78, "protected_nod": 78, "types_to_splic": 78, "checknumer": 78, "stopgradi": 78, "renam": [79, 592], "fusedbatchnorm": 79, "fusedbatchnormv2": 79, "renamebatchnormoptim": 79, "splitsharedinputoptim": 80, "equival": [81, 594], "stripequivalentnodesoptim": 81, "output_node_nam": [81, 82, 129, 130, 134, 144], "unus": [82, 144], "stripunusednodesoptim": 82, "input_node_nam": [82, 129, 134, 144], "switch": [83, 565, 595], "switchoptim": 83, "condit": [83, 187, 188, 189, 204, 227, 228, 229, 242, 309, 311, 547, 560, 596, 597], "graphrewriterbas": 84, "abstract": [84, 157, 204, 242, 243, 249, 286, 423, 435, 486, 510, 529, 557], "freeze_fake_qu": [85, 93, 109], "freeze_valu": [85, 93, 109], "freeze_value_without_calib": [85, 93, 109], "fuse_conv_redundant_dequant": [85, 93, 109], "fuse_conv_requant": [85, 93, 109], "fuse_matmul_redundant_dequant": [85, 93, 109], "fuse_matmul_requant": [85, 93, 109], "meta_op_optim": [85, 93, 109], "post_hostconst_convert": [85, 93, 109], "post_quantized_op_cs": [85, 93, 109], "rnn_convert": [85, 93, 109], "scale_propag": [85, 93, 109], "onnx_graph": [85, 99, 109], "onnx_schema": [85, 99, 109], "tf2onnx_util": [85, 99, 109], "insert_qdq_pattern": [85, 104, 109], "merge_duplicated_qdq": [85, 104, 109], "share_qdq_y_pattern": [85, 104, 109], "freez": [86, 87, 88, 565, 587], "fakequ": 86, "freezefakequantopoptim": 86, "follow": [86, 108, 189, 229, 251, 254, 289, 292, 523, 524, 525, 526, 529, 544, 546, 547, 549, 550, 551, 553, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 575, 579, 585, 587, 589, 590, 594, 595, 597], "freezevaluetransform": 87, "max_min_data": [87, 88], "postfix": [87, 88], "tensor_data": [87, 339], "th": [87, 88], "gpu": [87, 88, 95, 171, 172, 528, 545, 558, 562, 563, 567, 573, 582, 589, 590], "freezevaluewithoutcalibtransform": 88, "95": [88, 258, 296, 561, 600], "quantizedconv": [89, 90], "quantizeddeconv": 89, "redund": [89, 91], "fuseconvredundantdequantizetransform": 89, "cpu": [89, 90, 91, 92, 171, 172, 339, 528, 545, 558, 562, 563, 565, 567, 573, 582, 586, 588, 589, 591, 595], "_quantizedconv": 89, "_quantizeddeconv": 89, "successor": [89, 90, 91, 92], "requant": [90, 92, 595], "fuseconvrequantizetransform": 90, "quantizedmatmul": [91, 92], "fusematmulredundantdequantizetransform": 91, "_quantizedmatmul": [91, 92], "fusematmulrequantizedequantizetransform": 92, "quantizedmatmulwithbiasanddequant": 92, "fusematmulrequantizetransform": 92, "fusematmulrequantizedequantizenewapitransform": 92, "fusematmulrequantizenewapitransform": 92, "newapi": 92, "meta": [94, 588], "metainfochangingmemopoptim": 94, "metaop": 94, "With": [94, 307, 525, 529, 546, 562, 570, 575, 579, 583, 584, 587, 588, 593, 594, 597, 600], "chang": [94, 139, 148, 155, 164, 166, 172, 283, 285, 315, 339, 354, 463, 485, 524, 546, 551, 554, 560, 561, 562, 565, 575, 576, 579, 582, 587, 595, 596, 597], "better": [94, 172, 175, 176, 265, 297, 308, 329, 550, 561, 563, 587, 588, 590, 593, 597], "perform": [94, 156, 165, 171, 172, 187, 199, 200, 205, 227, 239, 249, 273, 278, 286, 307, 313, 317, 486, 497, 525, 526, 528, 529, 544, 545, 546, 547, 548, 550, 552, 553, 558, 559, 561, 562, 563, 564, 565, 567, 571, 573, 576, 582, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 597, 599, 600], "post": [95, 96, 148, 154, 172, 175, 176, 247, 308, 523, 528, 529, 550, 551, 558, 559, 565, 571, 582, 587, 588, 594, 595, 597], "hostconst": 95, "posthostconstconvert": 95, "default": [95, 144, 167, 169, 171, 172, 175, 176, 179, 187, 188, 189, 200, 204, 219, 227, 228, 229, 239, 242, 246, 247, 251, 260, 282, 289, 305, 326, 332, 339, 361, 363, 364, 366, 368, 371, 372, 377, 403, 420, 494, 525, 529, 544, 547, 553, 555, 558, 559, 561, 562, 563, 570, 573, 575, 579, 584, 587, 589, 590, 591, 593, 596, 597, 599], "postcseoptim": 96, "duplic": [96, 106, 312], "quantizev2": 96, "decreas": [96, 587], "size": [96, 163, 179, 180, 186, 189, 195, 200, 204, 219, 220, 226, 229, 235, 239, 242, 281, 307, 339, 494, 523, 544, 546, 547, 551, 554, 562, 582, 583, 584, 587, 594, 596, 599, 600], "rnn": 97, "quantizedrnnconvert": 97, "calibration_data": [97, 105], "rnn_detail": 97, "scalepropagationtransform": 98, "direct": [98, 163, 281, 444, 587], "export": [99, 172, 250, 254, 288, 292, 494, 528, 556, 568, 583, 595, 598], "onnxgraph": 100, "output_shap": 100, "opset": [100, 102, 103, 172, 246, 247], "extra_opset": 100, "output_nam": [100, 138, 172, 246, 247, 553], "is_subgraph": 100, "graph_nam": 100, "manipul": [100, 101], "onnxnod": 101, "skip_convers": 101, "schema": 102, "onnxopschema": 102, "domain": [102, 103, 171, 172, 367, 391, 415, 422, 475, 476, 478, 494, 506, 511, 544, 587, 597], "since_vers": 102, "get_schema": 102, "max_inclusive_opset_vers": 102, "within": [102, 164, 249, 254, 286, 292, 305, 523, 525, 563, 575, 579, 582, 588, 594], "get_max_supported_opset_vers": 102, "packag": [102, 347, 355, 361, 363, 364, 366, 367, 368, 371, 372, 375, 377, 386, 391, 396, 397, 401, 404, 410, 412, 415, 416, 422, 441, 443, 448, 451, 454, 455, 457, 460, 466, 471, 475, 509, 529, 544, 554, 559, 582, 583, 588, 592, 597], "set_nam": 103, "find_opset": 103, "assert_error": 103, "bool_val": 103, "error_msg": 103, "error": [103, 146, 258, 296, 317, 336, 478, 561, 566, 594, 597], "messag": [103, 142, 494, 506, 511, 597], "map_numpy_to_onnx_dtyp": 103, "np_dtype": 103, "map_onnx_to_numpy_typ": 103, "onnx_typ": 103, "add_port_to_nam": 103, "nr": 103, "get_tensorflow_node_attr": 103, "pars": [103, 150, 187, 188, 200, 204, 227, 228, 239, 242, 341, 352, 445, 449, 453, 458, 461, 467, 486, 494, 502, 596], "get_tensorflow_tensor_shap": 103, "get_tensorflow_node_shape_attr": 103, "attr": [103, 144], "map_tensorflow_dtyp": 103, "get_tensorflow_tensor_data": 103, "convert_tensorflow_tensor_to_onnx": 103, "read_tensorflow_node_attr": 103, "read": [103, 144, 192, 204, 232, 242, 282, 547, 591, 593], "infer_onnx_shape_dtyp": 103, "opset_vers": [103, 138, 172, 246, 247, 553], "input_shap": [103, 191, 231, 546, 547], "input_dtyp": 103, "sometim": [103, 525, 587, 590], "so": [103, 204, 242, 525, 529, 554, 558, 561, 568, 570, 590, 591, 594, 595, 596, 598], "make_onnx_shap": 103, "seqtyp": 103, "tensor_dtyp": 103, "around": 103, "signifi": 103, "make_onnx_inputs_output": 103, "elem_typ": 103, "text": [103, 203, 204, 241, 242, 251, 256, 284, 289, 294, 553, 560, 571, 587, 588, 596, 600], "datatyp": [103, 591, 597], "option": [103, 163, 172, 175, 176, 187, 204, 227, 242, 246, 247, 254, 260, 281, 287, 288, 292, 297, 308, 324, 327, 329, 333, 339, 547, 555, 559, 562, 576, 590, 593, 596, 597, 599], "save_protobuf": 103, "path": [103, 144, 167, 168, 187, 188, 189, 204, 227, 228, 229, 242, 243, 246, 247, 249, 260, 261, 262, 264, 273, 278, 282, 284, 286, 287, 297, 305, 308, 324, 329, 339, 403, 420, 423, 426, 428, 435, 463, 494, 525, 526, 529, 544, 546, 547, 551, 557, 561, 562, 563, 564, 568, 571, 582, 585, 596, 599], "as_text": 103, "protobuf": 103, "is_onnx_domain": 103, "is_list_or_tupl": 103, "are_shapes_equ": 103, "src": [103, 583], "dest": 103, "equal": [103, 139, 144, 155, 327, 339, 561, 587], "get_subgraphs_from_onnx": 103, "model_proto": 103, "over": [103, 189, 229, 258, 296, 552, 556, 558, 561, 573, 582, 589, 597], "df": 103, "initialize_name_count": 103, "avoid": [103, 187, 227, 525, 595], "conflict": [103, 554], "counter": 103, "make_nam": 103, "get_index_from_strided_slice_of_shap": 103, "outputs_to_valu": 103, "stride": [103, 204, 242, 596], "slice": 103, "compute_const_folding_using_tf": 103, "g": [103, 163, 172, 549, 552, 556, 565, 570, 587, 592, 594, 597], "const_node_valu": 103, "graph_output": 103, "constant": [103, 247, 288, 312, 316, 322, 333, 476, 546, 555, 596], "tf": [103, 114, 144, 186, 187, 188, 189, 204, 226, 227, 228, 229, 242, 303, 305, 342, 544, 551, 564, 588, 591, 596], "generategraphwithqdqpattern": 105, "op_wise_config": [105, 129, 134], "quantized_nod": 105, "dq": [105, 107, 129, 594], "pair": [105, 171, 172, 546, 562, 563], "merg": [106, 179, 219, 324, 577, 580, 595, 597], "mergeduplicatedqdqoptim": 106, "y": [107, 172, 204, 242, 312, 554, 568, 594, 596], "shareqdqforitexypatternoptim": 107, "enabl": [107, 146, 164, 171, 172, 283, 482, 544, 551, 559, 563, 565, 567, 570, 571, 573, 586, 587, 588, 597], "break": [107, 551, 562], "graphanalyz": 108, "extend_engin": 108, "analyz": [108, 305, 587, 593, 594, 595], "under": [108, 172, 189, 229, 338, 526, 544, 547, 560, 561, 562, 565, 570, 571, 582, 585, 587, 595, 597], "singleton": [108, 288, 339, 475, 483], "specifi": [108, 156, 171, 172, 175, 176, 204, 205, 242, 249, 254, 258, 261, 264, 273, 278, 286, 287, 292, 296, 297, 308, 327, 329, 338, 339, 356, 393, 445, 490, 494, 511, 544, 551, 555, 561, 562, 570, 584, 589, 596, 597, 599], "graphrewriterhelp": 108, "encapsul": [108, 175, 176, 297, 308, 329, 564], "quantize_lay": [109, 110, 112], "fake_quant": [109, 110, 112], "quantize_config": [109, 110, 112], "quantize_help": [109, 110, 112], "quantize_wrapp": [109, 110, 112], "fuse_qdq_bn": [109, 110, 128], "fuse_qdq_concatv2": [109, 110, 128], "fuse_qdq_conv": [109, 110, 128], "fuse_qdq_deconv": [109, 110, 128], "fuse_qdq_in": [109, 110, 128], "fuse_qdq_matmul": [109, 110, 128], "fuse_qdq_pool": [109, 110, 128], "optimize_qdq": [109, 110, 128], "optimize_lay": [110, 112, 115], "quantize_layer_add": [110, 112, 115], "quantize_layer_bas": [110, 112, 115], "quantize_layer_bn": [110, 112, 115], "fake": [111, 148, 154, 562, 590, 594], "fakequantizebas": 111, "abc": [111, 256, 294, 529, 595, 597], "appli": [111, 124, 125, 126, 129, 131, 135, 157, 164, 214, 252, 290, 523, 544, 562, 565, 567, 573, 582, 585, 587, 590, 591, 593, 594, 597, 598, 599], "fakequant": 111, "per_channel": [111, 555, 590, 599], "num_bit": [111, 594], "8": [111, 172, 203, 241, 525, 555, 559, 587, 588, 594, 597, 600], "channel_axi": [111, 152, 155], "symmetr": [111, 590, 596, 597], "narrow_rang": 111, "quantizeconfig": [113, 114], "custom": [113, 156, 287, 307, 338, 545, 549, 550, 565, 587, 593], "There": [113, 287, 309, 311, 544, 549, 555, 558, 561, 562, 563, 565, 594, 597, 599], "instanc": [113, 114, 156, 172, 175, 176, 205, 255, 256, 258, 261, 264, 267, 268, 270, 271, 272, 293, 294, 296, 297, 308, 312, 326, 329, 523, 525, 529, 544, 545, 562, 567, 573, 599, 600], "global": [113, 163, 172, 267, 268, 270, 271, 272, 281, 339, 525, 562, 587, 589, 597], "class": [114, 150, 265, 297, 308, 417, 418, 525, 526, 546, 547, 549, 561, 562, 573, 584, 585, 590, 592, 595, 597, 599], "init_quantize_config": 114, "quantize_recip": 114, "begin": [114, 164, 283, 549, 550, 562, 587, 597], "process": [114, 146, 163, 164, 166, 167, 172, 175, 176, 187, 188, 189, 200, 204, 205, 227, 228, 229, 239, 242, 247, 281, 283, 285, 288, 297, 308, 309, 311, 312, 329, 338, 339, 355, 438, 439, 442, 475, 483, 487, 526, 529, 544, 546, 547, 549, 550, 551, 553, 562, 566, 585, 587, 590, 594, 595, 596, 599], "model_nam": [114, 494], "special": [114, 307, 525, 546, 561, 562, 584, 587, 598], "decid": [114, 171, 172, 252, 283, 290, 403, 529, 562, 590, 592, 597], "qat_clone_funct": 114, "leav": [114, 576], "quantizewrapp": [114, 120], "wrapped_lay": 114, "config_quantizable_lay": 116, "quantizelayeradd": 117, "quantizelay": 118, "quantizelayerbas": 118, "quantizelayerbatchnorm": 119, "quantizewrapperbas": 120, "fusedbatchnormv3": [121, 131], "fusenodestartwithfusedbatchnormv3": [121, 131], "_quantizedfusedbatchnorm": 121, "concatv2": [122, 132, 143, 555], "fusenodestartwithconcatv2": [122, 132], "quantizedconcatv2": [122, 132], "fusenodestartwithconv2d": [123, 133], "conv2dbackpropinput": 124, "conv3dbackpropinputv2": 124, "fusenodestartwithdeconv2d": 124, "fusedinstancenorm": 125, "fusenodestartwithfusedinstancenorm": 125, "batchmatmul": 126, "batchmatmulv2": 126, "fusenodestartwithmatmul": [126, 135], "avgpool": [127, 136, 555], "fusenodestartwithpool": [127, 136], "optimizeqdqgraph": 129, "input_graph": [129, 134, 139, 341, 449, 453, 458, 461, 468, 529], "op_wise_sequ": [129, 134], "quantizegraph": 130, "quantizegraphbas": 130, "quantizenodebas": 130, "quantizegraphforintel": 134, "common": [137, 172, 202, 250, 260, 264, 265, 266, 288, 332, 487, 488, 494, 523, 547, 550, 551, 553, 557, 559, 562, 590, 594], "herlper": 137, "quantizegraphhelp": 137, "sever": [137, 166, 204, 242, 285, 526, 544, 549, 550, 558, 562, 563, 575, 579, 587, 589, 594, 596, 597, 599], "staticmethod": 137, "function": [137, 148, 172, 175, 176, 188, 228, 261, 264, 273, 278, 525, 526, 529, 544, 545, 546, 549, 550, 557, 558, 559, 561, 562, 563, 573, 583, 587, 590, 593, 594, 595, 597, 598], "tensorflowqdqtoonnxqdqconvert": 138, "shape_overrid": 138, "inputs_as_nchw": [138, 246], "default_opset_vers": 138, "bia": [139, 171, 172, 247, 594, 595], "correct": [139, 155, 167, 171, 172, 254, 255, 256, 258, 282, 292, 293, 294, 296, 523, 544, 565], "biascorrect": 139, "fp32_graph": 139, "method": [139, 150, 165, 172, 180, 185, 186, 187, 189, 196, 204, 207, 220, 225, 226, 227, 229, 236, 242, 264, 265, 266, 324, 332, 333, 335, 336, 488, 506, 525, 526, 528, 547, 549, 550, 561, 562, 585, 587, 590, 591, 594, 596, 597], "weight_empir": 139, "Will": [139, 549, 558], "our": [139, 172, 526, 528, 553, 562, 583, 587, 593, 598], "task": [139, 187, 194, 227, 234, 258, 296, 547, 549, 550, 553, 558, 561, 562, 587], "close": [139, 155], "w_int8": [139, 155], "u": [139, 155, 528, 565], "w_fp32": [139, 155], "varianc": [139, 155], "ratio": [139, 155, 163, 164, 167, 172, 200, 204, 239, 242, 283, 547, 562, 587, 596, 600], "between": [139, 155, 164, 172, 204, 242, 255, 258, 293, 296, 506, 510, 525, 529, 549, 553, 558, 561, 562, 573, 590, 592, 593, 594, 596, 597], "differ": [139, 151, 155, 158, 171, 172, 180, 189, 204, 206, 220, 229, 242, 249, 258, 264, 266, 275, 286, 296, 307, 334, 523, 525, 526, 544, 546, 547, 549, 551, 552, 553, 557, 558, 561, 562, 564, 575, 579, 584, 587, 590, 594, 595, 596, 597], "wise": [139, 155, 171, 172, 312, 313, 317, 494, 544, 558, 587, 595, 597, 599], "minim": [139, 155, 312, 549, 552, 561, 562, 575, 579, 587, 590, 597], "round": [139, 155, 590, 594], "scale_c": [139, 155], "shift": [139, 155, 200, 239, 583, 596], "notic": [139, 155, 205, 560, 592], "can": [139, 146, 148, 155, 163, 164, 166, 171, 172, 175, 176, 186, 189, 204, 205, 207, 226, 229, 242, 254, 256, 258, 281, 283, 285, 292, 294, 296, 297, 307, 308, 329, 445, 494, 525, 526, 528, 529, 544, 545, 546, 547, 549, 550, 551, 553, 555, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 573, 575, 576, 577, 579, 580, 582, 583, 584, 585, 586, 587, 589, 590, 591, 593, 594, 595, 596, 597, 599, 600], "first": [139, 155, 169, 171, 172, 187, 227, 254, 292, 313, 324, 403, 525, 526, 529, 544, 547, 553, 559, 563, 567, 576, 577, 580, 583, 589, 590, 591, 593, 594, 595, 597, 599], "empir": [139, 155], "solut": [139, 155, 528, 529, 554, 567, 571, 576, 588, 594, 597], "min": [139, 155, 339, 544, 587, 590, 594, 596, 597], "graphtransform": 140, "graphtransformbas": 140, "input_pb": [140, 142, 143], "log": [142, 336, 342, 445, 485, 486, 525, 544, 573, 593, 595, 597], "insertlog": 142, "node_name_list": 142, "show_nam": 142, "show_op": 142, "first_n": 142, "summar": [142, 549], "1024": [142, 189, 229, 568], "dump_fp32": 142, "rerang": 143, "rerangequantizedconcat": 143, "rerange_quant": 143, "version1_lt_version2": [144, 339], "version1": [144, 339], "version2": [144, 339], "version1_gt_version2": [144, 339], "greater": [144, 339], "version1_eq_version2": [144, 339], "version1_gte_version2": [144, 339], "version1_lte_version2": [144, 339], "disable_random": 144, "seed": [144, 172, 266, 339, 562, 599], "disabl": [144, 171, 172, 482, 511, 523, 582, 591], "read_graph": 144, "in_graph": 144, "in_graph_is_binari": 144, "write_graph": 144, "out_graph_def": 144, "out_graph_fil": 144, "write": [144, 196, 236, 339, 551, 557, 562, 565, 595], "is_ckpt_format": 144, "model_path": [144, 424, 494], "ckpt": [144, 297, 305, 308, 600], "folder": [144, 189, 194, 229, 234, 297, 308, 338, 547, 570, 575, 579, 595], "is_saved_model_format": 144, "saved_model": [144, 260, 415, 422, 432], "get_estimator_graph": 144, "estim": [144, 258, 296, 305, 597], "input_fn": [144, 305], "get_tensor_by_nam": 144, "try_cnt": 144, "3": [144, 172, 189, 204, 229, 242, 254, 292, 327, 525, 526, 528, 544, 546, 547, 549, 551, 553, 555, 556, 559, 561, 562, 563, 565, 569, 573, 575, 579, 584, 587, 589, 593, 594, 596, 597, 600], "consid": [144, 258, 296, 523, 549, 583, 597], "import": [144, 156, 172, 260, 297, 307, 308, 327, 329, 339, 525, 526, 528, 545, 546, 547, 549, 550, 551, 553, 556, 561, 562, 563, 564, 565, 569, 571, 584, 585, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597], "scope": [144, 562], "mai": [144, 267, 268, 270, 271, 272, 327, 523, 524, 544, 546, 554, 560, 563, 575, 579, 586, 588, 590, 597], "more": [144, 148, 154, 163, 204, 242, 281, 526, 527, 528, 544, 547, 549, 551, 556, 558, 559, 561, 562, 563, 565, 573, 577, 580, 584, 585, 587, 591, 594, 597, 598, 600], "onc": [144, 148, 166, 211, 285, 309, 311, 544, 546, 582, 587, 588, 597, 600], "both": [144, 172, 523, 526, 529, 550, 559, 562, 566, 587, 589, 590, 594, 597], "compat": [144, 305, 551, 564, 577, 580, 582, 592], "suffix": 144, "time": [144, 171, 172, 204, 242, 258, 296, 307, 312, 339, 480, 551, 554, 562, 570, 572, 575, 579, 582, 583, 584, 587, 588, 590, 593, 595, 596, 597], "got": [144, 554, 595], "iterator_sess_run": 144, "sess": [144, 305], "iter_op": 144, "feed_dict": [144, 186, 226], "output_tensor": [144, 305], "measur": [144, 205, 297, 334, 526, 529, 545, 549, 561, 562, 595, 597], "integr": [144, 158, 206, 529, 544, 562, 583], "makeiter": 144, "feed": [144, 186, 226, 549, 587], "end": [144, 164, 172, 187, 203, 204, 227, 241, 242, 283, 309, 311, 529, 549, 550, 555, 559, 562, 576, 584, 587, 595, 596, 597], "predict": [144, 204, 209, 242, 251, 255, 256, 258, 289, 293, 294, 296, 526, 549, 561, 573, 594, 595, 596], "pred": [144, 258, 296, 561], "collate_tf_pr": 144, "collat": [144, 150], "tbe": 144, "get_input_output_node_nam": 144, "fix_ref_type_of_graph_def": 144, "fix": [144, 164, 187, 227, 283, 524, 547, 569, 587, 594, 597], "ref": 144, "tool": [144, 246, 339, 528, 529, 562, 575, 579, 587, 588, 590], "strip_unused_lib": 144, "py": [144, 146, 164, 172, 252, 254, 255, 256, 283, 290, 292, 293, 294, 327, 510, 525, 529, 544, 551, 559, 562, 567, 569, 570, 571, 577, 580, 590, 592, 595], "offici": [144, 251, 255, 256, 289, 293, 294, 523, 544, 561, 594], "r1": 144, "15": [144, 555, 600], "branch": [144, 544], "get_graph_def": 144, "auto_input_output": 144, "get_model_input_shap": 144, "inout": 144, "get_tensor_val_from_graph_nod": 144, "graph_node_name_map": 144, "val": [144, 167, 189, 192, 229, 232, 282, 562], "tensor_v": 144, "int8_node_name_revers": 144, "revers": [144, 544], "tf_diagnosis_help": 144, "fp32_model": [144, 146, 150, 247, 339, 529], "quan_model": 144, "save_path": [144, 246, 247, 529, 564], "diagnosi": [144, 288, 383, 392, 415, 475, 504, 510, 562], "generate_feed_dict": 144, "input_tensor": [144, 305], "torch": [145, 146, 147, 149, 150, 154, 163, 168, 171, 172, 216, 247, 297, 308, 338, 525, 528, 530, 549, 551, 553, 562, 563, 564, 565, 570, 573, 590, 594, 595], "bf16modulewrapp": 145, "bf16modul": 145, "mix": [145, 171, 172, 297, 310, 324, 451, 452, 453, 500, 528, 529, 534, 558, 565, 571, 572, 573, 598], "precis": [145, 171, 172, 175, 176, 249, 256, 258, 259, 286, 294, 296, 297, 307, 310, 313, 324, 367, 381, 382, 391, 415, 449, 451, 452, 453, 476, 500, 528, 529, 534, 544, 545, 550, 551, 555, 558, 565, 571, 572, 573, 588, 589, 590, 594, 597, 598], "mixed_precision_model": 145, "bf16_symbolic_trac": 145, "fx_sub_module_list": 145, "trace": [145, 146, 149, 150, 171, 172, 247, 308, 315, 525, 572, 597], "_description_": 145, "hessian": [146, 315, 597], "awar": [146, 157, 172, 214, 260, 281, 315, 329, 529, 550, 551, 553, 558, 563, 582, 585, 597], "node_collector": 146, "hook": [146, 157, 213, 214, 273, 278, 332, 549, 550, 562, 587, 594, 595], "record": [146, 150, 158, 187, 188, 189, 195, 206, 213, 227, 228, 229, 235, 547, 593, 595, 597], "hessiantrac": 146, "q_model": [146, 172, 260, 308, 525, 528, 546, 547, 551, 553, 556, 557, 561, 562, 564, 590, 591], "criterion": [146, 157, 159, 160, 161, 163, 164, 172, 208, 211, 250, 288, 462, 502, 549, 550, 553, 562, 587, 590, 597, 599], "pleas": [146, 148, 154, 161, 163, 171, 172, 187, 188, 189, 192, 227, 228, 229, 232, 281, 283, 284, 327, 525, 526, 527, 528, 529, 544, 545, 547, 550, 551, 559, 561, 563, 565, 566, 570, 573, 587, 590, 591, 592, 593, 594, 598], "refer": [146, 148, 154, 161, 163, 167, 171, 172, 187, 227, 251, 252, 258, 281, 283, 284, 289, 290, 296, 327, 525, 529, 545, 546, 547, 550, 551, 557, 559, 560, 561, 562, 563, 565, 570, 573, 584, 589, 592, 596, 597], "yao": 146, "zhewei": 146, "et": [146, 594], "al": [146, 594], "pyhessian": 146, "network": [146, 161, 163, 283, 315, 526, 544, 549, 550, 553, 562, 586, 588, 590, 594, 597], "through": [146, 175, 176, 297, 308, 528, 545, 555, 557, 558, 561, 568, 584, 585, 587, 589, 590, 594], "len": [146, 172, 204, 242, 547, 551, 596], "2020": 146, "ieee": [146, 563, 594], "intern": [146, 324, 478, 546, 547, 587], "confer": [146, 587, 594], "big": 146, "dong": 146, "zhen": 146, "hawq": [146, 315, 597], "v2": [146, 315, 551, 559, 571, 592, 597, 600], "advanc": [146, 171, 172, 503, 523, 528, 534, 590, 599], "system": [146, 156, 205, 339, 482, 509, 510, 545, 568, 587], "33": [146, 600], "18518": 146, "18529": 146, "http": [146, 161, 163, 187, 189, 227, 229, 251, 252, 254, 255, 256, 281, 283, 284, 289, 290, 292, 293, 294, 525, 528, 544, 547, 556, 559, 560, 562, 571, 577, 580, 592], "github": [146, 163, 187, 227, 251, 252, 255, 256, 281, 284, 289, 290, 293, 294, 438, 481, 524, 544, 547, 552, 556, 559, 560, 562, 571, 577, 580, 592], "com": [146, 163, 187, 227, 251, 252, 255, 256, 281, 284, 289, 290, 293, 294, 523, 528, 544, 547, 556, 559, 560, 562, 565, 571, 592, 593, 600], "openvinotoolkit": 146, "nncf": 146, "blob": [146, 163, 251, 252, 255, 256, 281, 289, 290, 293, 294, 562, 571], "develop": [146, 307, 494, 524, 525, 559, 562, 563, 565, 571, 582, 588, 591, 593], "hessian_trac": 146, "compare_weight": 146, "float_dict": 146, "ani": [146, 254, 256, 292, 294, 323, 327, 341, 342, 344, 346, 348, 349, 350, 351, 352, 353, 354, 356, 381, 382, 403, 405, 411, 420, 437, 440, 442, 445, 449, 453, 455, 458, 461, 464, 467, 473, 480, 482, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 510, 511, 523, 524, 528, 544, 546, 551, 565, 570, 583, 593], "quantized_dict": 146, "compar": [146, 258, 296, 544, 550, 561, 590, 593, 595, 597], "being": [146, 254, 292, 411], "two": [146, 156, 163, 164, 166, 189, 194, 205, 229, 234, 254, 281, 285, 287, 292, 318, 339, 525, 526, 544, 547, 549, 551, 553, 555, 561, 562, 563, 587, 590, 591, 593, 597, 599], "wt_compare_dict": 146, "float_model": 146, "state_dict": [146, 551, 595], "qmodel": 146, "compute_error": 146, "state": [146, 568, 587], "weight_dict": 146, "hawq_top": 146, "enable_act": 146, "modul": [147, 263, 269, 279, 280, 483, 491, 499, 525, 544, 546, 549, 553, 558, 561, 562, 564, 587, 589, 591, 595, 598], "torchsmoothqu": [148, 594], "traced_model": [148, 149], "detail": [148, 154, 204, 242, 376, 378, 399, 462, 467, 481, 494, 523, 524, 528, 549, 555, 556, 557, 561, 562, 563, 565, 573, 582, 587, 592, 593, 595, 597, 598, 600], "smoothquant": [148, 154, 528, 598], "accur": [148, 154, 594], "effici": [148, 154, 526, 546, 549, 565, 585, 588, 594, 597], "larg": [148, 154, 528, 546, 549, 562, 587, 594, 600], "languag": [148, 154, 251, 289, 523, 553, 587, 588, 594], "spiq": [148, 154, 594], "free": [148, 154, 175, 176, 308, 523, 528, 561, 571, 576, 584, 593, 594], "could": [148, 154, 163, 175, 176, 189, 229, 287, 297, 308, 329, 523, 525, 550, 562, 585, 587, 590, 594, 598], "absorb": [148, 154], "later": [148, 154, 595], "inplac": 148, "mean": [148, 163, 171, 172, 200, 204, 239, 242, 256, 258, 281, 294, 296, 317, 525, 546, 551, 555, 561, 562, 568, 587, 590, 594, 596, 597, 599], "you": [148, 171, 172, 185, 187, 225, 227, 283, 524, 525, 544, 547, 551, 553, 559, 560, 561, 565, 567, 568, 570, 575, 579, 582, 583, 587, 590, 592, 593, 594, 595, 598], "recov": [148, 339, 529, 550, 594], "graphtrac": 148, "trace_and_fuse_sub_graph": 149, "is_qat": 149, "get_embedding_contigu": 150, "nn": [150, 172, 216, 247, 297, 308, 338, 525, 549, 553, 562, 564, 594, 595], "embed": 150, "contigu": [150, 587], "is_fused_modul": 150, "_propagate_qconfig_help": 150, "detect": [150, 171, 172, 254, 258, 292, 296, 301, 494, 525, 544, 565, 572, 573, 587], "collate_torch_pr": 150, "fetch": [150, 153, 180, 220, 547], "collate_result": 150, "input2tupl": 150, "append_attr": 150, "fx_model": 150, "fx_white_list": 150, "append": [150, 287, 312, 525, 550, 562, 585], "graphmodul": [150, 525, 591], "addit": [150, 172, 329, 544, 549, 576, 592], "dir": [150, 187, 227, 338, 547, 554, 557], "generate_activation_observ": 150, "observ": [150, 593, 595, 597], "what": [150, 164, 185, 225, 329, 523, 544], "check_cfg_and_qconfig": 150, "op_infos_from_cfg": 150, "output_tensor_ids_op_nam": 150, "paser_cfg": 150, "ops_nam": 150, "get_quantizable_ops_from_cfg": 150, "input_tensor_ids_op_nam": 150, "auto_copi": 150, "fetch_modul": 150, "op_nam": [150, 168, 172, 325, 399, 400, 562, 587, 595], "set_modul": 150, "new_modul": 150, "simple_infer": 150, "get_example_input": 150, "dataset": [150, 175, 176, 177, 179, 180, 184, 185, 186, 198, 207, 217, 219, 220, 224, 225, 226, 238, 250, 254, 255, 256, 258, 287, 288, 292, 293, 294, 296, 297, 308, 329, 332, 367, 381, 391, 392, 403, 415, 494, 496, 526, 528, 529, 546, 551, 556, 561, 562, 570, 587, 590, 592, 597, 599, 600], "example_inp": 150, "get_fallback_ord": 150, "confidence_batch": [150, 597], "fallback": [150, 315, 317, 318, 563, 591, 597], "requantize_cfg": 150, "fall": 150, "back": [150, 204, 210, 242, 582], "order": [150, 251, 252, 287, 289, 290, 312, 317, 324, 326, 525, 561, 587, 589, 594, 595, 597], "confid": 150, "ordered_op": 150, "get_mse_order_per_fp32": 150, "mse": [150, 172, 258, 288, 296, 316, 400, 544, 561, 589, 592], "influenc": [150, 587], "last": [150, 161, 171, 172, 544, 563, 565, 567, 572, 576, 590, 594], "quant": [150, 171, 172, 324, 525, 562, 590], "fallback_ord": 150, "get_mse_order_per_int8": 150, "example_input": [150, 171, 172, 247, 553], "get_torch_vers": 150, "algorithm_registri": 151, "algorithm_typ": 151, "locat": [151, 204, 242, 551, 568, 575, 579, 582, 590, 592, 596, 599], "registr": [151, 189, 196, 204, 229, 236, 242, 276], "algorithmschedul": 151, "conf": [151, 156, 157, 172, 175, 176, 205, 260, 267, 268, 270, 271, 272, 273, 278, 297, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 324, 327, 329, 505, 525, 526, 528, 545, 549, 556, 557, 562, 563, 564, 585, 590, 591, 593, 597], "control": [151, 172, 386, 391, 525, 544, 562, 587, 597], "phase": [151, 526, 562, 587, 590, 591, 597], "fastbiascorrect": [152, 155], "fast_bias_correct": [153, 171, 172, 288, 590], "smooth_quant": [153, 171, 172, 288, 590, 594], "weight_correct": [153, 171, 172, 288, 590], "5": [154, 158, 172, 191, 200, 206, 231, 239, 258, 296, 529, 544, 547, 555, 561, 562, 586, 587, 589, 590, 594, 596, 597, 599, 600], "For": [154, 163, 172, 189, 204, 229, 242, 255, 256, 258, 281, 284, 293, 294, 296, 297, 308, 523, 525, 527, 529, 544, 549, 550, 551, 553, 555, 558, 565, 567, 568, 570, 573, 587, 591, 594, 595, 597, 599, 600], "kernel": [154, 172, 482, 529, 586, 587, 597], "futur": [154, 175, 176, 207, 558, 562, 573, 598], "weightcorrect": 155, "ep": [155, 563], "1e": [155, 594, 599], "05": [155, 172, 258, 296, 561, 594, 600], "evalu": [156, 157, 163, 171, 175, 176, 187, 205, 227, 243, 251, 254, 255, 256, 258, 260, 289, 292, 293, 294, 296, 297, 307, 308, 329, 332, 475, 483, 499, 526, 529, 546, 547, 549, 550, 557, 558, 561, 562, 563, 565, 571, 573, 576, 582, 584, 587, 590, 593, 595, 597, 599], "set_env_var": [156, 205], "env_var": [156, 205], "overwrite_exist": [156, 205], "env": [156, 205, 554], "alreadi": [156, 189, 203, 205, 229, 241, 480, 529, 544, 547, 558, 577, 580, 597], "param": [156, 177, 205, 211, 217, 258, 296, 312, 393, 494, 529, 564, 597], "set_all_env_var": [156, 205], "physic": [156, 205, 523, 545], "core": [156, 172, 205, 544, 545, 560, 575, 579, 586, 600], "get_architectur": [156, 205], "architectur": [156, 205, 261, 264, 528, 544, 545, 549, 562, 587, 588, 598], "get_threads_per_cor": [156, 205], "thread": [156, 172, 205, 510, 544, 546, 586], "get_thread": [156, 205], "get_physical_id": [156, 205], "socket": [156, 205, 482, 511, 586, 600], "get_core_id": [156, 205], "get_bounded_thread": [156, 205], "core_id": [156, 205], "bind": [156, 205], "fit": [156, 163, 172, 297, 308, 312, 327, 329, 525, 528, 545, 546, 547, 551, 556, 557, 561, 562, 563, 564, 587, 590, 591], "b_dataload": [156, 172, 545, 562], "b_func": [156, 545], "benchmarkconfig": [156, 172, 545, 562], "accuraci": [156, 171, 172, 175, 176, 243, 249, 258, 273, 278, 286, 296, 297, 307, 308, 313, 327, 329, 462, 486, 497, 525, 528, 544, 546, 547, 550, 551, 552, 553, 561, 562, 563, 573, 582, 584, 585, 587, 588, 589, 592, 593, 594, 595, 599, 600], "goal": [156, 243, 249, 273, 278, 286, 297, 308, 546, 585, 590, 597], "prefer": [156, 249, 286, 297, 308, 587], "space": [156, 164, 171, 172, 175, 176, 249, 256, 261, 264, 265, 266, 286, 294, 297, 308, 312, 317, 324, 494, 523, 524, 526, 529, 587, 590, 599], "etc": [156, 157, 203, 241, 243, 249, 256, 273, 278, 286, 294, 297, 308, 338, 549, 558, 587, 593, 597], "user": [156, 164, 167, 171, 172, 175, 176, 189, 192, 196, 204, 205, 211, 216, 229, 232, 236, 242, 249, 273, 278, 284, 286, 287, 297, 307, 308, 313, 329, 339, 478, 525, 526, 529, 534, 545, 549, 550, 553, 555, 558, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 573, 576, 582, 584, 585, 587, 588, 590, 591, 592, 594, 595, 596, 597, 601], "100": [156, 171, 172, 189, 229, 327, 545, 547, 551, 557, 562, 589, 590, 596, 597, 599, 600], "cores_per_inst": [156, 172, 545, 562, 589], "num_of_inst": [156, 172, 545, 562, 589], "7": [156, 171, 172, 307, 545, 554, 555, 559, 562, 587, 590, 592, 594, 597, 600], "pb": [156, 172, 297, 305, 308, 431, 434, 445, 528, 545, 551, 556, 562, 564, 595, 600], "eval_dataload": [156, 172, 175, 176, 287, 297, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 329, 528, 545, 556, 557, 562, 590, 597], "compon": [157, 243, 250, 287, 288, 475, 510, 525, 551, 559, 560, 565, 582, 585, 586], "quantizationawaretrainingcallback": [157, 329], "pruningcallback": [157, 329], "distillationcallback": 157, "basecallback": 157, "design": [157, 186, 209, 214, 226, 296, 313, 526, 528, 562, 570, 573, 587, 590, 598], "mainli": [157, 166, 214, 285, 562, 587, 590], "prune": [157, 161, 162, 163, 164, 165, 166, 167, 172, 214, 215, 250, 267, 268, 270, 271, 272, 276, 278, 279, 281, 282, 283, 285, 287, 288, 329, 339, 350, 357, 376, 415, 450, 475, 483, 494, 499, 528, 551, 552, 555, 556, 558, 585, 588, 598, 599], "distil": [157, 160, 172, 206, 213, 214, 250, 288, 329, 528, 552, 556, 558, 585, 598, 599], "deriv": [157, 161, 163, 164, 165, 166, 243, 281, 283, 285], "pipelin": [157, 243, 261, 262, 287, 550, 562, 585], "knowledg": [157, 158, 172, 206, 243, 550, 552, 556, 558, 562, 564, 599], "transfer": [157, 194, 234, 243, 547, 549, 550, 562, 594], "teacher": [157, 172, 243, 549, 550, 562, 600], "student": [157, 172, 187, 213, 227, 243, 547, 549, 550, 600], "distillation_conf": [157, 168, 243], "_epoch_ran": [157, 243], "integ": [157, 163, 164, 172, 243, 254, 258, 265, 281, 283, 292, 296, 327, 529, 590, 594, 597], "indic": [157, 172, 180, 185, 187, 220, 225, 227, 243, 254, 265, 292, 525, 544, 554, 595], "how": [157, 161, 163, 164, 172, 204, 242, 243, 281, 524, 525, 527, 529, 544, 546, 547, 549, 550, 551, 557, 562, 576, 577, 580, 581, 582, 587, 590, 594, 596, 597, 598, 599], "much": [157, 161, 172, 204, 242, 243, 549, 576, 587, 594, 596], "epoch": [157, 164, 243, 283, 329, 549, 550, 551, 562, 585, 587, 599], "ran": [157, 243], "eval_frequ": [157, 243], "frequenc": [157, 164, 172, 243, 283, 562, 586, 587, 599], "term": [157, 164, 165, 243, 524, 549, 560, 561, 584, 585, 597], "best_scor": [157, 243], "best": [157, 204, 242, 243, 249, 286, 317, 523, 526, 559, 565, 571, 582, 584, 590, 596, 597], "metric": [157, 172, 175, 176, 208, 243, 249, 250, 265, 273, 278, 286, 287, 288, 297, 308, 329, 332, 367, 391, 415, 475, 483, 491, 494, 497, 526, 529, 544, 546, 547, 551, 562, 563, 590, 593, 595, 597, 598, 599, 600], "best_model": [157, 243], "found": [157, 243, 478, 494, 511, 528, 544, 549, 563, 570, 594, 597, 600], "critet": [158, 206], "includ": [158, 161, 163, 165, 172, 187, 189, 196, 204, 206, 227, 229, 236, 242, 249, 259, 281, 286, 327, 523, 524, 529, 544, 547, 559, 560, 561, 562, 563, 565, 568, 571, 576, 587, 590, 591, 595, 597], "tensorflowknowledgedistillationloss": [158, 206], "pytorchknowledgedistillationloss": [158, 206, 562], "pytorchintermediatelayersknowledgedistillationloss": [158, 206], "tensorflowcriterion": [158, 206], "pytorchcriterion": [158, 206], "criterion_registri": [158, 206], "criterion_typ": [158, 206], "registry_criterion": [158, 206], "knowledgedistillationframework": [158, 206], "student_model": [158, 172, 206, 562], "teacher_model": [158, 172, 206, 549, 550, 562], "knowledgedistillationloss": [158, 206, 562, 599], "temperatur": [158, 172, 206, 562, 599], "loss_typ": [158, 172, 206, 562, 599], "ce": [158, 172, 206, 562, 599], "loss_weight": [158, 172, 206, 562, 599], "pytorchknowledgedistillationlosswrapp": [158, 206], "param_dict": [158, 206, 211], "tensorflowknowledgedistillationlosswrapp": [158, 206], "tensorflowknowledgedistillationlossextern": [158, 206], "intermediatelayersknowledgedistillationloss": [158, 206, 502], "layer_map": [158, 172, 206, 549], "add_origin_loss": [158, 172, 206], "pytorch": [158, 163, 171, 186, 187, 189, 192, 196, 204, 206, 211, 213, 226, 227, 229, 232, 236, 242, 247, 248, 249, 258, 259, 279, 281, 284, 286, 288, 296, 297, 306, 308, 318, 333, 339, 342, 415, 422, 445, 455, 475, 525, 526, 528, 529, 546, 549, 550, 552, 553, 555, 558, 559, 562, 564, 565, 567, 570, 571, 572, 573, 582, 587, 588, 589, 592, 597, 599], "loss": [158, 172, 206, 249, 258, 273, 278, 286, 296, 329, 549, 550, 551, 552, 561, 562, 563, 573, 585, 587, 590, 594, 597, 599], "pytorchintermediatelayersknowledgedistillationlosswrapp": [158, 206], "selfknowledgedistillationloss": [158, 206, 502], "selfknowledg": [158, 206], "pytorchselfknowledgedistillationloss": [158, 206], "pytorchselfknowledgedistillationlosswrapp": [158, 206], "pruner": [160, 250, 267, 268, 269, 270, 271, 273, 278, 279, 281, 284, 288, 505, 562, 587, 599], "criteria": [160, 162, 172, 249, 273, 278, 281, 283, 286, 525, 582, 594], "reg": [160, 162, 164], "schedul": [160, 162, 164, 165, 172, 250, 279, 283, 288, 562, 585], "callback": [160, 273, 278, 329, 332, 510, 525, 562, 585, 587, 590], "register_criterion": 161, "registri": [161, 163, 164, 165, 166, 281, 283, 285, 526], "get_criterion": 161, "pruningcriterion": 161, "about": [161, 481, 482, 488, 523, 544, 546, 562, 591, 597, 598, 600], "module_nam": [161, 164, 165, 283, 339, 494], "store": [161, 164, 165, 172, 189, 229, 276, 283, 557], "score": [161, 163, 164, 172, 251, 252, 254, 255, 256, 258, 283, 289, 290, 292, 293, 294, 296, 315, 332, 525, 561, 584, 587, 593, 597], "magnitudecriterion": 161, "magnitud": [161, 172, 250, 258, 269, 288, 296, 558, 587], "criterion_class": 161, "determin": [161, 163, 164, 172, 334, 523, 525, 587, 590, 594], "gradientcriterion": 161, "gradient": [161, 267, 558, 562, 587, 600], "absolut": [161, 172, 258, 296, 561, 562, 586, 587, 590, 597], "snipcriterion": 161, "snip": [161, 172, 283, 558, 587, 600], "product": [161, 558, 563, 565, 566, 582, 586, 588, 590, 593, 597], "singl": [161, 166, 172, 180, 187, 204, 220, 227, 242, 254, 283, 285, 292, 375, 392, 411, 525, 547, 559, 587], "shot": [161, 166, 214, 283, 285, 526, 558, 562, 587, 588], "sensit": [161, 267, 283, 558, 587], "arxiv": [161, 283, 587, 594], "org": [161, 254, 283, 292, 524, 525, 544, 559, 577, 580], "1810": [161, 283], "02340": [161, 283], "snipmomentumcriterion": 161, "snip_momentum": [161, 172, 562, 587], "momentum": [161, 283, 558, 562, 587, 599], "mechan": [161, 593, 598], "preserv": 161, "step": [161, 163, 164, 166, 172, 281, 283, 285, 329, 544, 549, 550, 551, 562, 577, 580, 582, 585, 587, 589, 591, 593, 594, 595, 597], "beta": 161, "register_pattern": [163, 281], "sure": [163, 164, 166, 281, 283, 285, 544, 545], "get_pattern": [163, 281], "assertionerror": [163, 164, 167, 281, 282, 283, 297], "been": [163, 164, 251, 281, 283, 289, 524, 526, 544, 549, 562, 563, 582, 594], "basepattern": [163, 165], "basic": [163, 171, 172, 203, 241, 261, 281, 288, 316, 320, 323, 329, 558, 559, 562, 589, 593], "unit": [163, 281, 494, 524], "e": [163, 172, 511, 523, 549, 552, 556, 565, 570, 571, 575, 579, 587, 594, 597], "4x1": [163, 172, 277, 562, 587, 600], "is_glob": [163, 281], "take": [163, 172, 175, 176, 180, 204, 209, 220, 242, 281, 296, 297, 308, 312, 329, 523, 525, 526, 544, 546, 549, 555, 562, 582, 587, 590, 591, 596, 597, 599], "local": [163, 172, 281, 339, 354, 386, 391, 404, 424, 544, 575, 579, 587, 593], "contrast": [163, 281, 596], "keep_mask_lay": 163, "invalid_lay": 163, "max_sparsity_ratio_per_op": [163, 164, 168, 172, 562, 587], "sparsiti": [163, 164, 166, 167, 172, 283, 285, 339, 528, 547, 558, 562, 598, 600], "reach": [163, 166, 172, 285, 524, 528, 546, 587, 597], "min_sparsity_ratio_per_op": [163, 168, 172, 562, 587], "minimum": [163, 172, 562, 573, 587, 597], "target_spars": [163, 168, 172, 562, 587, 589, 599], "patternnxm": [163, 281], "nxm": [163, 164, 172, 277, 281, 587], "kept": [163, 281], "block_siz": [163, 281], "height": [163, 200, 204, 239, 242, 281, 551, 587, 596, 599], "width": [163, 200, 204, 239, 242, 281, 551, 587, 590, 596, 599], "vertic": [163, 204, 242, 281, 596], "becaus": [163, 204, 242, 281, 525, 587, 590, 594, 596, 597], "hidden": [163, 281, 494, 529, 587], "patternninm": [163, 281], "n": [163, 172, 188, 204, 228, 242, 252, 281, 290, 327, 482, 547, 549, 587, 590, 594, 596], "out": [163, 172, 187, 188, 189, 227, 228, 229, 249, 281, 286, 524, 525, 528, 547, 565, 570, 575, 576, 577, 579, 580, 582, 587, 589, 590], "continu": [163, 254, 281, 292, 526, 562, 583, 587], "master": [163, 251, 252, 255, 256, 281, 284, 289, 290, 293, 294, 562, 597], "doc": [163, 171, 172, 281, 323, 324, 327, 339, 561, 562, 577, 580], "md": [163, 171, 172, 281, 551, 590], "element": [163, 167, 185, 225, 254, 281, 292, 339, 547, 558, 561, 587, 594], "register_prun": [164, 283], "parse_valid_pruner_typ": 164, "get_prun": [164, 283], "cuurent": [164, 283], "baseprun": 164, "part": [164, 281, 283, 525, 559, 563, 577, 580, 587, 594, 598], "current_sparsity_ratio": [164, 283], "global_step": [164, 283], "total": [164, 204, 242, 258, 283, 296, 547, 587, 596], "start_step": [164, 168, 172, 283, 562, 587, 589], "trigger": [164, 283, 524], "end_step": [164, 168, 172, 283, 562, 587, 589], "pruning_frequ": [164, 168, 172, 562, 587], "target_sparsity_ratio": [164, 283], "show": [164, 339, 523, 544, 549, 551, 562, 568, 583, 587, 594, 597, 598], "final": [164, 283, 562, 568, 584, 587, 590, 592, 597], "basicprun": 164, "arrang": [164, 188, 189, 192, 228, 229, 232, 547, 587], "proce": 164, "regul": 164, "patternlockprun": [164, 271, 283], "while": [164, 283, 312, 529, 544, 547, 552, 558, 563, 565, 570, 582, 589, 590, 594], "spars": [164, 283, 547, 588], "structur": [164, 172, 283, 325, 419, 558, 581, 583, 587, 590, 595, 598, 600], "parent": [164, 166, 277, 283, 285, 595], "progressiveprun": 164, "interpol": [164, 204, 242, 561, 587, 596], "fine": [164, 187, 227, 547, 568, 587, 588, 590], "grain": [164, 588, 597], "improv": [164, 524, 528, 562, 565, 582, 583, 587, 588, 590, 591, 597, 600], "interv": [164, 587], "regular": [165, 251, 282, 289], "register_reg": 165, "regulariz": 165, "get_reg_typ": 165, "obtain": [165, 167, 282, 525, 553, 587, 593, 594, 597], "get_reg": 165, "basereg": 165, "grouplasso": 165, "coeff": 165, "group": [165, 268, 411, 558, 587, 595, 596, 597, 600], "lasso": [165, 268, 558, 587], "select": [165, 172, 187, 227, 525, 526, 544, 558, 559, 582, 587, 590, 595, 597], "reg_term": 165, "coeffient": 165, "relat": [165, 243, 254, 273, 278, 281, 292, 332, 422, 425, 427, 432, 512, 515, 516, 517, 520, 565, 587, 599], "register_schedul": [166, 285], "get_schedul": [166, 285], "pruningschedul": 166, "dens": [166, 172, 285, 587, 600], "gradual": [166, 285, 587], "oneshotschedul": [166, 285], "iterativeschedul": [166, 285], "get_sparsity_ratio": 167, "elementwise_over_matmul_gemm_conv": 167, "elementwise_over_al": 167, "blockwise_over_matmul_gemm_conv": 167, "check_config": [167, 282], "prune_config": [167, 282], "everyth": [167, 282, 570], "reset_none_to_default": 167, "undefin": [167, 282], "update_param": 167, "process_weight_config": 167, "global_config": [167, 267, 268, 270, 271, 272], "local_config": [167, 172, 267, 268, 270, 271, 272], "default_config": 167, "pruners_info": 167, "process_yaml_config": 167, "check_key_valid": 167, "template_config": 167, "user_config": 167, "process_and_check_config": [167, 282], "process_config": [167, 282], "parse_to_prun": [167, 282], "keep": [167, 282, 313, 525, 529, 581, 582, 592], "generate_pruner_config": 167, "dotdict": [167, 168, 307], "prunerv2": 168, "pruning_typ": [168, 172, 562, 587], "pruning_scop": [168, 172, 562, 587], "sparsity_decay_typ": [168, 172, 562, 587], "pruning_op_typ": [168, 172, 562, 587], "reg_typ": 168, "criterion_reduce_typ": 168, "resume_from_pruned_checkpoint": 168, "similiar": 168, "cfg_fname": 168, "parser": [168, 288, 352, 357, 475, 483, 513], "quantization_conf": 168, "pruning_conf": 168, "graph_optimization_conf": [168, 249], "mixedprecision_conf": 168, "benchmark_conf": 168, "nasconfig": [168, 262, 264, 526], "approach": [168, 171, 172, 261, 262, 264, 502, 525, 526, 546, 547, 549, 558, 562, 570, 582, 588, 589, 597, 599], "search_spac": [168, 261, 264, 265, 266], "search_algorithm": [168, 250, 263, 288, 526], "na": [168, 250, 288, 301, 558], "search": [168, 175, 176, 249, 251, 261, 264, 265, 266, 286, 289, 312, 381, 382, 528, 544, 556, 558, 561, 565, 566, 576, 588, 595, 597, 598], "procedur": [168, 526], "defaultconf": 168, "instead": [168, 169, 186, 226, 339, 568, 570, 573, 587], "notat": [168, 169], "deep_get": [169, 307], "dot": [169, 494, 563, 590], "nest": 169, "eg": [169, 189, 229, 547, 589], "person": [169, 523, 588], "john": 169, "deep": [169, 528, 529, 546, 558, 559, 562, 563, 565, 567, 570, 571, 573, 576, 582, 588, 590, 597, 598, 600], "deep_set": [169, 307], "sex": [169, 523], "male": 169, "quantizationconfig": 171, "post_training_static_qu": [171, 546, 547, 562, 589, 597], "calibration_sampling_s": [171, 172, 562], "op_type_dict": [171, 172, 589, 590, 597], "op_name_dict": [171, 172, 562, 590, 597], "strategy_kwarg": [171, 172, 593, 597], "timeout": [171, 172, 562, 589, 597, 599], "max_trial": [171, 172, 562, 597], "quant_level": [171, 172, 597], "auto": [171, 172, 288, 310, 316, 339, 525, 565, 568, 570, 572, 573, 587, 590], "accuracy_criterion": [171, 172, 307, 562, 584, 589, 597, 599], "use_distributed_tun": [171, 172, 597], "posttrainingquantconfig": [171, 172, 308, 525, 528, 546, 556, 562, 564, 590, 591, 593, 597], "quantizationawaretrainingconfig": [171, 172, 308, 329, 525, 550, 562, 590, 591, 597], "requir": [171, 172, 287, 305, 341, 343, 355, 410, 416, 441, 448, 449, 450, 451, 453, 454, 455, 457, 460, 461, 466, 471, 475, 525, 529, 544, 545, 546, 550, 551, 555, 562, 563, 564, 566, 576, 582, 586, 587, 590, 592, 593, 595, 597, 599], "onnxrt_trt_ep": [171, 172, 590], "onnxrt_cuda_ep": [171, 172, 563, 590], "cv": [171, 172, 587], "object_detect": [171, 172, 254, 292], "nlp": [171, 172, 284, 570, 587, 590], "recommendation_system": [171, 172], "adaptor": [171, 172, 326, 332, 528, 558, 591, 592, 594, 595, 598], "automat": [171, 172, 189, 192, 199, 200, 229, 232, 239, 249, 259, 286, 525, 528, 544, 545, 547, 558, 562, 563, 565, 567, 570, 571, 573, 575, 576, 577, 579, 580, 582, 585, 587, 590, 594, 596, 597], "explicitli": [171, 172, 557], "overrid": [171, 172, 339], "quantiztaion": [171, 172], "smooth_quant_arg": [171, 172, 590], "fast": [171, 172, 528, 588], "gemm_to_matmul": [171, 172, 590], "graph_optimization_level": [171, 172, 589, 590], "disable_al": [171, 172, 589], "enable_bas": [171, 172], "enable_extend": [171, 172], "enable_al": [171, 172], "first_conv_or_matmul_quant": [171, 172, 590], "last_conv_or_matmul_quant": [171, 172, 590], "pre_post_process_quant": [171, 172, 590], "preprocess": [171, 172, 187, 204, 227, 242, 332, 551, 596], "postprocess": [171, 172, 198, 201, 204, 208, 242, 250, 288, 332, 497, 529, 562, 595, 596], "vaild": [171, 172], "dedic": [171, 172], "quant_format": [171, 172, 247, 553], "onnxruntim": [171, 172, 183, 189, 196, 223, 229, 236, 259, 398, 402, 529, 556, 558, 559, 563, 589], "constraint": [171, 172, 249, 286, 562, 593, 597, 599], "reduc": [171, 172, 529, 550, 562, 563, 582, 583, 588, 590, 591, 594, 597, 599], "layer1": [171, 172, 562, 587, 590], "conv1": [171, 172, 590, 599], "tuning_strategi": [171, 172], "guarante": [171, 172, 562], "models": [171, 172, 307, 562, 584, 589], "footprint": [171, 172, 249, 273, 278, 286, 307, 550, 562, 584, 587, 589], "earli": [171, 172, 562, 590, 597, 599], "stop": [171, 172, 562, 597, 598, 599], "field": [171, 172, 189, 229, 254, 292, 525, 529, 544, 551, 562, 593, 597, 599], "exit": [171, 172, 309, 311, 544, 562, 563, 599], "bit": [171, 172, 550, 563, 588, 590, 594], "jit": [171, 565, 567, 572, 594, 595], "excluded_precis": [171, 172, 591], "exclud": [171, 172, 529, 563, 591], "empti": [171, 172, 568], "conserv": [171, 172, 288, 316], "random_se": [172, 312, 329, 562, 599], "1978": 172, "workspac": [172, 329, 338, 339, 420, 493, 504, 564], "default_workspac": 172, "resume_from": [172, 339], "tensorboard": [172, 329, 332, 339, 529, 562], "set_random_se": [172, 339], "set_workspac": [172, 308, 339], "set_resume_from": [172, 339], "set_tensorboard": [172, 339], "directori": [172, 188, 189, 228, 229, 305, 335, 338, 339, 403, 494, 547, 551, 554, 575, 577, 579, 580, 595], "histori": [172, 338, 339, 379, 392, 445, 463, 513, 582, 597], "nc_workspac": 172, "datetim": 172, "now": [172, 204, 242, 525, 526, 547, 551, 573, 589, 596, 597], "strftime": 172, "d_": 172, "h": [172, 204, 242, 551, 596], "resum": [172, 175, 176, 309, 310, 311, 314, 315, 318, 319, 320, 329], "wa": [172, 529, 544, 562, 588, 597], "flag": [172, 252, 290, 329], "visual": [172, 528, 573, 582, 593, 595, 597, 598], "displai": [172, 323, 324, 339, 410, 582], "workspace_path": [172, 479, 494], "warmup": [172, 545, 562, 589], "inter_num_of_thread": [172, 562, 589], "intra_num_of_thread": [172, 562, 589], "benchmark": [172, 207, 250, 287, 288, 307, 339, 360, 367, 380, 391, 392, 415, 475, 476, 486, 492, 509, 514, 528, 534, 564, 565, 569, 573, 576, 582, 597, 598, 599, 600], "test": [172, 204, 242, 524, 528, 544, 559, 600], "inter": [172, 185, 189, 225, 229], "intra": 172, "accuracycriterion": [172, 462, 562, 597], "higher_is_bett": [172, 561, 597, 599], "rel": [172, 307, 562, 589, 597, 599, 600], "tolerable_loss": [172, 562, 597], "01": [172, 562, 586, 589, 597, 599, 600], "higher": [172, 175, 176, 265, 297, 308, 329, 525, 549, 553, 561, 587, 590, 593], "tuningcriterion": [172, 562, 584, 593, 597], "optin": 172, "tuning_criterion": [172, 562, 584, 593, 597], "dynam": [172, 177, 217, 247, 324, 347, 529, 546, 549, 558, 562, 565, 570, 571, 572, 573, 576, 582, 588, 597, 600], "ptq": [172, 308, 525, 551, 558, 562, 590, 594, 595, 597], "tri": [172, 597], "meet": [172, 287, 309, 311, 525, 553, 584, 588, 589, 590, 595, 597], "bayesian": [172, 266, 288, 316, 526, 589], "mse_v2": [172, 288, 316], "hawq_v2": [172, 288, 316], "exhaust": [172, 266, 288, 316, 589], "docstr": [172, 327], "copi": [172, 282, 339], "deepcopi": 172, "model_origin": [172, 308, 591], "qat_op_name_dict": 172, "compression_manag": [172, 329, 525, 549, 550, 562, 585, 587, 590], "prepare_compress": [172, 329, 525, 549, 550, 562, 585, 587, 590], "weightpruningconfig": [172, 216, 562, 585, 587], "pruning_config": [172, 562, 587], "9": [172, 525, 559, 562, 587, 589, 597, 599], "98": [172, 562, 587, 589, 600], "exp": [172, 562, 587], "link": [172, 187, 227, 544, 547, 575, 579, 582, 600], "90": [172, 599, 600], "magnitude_progress": 172, "snip_progress": 172, "snip_momentum_progress": [172, 587], "pattern_lock": [172, 250, 269, 288], "most": [172, 258, 296, 544, 562, 563, 587, 590, 594, 597], "feasibl": 172, "situat": [172, 551], "unstructur": [172, 277, 558, 587, 600], "8x1": 172, "channelx1": [172, 587], "1xchannel": [172, 587], "directli": [172, 186, 226, 254, 258, 282, 292, 296, 553, 561, 562, 569, 587, 589, 590, 595], "itrex": 172, "some": [172, 187, 227, 282, 494, 544, 547, 559, 561, 562, 563, 584, 587, 590, 591, 594, 595, 597], "start": [172, 204, 242, 254, 292, 313, 559, 596, 597, 598, 601], "togeth": [172, 204, 242, 549, 559, 569, 588, 595, 596], "sort": [172, 317, 403, 597], "sinc": [172, 249, 251, 273, 278, 286, 289, 549, 553, 559, 561, 576, 582, 585], "lead": [172, 494, 549, 562, 563, 587, 594], "increas": [172, 548, 558, 565, 582, 597], "cube": [172, 587], "6": [172, 544, 555, 587, 590, 594, 597, 600], "update_config": 172, "10": [172, 189, 229, 312, 528, 544, 545, 547, 559, 562, 587, 589, 596, 597, 600], "knowledgedistillationlossconfig": [172, 549, 550, 562, 585], "hyperparamet": [172, 593, 594, 597], "entropi": [172, 597], "probabl": [172, 334], "length": [172, 187, 204, 227, 242, 254, 292, 528, 547, 561, 588, 590, 596], "groundtruth": [172, 254, 292], "label": [172, 175, 176, 187, 189, 190, 191, 192, 195, 200, 204, 209, 227, 229, 230, 231, 232, 235, 239, 242, 251, 253, 258, 289, 291, 296, 297, 308, 329, 411, 525, 546, 547, 561, 562, 590, 596], "tpye": 172, "sum": [172, 258, 296, 549], "multipl": [172, 173, 174, 178, 179, 187, 188, 190, 191, 192, 193, 194, 198, 201, 204, 211, 218, 219, 221, 227, 228, 230, 231, 232, 233, 234, 238, 240, 242, 259, 297, 298, 299, 301, 307, 545, 547, 553, 562, 585, 587, 593, 594, 597], "distillationconfig": [172, 329, 549, 550, 562, 585], "criterion_conf": 172, "d_conf": [172, 550, 562, 585], "intermediatelayersknowledgedistillationlossconfig": [172, 549], "relationship": 172, "student_layer_nam": 172, "student_layer_output_process": 172, "teacher_layer_nam": 172, "teacher_layer_output_process": 172, "bert": [172, 183, 186, 187, 204, 223, 226, 227, 242, 528, 547, 549, 561, 570, 596, 600], "desir": [172, 200, 204, 239, 242, 596], "either": [172, 254, 292, 566, 570, 585, 589, 590], "serv": [172, 305, 511], "numer": [172, 258, 296, 563, 588, 590], "abbrevi": 172, "layer_nam": 172, "l1": 172, "selfknowledgedistillationlossconfig": [172, 549, 562], "student1_layer_name1": 172, "teacher_layer_name1": 172, "student2_layer_name1": 172, "student1_layer_name2": 172, "teacher_layer_name2": 172, "student2_layer_name2": 172, "soft": 172, "l2": [172, 587], "hard": [172, 546], "resblock": 172, "featur": [172, 187, 188, 200, 204, 227, 228, 239, 242, 524, 528, 545, 546, 548, 549, 562, 563, 564, 565, 569, 570, 573, 582, 587, 588, 592, 596], "deepst": 172, "fc": 172, "02": [172, 594, 600], "crossentropyloss": [172, 206, 549, 562], "sgd": [172, 211, 549, 562, 589, 599], "lr": [172, 549, 551, 562], "0001": [172, 549, 562, 589], "learning_r": [172, 562, 589, 599], "callabl": [172, 256, 294, 329, 490, 494, 510, 511], "altern": 172, "distil_loss": [172, 562], "mixedprecisionconfig": [172, 297, 327, 562, 563], "mixedprecis": [172, 259, 452, 500, 562], "fp16": [172, 324, 563, 590], "won": [172, 590], "work": [172, 249, 286, 527, 546, 549, 577, 580, 587, 591, 592, 594, 595], "mix_precis": [172, 288, 327, 562, 563], "converted_model": [172, 297, 562, 563], "exportconfig": 172, "dynamic_ax": [172, 247, 553], "qlinear": [172, 189, 196, 229, 236, 258, 296, 529, 553, 572, 600], "ax": [172, 247], "onnxqlinear2qdqconfig": 172, "onnxqlinear2qdq": 172, "new_model": 172, "torch2onnxconfig": [172, 553], "qdq_op_fp32_bia": [172, 247, 553], "torch2onnx": [172, 244, 250, 288], "qdq_op_int32_bia": [172, 247, 553], "qdq_op_fp32_bias_qdq": [172, 247, 553], "resnet50": [172, 528, 551, 556, 565, 569, 587, 590, 593, 600], "int8_onnx_config": [172, 553], "randn": [172, 553], "224": [172, 200, 239, 528, 546, 547, 551, 553, 556, 562, 565, 596, 599, 600], "batch_siz": [172, 177, 179, 184, 185, 186, 187, 188, 207, 217, 219, 224, 225, 226, 227, 228, 247, 526, 546, 547, 551, 553, 557, 562, 565, 590], "tf2onnxconfig": 172, "tf2onnx": [172, 244, 250, 288], "keyword": 172, "argument": [172, 327, 341, 449, 453, 458, 461, 467, 526], "output_graph": [172, 449, 453, 458, 461], "sigopt": [173, 174, 288, 588], "tpe": [173, 174, 288], "sigopttunestrategi": 175, "q_dataload": [175, 176, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 557, 597], "q_func": [175, 176, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 529, 562, 597], "eval_func": [175, 176, 287, 297, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 327, 329, 525, 546, 547, 549, 550, 551, 562, 590, 591, 597, 599], "q_hook": [175, 176, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320], "hpo": 175, "mandatori": [175, 176, 308, 562, 599], "yield": [175, 176, 185, 207, 225, 297, 308, 312, 327, 329, 546, 590, 597], "_": [175, 176, 308, 525, 526, 529, 544, 549, 551, 555, 561, 562, 563, 564, 565, 571, 575, 577, 579, 580, 584, 587, 590, 592, 593, 594, 595, 597, 599], "taken": [175, 176, 297, 308, 329, 590], "reserv": [175, 176], "abl": [175, 176, 297, 308, 329, 573, 582, 587, 590], "tuner": [175, 176, 249, 286, 297, 308, 329, 590], "scalar": [175, 176, 297, 308, 329, 561, 590], "pseudo": [175, 176, 308, 329, 595], "code": [175, 176, 205, 260, 284, 287, 308, 329, 404, 422, 525, 528, 529, 544, 546, 547, 549, 550, 551, 557, 558, 560, 561, 565, 567, 569, 570, 571, 573, 576, 582, 584, 585, 587, 588, 589, 590, 593, 594, 595, 596], "someth": [175, 176, 189, 229, 308, 329], "fefin": 176, "tpetunestrategi": 176, "basedatalod": [177, 217], "basedataload": [177, 182, 184, 217, 222, 224], "last_batch": [177, 179, 184, 186, 207, 217, 219, 224, 226], "rollov": [177, 179, 184, 186, 207, 217, 219, 224, 226], "collate_fn": [177, 179, 180, 184, 186, 207, 217, 219, 220, 224, 226, 547], "sampler": [177, 179, 181, 184, 186, 207, 217, 219, 221, 224, 226, 238, 250, 323, 551], "batch_sampl": [177, 179, 184, 186, 207, 217, 219, 224, 226], "num_work": [177, 179, 184, 186, 207, 217, 219, 224, 226, 562, 590], "pin_memori": [177, 179, 184, 186, 207, 217, 219, 224, 226], "shuffl": [177, 179, 184, 186, 207, 217, 219, 224, 226, 562, 590], "_generate_dataload": [177, 217], "default_col": [179, 219], "outer": [179, 219], "defaultdataload": [179, 186, 219, 226], "definit": [180, 185, 220, 225, 408, 421, 430, 479, 510], "style": [180, 194, 220, 234, 327, 524, 547, 557], "drop_last": [180, 185, 220, 225], "iterablefetch": [180, 220], "indexfetch": [180, 220], "base_dataload": [181, 221, 238, 250], "default_dataload": [181, 221, 238, 250], "fetcher": [181, 221, 238, 250], "mxnet_dataload": [181, 221, 238, 250], "onnxrt_dataload": [181, 221, 238, 250], "pytorch_dataload": [181, 221, 238, 250], "tensorflow_dataload": [181, 221, 238, 250], "mxnetdataload": [182, 222], "onnxrtbertdataload": [183, 223], "varient": [183, 223], "onnxrtdataload": [183, 223], "pytorchdataload": [184, 224], "data_sourc": [185, 225, 332], "__iter__": [185, 189, 225, 229, 546, 547, 562], "matter": [185, 225, 591], "iterablesampl": [185, 225], "squential": [185, 225], "your": [185, 187, 225, 227, 524, 544, 547, 551, 553, 559, 560, 562, 565, 568, 569, 570, 575, 576, 577, 579, 580, 582, 587, 593, 595, 597], "clear": [185, 225, 529, 555, 561, 562], "iterabledataset": [185, 189, 225, 229], "try": [185, 225, 525, 553, 587, 590, 597], "indexdataset": [185, 225], "__getitem__": [185, 189, 204, 225, 229, 242, 547, 562], "__len__": [185, 189, 225, 229, 547], "retriev": [185, 225, 488], "act": [185, 225, 523], "sequentialsampl": [185, 225], "sequenti": [185, 225, 287, 309, 311, 597], "batchsampl": [185, 225], "tfdatadataload": [186, 226], "tensorflow1": [186, 226], "coupl": [186, 226], "also": [186, 189, 204, 226, 229, 242, 251, 289, 307, 308, 524, 526, 528, 529, 544, 546, 552, 556, 558, 561, 562, 565, 570, 575, 576, 579, 582, 583, 584, 587, 588, 590, 591, 594, 597], "satisfi": [186, 226, 559], "usag": [186, 226, 254, 260, 287, 292, 327, 494, 544, 547, 551, 552, 561, 565, 573, 584, 589, 596], "tf1": [186, 226, 564], "although": [186, 226, 593], "tensorflowbertdataload": [186, 226], "tensorflowmodelzoobertdataload": [186, 226], "zoo": [186, 204, 226, 242, 528, 552, 556, 600], "tensorflowdataload": [186, 226], "pytorchbertdataset": [187, 227], "model_typ": [187, 227, 424, 547], "construct": [187, 190, 191, 194, 202, 207, 209, 210, 212, 227, 230, 231, 234, 296, 301, 305, 332, 523, 547, 551, 587, 597], "tensordataset": [187, 227, 547], "repo": [187, 227, 522, 547, 552, 575, 577, 579, 580, 601], "huggingfac": [187, 227, 335, 547, 552, 556, 570, 571, 572, 573, 594], "easi": [187, 227, 286, 544, 546, 553, 562, 588, 590, 593], "load": [187, 203, 204, 227, 241, 242, 297, 305, 308, 338, 339, 467, 494, 546, 575, 579, 583, 589, 590, 594], "classifi": [187, 227, 258, 296, 547, 549, 587], "squad": [187, 204, 227, 242, 255, 256, 258, 293, 294, 296, 547, 561, 587, 596, 600], "distilbert": [187, 227, 528, 547, 588, 600], "xlnet": [187, 227, 547], "xlm": [187, 227, 547, 600], "101": [187, 227, 258, 296, 561, 594, 600], "2043": [187, 227], "2001": [187, 227], "onnxrtbertdataset": [187, 227], "data_dir": [187, 227, 547], "model_name_or_path": [187, 227, 547, 562, 570, 571], "max_seq_length": [187, 204, 227, 242, 547, 596], "128": [187, 190, 191, 204, 227, 230, 231, 242, 547, 562, 590, 596], "do_lower_cas": [187, 203, 204, 227, 241, 242, 547, 596], "mrpc": [187, 227, 258, 296, 547, 561, 570, 587, 597, 600], "dynamic_length": [187, 227, 547], "shortcut": [187, 227, 547], "token": [187, 198, 201, 204, 227, 238, 240, 242, 250, 251, 252, 288, 289, 290, 335, 511, 544, 547, 561, 562, 593, 594, 596, 597], "longer": [187, 204, 227, 242, 547, 596], "truncat": [187, 204, 227, 242, 547, 596], "shorter": [187, 204, 227, 242, 547, 596], "lowercas": [187, 227, 547], "choic": [187, 227, 529, 544, 547, 561, 594], "qqp": [187, 227, 547, 561, 600], "qnli": [187, 227, 547, 561, 600], "rte": [187, 227, 547, 561, 600], "st": [187, 227, 547, 561], "cola": [187, 227, 547, 561, 600], "mnli": [187, 227, 547, 561, 600], "wnli": [187, 227, 547, 561, 600], "mobilebert": [187, 227, 547, 549, 600], "roberta": [187, 227, 547, 600], "uncas": [187, 204, 227, 242, 547, 596, 600], "load_and_cache_exampl": [187, 227], "cach": [187, 227, 424, 511, 554, 590], "convert_examples_to_featur": [187, 204, 227, 242], "max_length": [187, 227], "label_list": [187, 227, 258, 296], "output_mod": [187, 227], "classif": [187, 204, 227, 242, 258, 284, 296, 549, 553, 556, 561, 571, 587, 588], "pad_token": [187, 227], "pad_token_segment_id": [187, 227], "mask_padding_with_zero": [187, 227], "inputfeatur": [187, 204, 227, 242], "properti": [187, 227, 411, 560, 586], "input_id": [187, 204, 227, 242, 562], "vocabulari": [187, 203, 204, 227, 241, 242, 596], "attention_mask": [187, 227, 562], "usual": [187, 227, 549, 585, 590, 594], "NOT": [187, 227, 555, 559], "token_type_id": [187, 227, 562], "segment": [187, 227, 252, 254, 290, 292], "portion": [187, 227], "them": [187, 227, 525, 546, 553, 555, 557, 585, 587, 597], "problem": [187, 227, 258, 296, 561, 563, 583], "regress": [187, 227], "seq_length": [187, 227], "tensorflowbertdataset": [187, 227], "root": [187, 188, 189, 192, 227, 228, 229, 232, 258, 296, 511, 546, 547, 551, 561, 562, 599], "label_fil": [187, 204, 227, 242, 547, 596], "tfrecord": [187, 188, 189, 227, 228, 229, 547], "guid": [187, 227, 525, 528, 547, 549, 559, 565, 573, 582, 601], "parsedecodebert": [187, 227], "tensorflowmodelzoobertdataset": [187, 188, 227, 228], "num_cor": [187, 188, 192, 227, 228, 232, 547], "28": [187, 188, 192, 227, 228, 232, 547, 600], "coco": [188, 195, 199, 228, 235, 254, 258, 292, 296, 561, 587], "parsedecodecoco": [188, 228], "cocorecorddataset": [188, 228], "interleav": [188, 228, 547], "parallel": [188, 228, 547, 562, 597], "cocoraw": [188, 228, 546, 547], "img_dir": [188, 228, 547], "val2017": [188, 228, 547], "anno_dir": [188, 228, 547], "annot": [188, 228, 254, 292, 327, 547, 561, 587], "instances_val2017": [188, 228, 547], "json": [188, 204, 228, 242, 467, 494, 547, 564, 583, 596], "raw": [188, 192, 195, 228, 232, 235, 317, 556, 561, 597], "wai": [188, 189, 192, 228, 229, 232, 494, 526, 544, 546, 547, 561, 562, 565, 568, 583, 585, 587, 590, 594, 597, 599], "jpg": [188, 192, 194, 228, 232, 234, 547], "imag": [188, 189, 192, 194, 200, 204, 228, 229, 232, 234, 239, 242, 254, 292, 544, 547, 551, 553, 587, 589, 594, 595, 596, 600], "coconpi": [188, 228, 547], "npy_dir": [188, 228, 547], "npy": [188, 228, 547], "tensorflowdataset": [189, 229], "pytorchdataset": [189, 229], "mxnetdataset": [189, 229], "onnxrtqldataset": [189, 229], "onnxrtitdataset": [189, 229], "IT": [189, 196, 229, 236, 588], "pytorchmxnetwrapdataset": [189, 229], "datafunc": [189, 229], "pytorchmxnetwrapfunct": [189, 204, 229, 242], "framework_dataset": [189, 229], "convent": [189, 229, 254, 292, 549, 594], "imageclassifi": [189, 229], "choos": [189, 229, 544, 558, 559, 570, 592, 594, 597, 599], "tensorflow_itex": [189, 192, 194, 196, 229, 232, 234, 236, 589], "onnxrt_qdq": [189, 196, 229, 236, 589], "onnxrt_qlinearop": [189, 196, 204, 229, 236, 242, 589], "onnxrt_integerop": [189, 196, 204, 229, 236, 242, 589], "pytorch_ipex": [189, 196, 229, 236, 562, 589, 599], "pytorch_fx": [189, 196, 229, 236, 562, 589], "dataset_registri": [189, 229], "dataset_typ": [189, 229], "dataset_format": [189, 229], "data_format": [189, 200, 229, 239], "raw_imag": [189, 229], "overwrit": [189, 229, 575, 579], "download_url": [189, 229], "filenam": [189, 229, 339, 463, 487, 494, 547], "md5": [189, 229], "download": [189, 229, 415, 438, 439, 441, 442, 475, 544, 547, 559, 592], "address": [189, 229, 511, 523, 544, 563, 588], "gen_bar_updat": [189, 229], "progress": [189, 229, 576, 582, 587, 590], "bar": [189, 229, 544, 582], "check_integr": [189, 229], "fpath": [189, 229], "checksum": [189, 229], "calculate_md5": [189, 229], "chunk_siz": [189, 229], "cifar10": [189, 229, 547], "cifar100": [189, 229, 547], "otherwis": [189, 204, 229, 242, 523, 547, 577, 580, 589, 596], "www": [189, 229, 547, 600], "toronto": [189, 229, 547], "edu": [189, 229, 547], "kriz": [189, 229, 547], "cifar": [189, 229, 547, 600], "tar": [189, 229, 547, 577, 580], "gz": [189, 229, 547, 577, 580], "manual": [189, 229, 547, 565, 571, 573, 576], "subset": [189, 192, 229, 232, 547], "internet": [189, 229, 544, 547], "put": [189, 229, 547, 549, 587], "again": [189, 229, 547, 591], "pytorchcifar10": [189, 229], "mxnetcifar10": [189, 229], "tensorflowcifar10": [189, 229], "pytorchcifar100": [189, 229], "mxnetcifar100": [189, 229], "tensorflowcifar100": [189, 229], "mnist": [189, 229, 547, 551], "modifi": [189, 216, 229, 473, 525, 544, 551, 555, 599], "nation": [189, 229, 523], "institut": [189, 229], "standard": [189, 204, 229, 242, 553, 561, 596, 597], "technologi": [189, 229, 562, 586], "fashionmnist": [189, 229, 547], "npz": [189, 229, 547], "idx1": [189, 229, 547], "ubyt": [189, 229, 547], "idx3": [189, 229, 547], "t10k": [189, 229, 547], "pytorchmnist": [189, 229], "mxnetmnist": [189, 229], "tensorflowmnist": [189, 229], "pytorchfashionmnist": [189, 229], "mxnetfashionmnist": [189, 229], "tensorflowfashionmnist": [189, 229], "imagefold": [189, 229, 547, 551, 562], "expect": [189, 229, 342, 464, 523, 524, 554, 582, 590, 597], "subfold": [189, 229], "belong": [189, 229, 247, 301, 590], "class_1": [189, 229, 547], "xxx": [189, 229, 524, 547, 562], "png": [189, 229, 547], "xxy": [189, 229, 547], "xxz": [189, 229, 547], "class_n": [189, 229, 547], "123": [189, 229, 547, 596], "nsdf3": [189, 229, 547], "asd932_": [189, 229, 547], "categori": [189, 229, 253, 291, 545, 547, 572], "mxnetimagefold": [189, 229], "tensorflowtfrecorddataset": [189, 229], "tensorflowimagerecord": [189, 229], "imagenet": [189, 192, 200, 229, 232, 239, 526, 544, 562, 571, 587, 595, 596, 599, 600], "000": [189, 229, 528, 547], "001": [189, 229, 547, 551, 594, 599], "099": [189, 229, 547], "tensorflowvocrecord": [189, 229], "pascal": [189, 229], "voc": [189, 229, 258, 296], "2012": [189, 229], "00000": [189, 229], "00004": [189, 229], "00001": [189, 229], "00003": [189, 229], "dummydataset": [190, 191, 230, 231], "127": [190, 191, 230, 231, 547, 590, 594], "float32": [190, 191, 204, 230, 231, 242, 254, 292, 529, 545, 547, 562, 590, 594, 596], "rang": [190, 191, 204, 230, 231, 242, 327, 329, 528, 529, 547, 549, 550, 551, 562, 585, 587, 590, 594, 596], "stand_norm": [190, 191, 230, 231, 547], "dummy_v2": [191, 231, 546, 547], "sparse_dummy_v2": [191, 231, 547], "label_shap": [191, 231, 547], "sparsedummydataset": [191, 231], "dense_shap": [191, 231, 547], "sparse_ratio": [191, 231, 547], "imagenetraw": [192, 232, 547], "data_path": [192, 232, 547], "image_list": [192, 232, 547], "img1": [192, 232, 547], "img2": [192, 232, 547], "imgx": [192, 232, 547], "val_map": [192, 232, 547], "txt": [192, 232, 544, 547, 559], "pytorchimagenetraw": [192, 232], "mxnetimagenetraw": [192, 232], "tensorflowimagenetraw": [192, 232], "inteltensorflow": [192, 194, 232, 234, 559], "tensorflowimagenetdataset": [192, 232], "onnxrtimagenetdataset": [192, 232], "bert_dataset": [193, 198, 233, 238, 250, 288], "coco_dataset": [193, 198, 233, 238, 250, 288], "dummy_dataset": [193, 198, 233, 238, 250, 288], "dummy_dataset_v2": [193, 198, 233, 238, 250, 288], "imagenet_dataset": [193, 198, 233, 238, 250, 288], "style_transfer_dataset": [193, 198, 233, 238, 250, 288], "styletransferdataset": [194, 234], "content_fold": [194, 234, 547], "style_fold": [194, 234, 547], "crop_ratio": [194, 234, 547], "resize_shap": [194, 234, 547], "256": [194, 200, 234, 239, 547, 551, 562, 596], "image_format": [194, 234, 547], "holder": [194, 234, 547], "labelbalancecocorecordfilt": [195, 235], "balanc": [195, 235, 586, 594], "labelbalancecocorawfilt": [195, 235], "tensorflowfilt": [196, 236], "onnxrtqlfilt": [196, 236], "onnxrtitfilt": [196, 236], "pytorchfilt": [196, 236], "mxnetfilt": [196, 236], "filter_registri": [196, 236], "filter_typ": [196, 236], "__call__": [196, 236], "coco_filt": [197, 198, 237, 238, 250, 288], "imagenet_transform": [198, 201, 238, 240, 250, 288], "parsedecodecocotransform": 199, "decod": [199, 200, 239, 251, 289, 561, 596], "quantizedinput": [200, 239, 596], "labelshift": [200, 239, 596], "label_shift": [200, 239, 596], "parsedecodeimagenet": [200, 239, 596], "proto": [200, 204, 239, 242, 596], "parsedecodeimagenettransform": [200, 239], "tensorflowresizecropimagenettransform": [200, 239], "random_crop": [200, 239, 596], "resize_sid": [200, 239, 596], "resize_method": [200, 239], "bilinear": [200, 204, 239, 242, 596], "random_flip_left_right": [200, 239, 596], "mean_valu": [200, 239, 596], "channels_last": [200, 239, 565], "subpixel": [200, 239], "rgb": [200, 239], "seri": [200, 239, 528, 559, 562, 596], "applic": [200, 239, 478, 509, 511, 544, 553, 565, 582, 588, 594, 595, 596], "crop": [200, 204, 239, 242, 547, 596], "flip": [200, 204, 239, 242, 596], "left": [200, 204, 239, 242, 544, 576, 582, 594, 596], "right": [200, 239, 254, 292, 523, 525, 544, 582, 594, 596], "std": [200, 204, 239, 242, 562, 596], "bilinearimagenettransform": [200, 239], "central_fract": [200, 239, 596], "875": [200, 239, 596], "fraction": [200, 239, 596], "onnxbilinearimagenettransform": [200, 239], "onnxresizecropimagenettransform": [200, 239], "std_valu": [200, 239], "229": [200, 239, 562, 600], "225": [200, 239, 562, 600], "resizewithaspectratio": [200, 239], "87": [200, 239, 594, 600], "inter_pol": [200, 239], "cv2": [200, 239], "inter_area": [200, 239], "aspect": [200, 204, 239, 242, 596], "postprocess_cl": [202, 212, 562], "user_postprocess": [202, 212], "convert_to_unicod": [203, 241], "unicod": [203, 241], "assum": [203, 241, 254, 265, 292, 529, 555, 582], "utf": [203, 241], "load_vocab": [203, 241], "vocab_fil": [203, 204, 241, 242, 596], "convert_by_vocab": [203, 241], "vocab": [203, 241], "whitespace_token": [203, 241], "whitespac": [203, 241, 256, 294], "clean": [203, 241, 380, 524, 562], "piec": [203, 241, 251, 289, 553, 561], "fulltoken": [203, 241], "tokenzi": [203, 241], "basictoken": [203, 241], "punctuat": [203, 241, 251, 256, 289, 294], "lower": [203, 204, 241, 242, 256, 294, 313, 494, 550, 587, 588, 590, 594, 596, 597], "wordpiecetoken": [203, 241], "unk_token": [203, 241], "unk": [203, 241], "max_input_chars_per_word": [203, 241], "200": [203, 241, 525, 597], "wordpiec": [203, 204, 241, 242, 596], "concat_gener": [204, 242], "inc": [204, 242, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 523, 528, 565, 572, 582, 588, 589, 592], "tensorflowtransform": [204, 242], "mxnettransform": [204, 242], "pytorchtransform": [204, 242], "onnxrtqltransform": [204, 242], "onnxrtittransform": [204, 242], "transform_registri": [204, 242], "transform_typ": [204, 242], "basetransform": [204, 242], "tensorflowwrapfunct": [204, 242], "transform_func": [204, 242], "pytorchmxnettransform": [204, 242], "get_torchvision_map": [204, 242], "torchvis": [204, 242, 544, 552, 556, 565, 571], "composetransform": [204, 242], "transform_list": [204, 242, 596], "compos": [204, 242, 332, 596], "croptoboundingbox": [204, 242, 596], "offset_height": [204, 242, 596], "offset_width": [204, 242, 596], "target_height": [204, 242, 596], "target_width": [204, 242, 596], "box": [204, 242, 254, 258, 292, 296, 525, 544, 561, 565, 576, 582, 595, 596, 597], "coordin": [204, 242, 312, 596, 597], "top": [204, 242, 249, 258, 273, 278, 286, 296, 561, 582, 596], "corner": [204, 242, 529, 596], "horizont": [204, 242, 596], "mxnetcroptoboundingbox": [204, 242], "onnxrtcroptoboundingbox": [204, 242], "tensorflowcroptoboundingbox": [204, 242], "resizewithratio": [204, 242, 596], "min_dim": [204, 242, 596], "800": [204, 242, 596], "max_dim": [204, 242, 596], "1365": [204, 242, 596, 600], "constant_valu": [204, 242], "longest": [204, 242, 596], "side": [204, 242, 544, 547, 576, 594, 596], "doesn": [204, 242, 529, 551, 562, 583, 599], "exce": [204, 242, 596], "tensorflowresizewithratio": [204, 242], "perm": [204, 242, 596], "permut": [204, 242, 596], "tensorflowtranspos": [204, 242], "mxnettranspos": [204, 242], "pytorchtranspos": [204, 242], "randomverticalflip": [204, 242, 596], "randomli": [204, 242, 266, 312, 526, 596, 597], "tensorflowrandomverticalflip": [204, 242], "randomhorizontalflip": [204, 242, 562, 596], "tensorflowrandomhorizontalflip": [204, 242], "toarrai": [204, 242, 596], "pil": [204, 242, 596], "casttftransform": [204, 242], "castonnxtransform": [204, 242], "castpytorchtransform": [204, 242], "centercroptftransform": [204, 242], "center": [204, 242, 527, 528, 559, 596, 597], "paddedcentercroptransform": [204, 242], "crop_pad": [204, 242], "resizetftransform": [204, 242], "nearest": [204, 242, 596], "bicub": [204, 242, 596], "resizepytorchtransform": [204, 242], "randomcroptftransform": [204, 242], "randomresizedcroppytorchtransform": [204, 242], "randomresizedcropmxnettransform": [204, 242], "randomresizedcroptftransform": [204, 242], "normalizetftransform": [204, 242], "rescal": [204, 242, 596], "normal": [204, 242, 256, 294, 494, 562, 584, 594, 596], "deviat": [204, 242, 596], "broadcast": [204, 242, 551, 596], "rescalekeraspretraintransform": [204, 242], "rescaletftransform": [204, 242], "rescaletransform": [204, 242], "alignimagechanneltransform": [204, 242], "dim": [204, 242, 594, 596], "align": [204, 242, 523, 596], "w": [204, 242, 587, 594, 596], "must": [204, 242, 254, 292, 524, 525, 544, 545, 546, 559, 590, 596], "pytorchalignimagechannel": [204, 242], "tondarraytransform": [204, 242], "resizemxnettransform": [204, 242], "resizetransform": [204, 242], "cropresizetftransform": [204, 242], "boundari": [204, 242, 596], "area": [204, 242, 254, 292, 561, 596], "pytorchcropresizetransform": [204, 242], "mxnetcropresizetransform": [204, 242], "cropresizetransform": [204, 242], "centercroptransform": [204, 242], "mxnetnormalizetransform": [204, 242], "pytorchnormalizetransform": [204, 242], "normalizetransform": [204, 242], "randomcroptransform": [204, 242], "randomresizedcroptransform": [204, 242], "get_final_text": [204, 242], "pred_text": [204, 242], "orig_text": [204, 242], "project": [204, 242, 367, 390, 391, 415, 522, 523, 524, 588, 593, 597, 601], "squadexampl": [204, 242], "qas_id": [204, 242], "question_text": [204, 242], "doc_token": [204, 242], "orig_answer_text": [204, 242], "start_posit": [204, 242], "end_posit": [204, 242], "is_imposs": [204, 242], "simpl": [204, 242, 544, 559, 562, 593, 594, 597], "answer": [204, 242, 255, 256, 293, 294, 523, 587, 596, 600], "posit": [204, 242, 523, 544, 561, 565], "unique_id": [204, 242], "example_index": [204, 242], "doc_span_index": [204, 242], "token_to_orig_map": [204, 242], "token_is_max_context": [204, 242], "input_mask": [204, 242, 562], "segment_id": [204, 242, 562], "read_squad_exampl": [204, 242], "input_fil": [204, 242], "doc_strid": [204, 242, 596], "max_query_length": [204, 242, 596], "output_fn": [204, 242], "inputbatch": [204, 242], "collecttransform": [204, 242], "10833": [204, 242], "tfsquadv1posttransform": [204, 242], "n_best_siz": [204, 242, 596], "20": [204, 242, 586, 594, 596, 599, 600], "384": [204, 242, 596], "64": [204, 242, 526, 594, 596, 600], "max_answer_length": [204, 242, 596], "30": [204, 242, 552, 556, 558, 596, 600], "nbest_predict": [204, 242, 596], "question": [204, 242, 255, 256, 293, 294, 523, 524, 529, 559, 565, 587, 594, 596, 600], "anoth": [204, 242, 251, 260, 289, 339, 549, 563, 575, 579, 596, 597], "long": [204, 242, 554, 596], "document": [204, 242, 327, 524, 534, 551, 563, 567, 577, 580, 581, 592, 596, 598], "chunk": [204, 242, 596], "tfmodelzoocollecttransform": [204, 242], "tfsquadv1modelzooposttransform": [204, 242], "squadv1": [204, 242, 596], "see": [204, 242, 251, 289, 523, 525, 527, 544, 560, 562, 575, 576, 579, 582, 583, 594, 595, 597, 600], "parsedecodevoctransform": [204, 242], "conf_fname_or_obj": [205, 214, 243, 249, 259, 260, 261, 262, 264, 273, 278, 286], "thei": [205, 327, 523, 549, 555, 561, 562, 563, 570, 584, 587], "command": [205, 329, 479, 487, 544, 551, 565, 567, 570, 575, 579, 583], "possibl": [205, 356, 544, 585, 587, 591, 597], "unnecessari": [205, 562], "tensorflowcrossentropyloss": 206, "pytorchcrossentropyloss": 206, "tensorflowsparsecategoricalcrossentropi": 206, "sparsecategoricalcrossentropyloss": 206, "setter": 207, "calib_dataload": [207, 287, 308, 525, 528, 546, 547, 556, 557, 561, 562, 590, 591], "reason": [207, 523, 546, 595, 597], "know": [207, 480, 551, 592], "infom": [207, 247], "known": [207, 312, 553, 562, 587, 595, 597], "open": [208, 250, 288, 332, 521, 523, 528, 544, 553, 554, 562, 577, 580, 583, 588], "librari": [208, 250, 288, 521, 524, 528, 559, 562, 567, 576, 582, 588, 590], "metric_cl": [209, 296, 562], "user_metr": [209, 296], "alwai": [209, 254, 292, 296, 561, 562], "recommend": [209, 296, 529, 547, 553, 555, 573, 576, 581, 583, 587, 589, 597], "set_backend": 210, "tensorflowoptim": 211, "pytorchoptim": 211, "main": [211, 284, 474, 511, 525, 551, 556, 562, 569, 571, 583, 587, 590], "optimizer_registri": 211, "optimizer_typ": 211, "cross": [211, 258, 296, 557, 597], "tensorflowsgd": 211, "tensorflowadamw": 211, "tensorflow_addon": 211, "adamw": 211, "tensorflowadam": 211, "adam": [211, 599], "pytorchsgd": 211, "record_output": 213, "output_process": 213, "help": [213, 260, 356, 494, 564, 565, 571, 582, 597, 598], "get_activ": 213, "f": [216, 549, 551, 590, 594], "pickle_modul": 216, "pickle_protocol": 216, "_use_new_zipfile_seri": 216, "prepare_prun": 216, "opt": [216, 528, 570, 594], "tensorflowimagefold": 229, "qlinear2qdq": [244, 250, 288], "qlinearop": [245, 558, 573, 590], "check_model": 245, "modelproto": [245, 247, 297, 564], "onnx_qlinear_to_qdq": 245, "input_name_to_nod": 245, "destin": [245, 260], "tf_to_fp32_onnx": 246, "tf_to_int8_onnx": 246, "int8_model": [246, 247, 529], "update_weight_bia": 247, "fp32_onnx_path": [247, 248], "wegiht": 247, "set_data_typ": 247, "weight_typ": 247, "activation_typ": 247, "get_node_map": 247, "module_node_map": 247, "get_quantizable_onnx_op": 247, "quantize_nod": 247, "build_scale_map": 247, "int8_scale_info": 247, "scale_zp_dict": 247, "set_scale_info": 247, "int8_onnx_model": 247, "int8_onnx_path": 247, "recalculate_bia": 247, "recalcul": [247, 594], "remove_nodes_by_nam": 247, "sub_graph_with_int32_bia": 247, "a_info": 247, "b_info": 247, "bias_nam": 247, "int32": [247, 547], "nodeproto": 247, "_type_": 247, "qdq_fp32_bia": 247, "excut": 247, "qdq_int32_bia": 247, "qdq_fp32_bias_qdq": 247, "torch_to_fp32_onnx": 247, "do_constant_fold": 247, "verbos": [247, 312], "torch_to_int8_onnx": 247, "u8s8": 247, "optionl": 247, "onnx2numpy_dtyp": 248, "onnx_node_typ": 248, "dummydataread": 248, "dataread": 248, "achiev": [249, 286, 553, 561, 562, 585, 587, 588, 590, 595, 597], "across": [249, 259, 286, 297, 548, 562, 587, 594, 597], "variou": [249, 259, 286, 297, 558, 565, 589], "dl": [249, 259, 273, 278, 286, 297, 557, 569, 582, 588], "bring": [249, 286, 576, 590, 594], "unifi": [249, 286, 529, 546, 557, 558, 562, 564], "vari": [249, 273, 278, 286, 586, 594, 600], "roc": [249, 258, 273, 278, 286, 296], "flexibl": [249, 273, 278, 286, 549, 587], "via": [249, 273, 278, 286, 511, 523, 551, 558, 562, 565, 582, 587], "popular": [250, 288, 521, 528, 529, 549, 552, 553, 556, 562, 587, 590, 597, 598], "compress": [250, 273, 278, 288, 307, 329, 521, 528, 534, 549, 558, 562, 582, 584, 585, 587, 588, 590, 594, 598, 600], "techniqu": [250, 288, 521, 528, 558, 562, 565, 585, 587, 589, 590, 598, 599, 600], "bleu": [250, 252, 257, 288, 290, 295, 561], "bleu_util": [250, 257, 288, 295], "coco_label_map": [250, 257, 288, 295], "coco_tool": [250, 257, 288, 295], "evaluate_squad": [250, 257, 288, 295], "f1": [250, 255, 257, 258, 288, 293, 295, 296, 551, 561, 562, 593, 600], "basic_na": [250, 263, 288], "dyna": [250, 263, 288, 526, 558, 589], "nas_util": [250, 263, 288], "pruner_legaci": [250, 288], "gradient_sensit": [250, 269, 288], "group_lasso": [250, 269, 288], "pruning_recip": [250, 288], "tile_pattern": [250, 274, 275], "pytorch_prun": [250, 288], "logger": [250, 279, 288, 330, 333, 339, 475, 483], "prune_util": [250, 279, 288], "graph_optim": [250, 288, 415, 450, 454, 455, 475, 483, 499], "mixed_precis": [250, 288, 415, 450, 475, 483, 499, 562], "model_convers": [250, 288], "pruning_v2": [250, 288], "unicoderegex": [251, 289], "hoc": [251, 289], "hack": [251, 289], "recogn": [251, 289, 597], "nondigit_punct_r": [251, 289], "compil": [251, 289, 562, 586], "express": [251, 289, 523], "preced": [251, 289, 594], "digit": [251, 289, 588], "punct_nondigit_r": [251, 289], "symbol_r": [251, 289], "bleu_token": [251, 289], "mose": [251, 289], "smt": [251, 289], "mosesdecod": [251, 289], "mteval": [251, 289], "v14": [251, 289], "pl": [251, 289], "l954": [251, 289], "l983": [251, 289], "bilingu": [251, 289], "understudi": [251, 289], "qualiti": [251, 289], "machin": [251, 289, 354, 544, 553, 559, 568, 582, 588, 594, 595], "translat": [251, 252, 289, 290, 587, 597], "natur": [251, 289, 553], "approxim": [251, 252, 289, 290, 561], "glue": [251, 258, 289, 296, 547, 561, 562, 571], "word": [251, 289, 561, 587], "ngram": [251, 289, 561], "breviti": [251, 252, 289, 290, 561], "penalti": [251, 252, 289, 290, 561], "doe": [251, 289, 547, 561, 562, 592, 596], "beam": [251, 289, 561], "tensor2tensor": [252, 290], "bleu_hook": [252, 290], "compute_bleu": [252, 290], "reference_corpu": [252, 290], "translation_corpu": [252, 290], "max_ord": [252, 290], "use_bp": [252, 290], "against": [252, 290], "gram": [252, 290], "bleu_scor": [252, 290], "third": [254, 292, 544, 560], "parti": [254, 292, 560, 590], "pycocotool": [254, 292, 554, 559], "noth": [254, 292, 597], "thu": [254, 292, 562, 587, 590], "cannot": [254, 292, 482, 525, 553, 554, 563, 595], "slim": [254, 292, 303, 305, 564, 587], "jonathanhuang": [254, 292], "image_id": [254, 292, 561], "encod": [254, 292, 596], "multi": [254, 292, 352, 526, 546, 547, 558, 562, 584, 590, 597], "invok": [254, 292], "groundtruth_dict": [254, 292], "exportgroundtruthtococo": [254, 292], "groundtruth_boxes_list": [254, 292], "groundtruth_classes_list": [254, 292], "max_num_class": [254, 292], "output_path": [254, 292], "detections_list": [254, 292], "exportdetectionstococo": [254, 292], "detection_boxes_list": [254, 292], "detection_scores_list": [254, 292], "detection_classes_list": [254, 292], "cocowrapp": [254, 292], "loadannot": [254, 292], "cocoevalwrapp": [254, 292], "agnostic_mod": [254, 292], "computemetr": [254, 292], "detection_typ": [254, 292], "bbox": [254, 292, 525, 561], "hold": [254, 292, 312, 547], "iou_typ": [254, 292], "iou_thr": [254, 258, 292, 296, 561], "map_point": [254, 258, 292, 296, 561], "cocoev": [254, 292], "mscoco": [254, 292], "Then": [254, 292, 544, 575, 577, 579, 580, 594, 597], "exportsingleimagegroundtruthtococo": [254, 292], "next_annotation_id": [254, 292], "category_id_set": [254, 292], "groundtruth_box": [254, 292], "groundtruth_class": [254, 292], "groundtruth_mask": [254, 292], "groundtruth_is_crowd": [254, 292], "ingest": [254, 292], "ones": [254, 292, 587], "exportsingleimagedetectionstococo": [254, 292], "uniqu": [254, 287, 292, 381, 382, 590], "assign": [254, 292, 339, 544, 551, 589], "drop": [254, 282, 292, 562, 563, 576, 587, 600], "num_gt_box": [254, 292], "num_detect": [254, 258, 292, 296, 561, 562, 599], "image_height": [254, 292], "image_width": [254, 292], "detection_mask": [254, 292], "crowd": [254, 292], "insid": [254, 292, 549, 550, 583, 587, 597], "exportsingleimagedetectionboxestococo": [254, 292], "detection_box": [254, 292, 562, 599], "detection_scor": [254, 292, 562, 599], "detection_class": [254, 292, 562, 599], "exporsingleimagedetectionboxestococo": [254, 292], "exportsingleimagedetectionmaskstococo": [254, 292], "allenai": [255, 256, 293, 294], "bi": [255, 256, 293, 294], "att": [255, 256, 293, 294], "flow": [255, 256, 293, 294, 525, 526, 562], "f1_score": [255, 256, 293, 294], "ground_truth": [255, 256, 293, 294], "ground": [255, 256, 293, 294], "truth": [255, 256, 293, 294], "metric_max_over_ground_truth": [255, 256, 293, 294], "metric_fn": [255, 256, 293, 294], "exact_match_scor": [255, 293], "exact": [255, 293], "averag": [255, 256, 258, 293, 294, 296, 561, 562, 597], "articl": [255, 256, 293, 294], "paragraph": [255, 256, 293, 294], "qa": [255, 256, 293, 294], "cantain": [255, 256, 293, 294], "normalize_answ": [256, 294], "extra": [256, 294, 562], "replac": [256, 294, 494, 551, 562, 573, 592], "newlin": [256, 294], "tab": [256, 294, 392, 510, 582, 595], "harmon": [256, 258, 294, 296], "recal": [256, 258, 294, 296], "answer_start": [256, 294], "177": [256, 294], "denver": [256, 294], "bronco": [256, 294], "nfl": [256, 294], "team": [256, 294, 523, 591], "afc": [256, 294], "super": [256, 294, 526], "bowl": [256, 294], "50": [256, 294, 526, 594, 600], "56be4db0acb8001400a502ec": [256, 294], "form": [256, 294, 544, 549, 582], "percentag": [256, 294, 599], "tensorflowmetr": [258, 296], "maintain": [258, 296, 523, 524, 528, 564, 565, 577, 580, 587, 592], "pytorchmetr": [258, 296], "mxnetmetr": [258, 296], "onnxrtqlmetr": [258, 296], "onnxrtitmetr": [258, 296], "metric_registri": [258, 296], "metric_typ": [258, 296], "decorator_metr": [258, 296], "basemetr": [258, 296], "single_output": [258, 296], "hvd": [258, 296, 551], "wrappytorchmetr": [258, 296], "wrapmxnetmetr": [258, 296], "wraponnxrtmetr": [258, 296], "proport": [258, 296], "were": [258, 296, 568, 587], "pred_list": [258, 296], "pytorchloss": [258, 296], "mae": [258, 296, 561], "compare_label": [258, 296, 561], "actual": [258, 296, 551, 594], "rmse": [258, 296, 561, 597], "squar": [258, 296, 317, 561, 594, 597], "tensorflowtopk": [258, 296], "k": [258, 296, 561, 587], "among": [258, 296, 576, 594], "outcom": [258, 296], "num_correct": [258, 296], "num_sampl": [258, 296], "generaltopk": [258, 296], "cocomapv2": [258, 296, 561], "anno_path": [258, 296, 561], "map_kei": [258, 296], "detectionboxes_precis": [258, 296], "output_index_map": [258, 296, 561], "tensorflowmap": [258, 296], "tensorflowcocomap": [258, 296], "tensorflowvocmap": [258, 296], "squadf1": [258, 296, 561], "miou": [258, 296], "num_class": [258, 296], "21": [258, 296, 570, 571, 588, 594, 600], "iou": [258, 296], "intersect": [258, 296, 529, 561], "union": [258, 296, 329, 561], "onnxrtglu": [258, 296], "dlrm": [258, 296], "modelconvers": 260, "typic": [260, 287, 526, 528, 550, 552, 556, 587, 600], "basicna": 261, "model_build": [261, 264], "conf_fnam": 261, "nasbas": [264, 526], "nas_registri": 265, "nas_method": 265, "create_search_space_pool": 265, "idx": [265, 547], "enumer": [265, 329, 343, 444, 450, 476, 529, 549, 550, 551, 562, 585, 587, 595], "find_pareto_front": 265, "pareto": [265, 526], "front": [265, 526], "n_point": 265, "n_metric": 265, "n_pareto_point": 265, "searcher": 266, "gridsearch": 266, "grid": [266, 526], "whole": [266, 509, 544, 590], "randomsearch": 266, "42": [266, 586, 600], "bayesianoptimizationsearch": 266, "gradientsensitivityprun": 267, "pytorchmodel": [267, 268, 270, 271, 272, 306], "overwritten": [267, 268, 270, 271, 272, 570], "grouplassoprun": 268, "legaci": 269, "basicmagnitudeprun": 270, "lock": [271, 272, 558, 585, 587], "pruner_registri": 272, "clase": 272, "pruningconf": [273, 278], "tfpruningcallback": [273, 278], "input_model": [273, 278, 564, 595], "pure": [273, 278, 563, 587], "pattern_registri": 276, "pattern_typ": 276, "patternbas": 276, "mask_shap": [276, 277], "is_contigu": 276, "tile": 277, "tilepatternbas": 277, "tilepattern_1x1": 277, "1x1": [277, 549, 562, 587], "tilepattern_2x2": 277, "2x2": [277, 594], "tilepattern_1x16": 277, "1x16": 277, "tilepattern_4x1": 277, "tilepattern_1x2": 277, "1x2": [277, 594], "reset_non_value_to_default": 282, "non": [282, 339, 525, 586, 587, 597], "obejct": 282, "parse_not_to_prun": 282, "update_frequency_on_step": [283, 589], "max_sparsity_ratio_per_lay": [283, 589], "magnitudeprun": 283, "snipprun": 283, "snipmomentumprun": 283, "moreoev": 283, "least": [284, 562, 587, 597], "templat": [284, 288, 475, 483, 544, 562, 587], "tree": [284, 324], "huggingface_model": 284, "eager": [284, 341, 449, 453, 461, 551, 558, 590, 591, 595, 600], "config_file_path": 284, "pruner_info": 284, "quantconf": [286, 297], "server": [287, 288, 415, 422, 474, 475, 482, 483, 491, 494, 505, 507, 509, 544, 582], "seper": 287, "opt_model": [287, 562], "fulli": [287, 562, 590, 594], "train_func": [287, 329, 551, 562, 590], "contrib": 288, "experiment": [288, 526, 547, 550, 551, 553, 562, 587, 589, 592, 596], "base_model": [288, 299], "keras_model": [288, 299], "mxnet_model": [288, 299], "nets_factori": [288, 299], "onnx_model": [288, 299], "tensorflow_model": [288, 299], "torch_model": [288, 299], "tuning_sampl": [288, 316, 322], "tuning_spac": [288, 316, 322, 323, 325], "tuning_struct": [288, 316, 322, 323, 324], "auto_mixed_precis": [288, 316], "collect_layer_histogram": [288, 333], "create_obj_from_config": [288, 333], "kl_diverg": [288, 333], "load_huggingfac": [288, 333, 562], "ux": 288, "config_gener": [288, 415, 475], "configuration_wizard": [288, 415, 475], "db_manag": [288, 415, 475], "file_brows": [288, 415, 475], "jobs_manag": [288, 415, 475], "model_zoo": [288, 415, 475], "names_mapp": [288, 415, 475], "profil": [288, 367, 374, 389, 391, 392, 415, 475, 476, 486, 509, 514], "manage_workspac": [288, 415, 475], "workload": [288, 354, 475, 483, 494, 509, 514, 515, 588], "except": [288, 327, 339, 475, 483, 494, 509], "executor": [288, 342, 475, 483], "expiring_dict": [288, 475, 483], "github_info": [288, 475, 483], "hw_info": [288, 475, 483], "json_seri": [288, 475, 483], "proc": [288, 475, 483], "status_upd": [288, 475, 483], "yaml_util": [288, 475, 483], "web": [288, 474, 475, 528, 544, 595], "servic": [288, 475, 508, 509, 528, 582, 586], "commun": [288, 475, 509, 511, 523, 544], "router": [288, 475, 509], "inc_bench": [288, 475, 544, 556], "eval_metr": [297, 308, 329, 590], "frozen": [297, 305, 308, 431, 434, 544, 564], "savedmodel": [297, 305, 308, 600], "chould": 297, "onnx_ml_pb2": [297, 564], "hybirdblock": [297, 308], "paramt": [297, 329], "_mixedprecis": 297, "basemodel": 298, "plai": [298, 587, 588, 594], "role": [298, 587, 594], "kerasmodel": [300, 433], "get_model_fwk_nam": 301, "fwk": 301, "mxnetmodel": 302, "net": 303, "factori": [303, 396, 415, 450, 466, 471, 475, 486, 490], "tfslimnetsfactori": 303, "onnxmodel": 304, "get_model_typ": [305, 424], "validate_graph_nod": 305, "validate_and_inference_input_output": 305, "input_tensor_nam": 305, "output_tensor_nam": 305, "graph_sess": 305, "graph_def_sess": 305, "frozen_pb_sess": 305, "load_saved_model": 305, "saved_model_tag": 305, "signatur": 305, "saved_model_dir": 305, "tag": [305, 494, 594, 595], "metagraphdef": 305, "keras_sess": 305, "slim_sess": 305, "checkpoint_sess": 305, "estimator_sess": 305, "saved_model_sess": 305, "tensorflowbasemodel": 305, "tensorflowsavedmodelmodel": 305, "tensorflowqatmodel": 305, "tensorflowcheckpointmodel": 305, "checkpoint": [305, 338, 564], "tensorflowmodel": [305, 435], "pytorchbasemodel": 306, "pytorchfxmodel": 306, "ipexmodel": 306, "driven": [307, 528, 562, 563, 582, 584, 595], "objective_registri": 307, "objective_custom_registri": 307, "obj_cl": 307, "eural_compressor": 307, "objective_cl": 307, "user_object": 307, "__class__": 307, "__name__": 307, "objective_cfg": 307, "usr_cfg": 307, "user_obj_cfg": 307, "easili": [307, 529, 566, 570, 582, 584, 587, 594], "peak": [307, 584], "multiobject": [307, 504], "metric_criterion": 307, "metric_weight": 307, "obj_criterion": 307, "obj_weight": 307, "is_measur": 307, "calib_func": [308, 591], "entir": [308, 329, 525, 587, 594], "autotunestrategi": 309, "stage": [309, 311, 318, 549, 595, 597], "polici": [309, 311, 317, 523, 528, 586, 599, 601], "automixedprecisiontunestrategi": 310, "basictunestrategi": 311, "bayesiantunestrategi": 312, "acq_max": 312, "ac": 312, "gp": 312, "y_max": 312, "n_warmup": 312, "10000": 312, "n_iter": 312, "acquisit": 312, "gaussian": [312, 597], "relev": 312, "limit": [312, 339, 528, 549, 587, 595], "acq": 312, "randomst": 312, "scipi": 312, "x_max": 312, "targetspac": 312, "pbound": 312, "9527": [312, 562, 599], "allow": [312, 511, 544, 549, 551, 561, 562, 563, 589, 597, 599], "bayesianoptim": 312, "level": [313, 327, 336, 485, 523, 594, 597], "conservativetunestrategi": 313, "o0": [313, 597], "who": [313, 523], "exhaustivetunestrategi": 314, "hawq_v2tunestrategi": 315, "made": [315, 529, 590, 592, 597], "impact": [315, 592, 597], "msetunestrategi": 317, "mse_v2tunestrategi": 318, "revert": [318, 326, 597], "randomtunestrategi": 319, "strategy_registri": [320, 597], "tunestrategi": [320, 597], "tuningsamplerregistri": 323, "tuningsampl": 323, "tuningord": 323, "Not": [323, 324, 339, 478, 526], "tuningspac": [323, 324], "tuning_order_lst": 323, "initial_op_tuning_cfg": 323, "modelwisetuningsampl": 323, "tuning_items_prior": 323, "op_dtype_dict": 323, "optuningconfig": [323, 324, 325], "optypewisetuningsampl": 323, "opwisetuningsampl": 323, "fallbacktuningsampl": 323, "op_dtyp": 323, "accumul": [323, 597], "skip_first": 323, "tuningitem": 324, "item_typ": 324, "get_op_mode_by_query_ord": 324, "query_ord": 324, "pattern_to_intern": 324, "default_dtyp": 324, "pattern_to_path": 324, "quant_mode_from_pattern": 324, "internal_pattern": 324, "initial_tuning_cfg_with_quant_mod": 324, "op_name_typ": 324, "step1": 324, "step2": 324, "complet": [324, 529, 544, 590, 597, 599, 600], "step3": 324, "step4": 324, "step5": 324, "op_quant_mod": 325, "ordereddefaultdict": 326, "extract_data_typ": 326, "data_typ": 326, "sign": [326, 524, 544, 590, 593], "unsign": 326, "reverted_data_typ": 326, "signed_flag": 326, "get_adaptor_nam": 326, "fun": 327, "attribute1": 327, "module_debug_level1": 327, "debug": [327, 336, 396, 397, 401, 544, 575, 579, 583, 597], "function1": 327, "param1": 327, "param2": 327, "parameter1": 327, "parameter2": 327, "o": [327, 403, 559, 567, 586, 594], "function2": 327, "pep": 327, "484": 327, "output_model": [327, 546, 562, 595], "function3": 327, "section": [327, 544, 549, 550, 582, 587, 589, 599], "restructuredtext": 327, "liter": 327, "attributeerror": 327, "generator1": 327, "example_gener": 327, "exampleclass": 327, "param3": 327, "public": [327, 523, 577, 580], "attr1": 327, "attr2": 327, "attr5": 327, "api_doc_exampl": 328, "loop": [329, 525, 526, 555, 593, 597], "compressionmanag": 329, "callbacks_list": 329, "uesd": 329, "deal": 329, "Such": 329, "distillationcallbback": 329, "on_train_begin": [329, 525, 549, 550, 562, 585, 587, 590], "train_loop": [329, 562, 585], "on_epoch_begin": [329, 332, 549, 550, 562, 585, 587], "on_step_begin": [329, 332, 549, 550, 562, 585, 587], "on_after_compute_loss": [329, 549, 550, 562, 585], "backward": [329, 549, 550, 551, 562, 585, 587, 590, 592], "on_before_optimizer_step": [329, 549, 550, 562, 585, 587], "on_step_end": [329, 332, 549, 550, 562, 585, 587], "on_epoch_end": [329, 332, 549, 550, 562, 585, 587], "on_train_end": [329, 549, 550, 562, 585, 587, 590], "path_to_sav": 329, "manag": [329, 332, 358, 393, 416, 477, 493, 556, 562, 565, 566, 576], "summari": [329, 544, 577, 580, 586, 595], "orchestr": [329, 528, 558, 598], "pruningconfig": 329, "layerhistogramcollector": 330, "histogram": [330, 339, 544, 595], "layer_tensor": 330, "include_lay": 330, "diverg": [330, 334, 549, 597], "get_func_from_config": 332, "func_dict": 332, "get_preprocess": 332, "get_metr": 332, "get_postprocess": 332, "get_algorithm": 332, "algo": 332, "create_dataset": 332, "cfg_preprocess": 332, "cfg_filter": 332, "create_dataload": 332, "dataloader_cfg": 332, "create_eval_func": 332, "postprocess_cfg": 332, "fp32_baselin": [332, 529], "baselin": [332, 593, 595], "create_train_func": 332, "train_cfg": 332, "Their": 332, "auxiliari": 333, "pretrain": [335, 565, 571], "optimizedmodel": 335, "from_pretrain": [335, 562], "save_for_huggingface_upstream": [335, 562], "output_dir": [335, 487, 562, 570, 571], "msg": 336, "fatal": 336, "warn": [336, 544], "warin": 336, "alia": [336, 567, 572], "is_int8_model": 338, "checkpoint_dir": 338, "history_cfg": 338, "best_configur": 338, "best_model_weight": 338, "pt": [338, 564, 588, 591], "snapshot": [338, 513], "cfg_from_fil": 339, "yaml_fil": [339, 547, 551, 561], "lazyimport": 339, "lazi": 339, "till": [339, 597], "decorat": 339, "time_limit": 339, "get_siz": [339, 494], "seen": [339, 529], "recurs": 339, "compute_spars": 339, "fault_tolerant_fil": 339, "temporari": [339, 523], "equal_dict": 339, "d2": 339, "compare_kei": 339, "ignore_kei": 339, "ignor": [339, 547, 594], "cpuinfo": 339, "dump_elapsed_tim": [339, 529], "customized_msg": 339, "elaps": 339, "combine_histogram": 339, "old_hist": 339, "old": [339, 562, 592], "get_tensor_histogram": 339, "bin": [339, 554], "2048": 339, "get_all_fp32_data": 339, "get_tuning_histori": 339, "tuning_history_path": [339, 463], "num": [339, 561], "str2arrai": 339, "dequantizeweight": 339, "weight_tensor": 339, "min_filter_tensor": 339, "max_filter_tensor": 339, "scale_info": 339, "captureoutputtofil": 339, "tmp_file_path": 339, "stream": 339, "sy": [339, 568], "stderr": 339, "captur": 339, "statist": 339, "header": [339, 554], "field_nam": 339, "output_handl": 339, "printer": 339, "global_st": 339, "load_data_from_pkl": 339, "pkl": 339, "dump_data_to_loc": 339, "show_memory_info": 339, "hint": 339, "project_data": [340, 447, 452, 456, 459, 462, 469], "benchmark_data": 340, "dataloaderinterfac": [340, 456, 469], "dataloader_data": [340, 456, 469], "parse_arg": [341, 449, 453, 458, 461, 467], "benchmark_mod": 341, "set_eager_execut": [341, 449, 453, 461], "request_id": [342, 445, 463, 464, 487], "asd": [342, 464], "benchmark_id": 342, "benchmark_result_upd": 342, "benchmark_result_update_pytorch_script": 342, "neural_coder_perform": 342, "neural_coder_tim": 342, "pytorch_script_bench_optim": 342, "command_line_of_script": 342, "pytorch_script_bench_original_model": 342, "execute_real_benchmark": 342, "project_detail": [342, 445, 464], "benchmark_detail": 342, "benchmark_model": [343, 415, 475], "execute_benchmark": [343, 415, 475], "benchmarkconfiggener": 344, "configgener": 345, "workload_directori": 345, "configuration_path": 345, "graphoptimizationconfiggener": 346, "benchmark_config_gener": [347, 415, 475], "graph_optimization_config_gener": [347, 415, 475], "mixed_precision_config_gener": [347, 415, 475], "profiling_config_gener": [347, 415, 475], "pruning_config_gener": [347, 415, 475], "quantization_config_gener": [347, 415, 475], "mixedprecisionconfiggener": 348, "profilingconfiggener": 349, "pruningconfiggener": 350, "quantizationconfiggener": 351, "configurationpars": 352, "parse_list_valu": 352, "required_typ": 352, "parse_multidim_list": 352, "dimension": 352, "normalize_string_list": 352, "string_list": 352, "bracket": 352, "miss": [352, 587, 590], "get_predefined_configur": 354, "update_config_to_machine_specif": 354, "configuration_pars": [355, 415, 475], "get_boundary_nod": [355, 415, 475], "get_configur": [355, 415, 475], "params_feed": [355, 415, 475], "pruning_config_pars": [355, 415, 475], "feeder": 356, "get_possible_valu": 356, "pruningconfigpars": 357, "bench": [358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 445, 474, 565], "dbmanag": 358, "database_loc": 358, "log_level": [358, 485], "tabl": [359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 382, 600], "benchmarkresult": 360, "fill_dictionari": [361, 363, 364, 366, 368, 371, 372, 377], "fill": [361, 363, 364, 366, 368, 371, 372, 377, 544, 582, 593, 596], "domainflavour": [364, 476], "db": [364, 392, 393], "benchmark_result": [367, 391, 415], "domain_flavour": [367, 391, 415, 421, 494], "optimization_typ": [367, 391, 415], "profiling_result": [367, 391, 415], "pruning_detail": [367, 391, 415], "tuning_detail": [367, 391, 415], "tuning_histori": [367, 391, 415, 450, 475], "optimizationtyp": [371, 476], "profilingresult": 374, "pruningdetail": 376, "tuningdetail": [378, 462], "tuninghistori": [379, 463], "benchmarkapiinterfac": 380, "before_delete_benchmark_entri": 380, "mapper": [380, 443, 444], "sqlite3": 380, "db_model": [380, 391, 415, 475], "datasetapiinterfac": 381, "set_database_vers": [381, 382], "version_num": [381, 382], "alembic_vers": [381, 382], "initialize_associ": [381, 382], "initialize_precision_optimization_types_associ": [381, 382], "search_in_list_of_dict_for_unique_valu": [381, 382], "list_of_dict": [381, 382], "search_in_list_of_dict": [381, 382], "diagnosisapiinterfac": 383, "dictionariesapiinterfac": 384, "dictonari": 384, "examplesapiinterfac": 385, "predefin": [385, 494], "benchmark_api_interfac": [386, 391, 415], "dataset_api_interfac": [386, 391, 415], "diagnosis_api_interfac": [386, 391, 415], "dictionaries_api_interfac": [386, 391, 415], "examples_api_interfac": [386, 391, 415], "model_api_interfac": [386, 391, 415], "optimization_api_interfac": [386, 391, 415], "profiling_api_interfac": [386, 391, 415], "project_api_interfac": [386, 391, 415], "modelapiinterfac": 387, "optimizationapiinterfac": 388, "profilingapiinterfac": 389, "projectapiinterfac": 390, "db_oper": [391, 415, 475], "params_interfac": [391, 415, 475], "modeladdparamsinterfac": 392, "datasetaddparamsinterfac": 392, "optimizationaddparamsinterfac": 392, "optimizationeditparamsinterfac": 392, "edit": [392, 523], "benchmarkaddparamsinterfac": 392, "benchmarkeditparamsinterfac": 392, "profilingaddparamsinterfac": 392, "profilingeditparamsinterfac": 392, "profilingresultaddparamsinterfac": 392, "tuninghistoryiteminterfac": 392, "tuninghistoryinterfac": 392, "diagnosisoptimizationparamsinterfac": 392, "update_dataloaders_param": 393, "framework_id": 393, "dataloaders_to_upd": 393, "framework_dataloaders_config": 393, "get_framework_dataloaders_config": 393, "get_framework_transforms_config": 393, "diagnosisfactori": 395, "onnx_diagnosi": [396, 415, 475], "onnxrt_diagnosi": [396, 397, 415], "tensorflow_diagnosi": [396, 415, 475], "op_detail": [396, 415, 475], "op_entri": [396, 415, 475], "onnxrtdiagnosi": 398, "opdetail": 399, "oppattern": 399, "pattern_data": 399, "opweight": 399, "weights_data": 399, "opactiv": 399, "op_activ": 399, "opentri": 400, "activation_min": 400, "activation_max": 400, "tensorflowdiagnosi": 402, "browser": [403, 544, 575, 579], "get_directory_entri": 403, "get_requested_path": 403, "request": [403, 415, 416, 417, 438, 439, 442, 463, 475, 506, 508, 511, 518, 544, 590], "get_non_hidden_directory_entri": 403, "create_dir_entri": 403, "direntri": 403, "create_file_entri": 403, "create_entri": 403, "is_directori": 403, "sort_entri": 403, "should_show_fil": 403, "should_show_only_model_fil": 403, "get_setting_valu": 403, "get_filter_valu": 403, "filter_requested_entri": 403, "filter_nam": 403, "is_directory_entri": 403, "is_model_or_directory_entri": 403, "shown": [403, 526, 544, 546, 549, 561, 562, 576, 584, 585, 597], "is_dataset_or_directory_entri": 403, "brows": 404, "filesystem": [404, 494], "attribute_typ": 405, "expanded_group": 406, "reader": [409, 410, 415, 475], "graphread": 409, "onnxrt_read": [410, 412, 415], "tensorflow_read": [410, 412, 415], "collaps": [410, 415, 475, 544], "edg": [410, 415, 475, 596], "graph_read": [410, 415, 475], "highlight": [411, 525, 544], "groupnod": 411, "group_nam": 411, "onnxrtread": 413, "tensorflowread": 414, "jobs_control_queu": [415, 416, 475], "frozen_pb": [415, 422, 432], "meta_graph": [415, 422, 432], "model_type_gett": [415, 422, 475], "repositori": [415, 420, 422, 475, 481, 577, 580], "download_config": [415, 441, 475], "download_model": [415, 441, 475], "list_model": [415, 441, 475], "optimize_model": [415, 448, 450, 451, 454, 457], "neural_coder_optim": [415, 450, 475], "tune_model": [415, 450, 460], "execute_optim": [415, 450, 475], "tensorflow_profil": [415, 466, 475], "execute_profil": [415, 466, 475], "profile_model": [415, 466, 475], "job": [416, 490], "_jobscontrolqueu": 417, "queu": 417, "jobsmanag": 417, "_jobsmmanag": 418, "_job": 418, "get_default_path": 420, "getter": 424, "onnxrtmodel": 426, "remove_number_of_samples_from_shap": 426, "pytorchscriptmodel": 428, "modelrepositori": 429, "trust": [430, 544], "frozenpbmodel": 431, "metagraphmodel": 434, "metagraph": 434, "savedmodelmodel": 436, "get_input_shap": 437, "fix_dynamic_shap": 437, "get_available_model": 442, "check_vers": 442, "framework_vers": 442, "supported_vers": 442, "validate_model_list": 442, "model_list": 442, "get_framework_module_nam": 442, "framework_nam": [442, 482], "get_installed_framework": 442, "instal": [442, 551, 554, 556, 565, 567, 570, 573, 577, 580, 582, 583, 586, 601], "mappingdirect": 444, "namesmapp": 444, "execute_optimization_pytorch_script": 445, "optimization_id": 445, "execute_optimization_regular": 445, "parse_model_data_to_bench_nam": 445, "parse_log": 445, "optimization_detail": 445, "check_if_collect_tuning_histori": 445, "optimizationfactori": 446, "graphoptim": [447, 498], "optimization_data": [447, 452, 456, 459, 462], "dataset_data": [447, 452, 456, 459, 462], "optimize_graph": [449, 453], "optimize_graph_config": [449, 453], "optimize_pt_script": 455, "optimizationinterfac": 456, "optimization_workdir": 463, "watcher": 463, "send": [463, 506, 511, 524], "profiling_id": 464, "execute_real_profil": 464, "profiling_detail": 464, "profilerfactori": [465, 470], "load_profiling_detail": 467, "json_path": 467, "profiling_data": [469, 472], "delete_assign": 473, "wsgi": 474, "prepare_environ": 474, "app": [475, 509], "workdir": [475, 483, 491], "history_snapshot_pars": [475, 509, 514], "request_data_processor": [475, 509, 514], "response_gener": [475, 509, 514], "flavour": 476, "executionstatu": 476, "status": 476, "notfoundexcept": 478, "accessdeniedexcept": 478, "deni": 478, "clienterrorexcept": 478, "internalexcept": 478, "subject": [479, 506, 560], "send_respons": 479, "log_nam": 479, "additional_log_nam": [479, 487], "shell": [479, 487, 595], "expir": 480, "expiringdictitem": 480, "expires_at": 480, "expiringdict": 480, "initial_valu": 480, "ttl": 480, "120": [480, 594], "githubinfo": 481, "hw": 482, "hwinfo": 482, "respons": [482, 486, 493, 506, 511, 519, 590], "platform": [482, 528, 558, 565, 573, 588, 590, 600], "hardwar": [482, 524, 528, 529, 549, 558, 562, 563, 582, 586, 587, 588, 589], "get_number_of_socket": 482, "get_distribut": 482, "distibut": 482, "get_bios_vers": 482, "bio": [482, 586], "is_turbo_boost_en": 482, "turbo": [482, 586], "boost": [482, 563, 566, 582, 588], "get_kernel_vers": 482, "get_framework_info": 482, "get_framework_dependency_info": 482, "subdepend": 482, "jsonseri": 484, "serializ": 484, "change_log_level": 485, "optimizationpars": 486, "performancepars": 486, "accuracypars": 486, "benchmarkparserfactori": 486, "profilingpars": 486, "pid": 487, "ncprocess": 488, "aggreg": 488, "statu": [490, 506, 523, 546, 584], "get_status_update_funct": 490, "job_typ": 490, "sent": 492, "deprec": [494, 577, 580, 596], "func": [494, 511, 590, 599], "signal": 494, "is_hidden": 494, "get_dataset_path": 494, "get_framework_from_path": 494, "get_file_extens": 494, "is_dataset_fil": 494, "get_predefined_config_path": 494, "normalize_domain": 494, "underscor": 494, "normalize_framework": 494, "normalize_str": 494, "string_to_norm": 494, "get_model_zoo_config_path": 494, "model_dict": 494, "get_model_zoo_model_path": 494, "check_modul": 494, "get_module_vers": 494, "mb": 494, "add_unit": 494, "load_model_config": 494, "load_dataloader_config": 494, "load_transforms_config": 494, "load_transforms_filter_config": 494, "meaning": [494, 562, 585], "load_precisions_config": 494, "load_pruning_details_config": 494, "get_default_pruning_config_path": 494, "load_model_wise_param": 494, "load_metrics_config": 494, "get_metrics_dict": 494, "load_help_nc_param": 494, "replace_with_valu": 494, "file_path": 494, "verify_file_path": 494, "determine_ip": 494, "ip": 494, "is_development_env": 494, "nc_mode": 494, "filter_transform": 494, "parse_bool_valu": 494, "release_tag": 494, "releas": [494, 528, 559, 571, 573, 575, 579, 581, 601], "get_shape_from_transform": 494, "shape_elements_ord": 494, "get_height_width_from_s": 494, "parse_to_string_list": 494, "parse_to_float_list": 494, "export_to_csv": 494, "csv": [494, 526, 544], "parse_vers": 494, "string_vers": 494, "are_archive_filenames_valid": 494, "archiv": 494, "malici": 494, "safe_extract_arch": 494, "zipfil": 494, "tarfil": 494, "destination_dir": 494, "member": [494, 523, 529], "safe": [494, 524], "labelbal": [496, 546, 547], "postprocessschema": 497, "sgdoptim": 502, "adamwoptim": 502, "adamoptim": 502, "crossentropylosscriterion": 502, "sparsecategoricalcrossentropycriterion": 502, "knowledgedistillationlosscriterion": 502, "weightcompressionapproach": 502, "parse_dict_value_to_float": 502, "parse_dict_value_to_int": 502, "wiseconfigdetail": 503, "wiseconfig": 503, "acccriterion": 504, "exitpolici": 504, "float_represent": 505, "dumper": 505, "pruner_represent": 505, "logic": [506, 599], "outsid": 506, "create_simple_respons": 506, "gui": [506, 511, 528, 544, 558, 559, 587, 598], "messagequeu": 506, "queue": [506, 511], "servicenotfoundexcept": 508, "unknown": 508, "connector": 510, "routingdefinit": 510, "rout": 510, "realtimeroutingdefinit": 510, "realtim": 510, "deferredroutingdefinit": 510, "separ": [510, 523, 544, 557, 560, 585, 589], "deferredsubprocessroutingdefinit": 510, "spawn": 510, "subprocess": 510, "get_model_graph": 510, "find_pattern_in_graph": 510, "get_system_info": 510, "endpoint": 511, "run_serv": 511, "webserv": 511, "get_tls_arg": 511, "tl": [511, 544], "block_ifram": 511, "werkzeug": 511, "ifram": 511, "csp": 511, "block_snif": 511, "mime": 511, "snif": 511, "require_api_token": 511, "author": [511, 560], "j": [511, 524, 528, 594, 600], "handle_api_cal": 511, "subpath": 511, "allow_api_cal": 511, "page_not_found": 511, "disable_cach": 511, "build_paramet": 511, "flask": [511, 544], "web_socket_publish": 511, "web_socket": 511, "flask_socketio": 511, "socketio": [511, 544], "benchmarkservic": 512, "historysnapshotpars": 513, "history_snapshot": 513, "provide_perform": 513, "modelservic": 515, "optimizationservic": 516, "profilingservic": 517, "processor": [518, 528, 563, 586, 588, 590, 591, 600], "requestdataprocessor": 518, "responsegener": 519, "workloadservic": 520, "welcom": [522, 523, 524, 528, 601], "interest": [523, 528, 595], "foster": 523, "particip": 523, "harass": 523, "experi": [523, 565, 593, 594, 597], "everyon": 523, "regardless": 523, "ag": 523, "bodi": 523, "ethnic": 523, "characterist": 523, "gender": 523, "educ": 523, "socio": 523, "econom": 523, "appear": [523, 544, 576, 582], "race": 523, "religion": 523, "sexual": 523, "orient": 523, "behavior": [523, 524, 529, 555, 564, 595, 597, 599], "contribut": [523, 528], "inclus": 523, "Being": 523, "respect": [523, 555, 587, 594, 599], "viewpoint": 523, "gracefulli": 523, "critic": 523, "focus": [523, 529], "empathi": 523, "toward": [523, 549], "unaccept": 523, "imageri": 523, "unwelcom": 523, "troll": 523, "insult": 523, "derogatori": 523, "comment": [523, 547, 561, 562, 596], "polit": 523, "attack": 523, "privat": 523, "publish": [523, 560, 563, 583, 594], "electron": 523, "explicit": 523, "permiss": 523, "inappropri": 523, "profession": 523, "clarifi": 523, "appropri": [523, 594], "fair": 523, "action": [523, 577, 580], "reject": 523, "commit": [523, 524], "wiki": 523, "issu": [523, 524, 527, 544, 559, 590, 595], "ban": 523, "temporarili": 523, "perman": [523, 587], "deem": 523, "threaten": 523, "offens": 523, "harm": 523, "mail": 523, "social": [523, 528, 588], "media": [523, 528, 588], "account": [523, 593, 597], "appoint": 523, "event": [523, 595], "abus": 523, "report": [523, 524, 544, 593], "contact": [523, 592, 593], "complaint": 523, "review": [523, 524], "investig": 523, "circumst": [523, 589], "oblig": 523, "confidenti": [523, 544], "regard": [523, 591], "incid": 523, "good": [523, 590, 597], "faith": 523, "face": [523, 528, 534, 565, 569, 588, 592], "repercuss": 523, "leadership": 523, "faq": [523, 528], "page": [523, 524, 528], "view": [524, 528, 544, 552, 573, 582, 592], "pylint": 524, "flake8": 524, "autopep8": 524, "cover": [524, 553, 557, 588], "would": [524, 562, 563, 587, 590, 594], "adopt": [524, 528, 565, 587, 588, 594], "certif": [524, 544], "agre": 524, "bug": 524, "jira": 524, "ticket": 524, "potenti": [524, 526], "risk": 524, "pr": [524, 561, 577, 580, 592], "reproduc": 524, "submit": [524, 588], "intend": 524, "collabor": [524, 567, 573], "adher": 524, "toolkit": [525, 528, 559, 565, 573, 588, 598], "tracer": 525, "resolv": [525, 527], "floatfunct": 525, "cat": [525, 568], "done": [525, 549, 550, 566, 582, 587, 590], "10004": [525, 526, 529, 546, 549, 550, 553, 555, 558, 563, 585, 589, 599], "neural_compressor": [525, 526, 528, 545, 546, 547, 549, 550, 551, 553, 556, 557, 561, 562, 563, 564, 584, 585, 587, 589, 590, 591, 592, 593, 594, 596, 597, 599], "eval": [525, 546, 565, 590, 595], "fail": 525, "conduct": [525, 562, 570, 582, 598], "imper": 525, "therefor": [525, 562, 587, 590, 592, 594], "lot": [525, 594], "As": [525, 544, 546, 549, 562, 576, 587, 597], "might": [525, 544, 597], "failur": 525, "successfulli": [525, 551, 588], "suggest": [525, 593], "traceabl": 525, "proxi": 525, "tutori": [525, 573, 588, 598], "prototyp": 525, "html": [525, 528, 577, 580], "untrac": 525, "ssd": [525, 600], "resnet34": [525, 600], "r34": 525, "bboxes_labels_scor": 525, "prob": 525, "45": [525, 594, 600], "max_output": 525, "zip": 525, "dbox": 525, "dlabel": 525, "dscore": 525, "decode_singl": 525, "autom": [526, 565, 582, 583, 594], "artifici": 526, "ann": 526, "par": 526, "outperform": 526, "hand": [526, 544], "propos": [526, 529, 549, 563, 587, 594], "lie": 526, "predictor": 526, "4x": [526, 590], "figur": [526, 575, 576, 579, 587], "popul": 526, "inner": 526, "evolutionari": 526, "cycl": 526, "until": [526, 597], "conclud": 526, "met": [526, 555, 563, 590, 595], "yet": [526, 544, 577, 580, 583], "simplest": [526, 568], "launcher": [526, 528, 549, 550, 573, 587, 598], "agent": 526, "nsga2": 526, "supernet": 526, "ofa_mbv3_d234_e346_k357_w1": 526, "acc": [526, 595, 600], "mac": [526, 583], "num_ev": 526, "250": 526, "results_csv_path": 526, "search_result": 526, "dataset_path": 526, "ilsvrc2012": 526, "aim": [526, 528, 565, 587, 594, 597, 598], "mobilenetv3": 526, "lt": [526, 547, 586, 600], "wmt": 526, "en": 526, "de": 526, "guidelin": [527, 528], "mainstream": [528, 598], "learn": [528, 529, 546, 547, 553, 557, 558, 559, 562, 563, 565, 567, 570, 571, 573, 576, 577, 580, 582, 587, 588, 590, 594, 595, 597, 598], "runtim": [528, 529, 530, 546, 552, 555, 558, 567, 572, 573, 589], "workflow": [528, 549, 559, 563, 577, 580, 595, 598], "particular": [528, 587], "wide": [528, 552, 563, 590, 600], "xeon": [528, 559, 560, 563, 586, 588, 590, 591, 600], "scalabl": [528, 559, 563, 586, 588, 590, 591, 600], "flex": [528, 559], "amd": [528, 558, 559, 600], "arm": [528, 558, 559, 600], "nvidia": [528, 558, 559, 587, 590, 600], "bloom": [528, 594], "176b": [528, 594], "30b": 528, "stabl": [528, 544, 559, 588], "diffus": [528, 588, 600], "gpt": [528, 594, 600], "hub": [528, 552, 556, 573], "hug": [528, 588], "vision": [528, 553, 556, 569, 594], "coder": [528, 558, 566, 567, 570, 573, 576, 588], "cloud": [528, 588], "marketplac": [528, 583, 588], "googl": [528, 563, 588], "amazon": [528, 565, 573], "azur": [528, 588], "softwar": [528, 560, 563, 586, 587, 588, 592], "alibaba": [528, 572, 579, 580, 588], "tencent": [528, 588], "taco": [528, 588], "ai": [528, 565, 588, 591, 598], "ecosystem": [528, 588], "lightn": [528, 572], "pip": [528, 544, 551, 554, 556, 559, 567, 570, 575, 577, 579, 580, 592], "wget": [528, 554, 556], "storag": [528, 556, 561, 594], "googleapi": [528, 556], "v1_6": [528, 556], "mobilenet_v1_1": [528, 556], "0_224_frozen": [528, 556], "quick": [528, 555, 598, 599], "overview": 528, "notebook": [528, 598], "oneapi": [528, 559, 588, 598], "analyt": [528, 559, 588, 598], "jupyterlab": [528, 565, 571, 573, 575, 579, 598], "studio": [528, 573, 582, 598], "matrix": [528, 573, 594, 598], "topic": 528, "heterogen": [528, 588], "power": [528, 549, 562, 576, 586, 588], "mar": [528, 588], "2023": [528, 594, 600], "busi": [528, 588], "jan": [528, 588], "blog": [528, 588], "amx": [528, 588], "enhanc": [528, 565, 588, 591], "4th": [528, 588], "gen": [528, 563, 588, 591], "neurip": [528, 588], "oct": [528, 588], "quala": [528, 588], "minilm": [528, 588, 600], "legal": [528, 601], "secur": [528, 586, 588, 601], "idea": [528, 587, 594, 597], "feel": 528, "look": [528, 529, 555, 561, 599], "bridg": [529, 558], "vanilla": [529, 558], "abcadaptor": 529, "__init__": [529, 546, 547, 561, 597], "query_fw_cap": 529, "query_fused_pattern": 529, "he": 529, "besid": [529, 549], "describ": [529, 544, 555, 595], "past": 529, "effect": [529, 587], "mainten": 529, "difficult": [529, 594], "abil": [529, 547, 555, 594], "modif": [529, 546, 555, 570], "fragment": 529, "granular": [529, 555, 558, 568, 587, 590, 594, 599], "semant": [529, 555], "microsoft": 529, "mla": [529, 590], "becom": [529, 553], "explor": 529, "inspect_tensor": 529, "op_list": [529, 595], "iteration_list": 529, "inspect_typ": 529, "save_to_disk": 529, "quantization_cfg": 529, "set_tensor": 529, "tensor_dict": 529, "diagnosis_help": 529, "easier": [544, 575, 579, 582, 588], "nightli": [544, 559], "pypi": [544, 559, 577, 580], "conda": [544, 554, 559, 568, 576, 592], "forg": [544, 554, 559], "git": [544, 554, 559], "clone": [544, 559, 575, 579], "cd": [544, 551, 559], "setup": [544, 555, 559, 577, 580, 587], "instruct": [544, 549, 559, 563, 577, 580, 588, 589, 590], "ui": 544, "5000": 544, "338174d13706855fc6924cec7b3a8ae8": 544, "listen": 544, "firewal": 544, "8080": 544, "p": [544, 583], "tf_enable_onednn_opt": [544, 559], "cert": 544, "path_to_cert": 544, "crt": 544, "path_to_private_kei": 544, "encrypt": 544, "insecur": 544, "expos": 544, "forfeit": 544, "client": 544, "extern": 544, "threat": 544, "button": [544, 558, 576, 582], "click": [544, 556, 558, 565, 566, 573, 576, 582, 588, 595], "pop": [544, 582], "recognit": [544, 551, 553, 587, 595], "few": [544, 588, 597], "finish": [544, 576], "chosen": 544, "synthet": 544, "plu": 544, "icon": 544, "unfold": 544, "On": [544, 590], "panel": [544, 577, 580, 582], "navig": 544, "previou": [544, 562, 587, 592, 594, 595, 597, 598], "trash": 544, "visibl": 544, "cursor": 544, "prompt": [544, 551], "confirm": 544, "bottom": 544, "pencil": 544, "light": [544, 550], "blue": 544, "color": 544, "That": 544, "row": [544, 587, 594], "arrow": 544, "line": [544, 551, 558, 565, 570, 571, 587, 595], "checkbox": 544, "column": [544, 587, 594], "chart": [544, 590, 593, 595], "offer": [544, 547], "conveni": [544, 562], "variat": 544, "pictur": 544, "yellow": 544, "remind": 544, "ofa": 544, "fvcore": 544, "autograd": 544, "pymoo": 544, "numba": 544, "ilsvrc": 544, "hour": [544, 597], "One": [544, 547, 551, 558, 587, 588, 597], "dialog": 544, "organ": [544, 599], "cryptographi": 544, "linux": [545, 554, 576, 582], "window": [545, 582, 583], "x86_64": 545, "aarch64": 545, "often": [546, 549, 585, 587], "encount": 546, "consum": 546, "previous": 546, "lack": [546, 554], "faster": [546, 548, 588, 597, 600], "treat": 546, "manner": [546, 549, 564], "300": [546, 547], "input_data": 546, "customis": [546, 547], "ensp": [547, 561, 596], "imagerecord": [547, 551, 599], "image_nam": 547, "cocorecord": 547, "gt": [547, 553, 596], "int64": 547, "style_transf": 547, "content": 547, "tfrecorddataset": 547, "helloworld": [547, 596], "aid": 548, "deploy": [548, 565, 582, 594], "infrastructur": 548, "expens": [549, 562, 597], "deploi": [549, 562, 597], "mobil": [549, 562, 600], "produc": 549, "logit": 549, "softmax": 549, "l": [549, 595, 597], "kd": 549, "distanc": 549, "euclidean": 549, "kullback": 549, "leibler": 549, "patient": 549, "compact": [549, 562, 568, 587], "agnost": 549, "resourc": [549, 587, 597], "convolut": [549, 587, 588], "ia": 549, "attach": [549, 562, 594], "shallow": 549, "depth": [549, 591], "deepest": 549, "deeper": 549, "acceler": [549, 562, 565, 573, 582, 587, 588, 591, 594, 597], "10006": [549, 550], "student_output": [549, 550], "student_loss": [549, 550], "training_func_for_nc": [549, 550], "distil_loss_conf": 549, "accordingli": [549, 573], "promis": [550, 562, 587], "huge": 550, "heavi": 550, "booster": 550, "degrad": [550, 597], "retrain": [550, 587], "incorpor": [550, 597], "novel": [550, 565, 576, 582], "place": [550, 559, 587, 595], "illustr": 550, "comb": 550, "distillation_criterion": [550, 562, 585], "q_conf": 550, "horovod": 551, "builtin": 551, "program": [551, 560, 563, 565, 582], "addition": [551, 597], "enable_eager_execut": 551, "yaml_file_path": 551, "pre_process": 551, "simpli": [551, 564, 565, 567, 570, 582], "evaluation_result": 551, "evaluation_time_cost": 551, "partit": 551, "distributedsampl": 551, "train_sampl": 551, "train_dataset": [551, 590], "num_replica": 551, "rank": 551, "train_load": 551, "train_kwarg": 551, "adadelta": 551, "distributedoptim": 551, "named_paramet": 551, "broadcast_paramet": 551, "root_rank": 551, "broadcast_optimizer_st": 551, "set_epoch": 551, "batch_idx": 551, "zero_grad": [551, 562, 587], "nll_loss": 551, "log_interv": 551, "0f": 551, "tloss": 551, "6f": 551, "dry_run": 551, "test_func": 551, "host": 551, "num_of_process": 551, "002": 551, "ssh": [551, 582], "readm": 551, "exactli": [551, 566], "resnet50_v1": [551, 562], "topk": [551, 561, 562, 590], "32": [551, 557, 586, 587, 600], "resizecropimagenet": [551, 596], "realiz": [551, 561, 584, 591, 593], "tow": 551, "node1": 551, "node2": 551, "TO": [551, 567], "your_node1_nam": 551, "your_node2_nam": 551, "resnet50_fp32_pretrained_model": 551, "nc_resnet50_v1": 551, "resnet": [551, 556, 600], "varieti": [552, 589, 597], "demonstr": [552, 565, 587, 595], "10k": [552, 556], "speedup": [552, 558, 590], "2x": [552, 558, 586], "vnni": [552, 558, 589, 590], "exchang": 553, "howev": [553, 587, 594], "hope": 553, "briefli": [553, 562, 587, 594], "matur": 553, "major": [553, 557, 590, 594], "reus": 553, "inc_model": [553, 564], "fp32_onnx_config": 553, "verifi": 553, "gap": [553, 564], "matmulintegertofloat": 553, "matmulinteg": 553, "toolchain": 554, "bare": 554, "metal": 554, "sudo": [554, 568], "apt": [554, 559, 568, 576], "python3": 554, "dev": [554, 575, 579], "distutil": 554, "essenti": 554, "libgl1": 554, "mesa": 554, "glx": 554, "libglib2": 554, "numactl": [554, 568, 576], "ln": 554, "sf": 554, "usr": 554, "incompat": 554, "88": [554, 593, 600], "80": [554, 594, 595, 600], "pyobject": 554, "reinstal": 554, "importerror": 554, "libgl": 554, "No": [554, 562, 586, 588], "yum": [554, 559], "opencv": [554, 576], "pend": 554, "27": [554, 559, 600], "alemb": [554, 559], "friendli": [555, 562, 594, 599], "dive": [555, 598], "unless": 555, "purpos": [555, 563, 582, 589, 590], "let": [555, 570, 589, 599], "syntax": 555, "go": [555, 577, 580, 589, 596], "up1": 555, "up2": 555, "valid_mixed_precis": 555, "per_tensor": [555, 590, 599], "addn": 555, "grappler_optim": 555, "constfold": 555, "arithmet": 555, "debug_stripp": 555, "jupyt": [556, 573, 575, 576, 579], "lab": [556, 575, 576, 577, 579, 580], "concept": [557, 593, 598], "rather": 557, "custom_metr": 557, "refin": [557, 587], "These": 558, "broad": [558, 571, 598], "420": 558, "geomean": 558, "snippet": 558, "upload": [558, 577, 580], "dispatch": 558, "qintegerop": [558, 590], "plan": 558, "success": 559, "re": [559, 582], "uninstal": [559, 582], "frequent": 559, "ask": 559, "consolid": 559, "latest": [559, 588, 592], "eas": [559, 567, 588], "along": 559, "streamlin": 559, "scienc": 559, "mani": [559, 597, 599], "websit": 559, "anaconda": 559, "suit": [559, 583, 595], "esri": 559, "formerli": 559, "skylak": 559, "cascad": 559, "lake": [559, 563, 588], "cooper": [559, 563, 588], "ic": [559, 587, 588], "sapphir": 559, "rapid": 559, "hbm": 559, "arctic": 559, "sound": 559, "pont": 559, "vecchio": 559, "cento": 559, "ubuntu": [559, 586], "04": [559, 586, 600], "fortensorflow": 559, "forpytorch": 559, "onednn": [559, 590], "newer": 559, "apach": 560, "copyright": 560, "accompani": 560, "research": [560, 594], "wish": 560, "bibtex": 560, "misc": 560, "feng": 560, "tian": 560, "hanwen": 560, "haihao": [560, 587], "shen": [560, 587], "suyu": 560, "chen": 560, "titl": [560, 583], "howpublish": 560, "year": 560, "logo": [560, 586], "atom": 560, "phi": 560, "pentium": 560, "vtune": 560, "corpor": [560, 586], "subsidiari": [560, 586], "brand": [560, 586], "claim": [560, 586], "popularli": 561, "industri": [561, 588], "label_map": 561, "decis": 561, "ap": 561, "curv": 561, "turn": [561, 576], "target_boxes_num": 561, "str_label": 561, "int_label": 561, "inturn": 561, "cocomap": 561, "vocmap": 561, "categor": 561, "multiclass": 561, "multilabel": 561, "multi_metr": 561, "newmetr": 561, "reset": 561, "reflect": [561, 586, 596], "deliv": [562, 588], "upgrad": 562, "veri": [562, 583, 590, 597], "speed": [562, 573, 587, 588, 590, 597], "fundament": 562, "comprehens": [562, 598], "kind": 562, "resort": 562, "automodelforsequenceclassif": 562, "autotoken": 562, "val_dataset": [562, 590], "val_dataload": [562, 590], "worker": [562, 590], "ping_memori": [562, 590], "formul": 562, "effort": 562, "written": 562, "onnxrt_integ": [562, 599], "onnxrt_qlinear": [562, 599], "unsupport": 562, "image_tensor": [562, 599], "post_training_dynamic_qu": [562, 589, 597], "1000": [562, 599], "2000": 562, "sampling_s": [562, 599], "model_wis": [562, 599], "op_dict": 562, "op_wis": [562, 595, 599], "sigopt_api_token": [562, 593, 597], "sigopt_project_id": [562, 593, 597], "sigopt_experiment_nam": [562, 593, 597], "demo": 562, "600": [562, 600], "training_arg": 562, "emul": [562, 590], "trainer": [562, 573], "similar": [562, 589, 594, 597, 599], "maxim": [562, 587, 597], "still": [562, 590, 591], "pruning_func": 562, "num_train_epoch": [562, 587], "train_dataload": [562, 587, 590], "n_gpu": 562, "gradient_accumulation_step": 562, "clip_grad_norm_": 562, "max_grad_norm": 562, "rate": [562, 587, 590], "start_epoch": [562, 589, 599], "end_epoch": [562, 589, 599], "97": [562, 594, 600], "newli": [562, 587], "on_after_optimizer_step": [562, 587], "layer3": [562, 587], "layer2": [562, 587, 590], "lr_schedul": [562, 587], "weight_decai": [562, 599], "0004": 562, "nesterov": [562, 599], "randomresizedcrop": [562, 596], "totensor": [562, 596], "485": 562, "456": 562, "406": 562, "nepoch": 562, "cnt": 562, "loss_sum": 562, "iter_bar": 562, "tqdm": 562, "desc": 562, "teacher_logit": 562, "train_fun": 562, "training_func": 562, "recent": [562, 563], "growth": [562, 563, 587], "complex": [562, 563, 587], "significantli": [562, 563, 587, 597], "bandwidth": [562, 563], "exit_polici": [562, 599], "determinist": 562, "arbitrari": [562, 585], "reli": [562, 594], "prune_conf": 562, "quantization_aware_training_conf": 562, "aforement": 562, "inset": 562, "p_conf": [562, 585], "ssd_mobilenet_v1": 562, "benchmarkconf": 562, "half": [563, 573], "sixteen": 563, "launch": [563, 583], "3rd": [563, 588, 590, 591], "codenam": 563, "x86": 563, "avx512": [563, 590], "vcvtne2ps2bf16": 563, "vcvtneps2bf16": 563, "vdpbf16p": 563, "consequ": 563, "avx512_bf16": 563, "cuda": [563, 565, 567, 590], "persist": 564, "brought": [564, 566, 573, 590], "tf2": 564, "h5": 564, "hybridblock": 564, "0000": 564, "saved_result": 564, "simplifi": [565, 576, 582], "subsequ": [565, 582], "acquir": 565, "analysi": [565, 582, 593], "heurist": [565, 582], "rule": [565, 587], "great": 565, "facilit": 565, "autocast": 565, "simultan": [565, 585, 589], "my_model": 565, "no_grad": 565, "memory_format": 565, "112": [565, 600], "rand": [565, 594], "plugin": [565, 583], "aw": [565, 573, 588, 600], "sagemak": [565, 573], "inlin": [565, 570, 573], "neural_cod": [565, 567, 569, 570, 571, 573], "superbench": 565, "enjoi": [566, 570, 573], "caus": [566, 587], "rebuild": [566, 575, 579], "reload": [566, 583], "modern": 567, "democrat": [567, 588], "programm": [567, 573, 582], "nano_bf16_channels_last": 567, "resnet18": [567, 600], "nano_bf16_ipex_channels_last": 567, "nano_bf16_ipex": 567, "nano_bf16": 567, "nano_fp32_channels_last": 567, "nano_fp32_ipex_channels_last": 567, "nano_fp32_ipex": 567, "nano_gpu_to_cpu": 567, "nano_int8": 567, "nano_jit_bf16_channels_last": 567, "nano_jit_bf16_ipex_channels_last": 567, "nano_jit_bf16_ipex": 567, "nano_jit_bf16": 567, "nano_jit_fp32_channels_last": 567, "nano_jit_fp32_ipex_channels_last": 567, "nano_jit_fp32_ipex": 567, "nano_jit_fp32": 567, "nano_onnxruntime_fp32": 567, "nano_onnxruntime_int8_qlinear": 567, "openvino": 567, "nano_openvino_fp32": 567, "nano_openvino_int8": 567, "bc": [568, 576], "conda_prefix": 568, "echo": 568, "tradit": [568, 587], "libjemalloc": 568, "libiomp5": 568, "home": 568, "lib": 568, "ld_preload": 568, "malloc_conf": 568, "oversize_threshold": 568, "background_thread": 568, "metadata_thp": 568, "dirty_decay_m": 568, "9000000000": 568, "muzzy_decay_m": 568, "kmp_affin": 568, "kmp_blocktim": 568, "dnnl_primitive_cache_capac": 568, "cpufreq": 568, "scaling_governor": 568, "powersav": 568, "tee": 568, "pytorch_jit_script": [569, 572], "pytorch_channels_last": [569, 572], "run_bench": 569, "patch": [569, 582], "patch_path": 569, "your_patch_path": 569, "sweep": 569, "sweep_object": 569, "bench_config": 569, "bench_featur": 569, "sai": 570, "run_glu": [570, 571], "requisit": 570, "task_nam": [570, 571], "do_ev": [570, 571], "remain": 570, "itself": 570, "run_glue_optim": 570, "static_ipex": 570, "auto_qu": 571, "v4": [571, 600], "albert": [571, 600], "sst2": 571, "alexnet": [571, 600], "pytorch_amp": 572, "optimize_for_infer": 572, "pytorch_jit_trac": 572, "pytorch_jit_script_ofi": 572, "pytorch_jit_trace_ofi": 572, "torchdynamo": 572, "pytorch_torchdynamo_jit_script": 572, "pytorch_torchdynamo_jit_trac": 572, "pytorch_torchdynamo_jit_script_ofi": 572, "pytorch_torchdynamo_jit_trace_ofi": 572, "pytorch_inc_bf16": 572, "pytorch_inc_static_quant_fx": 572, "pytorch_inc_static_quant_ipex": 572, "pytorch_inc_dynamic_qu": 572, "pytorch_ipex_fp32": 572, "pytorch_ipex_bf16": 572, "pytorch_ipex_int8_static_qu": 572, "pytorch_ipex_int8_dynamic_qu": 572, "blade": 572, "disc": 572, "pytorch_aliblad": 572, "pytorch_lightning_bf16_cpu": 572, "tensorflow_amp": 572, "keras_amp": 572, "tensorflow_inc": 572, "keras_inc": 572, "onnx_inc_static_quant_qlinear": 572, "onnx_inc_static_quant_qdq": 572, "onnx_inc_dynamic_qu": 572, "optimum": [572, 573], "pytorch_inc_huggingface_optimum_stat": 572, "pytorch_inc_huggingface_optimum_dynam": 572, "intel_extension_for_transform": 572, "bigdl": [572, 573], "nano": [572, 573], "nano_": 572, "inc_auto": 572, "delight": 573, "announc": 573, "v": [573, 582, 597, 599], "500": 573, "innov": [573, 588, 598], "isa": 573, "xpu": 573, "delta": 573, "acc_delta": 573, "int8_acc": 573, "fp32_acc": 573, "ext": [575, 577, 579, 580, 581], "nodej": [575, 579], "jlpm": [575, 579], "pin": [575, 579], "yarn": [575, 579], "npm": [575, 576, 579], "lieu": [575, 579], "labextens": [575, 576, 579], "typescript": [575, 579], "watch": [575, 579], "termin": [575, 576, 579], "immedi": [575, 579, 587], "refresh": [575, 579], "wait": [575, 579, 582], "rebuilt": [575, 579], "symlink": [575, 579], "down": 576, "enter": [576, 582], "blank": 576, "cell": 576, "gain": [576, 585, 588], "mkl": 576, "jemalloc": 576, "pip3": 576, "headless": 576, "pyproject": [577, 580], "toml": [577, 580], "twine": [577, 580], "whl": [577, 580], "dist": [577, 580], "sdist": [577, 580], "bdist_wheel": [577, 580], "frontend": [577, 580], "login": [577, 580, 593], "cut": [577, 580], "fork": [577, 580], "admin_github_token": [577, 580], "pypi_token": [577, 580], "npm_token": [577, 580], "secret": [577, 580], "draft": [577, 580], "changelog": [577, 580, 581], "pkg": [577, 580], "bot": [577, 580], "pick": [577, 580, 583], "feedstock": [577, 580], "hatch": 580, "notabl": 581, "vscode": [581, 583], "daili": 582, "give": [582, 597], "advantag": [582, 587, 589, 597], "remot": 582, "market": 582, "upper": 582, "sidebar": 582, "hover": 582, "track": [582, 593], "argpars": 582, "diff": 582, "manifest": 583, "declar": 583, "palett": 583, "registercommand": 583, "amodio": 583, "tsl": 583, "matcher": 583, "dbaeumer": 583, "eslint": 583, "press": 583, "f5": 583, "ctrl": [583, 600], "cmd": 583, "hello": 583, "world": 583, "breakpoint": 583, "consol": 583, "relaunch": 583, "toolbar": 583, "node_modul": 583, "viewlet": 583, "dropdown": 583, "runner": 583, "startup": 583, "bundl": 583, "multi_object": 584, "benefit": [585, 587], "instanti": 585, "platinum": [586, 600], "8358": 586, "manufactur": 586, "m50cyp2sbstd": 586, "se5c620": 586, "86b": 586, "0005": 586, "2202160810": 586, "microcod": 586, "0xd000332": 586, "irq": 586, "60ghz": 586, "6chz": 586, "perf": 586, "512gb": 586, "16x32gb": 586, "ddr4": 586, "3200": 586, "mt": 586, "nic": 586, "1x": 586, "ethernet": 586, "100mb": 586, "i350": 586, "gigabit": 586, "drive": 586, "intel_ssdsckkb48": 586, "447": 586, "1g": 586, "factor": [586, 594, 600], "publicli": 586, "degre": 586, "mark": 586, "trademark": 586, "art": 587, "increasingli": 587, "crucial": 587, "salient": 587, "nonzero": 587, "irregular": 587, "anywher": 587, "2in4": 587, "amper": 587, "delet": 587, "due": [587, 590, 594, 595], "oc": 587, "kh": 587, "kw": 587, "shrink": 587, "examin": 587, "lowest": [587, 597], "head": 587, "fastform": 587, "formula": [587, 594], "emsp": 587, "partial": [587, 590], "downstream": 587, "co": 587, "discourag": 587, "push": [587, 594], "penal": 587, "parameter": 587, "exemplifi": 587, "complement": 587, "pruner1": 587, "pruner2": 587, "mention": 587, "readi": 587, "hesit": 587, "sst": [587, 600], "flan": 587, "t5": 587, "english": 587, "romanian": 587, "yolov5": 587, "signific": [587, 588, 590, 594], "reduct": [587, 599], "namhoon": 587, "lee": 587, "thalaiyasingam": 587, "ajanthan": 587, "philip": 587, "torr": 587, "2019": 587, "zafrir": 587, "ofir": 587, "ariel": 587, "larei": 587, "boudoukh": 587, "mosh": 587, "wasserblat": 587, "preprint": [587, 594], "2111": 587, "05754": 587, "2021": 587, "medium": 588, "mleffici": 588, "dec": 588, "wechat": 588, "deepen": 588, "foundat": 588, "intellig": 588, "vmware": 588, "virtual": 588, "applianc": 588, "bitnami": 588, "nov": 588, "sota": 588, "plug": 588, "twitter": 588, "linkedin": 588, "zone": 588, "land": 588, "gcp": 588, "pat": 588, "keynot": 588, "intelon": 588, "sep": 588, "chines": 588, "aug": 588, "purif": 588, "sacrif": 588, "jun": 588, "partner": 588, "apr": 588, "feb": 588, "joint": 588, "msft": 588, "bilibili": 588, "gestalt": 588, "ml": 588, "doubl": 588, "mlperf": [588, 600], "reconstruct": 588, "abound": 588, "lpot": [588, 592], "nextplatform": 588, "cern": 588, "gan": 588, "3dgan": 588, "iml": 588, "workshop": 588, "asplo": 588, "18": [588, 600], "highli": 588, "intelcaff": 588, "aris": 589, "tell": 589, "henc": 589, "onnxrt_qoper": 589, "quant_aware_train": 589, "weight_compress": [589, 599], "initial_spars": [589, 599], "prune_typ": [589, 599], "basic_magnitud": [589, 599], "update_frequ": 589, "prune_domain": 589, "tile_pattern_1x1": 589, "invent": 590, "int4": 590, "cost": 590, "theoret": 590, "affin": 590, "zeropoint": 590, "asymmetr": [590, 597], "255": [590, 594], "overflow": 590, "solv": [590, 592], "fbgemm": 590, "unseen": 590, "enough": 590, "peopl": 590, "mimic": 590, "fact": 590, "ultim": 590, "pain": 590, "lossi": 590, "understand": [590, 595, 598], "philosophi": 590, "neither": 590, "nor": 590, "val_load": 590, "top1": [590, 600], "avg": 590, "themselv": 590, "tensorrtexecutionprovid": 590, "cudaexecutionprovid": 590, "ON": 591, "forc": 591, "postposttrainingquantconfig": 591, "bf16wrapper": 591, "retrac": 591, "site": 592, "assist": 592, "comparison": [592, 595], "sed": 592, "your_script": 592, "backbon": 593, "interact": 593, "sigopt_experiment_id": 593, "nc": [593, 597], "certain": 593, "suffici": 593, "ordinari": 593, "capac": 593, "receiv": 593, "latenc": [593, 597], "draw": [593, 597], "mobilenet": [593, 600], "durat": 593, "8266": 593, "8372": 593, "2132": 593, "83": [593, 594, 600], "7495": 593, "8299": 593, "8294": 593, "85": [593, 594, 600], "0837": 593, "8291": 593, "4469": 593, "llm": 594, "gigant": 594, "systemat": 594, "outlier": 594, "quantif": 594, "difficulti": 594, "mathemat": 594, "allevi": 594, "coarsest": 594, "finer": [594, 597], "matric": 594, "similarli": 594, "finest": 594, "consumpt": 594, "why": [594, 595], "suppos": 594, "6839": 594, "4741": 594, "7451": 594, "9301": 594, "1742": 594, "6835": 594, "frac": 594, "q_min": 594, "q_max": 594, "clip": 594, "q_x": 594, "clamp_": 594, "round_": 594, "w_q": 594, "00296431384049356": 594, "59": [594, 600], "172": 594, "192": 594, "w_dq": 594, "1220": 594, "0500": 594, "1430": 594, "2570": 594, "1890": 594, "mseloss": 594, "1983354538679123": 594, "0020850980654358864": 594, "70": [594, 600], "6848": 594, "4743": 594, "7440": 594, "9308": 594, "1749": 594, "affect": 594, "quantize_per_channel": 594, "x_tmp": 594, "detach": 594, "keepdim": 594, "divid": [594, 597], "nbia": 594, "dequantize_per_channel": 594, "0029": [594, 600], "0036": 594, "162": [594, 600], "48": [594, 600], "72": [594, 600], "93": [594, 600], "207": [594, 600], "139": [594, 600], "0027": 594, "0017": 594, "66": [594, 600], "6837": 594, "4734": 594, "1751": 594, "6821": 594, "637690492221736e": 594, "cdot": 594, "quantize_per_tensor_absmax": 594, "n_bit": 594, "div_": 594, "mul_": 594, "0806": 594, "7589": 594, "6038": 594, "3815": 594, "5040": 594, "7174": 594, "5444": 594, "5826": 594, "7772": 594, "5555": 594, "3740": 594, "3253": 594, "0698": 594, "1381": 594, "5972": 594, "0086": 594, "0737": 594, "8298": 594, "6883": 594, "2991": 594, "1601": 594, "6506": 594, "8246": 594, "3924": 594, "3845": 594, "8768": 594, "w_scale": 594, "x_q": 594, "x_scale": 594, "84": [594, 600], "0059755356051027775": 594, "89": [594, 600], "119": [594, 600], "57": [594, 600], "91": [594, 600], "006533813662827015": 594, "y_q": 594, "17509": 594, "7608": 594, "4055": 594, "16599": 594, "21020": 594, "10016": 594, "9860": 594, "22444": 594, "y_dq": 594, "6836": 594, "2970": 594, "1583": 594, "6481": 594, "8207": 594, "3911": 594, "3850": 594, "8763": 594, "prove": 594, "simplic": 594, "middl": 594, "denot": 594, "fp1": 594, "fp2": 594, "subsect": [594, 599], "explain": 594, "suppress": 594, "straightforward": 594, "intuit": 594, "x1": [594, 597], "x2": [594, 597], "larger": 594, "herebi": 594, "sq": 594, "torchscript": 594, "hardtanh": 594, "t5norm": 594, "llamanorm": 594, "groupnorm": 594, "fc2": 594, "bigscienc": 594, "560m": 594, "65": [594, 600], "63": [594, 600], "44": [594, 600], "76": [594, 600], "1b7": 594, "71": [594, 600], "43": [594, 600], "67": [594, 600], "78": [594, 596, 600], "56": [594, 600], "58": [594, 600], "3b": 594, "73": [594, 600], "69": [594, 600], "99": [594, 600], "74": [594, 600], "7b1": 594, "77": [594, 600], "75": [594, 600], "46": [594, 600], "82": [594, 600], "facebook": 594, "125m": 594, "94": [594, 596, 600], "7b": 594, "79": [594, 595, 600], "60": [594, 600], "25": [594, 600], "81": [594, 600], "26": [594, 600], "39": [594, 600], "eleutherai": 594, "6b": 594, "jason": 594, "wei": 594, "emerg": 594, "transact": 594, "yvinec": 594, "edouard": 594, "proceed": 594, "cvf": 594, "winter": 594, "xiui": 594, "2209": 594, "13325": 594, "xiao": 594, "guangxuan": 594, "2211": 594, "10438": 594, "discov": 595, "valuabl": 595, "instrument": 595, "writer": 595, "_pre_eval_hook": 595, "_post_eval_hook": 595, "submodul": 595, "whitelist": 595, "_recordingobserv": 595, "output_tensors_dict": 595, "current_it": 595, "get_tensor_valu": 595, "_observer_forward_hook": 595, "activation_post_process": 595, "_add_observer_": 595, "named_children": 595, "leaf": 595, "add_modul": 595, "register_forward_hook": 595, "dump_tim": 595, "summarywrit": 595, "_acc": 595, "tune_": 595, "add_graph": 595, "get_observer_dict": 595, "observer_dict": 595, "is_quant": 595, "add_histogram": 595, "bind_al": 595, "logdir_spec": 595, "tune_0_acc0": 595, "tune_1": 595, "tune_1_acc0": 595, "four": 595, "baseline_acc_0": 595, "776": 595, "tune_1_acc_0": 595, "095": 595, "runs_v3": 595, "image_recognit": 595, "run_tuning_dump_tensor": 595, "sh": 595, "inceptionv3": 595, "v0": 595, "cg": 595, "conv0": 595, "bash": 595, "run_tun": 595, "topologi": 595, "inception_v3": 595, "dataset_loc": 595, "inceptionv3_fp32_pretrained_model": 595, "nc_inceptionv3": 595, "inceptionv3_dump_tensor": 595, "poor": 595, "eightbit": 595, "disappear": 595, "centercrop": 596, "randomcrop": 596, "cropres": 596, "decodeimag": 596, "jpeg": 596, "encodejp": 596, "alignimagechannel": 596, "68": [596, 600], "116": 596, "103": 596, "017": 596, "bilinearimagenet": [596, 599], "topilimag": 596, "padding_mod": 596, "border": 596, "pixel": 596, "colorjitt": 596, "bright": 596, "satur": 596, "hue": 596, "jitter": 596, "tondarrai": 596, "quickli": [597, 598], "travers": 597, "human": 597, "concret": 597, "insight": 597, "aggress": 597, "classic": 597, "six": 597, "At": 597, "ii": 597, "iii": 597, "post_training_auto_qu": 597, "iv": 597, "vi": 597, "increment": 597, "primari": 597, "highest": 597, "spent": 597, "hawq_v2_loss": 597, "model_loss": 597, "black": 597, "come": 597, "discret": 597, "compli": 597, "posterior": 597, "focu": 597, "short": 597, "never": 597, "loglevel": 597, "endlessli": 597, "perspect": 597, "smbo": 597, "trial": 597, "appl": 597, "surrog": 597, "repeat": 597, "quantil": 597, "densiti": 597, "parzen": 597, "greatest": 597, "dai": 597, "next_tune_cfg": 597, "overridden": 597, "cluster": 597, "seamlessli": 597, "mpi": 597, "replic": 597, "replica": 597, "fed": 597, "handler": 597, "synchron": 597, "slave": 597, "abctunestrategi": 597, "familiar": 598, "mobilenet_v1": 599, "hyper": 599, "40": [599, 600], "06": [599, 600], "beta_1": 599, "beta_2": 599, "999": [599, 600], "epsilon": 599, "sparsecategoricalcrossentropi": 599, "sum_over_batch_s": 599, "from_logit": 599, "54": [599, 600], "19": [599, 600], "overal": 599, "8380": 600, "visit": 600, "performancethroughput": 600, "sec": 600, "86": 600, "00": 600, "170": 600, "82x": 600, "92": 600, "85x": 600, "61": 600, "83x": 600, "densenet": 600, "121": 600, "274": 600, "148": 600, "161": 600, "132": 600, "35": 600, "39x": 600, "169": 600, "38": 600, "36": 600, "191": 600, "118": 600, "61x": 600, "cnn": 600, "incept": 600, "37": 600, "55": 600, "84x": 600, "resnet101": 600, "21x": 600, "70x": 600, "51": 600, "14x": 600, "955": 600, "328": 600, "91x": 600, "709": 600, "282": 600, "51x": 600, "v3": 600, "337": 600, "160": 600, "11x": 600, "438": 600, "204": 600, "223": 600, "105": 600, "12x": 600, "10x": 600, "47": 600, "96": 600, "1347": 600, "439": 600, "07x": 600, "1192": 600, "492": 600, "42x": 600, "412": 600, "376": 600, "662": 600, "397": 600, "66x": 600, "299": 600, "23": 600, "154": 600, "93x": 600, "476": 600, "227": 600, "fashion": 600, "2734": 600, "1299": 600, "498": 600, "178": 600, "79x": 600, "427": 600, "173": 600, "47x": 600, "resnetv2": 600, "194": 600, "146": 600, "33x": 600, "237": 600, "187": 600, "27x": 600, "152": 600, "155": 600, "38x": 600, "302": 600, "215": 600, "40x": 600, "346": 600, "312": 600, "277": 600, "60x": 600, "273": 600, "31x": 600, "18x": 600, "53x": 600, "24x": 600, "vgg16": 600, "219": 600, "vgg19": 600, "193": 600, "11506": 600, "9665": 600, "19x": 600, "xception": 600, "262": 600, "137": 600, "barthez": 600, "143": 600, "02x": 600, "20x": 600, "209": 600, "08x": 600, "221": 600, "stsb": 600, "218": 600, "16x": 600, "62": 600, "57x": 600, "55x": 600, "56x": 600, "53": 600, "89x": 600, "blendcnn": 600, "4885": 600, "3715": 600, "camembert": 600, "206": 600, "09x": 600, "deberta": 600, "125": 600, "366": 600, "197": 600, "399": 600, "flaubert": 600, "592": 600, "385": 600, "54x": 600, "wikitext": 600, "hubert": 600, "446": 600, "181": 600, "46x": 600, "layoutlm": 600, "longform": 600, "49": 600, "mbart": 600, "625": 600, "451": 600, "lvwerra": 600, "pegasu": 600, "samsum": 600, "peleenet": 600, "402": 600, "29x": 600, "pokemon": 600, "275": 600, "334": 600, "48x": 600, "reform": 600, "crime": 600, "punish": 600, "153": 600, "06x": 600, "657": 600, "327": 600, "01x": 600, "812": 600, "344": 600, "36x": 600, "360": 600, "23x": 600, "resnext101": 600, "32x8d": 600, "182": 600, "squeezebert": 600, "195": 600, "150": 600, "30x": 600, "75x": 600, "transfo": 600, "xl": 600, "41x": 600, "wave2vec2": 600, "22x": 600, "102": 600, "00x": 600, "115": 600, "17x": 600, "yolo": 600, "232": 600, "28x": 600, "664": 600, "329": 600, "832": 600, "338": 600, "433": 600, "164": 600, "63x": 600, "836": 600, "1396": 600, "463": 600, "90x": 600, "159": 600, "32x": 600, "968": 600, "473": 600, "05x": 600, "958": 600, "477": 600, "arcfac": 600, "126": 600, "78x": 600, "298": 600, "124": 600, "624": 600, "254": 600, "45x": 600, "caffenet": 600, "1432": 600, "540": 600, "65x": 600, "1460": 600, "357": 600, "265": 600, "35x": 600, "86x": 600, "524": 600, "duc": 600, "efficientnet": 600, "1211": 600, "758": 600, "856": 600, "762": 600, "emot": 600, "ferplu": 600, "925": 600, "694": 600, "fcn": 600, "25x": 600, "googlenet": 600, "771": 600, "571": 600, "763": 600, "579": 600, "hf": 600, "156": 600, "multilingu": 600, "99x": 600, "199": 600, "104": 600, "73x": 600, "449": 600, "74x": 600, "l12": 600, "h384": 600, "466": 600, "247": 600, "88x": 600, "l6": 600, "523": 600, "354": 600, "183": 600, "107": 600, "spanbert": 600, "208": 600, "795": 600, "780": 600, "591": 600, "515": 600, "15x": 600, "2370": 600, "1526": 600, "2216": 600, "1506": 600, "2078": 600, "1028": 600, "1762": 600, "76x": 600, "mobilenetv2": 600, "2615": 600, "1645": 600, "59x": 600, "2461": 600, "1674": 600, "766": 600, "431": 600, "77x": 600, "575": 600, "430": 600, "34x": 600, "747": 600, "564": 600, "594": 600, "590": 600, "643": 600, "253": 600, "shufflenet": 600, "2354": 600, "1461": 600, "1850": 600, "1368": 600, "squeezenet": 600, "2484": 600, "1912": 600, "2526": 600, "1911": 600, "710": 600, "549": 600, "622": 600, "497": 600, "652": 600, "507": 600, "573": 600, "470": 600, "527": 600, "396": 600, "68x": 600, "tini": 600, "647": 600, "514": 600, "26x": 600, "ultrafac": 600, "314": 600, "50x": 600, "304": 600, "316": 600, "315": 600, "zfnet": 600, "462": 600, "268": 600, "72x": 600, "465": 600, "62x": 600, "436": 600, "270": 600, "429": 600, "92x": 600, "94x": 600, "331": 600, "242": 600, "37x": 600, "98x": 600, "taskdataset": 600, "accuracyspars": 600, "ratiospars": 600, "commentsbalanc": 600, "unbalanc": 600, "mini": 600, "answeringsquad": 600, "87f1": 600, "momentumunbalanc": 600, "momentumbalanc": 600, "90f1": 600, "59f1": 600, "23f1": 600, "classificationmrpc": 600, "52f1": 600, "26f1": 600, "classificationsst": 600, "61accuraci": 600, "recognitionimagenet": 600, "95top1": 600, "2x1": 600, "v5s6": 600, "detectioncoco": 600, "ap0": 600, "404": 600, "6ap0": 600, "393": 600, "584": 600, "34f1": 600, "lassounbalanc": 600, "classificationmnli": 600, "mm": 600, "allbalanc": 600, "32accuraci": 600, "sensitivitybalanc": 600, "classificationqqp": 600, "classificationqnli": 600, "54accuraci": 600, "em": 600, "7965": 600, "wideresnet40": 600, "9522": 600, "8178": 600, "0213": 600, "8235": 600, "027": 600, "5494": 600, "7153": 600, "5540": 600, "0046": 600, "5523": 600, "vgg": 600, "bn": 600, "7022": 600, "7415": 600, "7025": 600, "0003": 600, "wip": 600, "6739": 600, "7399": 600, "6845": 600, "0106": 600, "7034": 600, "8382": 600, "bilstm": 600, "8314": 600, "9403": 600, "9048": 600, "0734": 600, "7323": 600, "8256": 600, "8084": 600, "8814": 600, "7442": 600, "8371": 600, "0119": 600, "0115": 600, "tinybert": 600, "8018": 600, "8044": 600, "8363": 600, "8411": 600, "8025": 600, "8074": 600, "0007": 600, "0030": 600, "8626": 600, "8213": 600, "9091": 600, "8782": 600, "8684": 600, "8259": 600, "0058": 600, "distilroberta": 600, "6057": 600, "6455": 600, "6187": 600, "0130": 600, "c6i": 600, "2xlarg": 600, "c6a": 600, "c6g": 600, "a100cuda": 600}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [288, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[7, 0, 0, "-", "adaptor"], [153, 0, 0, "-", "algorithm"], [156, 0, 0, "-", "benchmark"], [160, 0, 0, "-", "compression"], [170, 0, 0, "-", "conf"], [172, 0, 0, "-", "config"], [173, 0, 0, "-", "contrib"], [198, 0, 0, "-", "data"], [250, 0, 0, "-", "experimental"], [295, 0, 0, "-", "metric"], [297, 0, 0, "-", "mix_precision"], [299, 0, 0, "-", "model"], [307, 0, 0, "-", "objective"], [308, 0, 0, "-", "quantization"], [316, 0, 0, "-", "strategy"], [328, 0, 0, "-", "template"], [329, 0, 0, "-", "training"], [333, 0, 0, "-", "utils"], [475, 0, 0, "-", "ux"], [521, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [12, 0, 0, "-", "keras_utils"], [15, 0, 0, "-", "mxnet"], [16, 0, 0, "-", "mxnet_utils"], [18, 0, 0, "-", "onnxrt"], [20, 0, 0, "-", "ox_utils"], [43, 0, 0, "-", "pytorch"], [44, 0, 0, "-", "query"], [45, 0, 0, "-", "tensorflow"], [109, 0, 0, "-", "tf_utils"], [147, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[9, 0, 0, "-", "conv2d"], [10, 0, 0, "-", "dense"], [11, 0, 0, "-", "depthwise_conv2d"], [13, 0, 0, "-", "quantizer"], [14, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[15, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[17, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, 2, 1, "", "CalibCollector"], [17, 2, 1, "", "CalibData"], [17, 2, 1, "", "CollectorBase"], [17, 2, 1, "", "DataIterLoader"], [17, 2, 1, "", "DataLoaderWrap"], [17, 2, 1, "", "NameCollector"], [17, 2, 1, "", "OpType"], [17, 2, 1, "", "TensorCollector"], [17, 1, 1, "", "amp_convert"], [17, 1, 1, "", "calib_model"], [17, 1, 1, "", "check_mx_version"], [17, 1, 1, "", "combine_capabilities"], [17, 1, 1, "", "create_data_example"], [17, 1, 1, "", "distribute_calib_tensors"], [17, 1, 1, "", "ensure_list"], [17, 1, 1, "", "fuse"], [17, 1, 1, "", "get_framework_name"], [17, 1, 1, "", "is_model_quantized"], [17, 1, 1, "", "isiterable"], [17, 1, 1, "", "make_module"], [17, 1, 1, "", "make_nc_model"], [17, 1, 1, "", "make_symbol_block"], [17, 1, 1, "", "ndarray_to_device"], [17, 1, 1, "", "parse_tune_config"], [17, 1, 1, "", "prepare_dataloader"], [17, 1, 1, "", "prepare_model"], [17, 1, 1, "", "prepare_model_data"], [17, 1, 1, "", "quantize_sym_model"], [17, 1, 1, "", "query_quantizable_nodes"], [17, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[18, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [18, 2, 1, "", "ONNXRT_QDQAdaptor"], [18, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [18, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[19, 0, 0, "-", "calibration"], [32, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.operators": [[21, 0, 0, "-", "activation"], [22, 0, 0, "-", "argmax"], [23, 0, 0, "-", "attention"], [24, 0, 0, "-", "binary_op"], [25, 0, 0, "-", "concat"], [26, 0, 0, "-", "conv"], [27, 0, 0, "-", "direct_q8"], [28, 0, 0, "-", "embed_layernorm"], [29, 0, 0, "-", "gather"], [30, 0, 0, "-", "gavgpool"], [31, 0, 0, "-", "gemm"], [33, 0, 0, "-", "lstm"], [34, 0, 0, "-", "matmul"], [35, 0, 0, "-", "maxpool"], [36, 0, 0, "-", "ops"], [37, 0, 0, "-", "pad"], [38, 0, 0, "-", "pooling"], [39, 0, 0, "-", "resize"], [40, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[21, 2, 1, "", "ActivationOperator"], [21, 2, 1, "", "QActivationOperator"], [21, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[22, 2, 1, "", "ArgMaxOperator"], [22, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[23, 2, 1, "", "AttentionOperator"], [23, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[24, 2, 1, "", "BinaryOperator"], [24, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[25, 2, 1, "", "ConcatOperator"], [25, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[26, 2, 1, "", "ConvOperator"], [26, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[27, 2, 1, "", "Direct8BitOperator"], [27, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[28, 2, 1, "", "EmbedLayerNormalizationOperator"], [28, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[29, 2, 1, "", "GatherOperator"], [29, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[30, 2, 1, "", "GlobalAveragePoolOperator"], [30, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[31, 2, 1, "", "GemmOperator"], [31, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[33, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[34, 2, 1, "", "MatMulOperator"], [34, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[35, 2, 1, "", "MaxPoolOperator"], [35, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[36, 2, 1, "", "Operator"], [36, 2, 1, "", "QOperator"], [36, 1, 1, "", "op_registry"], [36, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[37, 2, 1, "", "PadOperator"], [37, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[38, 2, 1, "", "PoolOperator"], [38, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[39, 2, 1, "", "QResizeOperator"], [39, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[40, 2, 1, "", "QSplitOperator"], [40, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[42, 2, 1, "", "QuantFormat"], [42, 2, 1, "", "QuantType"], [42, 2, 1, "", "QuantizationMode"], [42, 2, 1, "", "QuantizedInitializer"], [42, 2, 1, "", "QuantizedValue"], [42, 2, 1, "", "QuantizedValueType"], [42, 2, 1, "", "ValueInfo"], [42, 1, 1, "", "adjust_weights_per_input"], [42, 1, 1, "", "adjust_weights_per_op"], [42, 1, 1, "", "attribute_to_kwarg"], [42, 1, 1, "", "calculate_scale_zp"], [42, 1, 1, "", "cast_tensor"], [42, 1, 1, "", "collate_preds"], [42, 1, 1, "", "dequantize_data"], [42, 1, 1, "", "dequantize_data_with_scale_zero"], [42, 1, 1, "", "dtype_to_name"], [42, 1, 1, "", "find_by_name"], [42, 1, 1, "", "float_to_bfloat16"], [42, 1, 1, "", "float_to_float16"], [42, 1, 1, "", "get_smooth_scales_per_input"], [42, 1, 1, "", "get_smooth_scales_per_op"], [42, 1, 1, "", "insert_smooth_mul_op_per_input"], [42, 1, 1, "", "insert_smooth_mul_op_per_op"], [42, 1, 1, "", "is_B_transposed"], [42, 1, 1, "", "make_dquant_node"], [42, 1, 1, "", "make_quant_node"], [42, 1, 1, "", "quantize_data"], [42, 1, 1, "", "quantize_data_per_channel"], [42, 1, 1, "", "quantize_data_with_scale_zero"], [42, 1, 1, "", "quantize_nparray"], [42, 1, 1, "", "remove_init_from_model_input"], [42, 1, 1, "", "split_shared_bias"], [42, 1, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[43, 2, 1, "", "PyTorchAdaptor"], [43, 2, 1, "", "PyTorch_FXAdaptor"], [43, 2, 1, "", "PyTorch_IPEXAdaptor"], [43, 2, 1, "", "TemplateAdaptor"], [43, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[44, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[45, 2, 1, "", "TensorFlowAdaptor"], [45, 2, 1, "", "TensorflowQuery"], [45, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[46, 0, 0, "-", "graph_converter"], [47, 0, 0, "-", "graph_converter_without_calib"], [85, 0, 0, "-", "graph_rewriter"], [108, 0, 0, "-", "graph_util"], [110, 0, 0, "-", "quantize_graph"], [137, 0, 0, "-", "quantize_graph_common"], [138, 0, 0, "-", "tf2onnx_converter"], [141, 0, 0, "-", "transform_graph"], [144, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[46, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[47, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[49, 0, 0, "-", "bf16"], [74, 0, 0, "-", "generic"], [84, 0, 0, "-", "graph_base"], [93, 0, 0, "-", "int8"], [99, 0, 0, "-", "onnx"], [104, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[48, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[48, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[50, 0, 0, "-", "convert_add_to_biasadd"], [51, 0, 0, "-", "convert_layout"], [52, 0, 0, "-", "convert_leakyrelu"], [53, 0, 0, "-", "convert_nan_to_random"], [54, 0, 0, "-", "convert_placeholder_to_const"], [55, 0, 0, "-", "dequantize_cast_optimizer"], [56, 0, 0, "-", "dilated_contraction"], [57, 0, 0, "-", "dummy_biasadd"], [58, 0, 0, "-", "expanddims_optimizer"], [59, 0, 0, "-", "fetch_weight_from_reshape"], [60, 0, 0, "-", "fold_batch_norm"], [61, 0, 0, "-", "fold_constant"], [62, 0, 0, "-", "fuse_biasadd_add"], [63, 0, 0, "-", "fuse_column_wise_mul"], [64, 0, 0, "-", "fuse_conv_with_math"], [65, 0, 0, "-", "fuse_decomposed_bn"], [66, 0, 0, "-", "fuse_decomposed_in"], [67, 0, 0, "-", "fuse_gelu"], [68, 0, 0, "-", "fuse_layer_norm"], [69, 0, 0, "-", "fuse_pad_with_conv"], [70, 0, 0, "-", "fuse_pad_with_fp32_conv"], [71, 0, 0, "-", "fuse_reshape_transpose"], [72, 0, 0, "-", "graph_cse_optimizer"], [73, 0, 0, "-", "grappler_pass"], [75, 0, 0, "-", "insert_print_node"], [76, 0, 0, "-", "move_squeeze_after_relu"], [77, 0, 0, "-", "pre_optimize"], [78, 0, 0, "-", "remove_training_nodes"], [79, 0, 0, "-", "rename_batch_norm"], [80, 0, 0, "-", "split_shared_input"], [81, 0, 0, "-", "strip_equivalent_nodes"], [82, 0, 0, "-", "strip_unused_nodes"], [83, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[50, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[51, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[52, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[53, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[54, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[55, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[56, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[57, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[58, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[59, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[60, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[61, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[62, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[63, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[64, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[65, 2, 1, "", "FuseDecomposedBNOptimizer"], [65, 1, 1, "", "bypass_reshape"], [65, 1, 1, "", "get_const_dim_count"], [65, 1, 1, "", "node_from_map"], [65, 1, 1, "", "node_name_from_input"], [65, 1, 1, "", "valid_reshape_inputs"], [65, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[66, 2, 1, "", "FuseDecomposedINOptimizer"], [66, 1, 1, "", "bypass_reshape"], [66, 1, 1, "", "get_const_dim_count"], [66, 1, 1, "", "node_from_map"], [66, 1, 1, "", "node_name_from_input"], [66, 1, 1, "", "valid_reshape_inputs"], [66, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[67, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[68, 2, 1, "", "FuseLayerNormOptimizer"], [68, 1, 1, "", "node_from_map"], [68, 1, 1, "", "node_name_from_input"], [68, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[69, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[70, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[71, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[72, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[73, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[75, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[76, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[77, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[78, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[79, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[80, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[81, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[82, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[83, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[84, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[86, 0, 0, "-", "freeze_fake_quant"], [87, 0, 0, "-", "freeze_value"], [88, 0, 0, "-", "freeze_value_without_calib"], [89, 0, 0, "-", "fuse_conv_redundant_dequantize"], [90, 0, 0, "-", "fuse_conv_requantize"], [91, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [92, 0, 0, "-", "fuse_matmul_requantize"], [94, 0, 0, "-", "meta_op_optimizer"], [95, 0, 0, "-", "post_hostconst_converter"], [96, 0, 0, "-", "post_quantized_op_cse"], [97, 0, 0, "-", "rnn_convert"], [98, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[86, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[87, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[88, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[89, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[90, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[91, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[92, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [92, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [92, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [92, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[94, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[95, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[96, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[97, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[98, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, 0, 0, "-", "onnx_graph"], [101, 0, 0, "-", "onnx_node"], [102, 0, 0, "-", "onnx_schema"], [103, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[100, 2, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[101, 2, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[102, 2, 1, "", "OnnxOpSchema"], [102, 1, 1, "", "get_max_supported_opset_version"], [102, 1, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[103, 2, 1, "", "SeqType"], [103, 1, 1, "", "add_port_to_name"], [103, 1, 1, "", "are_shapes_equal"], [103, 1, 1, "", "assert_error"], [103, 1, 1, "", "compute_const_folding_using_tf"], [103, 1, 1, "", "convert_tensorflow_tensor_to_onnx"], [103, 1, 1, "", "find_opset"], [103, 1, 1, "", "get_index_from_strided_slice_of_shape"], [103, 1, 1, "", "get_subgraphs_from_onnx"], [103, 1, 1, "", "get_tensorflow_node_attr"], [103, 1, 1, "", "get_tensorflow_node_shape_attr"], [103, 1, 1, "", "get_tensorflow_tensor_data"], [103, 1, 1, "", "get_tensorflow_tensor_shape"], [103, 1, 1, "", "infer_onnx_shape_dtype"], [103, 1, 1, "", "initialize_name_counter"], [103, 1, 1, "", "is_list_or_tuple"], [103, 1, 1, "", "is_onnx_domain"], [103, 1, 1, "", "make_onnx_inputs_outputs"], [103, 1, 1, "", "make_onnx_shape"], [103, 1, 1, "", "map_numpy_to_onnx_dtype"], [103, 1, 1, "", "map_onnx_to_numpy_type"], [103, 1, 1, "", "map_tensorflow_dtype"], [103, 1, 1, "", "read_tensorflow_node_attrs"], [103, 1, 1, "", "save_protobuf"], [103, 1, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, 0, 0, "-", "insert_qdq_pattern"], [106, 0, 0, "-", "merge_duplicated_qdq"], [107, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[105, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[106, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[107, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[108, 2, 1, "", "GraphAnalyzer"], [108, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, 0, 0, "-", "qat"], [128, 0, 0, "-", "qdq"], [130, 0, 0, "-", "quantize_graph_base"], [131, 0, 0, "-", "quantize_graph_bn"], [132, 0, 0, "-", "quantize_graph_concatv2"], [133, 0, 0, "-", "quantize_graph_conv"], [134, 0, 0, "-", "quantize_graph_for_intel_cpu"], [135, 0, 0, "-", "quantize_graph_matmul"], [136, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[111, 0, 0, "-", "fake_quantize"], [113, 0, 0, "-", "quantize_config"], [114, 0, 0, "-", "quantize_helper"], [115, 0, 0, "-", "quantize_layers"], [120, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[111, 2, 1, "", "FakeQuantize"], [111, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[113, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[114, 1, 1, "", "init_quantize_config"], [114, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, 0, 0, "-", "optimize_layer"], [117, 0, 0, "-", "quantize_layer_add"], [118, 0, 0, "-", "quantize_layer_base"], [119, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[116, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[117, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[118, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[119, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[120, 2, 1, "", "QuantizeWrapper"], [120, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[121, 0, 0, "-", "fuse_qdq_bn"], [122, 0, 0, "-", "fuse_qdq_concatv2"], [123, 0, 0, "-", "fuse_qdq_conv"], [124, 0, 0, "-", "fuse_qdq_deconv"], [125, 0, 0, "-", "fuse_qdq_in"], [126, 0, 0, "-", "fuse_qdq_matmul"], [127, 0, 0, "-", "fuse_qdq_pooling"], [129, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[121, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[122, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[123, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[124, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[125, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[126, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[127, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[129, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[130, 2, 1, "", "QuantizeGraphBase"], [130, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[131, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[132, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[133, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[134, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[135, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[136, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[137, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[138, 2, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[139, 0, 0, "-", "bias_correction"], [140, 0, 0, "-", "graph_transform_base"], [142, 0, 0, "-", "insert_logging"], [143, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[139, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[140, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[142, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[143, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[144, 1, 1, "", "collate_tf_preds"], [144, 1, 1, "", "disable_random"], [144, 1, 1, "", "fix_ref_type_of_graph_def"], [144, 1, 1, "", "generate_feed_dict"], [144, 1, 1, "", "get_estimator_graph"], [144, 1, 1, "", "get_graph_def"], [144, 1, 1, "", "get_input_output_node_names"], [144, 1, 1, "", "get_model_input_shape"], [144, 1, 1, "", "get_tensor_by_name"], [144, 1, 1, "", "get_tensor_val_from_graph_node"], [144, 1, 1, "", "int8_node_name_reverse"], [144, 1, 1, "", "is_ckpt_format"], [144, 1, 1, "", "is_saved_model_format"], [144, 1, 1, "", "iterator_sess_run"], [144, 1, 1, "", "read_graph"], [144, 1, 1, "", "strip_equivalent_nodes"], [144, 1, 1, "", "strip_unused_nodes"], [144, 1, 1, "", "tf_diagnosis_helper"], [144, 1, 1, "", "version1_eq_version2"], [144, 1, 1, "", "version1_gt_version2"], [144, 1, 1, "", "version1_gte_version2"], [144, 1, 1, "", "version1_lt_version2"], [144, 1, 1, "", "version1_lte_version2"], [144, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[145, 0, 0, "-", "bf16_convert"], [146, 0, 0, "-", "hawq_metric"], [148, 0, 0, "-", "smooth_quant"], [149, 0, 0, "-", "symbolic_trace"], [150, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[145, 2, 1, "", "BF16ModuleWrapper"], [145, 1, 1, "", "Convert"], [145, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[146, 2, 1, "", "HessianTrace"], [146, 2, 1, "", "Node_collector"], [146, 1, 1, "", "compare_weights"], [146, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[148, 2, 1, "", "GraphTrace"], [148, 2, 1, "", "TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[149, 1, 1, "", "symbolic_trace"], [149, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[150, 1, 1, "", "append_attr"], [150, 1, 1, "", "auto_copy"], [150, 1, 1, "", "check_cfg_and_qconfig"], [150, 1, 1, "", "collate_torch_preds"], [150, 1, 1, "", "fetch_module"], [150, 1, 1, "", "generate_activation_observer"], [150, 1, 1, "", "get_embedding_contiguous"], [150, 1, 1, "", "get_example_input"], [150, 1, 1, "", "get_fallback_order"], [150, 1, 1, "", "get_mse_order_per_fp32"], [150, 1, 1, "", "get_mse_order_per_int8"], [150, 1, 1, "", "get_quantizable_ops_from_cfgs"], [150, 1, 1, "", "get_torch_version"], [150, 1, 1, "", "input2tuple"], [150, 1, 1, "", "is_fused_module"], [150, 1, 1, "", "paser_cfgs"], [150, 1, 1, "", "set_module"], [150, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[151, 0, 0, "-", "algorithm"], [152, 0, 0, "-", "fast_bias_correction"], [154, 0, 0, "-", "smooth_quant"], [155, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[151, 2, 1, "", "ALGORITHMS"], [151, 2, 1, "", "Algorithm"], [151, 2, 1, "", "AlgorithmScheduler"], [151, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[152, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[154, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[155, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[156, 1, 1, "", "fit"], [156, 1, 1, "", "get_architecture"], [156, 1, 1, "", "get_bounded_threads"], [156, 1, 1, "", "get_core_ids"], [156, 1, 1, "", "get_physical_ids"], [156, 1, 1, "", "get_threads"], [156, 1, 1, "", "get_threads_per_core"], [156, 1, 1, "", "set_all_env_var"], [156, 1, 1, "", "set_env_var"]], "neural_compressor.compression": [[157, 0, 0, "-", "callbacks"], [159, 0, 0, "-", "distillation"], [162, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[157, 2, 1, "", "BaseCallbacks"], [157, 2, 1, "", "DistillationCallbacks"], [157, 2, 1, "", "PruningCallbacks"], [157, 2, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[157, 3, 1, "", "_epoch_ran"], [157, 3, 1, "", "best_model"], [157, 3, 1, "", "best_score"], [157, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[158, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[158, 2, 1, "", "Criterions"], [158, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [158, 2, 1, "", "KnowledgeDistillationFramework"], [158, 2, 1, "", "KnowledgeDistillationLoss"], [158, 2, 1, "", "PyTorchCriterions"], [158, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [158, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [158, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [158, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [158, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [158, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [158, 2, 1, "", "SelfKnowledgeDistillationLoss"], [158, 2, 1, "", "TensorflowCriterions"], [158, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [158, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [158, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [158, 1, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[161, 0, 0, "-", "criteria"], [163, 0, 0, "-", "patterns"], [164, 0, 0, "-", "pruners"], [165, 0, 0, "-", "regs"], [166, 0, 0, "-", "schedulers"], [167, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[161, 2, 1, "", "GradientCriterion"], [161, 2, 1, "", "MagnitudeCriterion"], [161, 2, 1, "", "PruningCriterion"], [161, 2, 1, "", "SnipCriterion"], [161, 2, 1, "", "SnipMomentumCriterion"], [161, 1, 1, "", "get_criterion"], [161, 1, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[161, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[161, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[161, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[161, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[161, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.patterns": [[163, 2, 1, "", "BasePattern"], [163, 2, 1, "", "PatternNInM"], [163, 2, 1, "", "PatternNxM"], [163, 1, 1, "", "get_pattern"], [163, 1, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[163, 3, 1, "", "config"], [163, 3, 1, "", "invalid_layers"], [163, 3, 1, "", "is_global"], [163, 3, 1, "", "keep_mask_layers"], [163, 3, 1, "", "max_sparsity_ratio_per_op"], [163, 3, 1, "", "min_sparsity_ratio_per_op"], [163, 3, 1, "", "modules"], [163, 3, 1, "", "pattern"], [163, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[163, 3, 1, "", "M"], [163, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[163, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[164, 2, 1, "", "BasePruner"], [164, 2, 1, "", "BasicPruner"], [164, 2, 1, "", "PatternLockPruner"], [164, 2, 1, "", "ProgressivePruner"], [164, 1, 1, "", "get_pruner"], [164, 1, 1, "", "parse_valid_pruner_types"], [164, 1, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[164, 3, 1, "", "config"], [164, 3, 1, "", "current_sparsity_ratio"], [164, 3, 1, "", "end_step"], [164, 3, 1, "", "global_step"], [164, 3, 1, "", "masks"], [164, 3, 1, "", "max_sparsity_ratio_per_op"], [164, 3, 1, "", "modules"], [164, 3, 1, "", "pattern"], [164, 3, 1, "", "pruning_frequency"], [164, 3, 1, "", "scheduler"], [164, 3, 1, "", "scores"], [164, 3, 1, "", "start_step"], [164, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[164, 3, 1, "", "criterion"], [164, 3, 1, "", "pattern"], [164, 3, 1, "", "reg"], [164, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[165, 2, 1, "", "BaseReg"], [165, 2, 1, "", "GroupLasso"], [165, 1, 1, "", "get_reg"], [165, 1, 1, "", "get_reg_type"], [165, 1, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[165, 3, 1, "", "alpha"], [165, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[166, 2, 1, "", "IterativeScheduler"], [166, 2, 1, "", "OneshotScheduler"], [166, 2, 1, "", "PruningScheduler"], [166, 1, 1, "", "get_scheduler"], [166, 1, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[166, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[167, 1, 1, "", "check_config"], [167, 1, 1, "", "check_key_validity"], [167, 1, 1, "", "generate_pruner_config"], [167, 1, 1, "", "get_sparsity_ratio"], [167, 1, 1, "", "parse_to_prune"], [167, 1, 1, "", "process_and_check_config"], [167, 1, 1, "", "process_config"], [167, 1, 1, "", "process_weight_config"], [167, 1, 1, "", "process_yaml_config"], [167, 1, 1, "", "reset_none_to_default"], [167, 1, 1, "", "update_params"]], "neural_compressor.conf": [[168, 0, 0, "-", "config"], [169, 0, 0, "-", "dotdict"], [171, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[168, 2, 1, "", "Benchmark_Conf"], [168, 2, 1, "", "Conf"], [168, 2, 1, "", "DefaultConf"], [168, 2, 1, "", "Distillation_Conf"], [168, 2, 1, "", "Graph_Optimization_Conf"], [168, 2, 1, "", "MixedPrecision_Conf"], [168, 2, 1, "", "NASConfig"], [168, 2, 1, "", "PrunerV2"], [168, 2, 1, "", "Pruning_Conf"], [168, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[169, 2, 1, "", "DotDict"], [169, 1, 1, "", "deep_get"], [169, 1, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[171, 2, 1, "", "QuantizationConfig"]], "neural_compressor.config": [[172, 2, 1, "", "AccuracyCriterion"], [172, 2, 1, "", "BenchmarkConfig"], [172, 2, 1, "", "DistillationConfig"], [172, 2, 1, "", "ExportConfig"], [172, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [172, 2, 1, "", "KnowledgeDistillationLossConfig"], [172, 2, 1, "", "MixedPrecisionConfig"], [172, 2, 1, "", "ONNXQlinear2QDQConfig"], [172, 2, 1, "", "Options"], [172, 2, 1, "", "PostTrainingQuantConfig"], [172, 2, 1, "", "QuantizationAwareTrainingConfig"], [172, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [172, 2, 1, "", "TF2ONNXConfig"], [172, 2, 1, "", "Torch2ONNXConfig"], [172, 2, 1, "", "TuningCriterion"], [172, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[174, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[175, 0, 0, "-", "sigopt"], [176, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[175, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[176, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[181, 0, 0, "-", "dataloaders"], [193, 0, 0, "-", "datasets"], [197, 0, 0, "-", "filters"], [201, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[177, 0, 0, "-", "base_dataloader"], [178, 0, 0, "-", "dataloader"], [179, 0, 0, "-", "default_dataloader"], [180, 0, 0, "-", "fetcher"], [182, 0, 0, "-", "mxnet_dataloader"], [183, 0, 0, "-", "onnxrt_dataloader"], [184, 0, 0, "-", "pytorch_dataloader"], [185, 0, 0, "-", "sampler"], [186, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[177, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[178, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[179, 2, 1, "", "DefaultDataLoader"], [179, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[180, 2, 1, "", "Fetcher"], [180, 2, 1, "", "IndexFetcher"], [180, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[182, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[183, 2, 1, "", "ONNXRTBertDataLoader"], [183, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[184, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[185, 2, 1, "", "BatchSampler"], [185, 2, 1, "", "IterableSampler"], [185, 2, 1, "", "Sampler"], [185, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[186, 2, 1, "", "TFDataDataLoader"], [186, 2, 1, "", "TensorflowBertDataLoader"], [186, 2, 1, "", "TensorflowDataLoader"], [186, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[187, 0, 0, "-", "bert_dataset"], [188, 0, 0, "-", "coco_dataset"], [189, 0, 0, "-", "dataset"], [190, 0, 0, "-", "dummy_dataset"], [191, 0, 0, "-", "dummy_dataset_v2"], [192, 0, 0, "-", "imagenet_dataset"], [194, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[187, 2, 1, "", "InputFeatures"], [187, 2, 1, "", "ONNXRTBertDataset"], [187, 2, 1, "", "ParseDecodeBert"], [187, 2, 1, "", "PytorchBertDataset"], [187, 2, 1, "", "TensorflowBertDataset"], [187, 2, 1, "", "TensorflowModelZooBertDataset"], [187, 1, 1, "", "convert_examples_to_features"], [187, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[188, 2, 1, "", "COCONpy"], [188, 2, 1, "", "COCORaw"], [188, 2, 1, "", "COCORecordDataset"], [188, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[189, 2, 1, "", "CIFAR10"], [189, 2, 1, "", "CIFAR100"], [189, 2, 1, "", "Dataset"], [189, 2, 1, "", "Datasets"], [189, 2, 1, "", "FashionMNIST"], [189, 2, 1, "", "ImageFolder"], [189, 2, 1, "", "IterableDataset"], [189, 2, 1, "", "MNIST"], [189, 2, 1, "", "MXNetCIFAR10"], [189, 2, 1, "", "MXNetCIFAR100"], [189, 2, 1, "", "MXNetDatasets"], [189, 2, 1, "", "MXNetFashionMNIST"], [189, 2, 1, "", "MXNetImageFolder"], [189, 2, 1, "", "MXNetMNIST"], [189, 2, 1, "", "ONNXRTITDatasets"], [189, 2, 1, "", "ONNXRTQLDatasets"], [189, 2, 1, "", "PyTorchDatasets"], [189, 2, 1, "", "PytorchCIFAR10"], [189, 2, 1, "", "PytorchCIFAR100"], [189, 2, 1, "", "PytorchFashionMNIST"], [189, 2, 1, "", "PytorchMNIST"], [189, 2, 1, "", "PytorchMxnetWrapDataset"], [189, 2, 1, "", "PytorchMxnetWrapFunction"], [189, 2, 1, "", "Tensorflow"], [189, 2, 1, "", "TensorflowCIFAR10"], [189, 2, 1, "", "TensorflowCIFAR100"], [189, 2, 1, "", "TensorflowDatasets"], [189, 2, 1, "", "TensorflowFashionMNIST"], [189, 2, 1, "", "TensorflowImageRecord"], [189, 2, 1, "", "TensorflowMNIST"], [189, 2, 1, "", "TensorflowTFRecordDataset"], [189, 2, 1, "", "TensorflowVOCRecord"], [189, 1, 1, "", "calculate_md5"], [189, 1, 1, "", "check_integrity"], [189, 1, 1, "", "dataset_registry"], [189, 1, 1, "", "download_url"], [189, 4, 1, "", "framework_datasets"], [189, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[190, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[191, 2, 1, "", "DummyDataset"], [191, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[192, 2, 1, "", "ImagenetRaw"], [192, 2, 1, "", "MXNetImagenetRaw"], [192, 2, 1, "", "ONNXRTImagenetDataset"], [192, 2, 1, "", "PytorchImagenetRaw"], [192, 2, 1, "", "TensorflowImagenetDataset"], [192, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[194, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[195, 0, 0, "-", "coco_filter"], [196, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[195, 2, 1, "", "LabelBalanceCOCORawFilter"], [195, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[196, 2, 1, "", "FILTERS"], [196, 2, 1, "", "Filter"], [196, 2, 1, "", "MXNetFilters"], [196, 2, 1, "", "ONNXRTITFilters"], [196, 2, 1, "", "ONNXRTQLFilters"], [196, 2, 1, "", "PyTorchFilters"], [196, 2, 1, "", "TensorflowFilters"], [196, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[199, 0, 0, "-", "coco_transform"], [200, 0, 0, "-", "imagenet_transform"], [202, 0, 0, "-", "postprocess"], [203, 0, 0, "-", "tokenization"], [204, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[199, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[200, 2, 1, "", "BilinearImagenetTransform"], [200, 2, 1, "", "LabelShift"], [200, 2, 1, "", "ONNXResizeCropImagenetTransform"], [200, 2, 1, "", "OnnxBilinearImagenetTransform"], [200, 2, 1, "", "ParseDecodeImagenet"], [200, 2, 1, "", "ParseDecodeImagenetTransform"], [200, 2, 1, "", "QuantizedInput"], [200, 2, 1, "", "ResizeWithAspectRatio"], [200, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[202, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[203, 2, 1, "", "BasicTokenizer"], [203, 2, 1, "", "FullTokenizer"], [203, 2, 1, "", "WordpieceTokenizer"], [203, 1, 1, "", "convert_by_vocab"], [203, 1, 1, "", "convert_to_unicode"], [203, 1, 1, "", "load_vocab"], [203, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[204, 2, 1, "", "AlignImageChannelTransform"], [204, 2, 1, "", "BaseTransform"], [204, 2, 1, "", "CastONNXTransform"], [204, 2, 1, "", "CastPyTorchTransform"], [204, 2, 1, "", "CastTFTransform"], [204, 2, 1, "", "CenterCropTFTransform"], [204, 2, 1, "", "CenterCropTransform"], [204, 2, 1, "", "CollectTransform"], [204, 2, 1, "", "ComposeTransform"], [204, 2, 1, "", "CropResizeTFTransform"], [204, 2, 1, "", "CropResizeTransform"], [204, 2, 1, "", "CropToBoundingBox"], [204, 2, 1, "", "InputFeatures"], [204, 2, 1, "", "MXNetCropResizeTransform"], [204, 2, 1, "", "MXNetCropToBoundingBox"], [204, 2, 1, "", "MXNetNormalizeTransform"], [204, 2, 1, "", "MXNetTransforms"], [204, 2, 1, "", "MXNetTranspose"], [204, 2, 1, "", "NormalizeTFTransform"], [204, 2, 1, "", "NormalizeTransform"], [204, 2, 1, "", "ONNXRTCropToBoundingBox"], [204, 2, 1, "", "ONNXRTITTransforms"], [204, 2, 1, "", "ONNXRTQLTransforms"], [204, 2, 1, "", "PaddedCenterCropTransform"], [204, 2, 1, "", "ParseDecodeVocTransform"], [204, 2, 1, "", "PyTorchAlignImageChannel"], [204, 2, 1, "", "PyTorchCropResizeTransform"], [204, 2, 1, "", "PyTorchNormalizeTransform"], [204, 2, 1, "", "PyTorchTransforms"], [204, 2, 1, "", "PyTorchTranspose"], [204, 2, 1, "", "PytorchMxnetTransform"], [204, 2, 1, "", "PytorchMxnetWrapFunction"], [204, 2, 1, "", "RandomCropTFTransform"], [204, 2, 1, "", "RandomCropTransform"], [204, 2, 1, "", "RandomHorizontalFlip"], [204, 2, 1, "", "RandomResizedCropMXNetTransform"], [204, 2, 1, "", "RandomResizedCropPytorchTransform"], [204, 2, 1, "", "RandomResizedCropTFTransform"], [204, 2, 1, "", "RandomResizedCropTransform"], [204, 2, 1, "", "RandomVerticalFlip"], [204, 2, 1, "", "RescaleKerasPretrainTransform"], [204, 2, 1, "", "RescaleTFTransform"], [204, 2, 1, "", "RescaleTransform"], [204, 2, 1, "", "ResizeMXNetTransform"], [204, 2, 1, "", "ResizePytorchTransform"], [204, 2, 1, "", "ResizeTFTransform"], [204, 2, 1, "", "ResizeTransform"], [204, 2, 1, "", "ResizeWithRatio"], [204, 2, 1, "", "SquadExample"], [204, 2, 1, "", "TFModelZooCollectTransform"], [204, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [204, 2, 1, "", "TFSquadV1PostTransform"], [204, 2, 1, "", "TRANSFORMS"], [204, 2, 1, "", "TensorflowCropToBoundingBox"], [204, 2, 1, "", "TensorflowRandomHorizontalFlip"], [204, 2, 1, "", "TensorflowRandomVerticalFlip"], [204, 2, 1, "", "TensorflowResizeWithRatio"], [204, 2, 1, "", "TensorflowTransform"], [204, 2, 1, "", "TensorflowTransforms"], [204, 2, 1, "", "TensorflowTranspose"], [204, 2, 1, "", "TensorflowWrapFunction"], [204, 2, 1, "", "ToArray"], [204, 2, 1, "", "ToNDArrayTransform"], [204, 2, 1, "", "Transforms"], [204, 2, 1, "", "Transpose"], [204, 1, 1, "", "convert_examples_to_features"], [204, 1, 1, "", "get_final_text"], [204, 1, 1, "", "get_torchvision_map"], [204, 1, 1, "", "read_squad_examples"], [204, 1, 1, "", "transform_registry"]], "neural_compressor.experimental": [[205, 0, 0, "-", "benchmark"], [208, 0, 0, "-", "common"], [214, 0, 0, "-", "component"], [215, 0, 0, "-", "compression"], [238, 0, 0, "-", "data"], [243, 0, 0, "-", "distillation"], [244, 0, 0, "-", "export"], [249, 0, 0, "-", "graph_optimization"], [257, 0, 0, "-", "metric"], [259, 0, 0, "-", "mixed_precision"], [260, 0, 0, "-", "model_conversion"], [263, 0, 0, "-", "nas"], [269, 0, 0, "-", "pruner_legacy"], [273, 0, 0, "-", "pruning"], [274, 0, 0, "-", "pruning_recipes"], [278, 0, 0, "-", "pruning_v2"], [279, 0, 0, "-", "pytorch_pruner"], [286, 0, 0, "-", "quantization"], [287, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.benchmark": [[205, 2, 1, "", "Benchmark"], [205, 1, 1, "", "get_architecture"], [205, 1, 1, "", "get_bounded_threads"], [205, 1, 1, "", "get_core_ids"], [205, 1, 1, "", "get_physical_ids"], [205, 1, 1, "", "get_threads"], [205, 1, 1, "", "get_threads_per_core"], [205, 1, 1, "", "set_all_env_var"], [205, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[206, 0, 0, "-", "criterion"], [207, 0, 0, "-", "dataloader"], [209, 0, 0, "-", "metric"], [210, 0, 0, "-", "model"], [211, 0, 0, "-", "optimizer"], [212, 0, 0, "-", "postprocess"], [213, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[206, 2, 1, "", "Criterions"], [206, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [206, 2, 1, "", "KnowledgeDistillationFramework"], [206, 2, 1, "", "KnowledgeDistillationLoss"], [206, 2, 1, "", "PyTorchCriterions"], [206, 2, 1, "", "PyTorchCrossEntropyLoss"], [206, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [206, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [206, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [206, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [206, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [206, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [206, 2, 1, "", "SelfKnowledgeDistillationLoss"], [206, 2, 1, "", "TensorFlowCrossEntropyLoss"], [206, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [206, 2, 1, "", "TensorflowCriterions"], [206, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [206, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [206, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [206, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[207, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[209, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[210, 2, 1, "", "Model"], [210, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[211, 2, 1, "", "Optimizers"], [211, 2, 1, "", "PyTorchOptimizers"], [211, 2, 1, "", "PyTorchSGD"], [211, 2, 1, "", "TensorFlowAdam"], [211, 2, 1, "", "TensorFlowAdamW"], [211, 2, 1, "", "TensorFlowSGD"], [211, 2, 1, "", "TensorflowOptimizers"], [211, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[212, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[213, 1, 1, "", "get_activation"], [213, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[214, 2, 1, "", "Component"]], "neural_compressor.experimental.compression": [[216, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[216, 1, 1, "", "prepare_pruning"], [216, 1, 1, "", "save"]], "neural_compressor.experimental.data": [[221, 0, 0, "-", "dataloaders"], [233, 0, 0, "-", "datasets"], [237, 0, 0, "-", "filters"], [240, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[217, 0, 0, "-", "base_dataloader"], [218, 0, 0, "-", "dataloader"], [219, 0, 0, "-", "default_dataloader"], [220, 0, 0, "-", "fetcher"], [222, 0, 0, "-", "mxnet_dataloader"], [223, 0, 0, "-", "onnxrt_dataloader"], [224, 0, 0, "-", "pytorch_dataloader"], [225, 0, 0, "-", "sampler"], [226, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[217, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[219, 2, 1, "", "DefaultDataLoader"], [219, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[220, 2, 1, "", "Fetcher"], [220, 2, 1, "", "IndexFetcher"], [220, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[222, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[223, 2, 1, "", "ONNXRTBertDataLoader"], [223, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[224, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[225, 2, 1, "", "BatchSampler"], [225, 2, 1, "", "IterableSampler"], [225, 2, 1, "", "Sampler"], [225, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[226, 2, 1, "", "TFDataDataLoader"], [226, 2, 1, "", "TensorflowBertDataLoader"], [226, 2, 1, "", "TensorflowDataLoader"], [226, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[227, 0, 0, "-", "bert_dataset"], [228, 0, 0, "-", "coco_dataset"], [229, 0, 0, "-", "dataset"], [230, 0, 0, "-", "dummy_dataset"], [231, 0, 0, "-", "dummy_dataset_v2"], [232, 0, 0, "-", "imagenet_dataset"], [234, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[227, 2, 1, "", "InputFeatures"], [227, 2, 1, "", "ONNXRTBertDataset"], [227, 2, 1, "", "ParseDecodeBert"], [227, 2, 1, "", "PytorchBertDataset"], [227, 2, 1, "", "TensorflowBertDataset"], [227, 2, 1, "", "TensorflowModelZooBertDataset"], [227, 1, 1, "", "convert_examples_to_features"], [227, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[228, 2, 1, "", "COCONpy"], [228, 2, 1, "", "COCORaw"], [228, 2, 1, "", "COCORecordDataset"], [228, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[229, 2, 1, "", "CIFAR10"], [229, 2, 1, "", "CIFAR100"], [229, 2, 1, "", "Dataset"], [229, 2, 1, "", "Datasets"], [229, 2, 1, "", "FashionMNIST"], [229, 2, 1, "", "ImageFolder"], [229, 2, 1, "", "IterableDataset"], [229, 2, 1, "", "MNIST"], [229, 2, 1, "", "MXNetCIFAR10"], [229, 2, 1, "", "MXNetCIFAR100"], [229, 2, 1, "", "MXNetDatasets"], [229, 2, 1, "", "MXNetFashionMNIST"], [229, 2, 1, "", "MXNetImageFolder"], [229, 2, 1, "", "MXNetMNIST"], [229, 2, 1, "", "ONNXRTITDatasets"], [229, 2, 1, "", "ONNXRTQLDatasets"], [229, 2, 1, "", "PyTorchDatasets"], [229, 2, 1, "", "PytorchCIFAR10"], [229, 2, 1, "", "PytorchCIFAR100"], [229, 2, 1, "", "PytorchFashionMNIST"], [229, 2, 1, "", "PytorchMNIST"], [229, 2, 1, "", "PytorchMxnetWrapDataset"], [229, 2, 1, "", "PytorchMxnetWrapFunction"], [229, 2, 1, "", "TensorflowCIFAR10"], [229, 2, 1, "", "TensorflowCIFAR100"], [229, 2, 1, "", "TensorflowDatasets"], [229, 2, 1, "", "TensorflowFashionMNIST"], [229, 2, 1, "", "TensorflowImageFolder"], [229, 2, 1, "", "TensorflowImageRecord"], [229, 2, 1, "", "TensorflowMNIST"], [229, 2, 1, "", "TensorflowTFRecordDataset"], [229, 2, 1, "", "TensorflowVOCRecord"], [229, 1, 1, "", "calculate_md5"], [229, 1, 1, "", "check_integrity"], [229, 1, 1, "", "dataset_registry"], [229, 1, 1, "", "download_url"], [229, 4, 1, "", "framework_datasets"], [229, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[230, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[231, 2, 1, "", "DummyDataset"], [231, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[232, 2, 1, "", "ImagenetRaw"], [232, 2, 1, "", "MXNetImagenetRaw"], [232, 2, 1, "", "ONNXRTImagenetDataset"], [232, 2, 1, "", "PytorchImagenetRaw"], [232, 2, 1, "", "TensorflowImagenetDataset"], [232, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[234, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[235, 0, 0, "-", "coco_filter"], [236, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[235, 2, 1, "", "LabelBalanceCOCORawFilter"], [235, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[236, 2, 1, "", "FILTERS"], [236, 2, 1, "", "Filter"], [236, 2, 1, "", "MXNetFilters"], [236, 2, 1, "", "ONNXRTITFilters"], [236, 2, 1, "", "ONNXRTQLFilters"], [236, 2, 1, "", "PyTorchFilters"], [236, 2, 1, "", "TensorflowFilters"], [236, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[239, 0, 0, "-", "imagenet_transform"], [241, 0, 0, "-", "tokenization"], [242, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[239, 2, 1, "", "BilinearImagenetTransform"], [239, 2, 1, "", "LabelShift"], [239, 2, 1, "", "ONNXResizeCropImagenetTransform"], [239, 2, 1, "", "OnnxBilinearImagenetTransform"], [239, 2, 1, "", "ParseDecodeImagenet"], [239, 2, 1, "", "ParseDecodeImagenetTransform"], [239, 2, 1, "", "QuantizedInput"], [239, 2, 1, "", "ResizeWithAspectRatio"], [239, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[241, 2, 1, "", "BasicTokenizer"], [241, 2, 1, "", "FullTokenizer"], [241, 2, 1, "", "WordpieceTokenizer"], [241, 1, 1, "", "convert_by_vocab"], [241, 1, 1, "", "convert_to_unicode"], [241, 1, 1, "", "load_vocab"], [241, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[242, 2, 1, "", "AlignImageChannelTransform"], [242, 2, 1, "", "BaseTransform"], [242, 2, 1, "", "CastONNXTransform"], [242, 2, 1, "", "CastPyTorchTransform"], [242, 2, 1, "", "CastTFTransform"], [242, 2, 1, "", "CenterCropTFTransform"], [242, 2, 1, "", "CenterCropTransform"], [242, 2, 1, "", "CollectTransform"], [242, 2, 1, "", "ComposeTransform"], [242, 2, 1, "", "CropResizeTFTransform"], [242, 2, 1, "", "CropResizeTransform"], [242, 2, 1, "", "CropToBoundingBox"], [242, 2, 1, "", "InputFeatures"], [242, 2, 1, "", "MXNetCropResizeTransform"], [242, 2, 1, "", "MXNetCropToBoundingBox"], [242, 2, 1, "", "MXNetNormalizeTransform"], [242, 2, 1, "", "MXNetTransforms"], [242, 2, 1, "", "MXNetTranspose"], [242, 2, 1, "", "NormalizeTFTransform"], [242, 2, 1, "", "NormalizeTransform"], [242, 2, 1, "", "ONNXRTCropToBoundingBox"], [242, 2, 1, "", "ONNXRTITTransforms"], [242, 2, 1, "", "ONNXRTQLTransforms"], [242, 2, 1, "", "PaddedCenterCropTransform"], [242, 2, 1, "", "ParseDecodeVocTransform"], [242, 2, 1, "", "PyTorchAlignImageChannel"], [242, 2, 1, "", "PyTorchCropResizeTransform"], [242, 2, 1, "", "PyTorchNormalizeTransform"], [242, 2, 1, "", "PyTorchTransforms"], [242, 2, 1, "", "PyTorchTranspose"], [242, 2, 1, "", "PytorchMxnetTransform"], [242, 2, 1, "", "PytorchMxnetWrapFunction"], [242, 2, 1, "", "RandomCropTFTransform"], [242, 2, 1, "", "RandomCropTransform"], [242, 2, 1, "", "RandomHorizontalFlip"], [242, 2, 1, "", "RandomResizedCropMXNetTransform"], [242, 2, 1, "", "RandomResizedCropPytorchTransform"], [242, 2, 1, "", "RandomResizedCropTFTransform"], [242, 2, 1, "", "RandomResizedCropTransform"], [242, 2, 1, "", "RandomVerticalFlip"], [242, 2, 1, "", "RescaleKerasPretrainTransform"], [242, 2, 1, "", "RescaleTFTransform"], [242, 2, 1, "", "RescaleTransform"], [242, 2, 1, "", "ResizeMXNetTransform"], [242, 2, 1, "", "ResizePytorchTransform"], [242, 2, 1, "", "ResizeTFTransform"], [242, 2, 1, "", "ResizeTransform"], [242, 2, 1, "", "ResizeWithRatio"], [242, 2, 1, "", "SquadExample"], [242, 2, 1, "", "TFModelZooCollectTransform"], [242, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [242, 2, 1, "", "TFSquadV1PostTransform"], [242, 2, 1, "", "TRANSFORMS"], [242, 2, 1, "", "TensorflowCropToBoundingBox"], [242, 2, 1, "", "TensorflowRandomHorizontalFlip"], [242, 2, 1, "", "TensorflowRandomVerticalFlip"], [242, 2, 1, "", "TensorflowResizeWithRatio"], [242, 2, 1, "", "TensorflowTransform"], [242, 2, 1, "", "TensorflowTransforms"], [242, 2, 1, "", "TensorflowTranspose"], [242, 2, 1, "", "TensorflowWrapFunction"], [242, 2, 1, "", "ToArray"], [242, 2, 1, "", "ToNDArrayTransform"], [242, 2, 1, "", "Transforms"], [242, 2, 1, "", "Transpose"], [242, 1, 1, "", "convert_examples_to_features"], [242, 1, 1, "", "get_final_text"], [242, 1, 1, "", "get_torchvision_map"], [242, 1, 1, "", "read_squad_examples"], [242, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[243, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[243, 3, 1, "", "_epoch_ran"], [243, 3, 1, "", "best_model"], [243, 3, 1, "", "best_score"], [243, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[245, 0, 0, "-", "qlinear2qdq"], [246, 0, 0, "-", "tf2onnx"], [247, 0, 0, "-", "torch2onnx"], [248, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[245, 1, 1, "", "check_model"], [245, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[246, 1, 1, "", "tf_to_fp32_onnx"], [246, 1, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[247, 1, 1, "", "build_scale_mapping"], [247, 1, 1, "", "get_node_mapping"], [247, 1, 1, "", "get_quantizable_onnx_ops"], [247, 1, 1, "", "qdq_fp32_bias"], [247, 1, 1, "", "qdq_fp32_bias_qdq"], [247, 1, 1, "", "qdq_int32_bias"], [247, 1, 1, "", "recalculate_bias"], [247, 1, 1, "", "remove_nodes_by_name"], [247, 1, 1, "", "set_data_type"], [247, 1, 1, "", "set_scale_info"], [247, 1, 1, "", "sub_graph_with_int32_bias"], [247, 1, 1, "", "torch_to_fp32_onnx"], [247, 1, 1, "", "torch_to_int8_onnx"], [247, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[248, 2, 1, "", "DummyDataReader"], [248, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.graph_optimization": [[249, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[251, 0, 0, "-", "bleu"], [252, 0, 0, "-", "bleu_util"], [253, 0, 0, "-", "coco_label_map"], [254, 0, 0, "-", "coco_tools"], [255, 0, 0, "-", "evaluate_squad"], [256, 0, 0, "-", "f1"], [258, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[251, 2, 1, "", "BLEU"], [251, 2, 1, "", "UnicodeRegex"], [251, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[251, 3, 1, "", "labels"], [251, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[251, 3, 1, "", "nondigit_punct_re"], [251, 3, 1, "", "punct_nondigit_re"], [251, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[252, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[254, 2, 1, "", "COCOEvalWrapper"], [254, 2, 1, "", "COCOWrapper"], [254, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [254, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [254, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[254, 3, 1, "", "dataset"], [254, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[255, 1, 1, "", "evaluate"], [255, 1, 1, "", "exact_match_score"], [255, 1, 1, "", "f1_score"], [255, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[256, 1, 1, "", "evaluate"], [256, 1, 1, "", "f1_score"], [256, 1, 1, "", "metric_max_over_ground_truths"], [256, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[258, 2, 1, "", "Accuracy"], [258, 2, 1, "", "BaseMetric"], [258, 2, 1, "", "COCOmAPv2"], [258, 2, 1, "", "F1"], [258, 2, 1, "", "GeneralTopK"], [258, 2, 1, "", "Loss"], [258, 2, 1, "", "MAE"], [258, 2, 1, "", "METRICS"], [258, 2, 1, "", "MSE"], [258, 2, 1, "", "MXNetMetrics"], [258, 2, 1, "", "ONNXRTGLUE"], [258, 2, 1, "", "ONNXRTITMetrics"], [258, 2, 1, "", "ONNXRTQLMetrics"], [258, 2, 1, "", "PyTorchLoss"], [258, 2, 1, "", "PyTorchMetrics"], [258, 2, 1, "", "RMSE"], [258, 2, 1, "", "ROC"], [258, 2, 1, "", "SquadF1"], [258, 2, 1, "", "TensorflowCOCOMAP"], [258, 2, 1, "", "TensorflowMAP"], [258, 2, 1, "", "TensorflowMetrics"], [258, 2, 1, "", "TensorflowTopK"], [258, 2, 1, "", "TensorflowVOCMAP"], [258, 2, 1, "", "WrapMXNetMetric"], [258, 2, 1, "", "WrapONNXRTMetric"], [258, 2, 1, "", "WrapPyTorchMetric"], [258, 2, 1, "", "mIOU"], [258, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[258, 3, 1, "", "label_list"], [258, 3, 1, "", "pred_list"], [258, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[258, 3, 1, "", "k"], [258, 3, 1, "", "num_correct"], [258, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[258, 3, 1, "", "sample"], [258, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[258, 3, 1, "", "compare_label"], [258, 3, 1, "", "label_list"], [258, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[258, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[258, 3, 1, "", "compare_label"], [258, 3, 1, "", "label_list"], [258, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[258, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[258, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[258, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[258, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[258, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[258, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[258, 3, 1, "", "k"], [258, 3, 1, "", "num_correct"], [258, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[259, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[260, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[261, 0, 0, "-", "basic_nas"], [262, 0, 0, "-", "dynas"], [264, 0, 0, "-", "nas"], [265, 0, 0, "-", "nas_utils"], [266, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[261, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[262, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[264, 2, 1, "", "NAS"], [264, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[265, 1, 1, "", "create_search_space_pool"], [265, 1, 1, "", "find_pareto_front"], [265, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[266, 2, 1, "", "BayesianOptimizationSearcher"], [266, 2, 1, "", "GridSearcher"], [266, 2, 1, "", "RandomSearcher"], [266, 2, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[267, 0, 0, "-", "gradient_sensitivity"], [268, 0, 0, "-", "group_lasso"], [270, 0, 0, "-", "magnitude"], [271, 0, 0, "-", "pattern_lock"], [272, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[267, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[268, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[270, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[271, 2, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[272, 2, 1, "", "Pruner"], [272, 1, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[273, 2, 1, "", "Pruning"], [273, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[273, 3, 1, "", "conf"], [273, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[275, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[276, 0, 0, "-", "pattern"], [277, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[276, 2, 1, "", "PATTERNS"], [276, 2, 1, "", "PatternBase"], [276, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[276, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[277, 2, 1, "", "TilePatternBase"], [277, 2, 1, "", "TilePattern_1x1"], [277, 2, 1, "", "TilePattern_1x16"], [277, 2, 1, "", "TilePattern_1x2"], [277, 2, 1, "", "TilePattern_2x2"], [277, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[278, 2, 1, "", "Pruning"], [278, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[278, 3, 1, "", "conf"], [278, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[280, 0, 0, "-", "logger"], [281, 0, 0, "-", "patterns"], [282, 0, 0, "-", "prune_utils"], [283, 0, 0, "-", "pruner"], [284, 0, 0, "-", "pruning"], [285, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[281, 2, 1, "", "Pattern"], [281, 2, 1, "", "PatternNInM"], [281, 2, 1, "", "PatternNxM"], [281, 1, 1, "", "get_pattern"], [281, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[281, 3, 1, "", "is_global"], [281, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[281, 3, 1, "", "M"], [281, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[281, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[282, 1, 1, "", "check_config"], [282, 1, 1, "", "parse_not_to_prune"], [282, 1, 1, "", "parse_to_prune"], [282, 1, 1, "", "process_and_check_config"], [282, 1, 1, "", "process_config"], [282, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[283, 2, 1, "", "MagnitudePruner"], [283, 2, 1, "", "PatternLockPruner"], [283, 2, 1, "", "Pruner"], [283, 2, 1, "", "SnipMomentumPruner"], [283, 2, 1, "", "SnipPruner"], [283, 1, 1, "", "get_pruner"], [283, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[283, 3, 1, "", "config"], [283, 3, 1, "", "current_sparsity_ratio"], [283, 3, 1, "", "end_step"], [283, 3, 1, "", "global_step"], [283, 3, 1, "", "masks"], [283, 3, 1, "", "max_sparsity_ratio_per_layer"], [283, 3, 1, "", "modules"], [283, 3, 1, "", "pattern"], [283, 3, 1, "", "scheduler"], [283, 3, 1, "", "scores"], [283, 3, 1, "", "start_step"], [283, 3, 1, "", "target_sparsity_ratio"], [283, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[284, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[284, 3, 1, "", "config_file_path"], [284, 3, 1, "", "model"], [284, 3, 1, "", "pruner_info"], [284, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[285, 2, 1, "", "IterativeScheduler"], [285, 2, 1, "", "OneshotScheduler"], [285, 2, 1, "", "Scheduler"], [285, 1, 1, "", "get_scheduler"], [285, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[285, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[286, 2, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[287, 2, 1, "", "Scheduler"]], "neural_compressor.metric": [[289, 0, 0, "-", "bleu"], [290, 0, 0, "-", "bleu_util"], [291, 0, 0, "-", "coco_label_map"], [292, 0, 0, "-", "coco_tools"], [293, 0, 0, "-", "evaluate_squad"], [294, 0, 0, "-", "f1"], [296, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[289, 2, 1, "", "BLEU"], [289, 2, 1, "", "UnicodeRegex"], [289, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[289, 3, 1, "", "labels"], [289, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[289, 3, 1, "", "nondigit_punct_re"], [289, 3, 1, "", "punct_nondigit_re"], [289, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[290, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[292, 2, 1, "", "COCOEvalWrapper"], [292, 2, 1, "", "COCOWrapper"], [292, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [292, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [292, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[292, 3, 1, "", "dataset"], [292, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[293, 1, 1, "", "evaluate"], [293, 1, 1, "", "exact_match_score"], [293, 1, 1, "", "f1_score"], [293, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[294, 1, 1, "", "evaluate"], [294, 1, 1, "", "f1_score"], [294, 1, 1, "", "metric_max_over_ground_truths"], [294, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[296, 2, 1, "", "Accuracy"], [296, 2, 1, "", "BaseMetric"], [296, 2, 1, "", "COCOmAPv2"], [296, 2, 1, "", "F1"], [296, 2, 1, "", "GeneralTopK"], [296, 2, 1, "", "Loss"], [296, 2, 1, "", "MAE"], [296, 2, 1, "", "METRICS"], [296, 2, 1, "", "MSE"], [296, 2, 1, "", "MXNetMetrics"], [296, 2, 1, "", "Metric"], [296, 2, 1, "", "ONNXRTGLUE"], [296, 2, 1, "", "ONNXRTITMetrics"], [296, 2, 1, "", "ONNXRTQLMetrics"], [296, 2, 1, "", "PyTorchLoss"], [296, 2, 1, "", "PyTorchMetrics"], [296, 2, 1, "", "RMSE"], [296, 2, 1, "", "ROC"], [296, 2, 1, "", "SquadF1"], [296, 2, 1, "", "TensorflowCOCOMAP"], [296, 2, 1, "", "TensorflowMAP"], [296, 2, 1, "", "TensorflowMetrics"], [296, 2, 1, "", "TensorflowTopK"], [296, 2, 1, "", "TensorflowVOCMAP"], [296, 2, 1, "", "WrapMXNetMetric"], [296, 2, 1, "", "WrapONNXRTMetric"], [296, 2, 1, "", "WrapPyTorchMetric"], [296, 2, 1, "", "mIOU"], [296, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[296, 3, 1, "", "label_list"], [296, 3, 1, "", "pred_list"], [296, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[296, 3, 1, "", "k"], [296, 3, 1, "", "num_correct"], [296, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[296, 3, 1, "", "sample"], [296, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[296, 3, 1, "", "compare_label"], [296, 3, 1, "", "label_list"], [296, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[296, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[296, 3, 1, "", "compare_label"], [296, 3, 1, "", "label_list"], [296, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[296, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[296, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[296, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[296, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[296, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[296, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[296, 3, 1, "", "k"], [296, 3, 1, "", "num_correct"], [296, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[297, 1, 1, "", "fit"]], "neural_compressor.model": [[298, 0, 0, "-", "base_model"], [300, 0, 0, "-", "keras_model"], [301, 0, 0, "-", "model"], [302, 0, 0, "-", "mxnet_model"], [303, 0, 0, "-", "nets_factory"], [304, 0, 0, "-", "onnx_model"], [305, 0, 0, "-", "tensorflow_model"], [306, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[298, 2, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[300, 2, 1, "", "KerasModel"]], "neural_compressor.model.model": [[301, 2, 1, "", "Model"], [301, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[302, 2, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[303, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[304, 2, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[305, 2, 1, "", "TensorflowBaseModel"], [305, 2, 1, "", "TensorflowCheckpointModel"], [305, 2, 1, "", "TensorflowModel"], [305, 2, 1, "", "TensorflowQATModel"], [305, 2, 1, "", "TensorflowSavedModelModel"], [305, 1, 1, "", "checkpoint_session"], [305, 1, 1, "", "estimator_session"], [305, 1, 1, "", "frozen_pb_session"], [305, 1, 1, "", "get_model_type"], [305, 1, 1, "", "graph_def_session"], [305, 1, 1, "", "graph_session"], [305, 1, 1, "", "keras_session"], [305, 1, 1, "", "load_saved_model"], [305, 1, 1, "", "saved_model_session"], [305, 1, 1, "", "slim_session"], [305, 1, 1, "", "validate_and_inference_input_output"], [305, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[306, 2, 1, "", "IPEXModel"], [306, 2, 1, "", "PyTorchBaseModel"], [306, 2, 1, "", "PyTorchFXModel"], [306, 2, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[307, 2, 1, "", "Accuracy"], [307, 2, 1, "", "Footprint"], [307, 2, 1, "", "ModelSize"], [307, 2, 1, "", "MultiObjective"], [307, 2, 1, "", "Objective"], [307, 2, 1, "", "Performance"], [307, 1, 1, "", "objective_custom_registry"], [307, 1, 1, "", "objective_registry"]], "neural_compressor.quantization": [[308, 1, 1, "", "fit"]], "neural_compressor.strategy": [[309, 0, 0, "-", "auto"], [310, 0, 0, "-", "auto_mixed_precision"], [311, 0, 0, "-", "basic"], [312, 0, 0, "-", "bayesian"], [313, 0, 0, "-", "conservative"], [314, 0, 0, "-", "exhaustive"], [315, 0, 0, "-", "hawq_v2"], [317, 0, 0, "-", "mse"], [318, 0, 0, "-", "mse_v2"], [319, 0, 0, "-", "random"], [320, 0, 0, "-", "strategy"], [322, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[309, 2, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[310, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[311, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[312, 2, 1, "", "BayesianOptimization"], [312, 2, 1, "", "BayesianTuneStrategy"], [312, 2, 1, "", "TargetSpace"], [312, 1, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[313, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[314, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[315, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[317, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[318, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[319, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[320, 2, 1, "", "TuneStrategy"], [320, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[321, 0, 0, "-", "constant"], [323, 0, 0, "-", "tuning_sampler"], [324, 0, 0, "-", "tuning_space"], [325, 0, 0, "-", "tuning_structs"], [326, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[323, 2, 1, "", "FallbackTuningSampler"], [323, 2, 1, "", "ModelWiseTuningSampler"], [323, 2, 1, "", "OpTypeWiseTuningSampler"], [323, 2, 1, "", "OpWiseTuningSampler"], [323, 2, 1, "", "TuningOrder"], [323, 2, 1, "", "TuningSampler"], [323, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[324, 2, 1, "", "TuningItem"], [324, 2, 1, "", "TuningSpace"], [324, 1, 1, "", "get_op_mode_by_query_order"], [324, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [324, 1, 1, "", "pattern_to_internal"], [324, 1, 1, "", "pattern_to_path"], [324, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[325, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[326, 2, 1, "", "OrderedDefaultDict"], [326, 1, 1, "", "extract_data_type"], [326, 1, 1, "", "get_adaptor_name"], [326, 1, 1, "", "reverted_data_type"]], "neural_compressor.template": [[327, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[327, 2, 1, "", "ExampleClass"], [327, 3, 1, "", "attribute1"], [327, 1, 1, "", "function1"], [327, 1, 1, "", "function2"], [327, 1, 1, "", "function3"], [327, 1, 1, "", "generator1"], [327, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[327, 3, 1, "", "attr1"], [327, 3, 1, "", "attr2"], [327, 3, 1, "", "attr5"]], "neural_compressor.training": [[329, 2, 1, "", "CallBacks"], [329, 2, 1, "", "CompressionManager"], [329, 1, 1, "", "fit"], [329, 1, 1, "", "prepare_compression"]], "neural_compressor.utils": [[330, 0, 0, "-", "collect_layer_histogram"], [331, 0, 0, "-", "constant"], [332, 0, 0, "-", "create_obj_from_config"], [334, 0, 0, "-", "kl_divergence"], [335, 0, 0, "-", "load_huggingface"], [336, 0, 0, "-", "logger"], [337, 0, 0, "-", "options"], [338, 0, 0, "-", "pytorch"], [339, 0, 0, "-", "utility"]], "neural_compressor.utils.collect_layer_histogram": [[330, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[332, 1, 1, "", "create_dataloader"], [332, 1, 1, "", "create_dataset"], [332, 1, 1, "", "create_eval_func"], [332, 1, 1, "", "create_train_func"], [332, 1, 1, "", "get_algorithm"], [332, 1, 1, "", "get_func_from_config"], [332, 1, 1, "", "get_metrics"], [332, 1, 1, "", "get_postprocess"], [332, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[334, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[335, 2, 1, "", "OptimizedModel"], [335, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[336, 2, 1, "", "Logger"], [336, 1, 1, "", "debug"], [336, 1, 1, "", "error"], [336, 1, 1, "", "fatal"], [336, 1, 1, "", "info"], [336, 1, 1, "", "log"], [336, 1, 1, "", "warn"], [336, 1, 1, "", "warning"]], "neural_compressor.utils.options": [[337, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[338, 1, 1, "", "is_int8_model"], [338, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[339, 2, 1, "", "CaptureOutputToFile"], [339, 2, 1, "", "CpuInfo"], [339, 1, 1, "", "Dequantize"], [339, 1, 1, "", "DequantizeWeight"], [339, 2, 1, "", "GLOBAL_STATE"], [339, 2, 1, "", "LazyImport"], [339, 2, 1, "", "MODE"], [339, 2, 1, "", "Statistics"], [339, 1, 1, "", "combine_histogram"], [339, 1, 1, "", "compute_sparsity"], [339, 1, 1, "", "dump_data_to_local"], [339, 1, 1, "", "dump_elapsed_time"], [339, 1, 1, "", "equal_dicts"], [339, 1, 1, "", "fault_tolerant_file"], [339, 1, 1, "", "get_all_fp32_data"], [339, 1, 1, "", "get_size"], [339, 1, 1, "", "get_tensor_histogram"], [339, 1, 1, "", "get_tuning_history"], [339, 1, 1, "", "load_data_from_pkl"], [339, 1, 1, "", "recover"], [339, 1, 1, "", "set_random_seed"], [339, 1, 1, "", "set_resume_from"], [339, 1, 1, "", "set_tensorboard"], [339, 1, 1, "", "set_workspace"], [339, 1, 1, "", "show_memory_info"], [339, 1, 1, "", "singleton"], [339, 1, 1, "", "str2array"], [339, 1, 1, "", "time_limit"], [339, 1, 1, "", "version1_eq_version2"], [339, 1, 1, "", "version1_gt_version2"], [339, 1, 1, "", "version1_gte_version2"], [339, 1, 1, "", "version1_lt_version2"], [339, 1, 1, "", "version1_lte_version2"]], "neural_compressor.ux": [[415, 0, 0, "-", "components"], [474, 0, 0, "-", "inc_bench"], [483, 0, 0, "-", "utils"], [509, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[343, 0, 0, "-", "benchmark"], [347, 0, 0, "-", "config_generator"], [355, 0, 0, "-", "configuration_wizard"], [391, 0, 0, "-", "db_manager"], [396, 0, 0, "-", "diagnosis"], [404, 0, 0, "-", "file_browser"], [410, 0, 0, "-", "graph"], [416, 0, 0, "-", "jobs_management"], [420, 0, 0, "-", "manage_workspace"], [422, 0, 0, "-", "model"], [441, 0, 0, "-", "model_zoo"], [443, 0, 0, "-", "names_mapper"], [450, 0, 0, "-", "optimization"], [466, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[343, 2, 1, "", "Benchmarks"], [340, 0, 0, "-", "benchmark"], [341, 0, 0, "-", "benchmark_model"], [342, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[340, 2, 1, "", "Benchmark"], [340, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[341, 1, 1, "", "benchmark_model"], [341, 1, 1, "", "parse_args"], [341, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[342, 1, 1, "", "benchmark_result_update"], [342, 1, 1, "", "benchmark_result_update_pytorch_script"], [342, 1, 1, "", "execute_benchmark"], [342, 1, 1, "", "execute_real_benchmark"], [342, 1, 1, "", "pytorch_script_bench_optimizations"], [342, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[344, 0, 0, "-", "benchmark_config_generator"], [345, 0, 0, "-", "config_generator"], [346, 0, 0, "-", "graph_optimization_config_generator"], [348, 0, 0, "-", "mixed_precision_config_generator"], [349, 0, 0, "-", "profiling_config_generator"], [350, 0, 0, "-", "pruning_config_generator"], [351, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[344, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[345, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[346, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[348, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[349, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[350, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[351, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.configuration_wizard": [[352, 0, 0, "-", "configuration_parser"], [353, 0, 0, "-", "get_boundary_nodes"], [354, 0, 0, "-", "get_configuration"], [356, 0, 0, "-", "params_feeder"], [357, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[352, 2, 1, "", "ConfigurationParser"], [352, 1, 1, "", "normalize_string_list"], [352, 1, 1, "", "parse_list_value"], [352, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[353, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[354, 1, 1, "", "get_predefined_configuration"], [354, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[356, 2, 1, "", "Feeder"], [356, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[357, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.db_manager": [[358, 0, 0, "-", "db_manager"], [367, 0, 0, "-", "db_models"], [386, 0, 0, "-", "db_operations"], [392, 0, 0, "-", "params_interfaces"], [393, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.db_manager": [[358, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_models": [[359, 0, 0, "-", "benchmark"], [360, 0, 0, "-", "benchmark_result"], [361, 0, 0, "-", "dataloader"], [362, 0, 0, "-", "dataset"], [363, 0, 0, "-", "domain"], [364, 0, 0, "-", "domain_flavour"], [365, 0, 0, "-", "example"], [366, 0, 0, "-", "framework"], [368, 0, 0, "-", "metric"], [369, 0, 0, "-", "model"], [370, 0, 0, "-", "optimization"], [371, 0, 0, "-", "optimization_type"], [372, 0, 0, "-", "precision"], [373, 0, 0, "-", "profiling"], [374, 0, 0, "-", "profiling_result"], [375, 0, 0, "-", "project"], [376, 0, 0, "-", "pruning_details"], [377, 0, 0, "-", "transform"], [378, 0, 0, "-", "tuning_details"], [379, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[359, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[360, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[361, 2, 1, "", "Dataloader"], [361, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[362, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[363, 2, 1, "", "Domain"], [363, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[364, 2, 1, "", "DomainFlavour"], [364, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.example": [[365, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[366, 2, 1, "", "Framework"], [366, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[368, 2, 1, "", "Metric"], [368, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.model": [[369, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[370, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[371, 2, 1, "", "OptimizationType"], [371, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[372, 2, 1, "", "Precision"], [372, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[373, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[374, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.project": [[375, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[376, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[377, 2, 1, "", "Transform"], [377, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[378, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[379, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_operations": [[380, 0, 0, "-", "benchmark_api_interface"], [381, 0, 0, "-", "dataset_api_interface"], [382, 0, 0, "-", "db_operations"], [383, 0, 0, "-", "diagnosis_api_interface"], [384, 0, 0, "-", "dictionaries_api_interface"], [385, 0, 0, "-", "examples_api_interface"], [387, 0, 0, "-", "model_api_interface"], [388, 0, 0, "-", "optimization_api_interface"], [389, 0, 0, "-", "profiling_api_interface"], [390, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[380, 2, 1, "", "BenchmarkAPIInterface"], [380, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[381, 2, 1, "", "DatasetAPIInterface"], [381, 1, 1, "", "initialize_associations"], [381, 1, 1, "", "initialize_precision_optimization_types_association"], [381, 1, 1, "", "search_in_list_of_dict"], [381, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [381, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[382, 1, 1, "", "initialize_associations"], [382, 1, 1, "", "initialize_precision_optimization_types_association"], [382, 1, 1, "", "search_in_list_of_dict"], [382, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [382, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[383, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[384, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[385, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[387, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[388, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[389, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[390, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[392, 2, 1, "", "BenchmarkAddParamsInterface"], [392, 2, 1, "", "BenchmarkEditParamsInterface"], [392, 2, 1, "", "DatasetAddParamsInterface"], [392, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [392, 2, 1, "", "ModelAddParamsInterface"], [392, 2, 1, "", "OptimizationAddParamsInterface"], [392, 2, 1, "", "OptimizationEditParamsInterface"], [392, 2, 1, "", "ProfilingAddParamsInterface"], [392, 2, 1, "", "ProfilingEditParamsInterface"], [392, 2, 1, "", "ProfilingResultAddParamsInterface"], [392, 2, 1, "", "TuningHistoryInterface"], [392, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.utils": [[393, 1, 1, "", "get_framework_dataloaders_config"], [393, 1, 1, "", "get_framework_transforms_config"], [393, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[394, 0, 0, "-", "diagnosis"], [395, 0, 0, "-", "factory"], [397, 0, 0, "-", "onnx_diagnosis"], [399, 0, 0, "-", "op_details"], [400, 0, 0, "-", "op_entry"], [401, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[394, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[395, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[398, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[398, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[399, 2, 1, "", "OpActivation"], [399, 2, 1, "", "OpDetails"], [399, 2, 1, "", "OpPattern"], [399, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_entry": [[400, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[402, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[402, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.file_browser": [[403, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[403, 1, 1, "", "create_dir_entry"], [403, 1, 1, "", "create_entry"], [403, 1, 1, "", "create_file_entry"], [403, 1, 1, "", "filter_requested_entries"], [403, 1, 1, "", "get_directory_entries"], [403, 1, 1, "", "get_filter_value"], [403, 1, 1, "", "get_non_hidden_directory_entries"], [403, 1, 1, "", "get_requested_path"], [403, 1, 1, "", "get_setting_value"], [403, 1, 1, "", "is_dataset_or_directory_entry"], [403, 1, 1, "", "is_directory_entry"], [403, 1, 1, "", "is_model_or_directory_entry"], [403, 1, 1, "", "should_show_files"], [403, 1, 1, "", "should_show_only_model_files"], [403, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[405, 0, 0, "-", "attribute"], [406, 0, 0, "-", "collapser"], [407, 0, 0, "-", "edge"], [408, 0, 0, "-", "graph"], [409, 0, 0, "-", "graph_reader"], [411, 0, 0, "-", "node"], [412, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[405, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[406, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.edge": [[407, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.graph": [[408, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph_reader": [[409, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.node": [[411, 2, 1, "", "GroupNode"], [411, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[413, 0, 0, "-", "onnxrt_reader"], [414, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[413, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[414, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.jobs_management": [[417, 0, 0, "-", "jobs_control_queue"], [418, 0, 0, "-", "jobs_manager"], [419, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[420, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[421, 0, 0, "-", "domain"], [423, 0, 0, "-", "model"], [424, 0, 0, "-", "model_type_getter"], [425, 0, 0, "-", "onnxrt"], [427, 0, 0, "-", "pytorch"], [429, 0, 0, "-", "repository"], [430, 0, 0, "-", "shape"], [432, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[421, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[423, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model_type_getter": [[424, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[426, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[426, 2, 1, "", "OnnxrtModel"], [426, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[428, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[428, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.repository": [[429, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.shape": [[430, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.tensorflow": [[431, 0, 0, "-", "frozen_pb"], [433, 0, 0, "-", "keras"], [434, 0, 0, "-", "meta_graph"], [435, 0, 0, "-", "model"], [436, 0, 0, "-", "saved_model"], [437, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[431, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[433, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[434, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[435, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[436, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.utils": [[437, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[438, 0, 0, "-", "download_config"], [439, 0, 0, "-", "download_model"], [440, 0, 0, "-", "downloader"], [442, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[438, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[439, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[440, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.list_models": [[442, 1, 1, "", "check_version"], [442, 1, 1, "", "get_available_models"], [442, 1, 1, "", "get_framework_module_name"], [442, 1, 1, "", "get_installed_frameworks"], [442, 1, 1, "", "list_models"], [442, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[444, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[444, 2, 1, "", "MappingDirection"], [444, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.optimization": [[450, 2, 1, "", "Optimizations"], [445, 0, 0, "-", "execute_optimization"], [446, 0, 0, "-", "factory"], [448, 0, 0, "-", "graph_optimizer"], [451, 0, 0, "-", "mixed_precision"], [454, 0, 0, "-", "neural_coder_optimization"], [456, 0, 0, "-", "optimization"], [457, 0, 0, "-", "pruning"], [460, 0, 0, "-", "tune"], [463, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[445, 1, 1, "", "check_if_collect_tuning_history"], [445, 1, 1, "", "execute_optimization"], [445, 1, 1, "", "execute_optimization_pytorch_script"], [445, 1, 1, "", "execute_optimization_regular"], [445, 1, 1, "", "parse_logs"], [445, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[446, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[447, 0, 0, "-", "graph_optimization"], [449, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[447, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[449, 1, 1, "", "optimize_graph"], [449, 1, 1, "", "optimize_graph_config"], [449, 1, 1, "", "parse_args"], [449, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[452, 0, 0, "-", "mixed_precision"], [453, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[452, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[453, 1, 1, "", "optimize_graph"], [453, 1, 1, "", "optimize_graph_config"], [453, 1, 1, "", "parse_args"], [453, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[455, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[455, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[456, 2, 1, "", "DataloaderInterface"], [456, 2, 1, "", "Optimization"], [456, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.pruning": [[458, 0, 0, "-", "optimize_model"], [459, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[458, 1, 1, "", "optimize_model"], [458, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[459, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.tune": [[461, 0, 0, "-", "tune_model"], [462, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[461, 1, 1, "", "parse_args"], [461, 1, 1, "", "set_eager_execution"], [461, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[462, 2, 1, "", "AccuracyCriterion"], [462, 2, 1, "", "Tuning"], [462, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tuning_history": [[463, 2, 1, "", "TuningHistory"], [463, 2, 1, "", "Watcher"], [463, 1, 1, "", "tuning_history"], [463, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.profiling": [[464, 0, 0, "-", "execute_profiling"], [465, 0, 0, "-", "factory"], [467, 0, 0, "-", "profile_model"], [468, 0, 0, "-", "profiler"], [469, 0, 0, "-", "profiling"], [471, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[464, 1, 1, "", "execute_profiling"], [464, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[465, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.profile_model": [[467, 1, 1, "", "load_profiling_details"], [467, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[468, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiling": [[469, 2, 1, "", "DataloaderInterface"], [469, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[470, 0, 0, "-", "factory"], [472, 0, 0, "-", "profiler"], [473, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[470, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[472, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[473, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[474, 1, 1, "", "main"], [474, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[476, 0, 0, "-", "consts"], [477, 0, 0, "-", "environment"], [478, 0, 0, "-", "exceptions"], [479, 0, 0, "-", "executor"], [480, 0, 0, "-", "expiring_dict"], [481, 0, 0, "-", "github_info"], [482, 0, 0, "-", "hw_info"], [484, 0, 0, "-", "json_serializer"], [485, 0, 0, "-", "logger"], [486, 0, 0, "-", "parser"], [487, 0, 0, "-", "proc"], [488, 0, 0, "-", "processes"], [489, 0, 0, "-", "singleton"], [490, 0, 0, "-", "status_updates"], [491, 0, 0, "-", "templates"], [494, 0, 0, "-", "utils"], [499, 0, 0, "-", "workload"], [505, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[476, 2, 1, "", "DomainFlavours"], [476, 2, 1, "", "Domains"], [476, 2, 1, "", "ExecutionStatus"], [476, 2, 1, "", "Frameworks"], [476, 2, 1, "", "OptimizationTypes"], [476, 2, 1, "", "Precisions"], [476, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[477, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.exceptions": [[478, 5, 1, "", "AccessDeniedException"], [478, 5, 1, "", "ClientErrorException"], [478, 5, 1, "", "InternalException"], [478, 5, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[479, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.expiring_dict": [[480, 2, 1, "", "ExpiringDict"], [480, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.github_info": [[481, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.hw_info": [[482, 2, 1, "", "HWInfo"], [482, 1, 1, "", "get_bios_version"], [482, 1, 1, "", "get_distribution"], [482, 1, 1, "", "get_framework_dependency_info"], [482, 1, 1, "", "get_framework_info"], [482, 1, 1, "", "get_kernel_version"], [482, 1, 1, "", "get_number_of_sockets"], [482, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.json_serializer": [[484, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.logger": [[485, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[486, 2, 1, "", "AccuracyParser"], [486, 2, 1, "", "BenchmarkParserFactory"], [486, 2, 1, "", "OptimizationParser"], [486, 2, 1, "", "Parser"], [486, 2, 1, "", "PerformanceParser"], [486, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.proc": [[487, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.processes": [[488, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.singleton": [[489, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[490, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[492, 0, 0, "-", "metric"], [493, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[492, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.workdir": [[493, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.utils": [[494, 1, 1, "", "are_archive_filenames_valid"], [494, 1, 1, "", "check_module"], [494, 1, 1, "", "deprecated"], [494, 1, 1, "", "determine_ip"], [494, 1, 1, "", "export_to_csv"], [494, 1, 1, "", "filter_transforms"], [494, 1, 1, "", "get_dataset_path"], [494, 1, 1, "", "get_default_pruning_config_path"], [494, 1, 1, "", "get_file_extension"], [494, 1, 1, "", "get_framework_from_path"], [494, 1, 1, "", "get_height_width_from_size"], [494, 1, 1, "", "get_metrics_dict"], [494, 1, 1, "", "get_model_zoo_config_path"], [494, 1, 1, "", "get_model_zoo_model_path"], [494, 1, 1, "", "get_module_version"], [494, 1, 1, "", "get_predefined_config_path"], [494, 1, 1, "", "get_shape_from_transforms"], [494, 1, 1, "", "get_size"], [494, 1, 1, "", "is_dataset_file"], [494, 1, 1, "", "is_development_env"], [494, 1, 1, "", "is_hidden"], [494, 1, 1, "", "load_dataloader_config"], [494, 1, 1, "", "load_help_nc_params"], [494, 1, 1, "", "load_metrics_config"], [494, 1, 1, "", "load_model_config"], [494, 1, 1, "", "load_model_wise_params"], [494, 1, 1, "", "load_precisions_config"], [494, 1, 1, "", "load_pruning_details_config"], [494, 1, 1, "", "load_transforms_config"], [494, 1, 1, "", "load_transforms_filter_config"], [494, 1, 1, "", "normalize_domain"], [494, 1, 1, "", "normalize_framework"], [494, 1, 1, "", "normalize_string"], [494, 1, 1, "", "parse_bool_value"], [494, 1, 1, "", "parse_to_float_list"], [494, 1, 1, "", "parse_to_string_list"], [494, 1, 1, "", "parse_version"], [494, 1, 1, "", "release_tag"], [494, 1, 1, "", "replace_with_values"], [494, 1, 1, "", "safe_extract_archive"], [494, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[495, 0, 0, "-", "config"], [496, 0, 0, "-", "dataloader"], [497, 0, 0, "-", "evaluation"], [498, 0, 0, "-", "graph_optimization"], [500, 0, 0, "-", "mixed_precision"], [501, 0, 0, "-", "model"], [502, 0, 0, "-", "pruning"], [503, 0, 0, "-", "quantization"], [504, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[495, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.dataloader": [[496, 2, 1, "", "Dataloader"], [496, 2, 1, "", "Dataset"], [496, 2, 1, "", "Filter"], [496, 2, 1, "", "LabelBalance"], [496, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.evaluation": [[497, 2, 1, "", "Accuracy"], [497, 2, 1, "", "Configs"], [497, 2, 1, "", "Evaluation"], [497, 2, 1, "", "Metric"], [497, 2, 1, "", "Performance"], [497, 2, 1, "", "Postprocess"], [497, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.graph_optimization": [[498, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.mixed_precision": [[500, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.model": [[501, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.pruning": [[502, 2, 1, "", "AdamOptimizer"], [502, 2, 1, "", "AdamWOptimizer"], [502, 2, 1, "", "Approach"], [502, 2, 1, "", "Criterion"], [502, 2, 1, "", "CrossEntropyLossCriterion"], [502, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [502, 2, 1, "", "KnowledgeDistillationLossCriterion"], [502, 2, 1, "", "Optimizer"], [502, 2, 1, "", "Pruning"], [502, 2, 1, "", "SGDOptimizer"], [502, 2, 1, "", "SelfKnowledgeDistillationLoss"], [502, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [502, 2, 1, "", "Train"], [502, 2, 1, "", "WeightCompressionApproach"], [502, 1, 1, "", "parse_dict_value_to_float"], [502, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.quantization": [[503, 2, 1, "", "Advance"], [503, 2, 1, "", "Calibration"], [503, 2, 1, "", "Quantization"], [503, 2, 1, "", "WiseConfig"], [503, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[504, 2, 1, "", "AccCriterion"], [504, 2, 1, "", "Diagnosis"], [504, 2, 1, "", "ExitPolicy"], [504, 2, 1, "", "MultiObjectives"], [504, 2, 1, "", "Strategy"], [504, 2, 1, "", "Tuning"], [504, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.yaml_utils": [[505, 1, 1, "", "float_representer"], [505, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[506, 0, 0, "-", "communication"], [507, 0, 0, "-", "configuration"], [508, 0, 0, "-", "exceptions"], [510, 0, 0, "-", "router"], [511, 0, 0, "-", "server"], [514, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[506, 2, 1, "", "Message"], [506, 2, 1, "", "MessageQueue"], [506, 2, 1, "", "Request"], [506, 2, 1, "", "Response"], [506, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.configuration": [[507, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.exceptions": [[508, 2, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[510, 2, 1, "", "DeferredRoutingDefinition"], [510, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [510, 2, 1, "", "RealtimeRoutingDefinition"], [510, 2, 1, "", "Router"], [510, 2, 1, "", "RoutingDefinition"], [510, 1, 1, "", "find_pattern_in_graph"], [510, 1, 1, "", "get_model_graph"], [510, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.server": [[511, 1, 1, "", "allow_api_call"], [511, 1, 1, "", "block_iframe"], [511, 1, 1, "", "block_sniffing"], [511, 1, 1, "", "build_parameters"], [511, 1, 1, "", "disable_cache"], [511, 1, 1, "", "get_tls_args"], [511, 1, 1, "", "handle_api_call"], [511, 1, 1, "", "page_not_found"], [511, 1, 1, "", "require_api_token"], [511, 1, 1, "", "root"], [511, 1, 1, "", "run_server"], [511, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[512, 0, 0, "-", "benchmark"], [513, 0, 0, "-", "history_snapshot_parser"], [515, 0, 0, "-", "model"], [516, 0, 0, "-", "optimization"], [517, 0, 0, "-", "profiling"], [518, 0, 0, "-", "request_data_processor"], [519, 0, 0, "-", "response_generator"], [520, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[512, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[513, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.model": [[515, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.optimization": [[516, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[517, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.request_data_processor": [[518, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.response_generator": [[519, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.workload": [[520, 2, 1, "", "WorkloadService"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:data", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 161, 163, 164, 165, 166, 167, 168, 169, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 323, 324, 325, 326, 327, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 403, 405, 406, 407, 408, 409, 411, 413, 414, 420, 421, 423, 424, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 449, 452, 453, 455, 456, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520], "content": [1, 5, 6, 7, 8, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 165, 166, 167, 168, 169, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 403, 405, 406, 407, 408, 409, 411, 413, 414, 420, 421, 423, 424, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 449, 450, 452, 453, 455, 456, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 528, 544], "function": [1, 5, 6, 17, 36, 42, 43, 65, 66, 68, 102, 103, 114, 116, 144, 145, 146, 149, 150, 151, 153, 156, 158, 161, 163, 164, 165, 166, 167, 169, 179, 187, 189, 193, 196, 197, 198, 201, 203, 204, 205, 206, 208, 210, 211, 213, 216, 219, 227, 229, 233, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 265, 272, 276, 281, 282, 283, 285, 289, 290, 292, 293, 294, 295, 296, 297, 301, 305, 307, 308, 312, 320, 324, 326, 327, 329, 332, 333, 335, 336, 338, 339, 341, 342, 352, 353, 354, 356, 361, 363, 364, 366, 368, 371, 372, 377, 380, 381, 382, 393, 403, 420, 424, 426, 437, 438, 439, 442, 445, 449, 453, 455, 458, 461, 463, 464, 467, 473, 474, 482, 485, 490, 494, 502, 505, 506, 510, 511, 551], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 529, 530], "class": [6, 8, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 151, 152, 153, 154, 155, 157, 158, 161, 163, 164, 165, 166, 168, 169, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 248, 249, 250, 251, 254, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 283, 284, 285, 286, 287, 289, 292, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 323, 324, 325, 326, 327, 329, 330, 333, 334, 335, 336, 337, 339, 340, 343, 344, 345, 346, 348, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 392, 394, 395, 398, 399, 400, 402, 405, 406, 407, 408, 409, 411, 413, 414, 421, 423, 426, 428, 429, 430, 431, 433, 434, 435, 436, 440, 444, 446, 447, 450, 452, 456, 459, 462, 463, 465, 468, 469, 470, 472, 476, 477, 479, 480, 481, 482, 484, 486, 487, 488, 489, 492, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 506, 507, 508, 510, 512, 513, 515, 516, 517, 518, 519, 520, 529], "subpackag": [7, 20, 85, 109, 110, 112, 160, 173, 198, 238, 250, 274, 288, 316, 391, 396, 410, 415, 422, 450, 466, 475, 483, 509], "submodul": [7, 16, 20, 32, 49, 74, 85, 93, 99, 104, 109, 110, 112, 115, 128, 141, 147, 153, 159, 160, 162, 174, 181, 193, 197, 201, 208, 215, 221, 233, 237, 240, 244, 250, 257, 263, 269, 275, 279, 288, 295, 299, 316, 322, 328, 333, 343, 347, 355, 367, 386, 391, 396, 397, 401, 404, 410, 412, 415, 416, 422, 425, 427, 432, 441, 443, 448, 450, 451, 454, 457, 460, 466, 471, 475, 483, 491, 499, 509, 514], "packag": [7, 32, 153, 181, 193, 197, 198, 201, 208, 221, 233, 237, 238, 240, 250, 257, 269, 274, 275, 295, 299, 316, 333, 343, 450, 575, 577, 579, 580], "kera": [8, 433], "keras_util": [9, 10, 11, 12, 13, 14], "conv2d": 9, "dens": 10, "depthwise_conv2d": 11, "quantiz": [13, 41, 286, 308, 503, 525, 528, 541, 550, 556, 559, 562, 571, 582, 589, 590, 591, 594, 600], "separable_conv2d": 14, "mxnet": [15, 547, 561, 590, 596, 600], "mxnet_util": [16, 17], "util": [17, 42, 144, 150, 167, 248, 321, 322, 323, 324, 325, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 393, 437, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 532], "onnxrt": [18, 425, 426, 547, 561, 596], "ox_util": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "calibr": 19, "oper": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "activ": 21, "argmax": 22, "attent": 23, "binary_op": 24, "concat": 25, "conv": 26, "direct_q8": 27, "embed_layernorm": 28, "gather": 29, "gavgpool": 30, "gemm": 31, "lstm": 33, "matmul": [34, 594], "maxpool": 35, "op": 36, "pad": 37, "pool": 38, "resiz": 39, "split": 40, "pytorch": [43, 338, 427, 428, 547, 551, 561, 563, 590, 591, 595, 596, 600], "queri": [44, 529], "tensorflow": [45, 431, 432, 433, 434, 435, 436, 437, 547, 551, 561, 563, 590, 591, 595, 596, 600], "tf_util": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "graph_convert": 46, "graph_converter_without_calib": 47, "graph_rewrit": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "bf16": [48, 49], "bf16_convert": [48, 145], "gener": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "convert_add_to_biasadd": 50, "convert_layout": 51, "convert_leakyrelu": 52, "convert_nan_to_random": 53, "convert_placeholder_to_const": 54, "dequantize_cast_optim": 55, "dilated_contract": 56, "dummy_biasadd": 57, "expanddims_optim": 58, "fetch_weight_from_reshap": 59, "fold_batch_norm": 60, "fold_const": 61, "fuse_biasadd_add": 62, "fuse_column_wise_mul": 63, "fuse_conv_with_math": 64, "fuse_decomposed_bn": 65, "fuse_decomposed_in": 66, "fuse_gelu": 67, "fuse_layer_norm": 68, "fuse_pad_with_conv": 69, "fuse_pad_with_fp32_conv": 70, "fuse_reshape_transpos": 71, "graph_cse_optim": 72, "grappler_pass": 73, "insert_print_nod": 75, "move_squeeze_after_relu": 76, "pre_optim": 77, "remove_training_nod": 78, "rename_batch_norm": 79, "split_shared_input": 80, "strip_equivalent_nod": 81, "strip_unused_nod": 82, "switch_optim": 83, "graph_bas": 84, "int8": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 553, 600], "freeze_fake_qu": 86, "freeze_valu": 87, "freeze_value_without_calib": 88, "fuse_conv_redundant_dequant": 89, "fuse_conv_requant": 90, "fuse_matmul_redundant_dequant": 91, "fuse_matmul_requant": 92, "meta_op_optim": 94, "post_hostconst_convert": 95, "post_quantized_op_cs": 96, "rnn_convert": 97, "scale_propag": 98, "onnx": [99, 100, 101, 102, 103, 531, 559, 563, 590, 600], "onnx_graph": 100, "onnx_nod": 101, "onnx_schema": 102, "tf2onnx_util": 103, "qdq": [104, 105, 106, 107, 121, 122, 123, 124, 125, 126, 127, 128, 129, 600], "insert_qdq_pattern": 105, "merge_duplicated_qdq": 106, "share_qdq_y_pattern": 107, "graph_util": 108, "quantize_graph": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], "qat": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 600], "fake_quant": 111, "quantize_config": 113, "quantize_help": 114, "quantize_lay": [115, 116, 117, 118, 119], "optimize_lay": 116, "quantize_layer_add": 117, "quantize_layer_bas": 118, "quantize_layer_bn": 119, "quantize_wrapp": 120, "fuse_qdq_bn": 121, "fuse_qdq_concatv2": 122, "fuse_qdq_conv": 123, "fuse_qdq_deconv": 124, "fuse_qdq_in": 125, "fuse_qdq_matmul": 126, "fuse_qdq_pool": 127, "optimize_qdq": 129, "quantize_graph_bas": 130, "quantize_graph_bn": 131, "quantize_graph_concatv2": 132, "quantize_graph_conv": 133, "quantize_graph_for_intel_cpu": 134, "quantize_graph_matmul": 135, "quantize_graph_pool": 136, "quantize_graph_common": 137, "tf2onnx_convert": 138, "transform_graph": [139, 140, 141, 142, 143], "bias_correct": 139, "graph_transform_bas": 140, "insert_log": 142, "rerange_quantized_concat": 143, "torch_util": [145, 146, 147, 148, 149, 150, 213], "hawq_metr": 146, "smooth_quant": [148, 154], "symbolic_trac": 149, "algorithm": [151, 152, 153, 154, 155, 594, 597], "fast_bias_correct": 152, "weight_correct": 155, "benchmark": [156, 205, 340, 341, 342, 343, 359, 512, 535, 544, 545, 562, 589], "compress": [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 215, 216, 536], "callback": 157, "distil": [158, 159, 243, 549, 550, 562, 589, 600], "criterion": [158, 206], "pruner": [161, 162, 163, 164, 165, 166, 167, 272, 283], "criteria": [161, 587, 597], "pattern": [163, 275, 276, 277, 281, 587], "reg": 165, "schedul": [166, 285, 287, 587], "conf": [168, 169, 170, 171], "config": [168, 172, 495, 537, 546, 547, 584], "dotdict": 169, "pythonic_config": 171, "contrib": [173, 174, 175, 176], "strategi": [174, 175, 176, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 542, 593, 597], "sigopt": [175, 593, 597], "tpe": [176, 597], "data": [177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 552], "dataload": [177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 207, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 361, 496, 546, 547], "base_dataload": [177, 217], "default_dataload": [179, 219], "fetcher": [180, 220], "attribut": [181, 189, 198, 229, 238, 250, 274, 299, 327, 333, 405, 523], "mxnet_dataload": [182, 222], "onnxrt_dataload": [183, 223], "pytorch_dataload": [184, 224], "sampler": [185, 225], "tensorflow_dataload": [186, 226], "dataset": [187, 188, 189, 190, 191, 192, 193, 194, 227, 228, 229, 230, 231, 232, 233, 234, 362, 544, 547, 557], "bert_dataset": [187, 227], "coco_dataset": [188, 228], "dummy_dataset": [190, 230], "dummy_dataset_v2": [191, 231], "imagenet_dataset": [192, 232], "style_transfer_dataset": [194, 234], "filter": [195, 196, 197, 235, 236, 237], "coco_filt": [195, 235], "transform": [199, 200, 201, 202, 203, 204, 239, 240, 241, 242, 377, 557, 596], "coco_transform": 199, "imagenet_transform": [200, 239], "postprocess": [202, 212], "token": [203, 241], "experiment": [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "common": [206, 207, 208, 209, 210, 211, 212, 213, 525, 554], "metric": [209, 251, 252, 253, 254, 255, 256, 257, 258, 289, 290, 291, 292, 293, 294, 295, 296, 368, 492, 557, 561], "model": [210, 298, 299, 300, 301, 302, 303, 304, 305, 306, 369, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 501, 515, 539, 544, 553, 556, 559, 562, 564, 571, 587, 594, 600], "optim": [211, 370, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 516, 544, 572, 582, 585, 598], "compon": [214, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "prune": [216, 273, 284, 457, 458, 459, 502, 544, 562, 587, 589, 600], "export": [244, 245, 246, 247, 248, 553], "qlinear2qdq": 245, "tf2onnx": 246, "torch2onnx": 247, "graph_optim": [249, 447, 448, 449, 498], "bleu": [251, 289], "bleu_util": [252, 290], "coco_label_map": [253, 291], "coco_tool": [254, 292], "evaluate_squad": [255, 293], "f1": [256, 294], "mixed_precis": [259, 451, 452, 453, 500], "model_convers": 260, "na": [261, 262, 263, 264, 265, 266, 526, 544, 589], "basic_na": 261, "dyna": 262, "nas_util": 265, "search_algorithm": 266, "pruner_legaci": [267, 268, 269, 270, 271, 272], "gradient_sensit": 267, "group_lasso": 268, "magnitud": 270, "pattern_lock": 271, "pruning_recip": [274, 275, 276, 277], "tile_pattern": 277, "pruning_v2": 278, "pytorch_prun": [279, 280, 281, 282, 283, 284, 285], "logger": [280, 336, 485], "prune_util": 282, "mix_precis": 297, "base_model": 298, "keras_model": 300, "mxnet_model": 302, "nets_factori": 303, "onnx_model": 304, "tensorflow_model": 305, "torch_model": 306, "object": [307, 540, 584], "auto": [309, 576, 582, 591, 594, 597], "auto_mixed_precis": 310, "basic": [311, 526, 597], "bayesian": [312, 597], "conserv": [313, 597], "exhaust": [314, 597], "hawq_v2": [315, 597], "mse": [317, 597], "mse_v2": [318, 597], "random": [319, 597], "constant": [321, 331], "tuning_sampl": 323, "tuning_spac": 324, "tuning_struct": 325, "templat": [327, 328, 491, 492, 493, 524], "api_doc_exampl": 327, "train": [329, 525, 543, 551, 562, 590], "collect_layer_histogram": 330, "create_obj_from_config": 332, "kl_diverg": 334, "load_huggingfac": 335, "option": [337, 544, 551, 570], "ux": [340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "benchmark_model": 341, "execute_benchmark": 342, "config_gener": [344, 345, 346, 347, 348, 349, 350, 351], "benchmark_config_gener": 344, "graph_optimization_config_gener": 346, "mixed_precision_config_gener": 348, "profiling_config_gener": 349, "pruning_config_gener": 350, "quantization_config_gener": 351, "configuration_wizard": [352, 353, 354, 355, 356, 357], "configuration_pars": 352, "get_boundary_nod": 353, "get_configur": 354, "params_feed": 356, "pruning_config_pars": 357, "db_manag": [358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], "db_model": [359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379], "benchmark_result": 360, "domain": [363, 421], "domain_flavour": 364, "exampl": [365, 525, 526, 529, 533, 545, 546, 547, 549, 550, 551, 552, 553, 562, 563, 564, 567, 571, 584, 585, 587, 590, 594, 595, 600], "framework": [366, 546, 547, 553, 555, 564, 589], "optimization_typ": 371, "precis": [372, 538, 562, 563, 591], "profil": [373, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 517, 544], "profiling_result": 374, "project": [375, 544], "pruning_detail": 376, "tuning_detail": 378, "tuning_histori": [379, 463], "db_oper": [380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390], "benchmark_api_interfac": 380, "dataset_api_interfac": 381, "diagnosis_api_interfac": 383, "dictionaries_api_interfac": 384, "examples_api_interfac": 385, "model_api_interfac": 387, "optimization_api_interfac": 388, "profiling_api_interfac": 389, "project_api_interfac": 390, "params_interfac": 392, "diagnosi": [394, 395, 396, 397, 398, 399, 400, 401, 402, 544], "factori": [395, 446, 465, 470], "onnx_diagnosi": [397, 398], "onnxrt_diagnosi": 398, "op_detail": 399, "op_entri": 400, "tensorflow_diagnosi": [401, 402], "file_brows": [403, 404], "graph": [405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 544], "collaps": 406, "edg": 407, "graph_read": 409, "node": 411, "reader": [412, 413, 414], "onnxrt_read": 413, "tensorflow_read": 414, "jobs_manag": [416, 417, 418, 419], "jobs_control_queu": 417, "request": [419, 524], "manage_workspac": 420, "model_type_gett": 424, "repositori": 429, "shape": 430, "frozen_pb": 431, "meta_graph": 434, "saved_model": 436, "model_zoo": [438, 439, 440, 441, 442], "download_config": 438, "download_model": 439, "download": 440, "list_model": 442, "names_mapp": [443, 444], "execute_optim": 445, "optimize_model": [449, 453, 455, 458], "neural_coder_optim": [454, 455], "tune": [460, 461, 462, 504, 590, 594, 597], "tune_model": 461, "execute_profil": 464, "profile_model": 467, "tensorflow_profil": [470, 471, 472, 473], "inc_bench": 474, "const": 476, "environ": [477, 559, 568], "except": [478, 508], "executor": 479, "expiring_dict": 480, "github_info": 481, "hw_info": 482, "json_seri": 484, "parser": 486, "proc": 487, "process": [488, 597], "singleton": 489, "status_upd": 490, "workdir": 493, "workload": [495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 520], "evalu": [497, 551], "yaml_util": 505, "web": [506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "commun": 506, "configur": [507, 551, 555, 586, 589, 593, 599], "router": 510, "server": 511, "servic": [512, 513, 514, 515, 516, 517, 518, 519, 520], "history_snapshot_pars": 513, "request_data_processor": 518, "response_gener": 519, "version": 521, "intel": [522, 528, 544, 558, 559, 562, 568, 576, 582, 600, 601], "neural": [522, 525, 526, 528, 544, 558, 559, 562, 565, 569, 571, 576, 582, 587, 593, 598, 601], "compressor": [522, 525, 528, 544, 558, 559, 562, 576, 582, 593, 601], "document": [522, 528, 533, 601], "section": [522, 601], "contributor": [523, 524], "coven": [523, 524], "code": [523, 524, 526, 562, 583, 598], "conduct": [523, 524], "our": [523, 594], "pledg": 523, "standard": 523, "respons": 523, "scope": [523, 587], "enforc": 523, "contribut": [524, 575, 579], "guidelin": 524, "pull": 524, "checklist": 524, "support": [524, 525, 526, 529, 545, 546, 547, 549, 550, 551, 553, 555, 558, 559, 561, 563, 564, 566, 567, 571, 572, 584, 585, 587, 589, 590, 595, 596, 599], "fx": 525, "introduct": [525, 526, 529, 544, 545, 546, 547, 549, 550, 551, 553, 555, 558, 561, 563, 564, 582, 584, 585, 587, 589, 590, 593, 594, 595, 596, 597, 599], "mode": [525, 600], "matrix": [525, 526, 529, 545, 546, 547, 549, 550, 551, 553, 555, 558, 561, 563, 564, 567, 584, 585, 587, 589, 590, 595, 599], "get": [525, 526, 528, 529, 545, 546, 547, 549, 550, 551, 555, 556, 561, 563, 565, 576, 583, 584, 585, 587, 589, 590, 595, 599], "start": [525, 526, 528, 529, 544, 545, 546, 547, 549, 550, 551, 555, 556, 561, 563, 565, 566, 570, 576, 584, 585, 587, 589, 590, 595, 599], "post": [525, 562, 590], "static": [525, 590], "dynam": [525, 526, 590], "awar": [525, 562, 590], "note": [525, 592], "detail": [525, 544], "problem": 525, "architectur": [526, 548, 558, 559], "search": [526, 582], "api": [526, 528, 529, 533, 534, 545, 546, 547, 549, 550, 551, 556, 557, 561, 563, 565, 569, 583, 584, 585, 587, 589, 598], "usag": [526, 571, 582, 595, 597], "1": [526, 544, 551, 554, 557, 562, 582, 600], "python": [526, 528, 556, 561, 565, 569, 570, 577, 580, 589, 598], "yaml": [526, 546, 547, 551, 555, 599], "2": [526, 544, 551, 554, 557, 562, 582, 600], "onli": 526, "advanc": [526, 598], "custom": [526, 544, 561, 597], "secur": [527, 544, 551], "polici": [527, 597], "report": 527, "vulner": 527, "instal": [528, 544, 559, 566, 568, 575, 576, 579], "from": [528, 544, 559, 562], "pypi": [528, 571], "select": [528, 576], "public": [528, 588], "event": [528, 588], "addit": 528, "research": 528, "collabor": 528, "work": [529, 590], "flow": [529, 590], "background": [529, 582], "ad": 529, "new": [529, 544, 577, 580, 597], "backend": [529, 590], "capabl": 529, "implement": 529, "onnxrtadaptor": 529, "runtim": [531, 559, 563, 590, 600], "torch": [532, 600], "mix": [538, 562, 563, 591], "bench": [544, 569], "tabl": 544, "binari": [544, 559], "sourc": [544, 559], "home": 544, "screen": 544, "creat": [544, 546], "predefin": 544, "displai": 544, "list": [544, 552, 596], "remov": 544, "develop": [544, 575, 579], "tab": 544, "wizard": 544, "edit": 544, "entri": 544, "inform": [544, 560], "demo": 544, "system": [544, 559, 586], "file": [546, 547, 555, 599], "user": [546, 547, 551, 557, 589, 598, 599], "specif": [546, 547], "design": [548, 597], "workflow": 548, "knowledg": [549, 600], "intermedi": 549, "layer": [549, 594], "self": 549, "distribut": [551, 571, 597], "infer": 551, "featur": [551, 555, 558, 571, 572, 576, 589, 590, 595, 599], "pure": 551, "defin": 551, "horovodrun": 551, "execut": 551, "releas": [552, 577, 580, 592], "fp32": 553, "appendix": 553, "frequent": 554, "ask": 554, "question": 554, "build": [554, 561], "issu": [554, 592], "3": [554, 566, 582], "4": [554, 573, 582, 588], "quick": [556, 570], "sampl": 556, "jupyterlab": [556, 576], "extens": [556, 565, 575, 576, 579, 582, 583, 600], "gui": 556, "valid": [556, 559, 594, 600], "incompat": [557, 592], "chang": [557, 581, 583, 592], "between": 557, "v1": 557, "face": 557, "built": [557, 559, 561], "infrastructur": 558, "linux": 559, "prerequisit": 559, "ai": 559, "kit": 559, "window": 559, "requir": [559, 575, 579], "hardwar": [559, 600], "cpu": [559, 568, 600], "base": [559, 598], "64": 559, "compat": 559, "processor": 559, "gpu": 559, "": [559, 583], "xe": 559, "multipl": [559, 584, 600], "vendor": 559, "through": [559, 600], "softwar": 559, "legal": 560, "licens": 560, "citat": 560, "trademark": 560, "singl": [561, 584], "multi": 561, "migrat": 562, "x": 562, "orchestr": [562, 585], "coder": [565, 569, 571, 582, 598], "what": [565, 583], "do": 565, "we": 565, "offer": 565, "jupyt": [565, 566, 577, 580], "lab": [565, 566], "launcher": [565, 570], "contact": 565, "aw": 566, "amazon": 566, "sagemak": 566, "For": 566, "studio": 566, "notebook": 566, "instanc": 566, "guid": [566, 598], "bigdl": 567, "nano": 567, "platform": [568, 593], "best": [568, 576], "perform": [568, 593], "set": [568, 582], "mkl": 568, "openmp": 568, "jemalloc": 568, "numa": 568, "control": 568, "variabl": 568, "frequenc": 568, "govern": 568, "enabl": [569, 576, 582], "superbench": 569, "argument": 570, "v0": 573, "highlight": 573, "other": 573, "changelog": [574, 578], "neural_compressor_ext_lab": [575, 577], "uninstal": [575, 579], "Or": 576, "let": 576, "u": 576, "help": 576, "you": 576, "pre": 576, "requisit": 576, "make": [577, 580, 583], "manual": [577, 580], "npm": [577, 580], "autom": [577, 580], "publish": [577, 580], "conda": [577, 580], "forg": [577, 580], "neural_compressor_ext_lab_alibaba": [579, 580], "log": 581, "unreleas": 581, "vscode": 582, "open": 582, "icon": 582, "5": 582, "welcom": 583, "your": 583, "v": 583, "folder": 583, "setup": 583, "up": 583, "run": 583, "straight": 583, "awai": 583, "explor": 583, "test": 583, "go": 583, "further": 583, "One": 585, "shot": 585, "network": 587, "type": 587, "sparsiti": 587, "decai": 587, "regular": 587, "spars": 587, "deploy": 587, "refer": [587, 590, 594], "full": 588, "57": 588, "2023": 588, "2022": 588, "34": 588, "2021": 588, "15": 588, "2018": 588, "2020": 588, "style": 589, "access": 589, "fundament": [590, 594], "scheme": 590, "ipex": 590, "approach": 590, "With": 590, "without": 590, "accuraci": [590, 597], "specifi": 590, "rule": 590, "recip": 590, "turn": 591, "off": 591, "dure": 591, "known": 592, "prepar": 593, "benefit": 593, "comparison": 593, "differ": 593, "smooth": 594, "quant": 594, "per": 594, "tenor": 594, "channel": 594, "tensor": 594, "limit": 594, "smoothquant": 594, "enhanc": 594, "wise": 594, "alpha": 594, "engin": 594, "tensorboard": 595, "space": 597, "exit": 597, "overview": 598, "zero": 598, "topic": 598, "11": 600, "0": 600, "13": 600, "ptq": 600, "9": 600}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [111, "module-contents"], [113, "module-contents"], [114, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [161, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [171, "module-contents"], [172, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [199, "module-contents"], [200, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [216, "module-contents"], [217, "module-contents"], [219, "module-contents"], [220, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [239, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [289, "module-contents"], [290, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [329, "module-contents"], [330, "module-contents"], [332, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [402, "module-contents"], [403, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [411, "module-contents"], [413, "module-contents"], [414, "module-contents"], [420, "module-contents"], [421, "module-contents"], [423, "module-contents"], [424, "module-contents"], [426, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [442, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [449, "module-contents"], [452, "module-contents"], [453, "module-contents"], [455, "module-contents"], [456, "module-contents"], [458, "module-contents"], [459, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [17, "functions"], [36, "functions"], [42, "functions"], [43, "functions"], [65, "functions"], [66, "functions"], [68, "functions"], [102, "functions"], [103, "functions"], [114, "functions"], [116, "functions"], [144, "functions"], [145, "functions"], [146, "functions"], [149, "functions"], [150, "functions"], [151, "functions"], [153, "functions"], [156, "functions"], [158, "functions"], [161, "functions"], [163, "functions"], [164, "functions"], [165, "functions"], [166, "functions"], [167, "functions"], [169, "functions"], [179, "functions"], [187, "functions"], [189, "functions"], [193, "functions"], [196, "functions"], [197, "functions"], [198, "functions"], [201, "functions"], [203, "functions"], [204, "functions"], [205, "functions"], [206, "functions"], [208, "functions"], [210, "functions"], [211, "functions"], [213, "functions"], [216, "functions"], [219, "functions"], [227, "functions"], [229, "functions"], [233, "functions"], [236, "functions"], [237, "functions"], [238, "functions"], [240, "functions"], [241, "functions"], [242, "functions"], [245, "functions"], [246, "functions"], [247, "functions"], [248, "functions"], [251, "functions"], [252, "functions"], [254, "functions"], [255, "functions"], [256, "functions"], [257, "functions"], [258, "functions"], [265, "functions"], [272, "functions"], [276, "functions"], [281, "functions"], [282, "functions"], [283, "functions"], [285, "functions"], [289, "functions"], [290, "functions"], [292, "functions"], [293, "functions"], [294, "functions"], [295, "functions"], [296, "functions"], [297, "functions"], [301, "functions"], [305, "functions"], [307, "functions"], [308, "functions"], [312, "functions"], [320, "functions"], [324, "functions"], [326, "functions"], [327, "functions"], [329, "functions"], [332, "functions"], [333, "functions"], [335, "functions"], [336, "functions"], [338, "functions"], [339, "functions"], [341, "functions"], [342, "functions"], [352, "functions"], [353, "functions"], [354, "functions"], [356, "functions"], [361, "functions"], [363, "functions"], [364, "functions"], [366, "functions"], [368, "functions"], [371, "functions"], [372, "functions"], [377, "functions"], [380, "functions"], [381, "functions"], [382, "functions"], [393, "functions"], [403, "functions"], [420, "functions"], [424, "functions"], [426, "functions"], [437, "functions"], [438, "functions"], [439, "functions"], [442, "functions"], [445, "functions"], [449, "functions"], [453, "functions"], [455, "functions"], [458, "functions"], [461, "functions"], [463, "functions"], [464, "functions"], [467, "functions"], [473, "functions"], [474, "functions"], [482, "functions"], [485, "functions"], [490, "functions"], [494, "functions"], [502, "functions"], [505, "functions"], [506, "functions"], [510, "functions"], [511, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [111, "classes"], [113, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [157, "classes"], [158, "classes"], [161, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [168, "classes"], [169, "classes"], [171, "classes"], [172, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [214, "classes"], [217, "classes"], [219, "classes"], [220, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [254, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [264, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [281, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [289, "classes"], [292, "classes"], [295, "classes"], [296, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [329, "classes"], [330, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [339, "classes"], [340, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [392, "classes"], [394, "classes"], [395, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [402, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [411, "classes"], [413, "classes"], [414, "classes"], [421, "classes"], [423, "classes"], [426, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [440, "classes"], [444, "classes"], [446, "classes"], [447, "classes"], [450, "classes"], [452, "classes"], [456, "classes"], [459, "classes"], [462, "classes"], [463, "classes"], [465, "classes"], [468, "classes"], [469, "classes"], [470, "classes"], [472, "classes"], [476, "classes"], [477, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [482, "classes"], [484, "classes"], [486, "classes"], [487, "classes"], [488, "classes"], [489, "classes"], [492, "classes"], [493, "classes"], [495, "classes"], [496, "classes"], [497, "classes"], [498, "classes"], [500, "classes"], [501, "classes"], [502, "classes"], [503, "classes"], [504, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [510, "classes"], [512, "classes"], [513, "classes"], [515, "classes"], [516, "classes"], [517, "classes"], [518, "classes"], [519, "classes"], [520, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [20, "subpackages"], [85, "subpackages"], [109, "subpackages"], [110, "subpackages"], [112, "subpackages"], [160, "subpackages"], [173, "subpackages"], [198, "subpackages"], [238, "subpackages"], [250, "subpackages"], [274, "subpackages"], [288, "subpackages"], [316, "subpackages"], [391, "subpackages"], [396, "subpackages"], [410, "subpackages"], [415, "subpackages"], [422, "subpackages"], [450, "subpackages"], [466, "subpackages"], [475, "subpackages"], [483, "subpackages"], [509, "subpackages"]], "Submodules": [[7, "submodules"], [16, "submodules"], [20, "submodules"], [32, "submodules"], [49, "submodules"], [74, "submodules"], [85, "submodules"], [93, "submodules"], [99, "submodules"], [104, "submodules"], [109, "submodules"], [110, "submodules"], [112, "submodules"], [115, "submodules"], [128, "submodules"], [141, "submodules"], [147, "submodules"], [153, "submodules"], [159, "submodules"], [160, "submodules"], [162, "submodules"], [174, "submodules"], [181, "submodules"], [193, "submodules"], [197, "submodules"], [201, "submodules"], [208, "submodules"], [215, "submodules"], [221, "submodules"], [233, "submodules"], [237, "submodules"], [240, "submodules"], [244, "submodules"], [250, "submodules"], [257, "submodules"], [263, "submodules"], [269, "submodules"], [275, "submodules"], [279, "submodules"], [288, "submodules"], [295, "submodules"], [299, "submodules"], [316, "submodules"], [322, "submodules"], [328, "submodules"], [333, "submodules"], [343, "submodules"], [347, "submodules"], [355, "submodules"], [367, "submodules"], [386, "submodules"], [391, "submodules"], [396, "submodules"], [397, "submodules"], [401, "submodules"], [404, "submodules"], [410, "submodules"], [412, "submodules"], [415, "submodules"], [416, "submodules"], [422, "submodules"], [425, "submodules"], [427, "submodules"], [432, "submodules"], [441, "submodules"], [443, "submodules"], [448, "submodules"], [450, "submodules"], [451, "submodules"], [454, "submodules"], [457, "submodules"], [460, "submodules"], [466, "submodules"], [471, "submodules"], [475, "submodules"], [483, "submodules"], [491, "submodules"], [499, "submodules"], [509, "submodules"], [514, "submodules"]], "Package Contents": [[7, "package-contents"], [32, "package-contents"], [153, "package-contents"], [181, "package-contents"], [193, "package-contents"], [197, "package-contents"], [198, "package-contents"], [201, "package-contents"], [208, "package-contents"], [221, "package-contents"], [233, "package-contents"], [237, "package-contents"], [238, "package-contents"], [240, "package-contents"], [250, "package-contents"], [257, "package-contents"], [269, "package-contents"], [274, "package-contents"], [275, "package-contents"], [295, "package-contents"], [299, "package-contents"], [316, "package-contents"], [333, "package-contents"], [343, "package-contents"], [450, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[13, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[15, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[16, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[18, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[20, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[21, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[22, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[23, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[24, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[25, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[26, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[27, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[29, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[30, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[32, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[34, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[35, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[36, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[37, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[38, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[39, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[40, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[42, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[43, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[44, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[45, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[46, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[108, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[109, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[138, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[144, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[145, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[146, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[147, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[148, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[149, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[150, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[151, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[152, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[153, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[154, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[155, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[156, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[157, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[158, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[159, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[160, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[161, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[162, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.patterns": [[163, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[164, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[165, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[166, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[167, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[168, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[169, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[170, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[171, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[172, "module-neural_compressor.config"]], "neural_compressor.contrib": [[173, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[174, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[175, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[176, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[177, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[178, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[179, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[180, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[181, "module-neural_compressor.data.dataloaders"]], "Attributes": [[181, "attributes"], [189, "attributes"], [198, "attributes"], [229, "attributes"], [238, "attributes"], [250, "attributes"], [274, "attributes"], [299, "attributes"], [327, "attributes"], [333, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[182, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[183, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[184, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[185, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[186, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[187, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[188, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[189, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[190, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[191, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[192, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[193, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[194, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[195, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[196, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[197, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[198, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[199, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[200, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[201, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[202, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[203, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[204, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[205, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[206, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[207, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[208, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[209, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[210, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[211, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[212, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[213, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[214, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[215, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[216, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[217, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[218, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[219, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[220, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[221, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[222, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[223, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[225, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[227, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[228, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[229, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[230, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[231, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[232, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[233, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[234, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[235, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[236, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[237, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[238, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[239, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[240, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[241, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[242, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[243, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[244, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[245, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[246, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[247, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[248, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[249, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[250, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[251, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[252, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[253, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[254, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[255, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[256, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[257, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[258, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[259, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[260, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[261, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[262, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[263, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[264, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[265, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[266, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[267, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[268, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[269, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[270, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[271, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[272, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[273, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[274, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[275, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[276, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[277, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[278, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[279, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[280, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[281, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[282, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[283, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[284, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[285, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[286, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[287, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[288, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[289, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[290, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[291, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[292, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[293, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[294, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[295, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[296, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[297, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[298, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[299, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[300, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[301, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[302, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[303, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[304, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[305, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[306, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[307, "module-neural_compressor.objective"]], "neural_compressor.quantization": [[308, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[309, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[310, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[311, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[312, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[313, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[314, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[315, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[316, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[317, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[318, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[319, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[320, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[321, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[322, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[323, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[324, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[325, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[326, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[327, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[328, "module-neural_compressor.template"]], "neural_compressor.training": [[329, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[330, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[331, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[332, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[333, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[334, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[335, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[336, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[337, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[338, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[339, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[340, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[341, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[342, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[343, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[344, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[345, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[346, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[347, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[348, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[349, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[350, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[351, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[352, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[353, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[354, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[355, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[356, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[357, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[358, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[359, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[360, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[361, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[362, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[363, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[364, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[365, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[366, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[367, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[368, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[369, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[370, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[371, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[372, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[373, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[374, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[375, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[376, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[377, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[378, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[379, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[380, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[381, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[382, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[386, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[391, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[392, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[393, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[394, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[395, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[396, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[397, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[398, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[399, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[400, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[402, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[403, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[404, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[405, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[406, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[407, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[408, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[409, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[410, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[411, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[412, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[413, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[414, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[415, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[416, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[417, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[418, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[419, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[420, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[421, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[422, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[423, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[424, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[425, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[426, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[427, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[428, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[429, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[430, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[431, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[432, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[433, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[434, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[435, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[436, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[437, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[438, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[439, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[440, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[441, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[442, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[443, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[444, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[445, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[446, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[447, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[448, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[449, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[450, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[451, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[452, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[453, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[454, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[455, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[456, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[457, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[458, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[459, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[460, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[461, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[462, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[463, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[464, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[465, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[466, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[467, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[468, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[469, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[470, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[471, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[472, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[474, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[475, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[476, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[477, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[478, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[479, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[480, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[481, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[482, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[483, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[484, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[485, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[486, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[487, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[488, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[489, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[490, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[491, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[492, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[493, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[494, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[495, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[496, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[497, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[498, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[499, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[500, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[501, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[502, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[503, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[504, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[505, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[506, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[507, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[508, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[509, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[510, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[511, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[512, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[513, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[514, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[515, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[516, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[517, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[518, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[519, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[520, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[521, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[522, "intel-neural-compressor-documentation"], [601, "intel-neural-compressor-documentation"]], "Sections": [[522, "sections"], [601, "sections"]], "Contributor Covenant Code of Conduct": [[523, "contributor-covenant-code-of-conduct"], [524, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[523, "our-pledge"]], "Our Standards": [[523, "our-standards"]], "Our Responsibilities": [[523, "our-responsibilities"]], "Scope": [[523, "scope"]], "Enforcement": [[523, "enforcement"]], "Attribution": [[523, "attribution"]], "Contribution Guidelines": [[524, "contribution-guidelines"]], "Pull Request Checklist": [[524, "pull-request-checklist"]], "Pull Request Template": [[524, "pull-request-template"]], "Support": [[524, "support"]], "FX": [[525, "fx"]], "Introduction": [[525, "introduction"], [526, "introduction"], [529, "introduction"], [544, "introduction"], [545, "introduction"], [546, "introduction"], [547, "introduction"], [549, "introduction"], [550, "introduction"], [551, "introduction"], [553, "introduction"], [555, "introduction"], [558, "introduction"], [561, "introduction"], [563, "introduction"], [564, "introduction"], [584, "introduction"], [585, "introduction"], [587, "introduction"], [589, "introduction"], [593, "introduction"], [594, "introduction"], [595, "introduction"], [596, "introduction"], [597, "introduction"], [599, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[525, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[525, "get-start"]], "Post Training Static Quantization": [[525, "post-training-static-quantization"], [590, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[525, "post-training-dynamic-quantization"], [590, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[525, "quantization-aware-training"]], "Examples": [[525, "examples"], [526, "examples"], [545, "examples"], [546, "examples"], [547, "examples"], [549, "examples"], [550, "examples"], [551, "examples"], [552, "examples"], [553, "examples"], [562, "examples"], [563, "examples"], [564, "examples"], [585, "examples"], [587, "examples"], [590, "examples"], [595, "examples"]], "Note": [[525, "note"]], "Details": [[525, "details"]], "Common Problem": [[525, "common-problem"]], "Dynamic Quantization": [[525, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[525, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[526, "neural-architecture-search"]], "Basic NAS": [[526, "basic-nas"]], "Dynamic NAS": [[526, "dynamic-nas"]], "NAS Support Matrix": [[526, "nas-support-matrix"]], "Get Started with NAS API": [[526, "get-started-with-nas-api"]], "Basic Usage": [[526, "basic-usage"]], "1. Python code + YAML": [[526, "python-code-yaml"]], "2. Python code only": [[526, "python-code-only"]], "Advanced Usage (Custom NAS)": [[526, "advanced-usage-custom-nas"]], "Security Policy": [[527, "security-policy"]], "Report a Vulnerability": [[527, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[528, "intel-neural-compressor"], [582, "intel-neural-compressor"]], "Installation": [[528, "installation"], [559, "installation"], [576, "installation"]], "Install from pypi": [[528, "install-from-pypi"]], "Getting Started": [[528, "getting-started"], [556, "getting-started"]], "Quantization with Python API": [[528, "quantization-with-python-api"], [556, "quantization-with-python-api"]], "Documentation": [[528, "documentation"]], "Selected Publications/Events": [[528, "selected-publications-events"]], "Additional Content": [[528, "additional-content"]], "Research Collaborations": [[528, "research-collaborations"]], "Adaptor": [[529, "adaptor"], [530, "adaptor"]], "Adaptor Support Matrix": [[529, "adaptor-support-matrix"]], "Working Flow": [[529, "working-flow"], [590, "working-flow"]], "Get Start with Adaptor API": [[529, "get-start-with-adaptor-api"]], "Query API": [[529, "query-api"]], "Background": [[529, "background"]], "Query API Introduction": [[529, "query-api-introduction"]], "Example of Adding a New Backend Support": [[529, "example-of-adding-a-new-backend-support"]], "Capability": [[529, "capability"]], "Implement ONNXRTAdaptor Class": [[529, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[531, "onnx-runtime"], [563, "onnx-runtime"], [563, "id1"]], "Torch Utils": [[532, "torch-utils"]], "API Document Example": [[533, "api-document-example"]], "APIs": [[534, "apis"]], "Benchmark": [[535, "benchmark"], [562, "benchmark"], [589, "benchmark"]], "Compression": [[536, "compression"]], "Config": [[537, "config"]], "Mix Precision": [[538, "mix-precision"], [562, "mix-precision"]], "Model": [[539, "model"], [564, "model"]], "Objective": [[540, "objective"], [584, "objective"]], "Quantization": [[541, "quantization"], [589, "quantization"], [590, "quantization"]], "Strategy": [[542, "strategy"]], "Training": [[543, "training"]], "Intel\u00ae Neural Compressor Bench": [[544, "intel-neural-compressor-bench"]], "Table of Contents": [[544, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[544, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[544, "option-1-install-from-binary"]], "Option 2: Install from Source": [[544, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[544, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[544, "home-screen"]], "Create New Project": [[544, "create-new-project"]], "Predefined Model": [[544, "predefined-model"]], "Custom Model": [[544, "custom-model"]], "Display Model Graph": [[544, "display-model-graph"]], "Project List": [[544, "project-list"]], "Remove Project": [[544, "remove-project"]], "Develop Project": [[544, "develop-project"]], "Optimization Tab": [[544, "optimization-tab"]], "Optimization Table": [[544, "optimization-table"]], "Optimization Wizard": [[544, "optimization-wizard"]], "Editing Optimization Entries": [[544, "editing-optimization-entries"]], "Optimization Details": [[544, "optimization-details"]], "Pruning": [[544, "pruning"], [562, "pruning"], [587, "pruning"], [589, "pruning"]], "Benchmark Tab": [[544, "benchmark-tab"]], "Benchmark Table": [[544, "benchmark-table"]], "Benchmark Wizard": [[544, "benchmark-wizard"]], "Editing Benchmark Entries": [[544, "editing-benchmark-entries"]], "Benchmark Details": [[544, "benchmark-details"]], "Profiling Tab": [[544, "profiling-tab"]], "Profiling Table": [[544, "profiling-table"]], "Profiling Wizard": [[544, "profiling-wizard"]], "Editing Profiling Entries": [[544, "editing-profiling-entries"]], "Profiling Details": [[544, "profiling-details"]], "Diagnosis Tab": [[544, "diagnosis-tab"]], "Dataset Tab": [[544, "dataset-tab"]], "Dataset List": [[544, "dataset-list"]], "Dataset Wizard": [[544, "dataset-wizard"]], "Dataset Details": [[544, "dataset-details"]], "Custom Dataset": [[544, "custom-dataset"]], "Project Information": [[544, "project-information"]], "NAS demo": [[544, "nas-demo"]], "System Information": [[544, "system-information"]], "Security": [[544, "security"], [551, "security"]], "Benchmarking": [[545, "benchmarking"]], "Benchmark Support Matrix": [[545, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[545, "get-started-with-benchmark-api"]], "DataLoader": [[546, "dataloader"]], "Supported Framework Dataloader Matrix": [[546, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[546, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[546, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[546, "create-a-user-specific-dataloader"]], "Dataset": [[547, "dataset"]], "Supported Framework Dataset Matrix": [[547, "supported-framework-dataset-matrix"]], "TensorFlow": [[547, "tensorflow"], [561, "tensorflow"], [563, "tensorflow"], [596, "tensorflow"]], "PyTorch": [[547, "pytorch"], [561, "pytorch"], [563, "pytorch"], [591, "pytorch"]], "MXNet": [[547, "mxnet"], [561, "mxnet"], [596, "mxnet"]], "ONNXRT": [[547, "onnxrt"], [561, "onnxrt"], [596, "onnxrt"]], "Get start with Dataset API": [[547, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[547, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[547, "user-specific-dataset"]], "Design": [[548, "design"], [597, "design"], [597, "id1"], [597, "id3"], [597, "id5"], [597, "id7"], [597, "id9"], [597, "id11"], [597, "id13"], [597, "id15"], [597, "id17"], [597, "id19"], [597, "id21"]], "Architecture": [[548, "architecture"], [558, "architecture"]], "Workflow": [[548, "workflow"]], "Distillation": [[549, "distillation"], [562, "distillation"], [589, "distillation"]], "Knowledge Distillation": [[549, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[549, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[549, "self-distillation"]], "Distillation Support Matrix": [[549, "distillation-support-matrix"]], "Get Started with Distillation API": [[549, "get-started-with-distillation-api"]], "Distillation for Quantization": [[550, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[550, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[550, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[551, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[551, "supported-feature-matrix"], [555, "supported-feature-matrix"], [558, "supported-feature-matrix"], [589, "supported-feature-matrix"], [590, "supported-feature-matrix"], [595, "supported-feature-matrix"], [599, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[551, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[551, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[551, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[551, "horovodrun-execution"]], "PyTorch Examples:": [[551, "pytorch-examples"]], "TensorFlow Examples:": [[551, "tensorflow-examples"]], "Example List": [[552, "example-list"]], "Release Data": [[552, "release-data"]], "Export": [[553, "export"]], "Supported Framework Model Matrix": [[553, "supported-framework-model-matrix"], [564, "supported-framework-model-matrix"]], "FP32 Model Export": [[553, "fp32-model-export"]], "INT8 Model Export": [[553, "int8-model-export"]], "Appendix": [[553, "appendix"]], "Frequently Asked Questions": [[554, "frequently-asked-questions"]], "Common Build Issues": [[554, "common-build-issues"]], "Issue 1:": [[554, "issue-1"]], "Issue 2:": [[554, "issue-2"]], "Issue 3:": [[554, "issue-3"]], "Issue 4:": [[554, "issue-4"]], "Framework YAML Configuration Files": [[555, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[555, "get-started-with-framework-yaml-files"]], "Quick Samples": [[556, "quick-samples"]], "Quantization with JupyterLab Extension": [[556, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[556, "quantization-with-gui"]], "Validated Models": [[556, "validated-models"], [594, "validated-models"], [600, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[557, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[557, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[557, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[558, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[559, "linux-installation"]], "Prerequisites": [[559, "prerequisites"], [559, "id1"]], "Install from Binary": [[559, "install-from-binary"], [559, "id2"]], "Install from Source": [[559, "install-from-source"], [559, "id3"]], "Install from AI Kit": [[559, "install-from-ai-kit"]], "Windows Installation": [[559, "windows-installation"]], "System Requirements": [[559, "system-requirements"]], "Validated Hardware Environment": [[559, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[559, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[559, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[559, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[559, "validated-software-environment"]], "Legal Information": [[560, "legal-information"]], "License": [[560, "license"]], "Citation": [[560, "citation"]], "Trademarks": [[560, "trademarks"]], "Metrics": [[561, "metrics"]], "Supported Built-in Metric Matrix": [[561, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[561, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[561, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[561, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[562, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[562, "model-quantization"]], "Post-training Quantization": [[562, "post-training-quantization"]], "Quantization Aware Training": [[562, "quantization-aware-training"], [590, "quantization-aware-training"], [590, "id1"]], "Orchestration": [[562, "orchestration"]], "Mixed Precision": [[563, "mixed-precision"]], "Mixed Precision Support Matrix": [[563, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[563, "get-started-with-mixed-precision-api"]], "Neural Coder": [[565, "neural-coder"], [582, "neural-coder"], [582, "id1"]], "What do we offer?": [[565, "what-do-we-offer"]], "Getting Started!": [[565, "getting-started"], [576, "getting-started"]], "Jupyter Lab Extension": [[565, "jupyter-lab-extension"]], "Python Launcher": [[565, "python-launcher"], [570, "python-launcher"]], "Python API": [[565, "python-api"]], "Contact": [[565, "contact"]], "AWS Amazon SageMaker Support": [[566, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[566, "start-jupyter-lab-3"]], "For SageMaker Studio": [[566, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[566, "for-sagemaker-notebook-instance"]], "Installation Guide": [[566, "installation-guide"]], "BigDL Nano Support": [[567, "bigdl-nano-support"]], "Example": [[567, "example"], [571, "example"], [584, "example"], [594, "example"]], "Support Matrix": [[567, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[568, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[568, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[568, "install-numa-controller"]], "Environment Variables": [[568, "environment-variables"]], "Frequency Governers": [[568, "frequency-governers"]], "Neural Coder as Python API": [[569, "neural-coder-as-python-api"]], "Enable": [[569, "enable"]], "Bench": [[569, "bench"]], "SuperBench": [[569, "superbench"]], "Quick-Start": [[570, "quick-start"]], "Launcher Arguments (Optional)": [[570, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[571, "neural-coder-for-quantization"]], "Features Supported": [[571, "features-supported"]], "Models Supported": [[571, "models-supported"]], "Usage": [[571, "usage"], [595, "usage"], [595, "id1"], [597, "usage"], [597, "id2"], [597, "id4"], [597, "id6"], [597, "id8"], [597, "id10"], [597, "id12"], [597, "id14"], [597, "id16"], [597, "id18"], [597, "id20"], [597, "id22"]], "PyPI distribution:": [[571, "pypi-distribution"]], "Supported Optimization Features": [[572, "supported-optimization-features"]], "v0.4": [[573, "v0-4"]], "Highlights": [[573, "highlights"]], "Others": [[573, "others"]], "Changelog": [[574, "changelog"], [578, "changelog"]], "neural_compressor_ext_lab": [[575, "neural-compressor-ext-lab"]], "Requirements": [[575, "requirements"], [579, "requirements"]], "Install": [[575, "install"], [579, "install"]], "Uninstall": [[575, "uninstall"], [579, "uninstall"]], "Contributing": [[575, "contributing"], [579, "contributing"]], "Development install": [[575, "development-install"], [579, "development-install"]], "Development uninstall": [[575, "development-uninstall"], [579, "development-uninstall"]], "Packaging the extension": [[575, "packaging-the-extension"], [579, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[576, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[576, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[576, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[576, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[577, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[577, "manual-release"], [580, "manual-release"]], "Python package": [[577, "python-package"], [580, "python-package"]], "NPM package": [[577, "npm-package"], [580, "npm-package"]], "Automated releases with the Jupyter Releaser": [[577, "automated-releases-with-the-jupyter-releaser"], [580, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[577, "publishing-to-conda-forge"], [580, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[579, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[580, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[581, "change-log"]], "[Unreleased]": [[581, "unreleased"]], "Background Introduction": [[582, "background-introduction"]], "Neural Coder Extension in VSCode": [[582, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[582, "neural-coder-extension-usage"]], "1. Open": [[582, "open"]], "2. Search": [[582, "search"]], "3. Setting": [[582, "setting"]], "4. Icon": [[582, "icon"]], "5. optimization (quantization)": [[582, "optimization-quantization"]], "5.1 Enable": [[582, "enable"]], "5.2 Auto": [[582, "auto"]], "Welcome to your VS Code Extension": [[583, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[583, "what-s-in-the-folder"]], "Setup": [[583, "setup"]], "Get up and running straight away": [[583, "get-up-and-running-straight-away"]], "Make changes": [[583, "make-changes"]], "Explore the API": [[583, "explore-the-api"]], "Run tests": [[583, "run-tests"]], "Go further": [[583, "go-further"]], "Single Objective": [[584, "single-objective"]], "Multiple Objectives": [[584, "multiple-objectives"]], "Objective Support Matrix": [[584, "objective-support-matrix"]], "Get Started with Objective API": [[584, "get-started-with-objective-api"]], "Config Single Objective": [[584, "config-single-objective"]], "Config Multiple Objectives": [[584, "config-multiple-objectives"]], "Optimization Orchestration": [[585, "optimization-orchestration"]], "One-shot": [[585, "one-shot"]], "Orchestration Support Matrix": [[585, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[585, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[586, "system-configuration"]], "Neural Network Pruning": [[587, "neural-network-pruning"]], "Pruning Patterns": [[587, "pruning-patterns"]], "Pruning Criteria": [[587, "pruning-criteria"]], "Pruning Schedule": [[587, "pruning-schedule"]], "Pruning Types": [[587, "pruning-types"]], "Pruning Scope": [[587, "pruning-scope"]], "Sparsity Decay Types": [[587, "sparsity-decay-types"]], "Regularization": [[587, "regularization"]], "Pruning Support Matrix": [[587, "pruning-support-matrix"]], "Get Started with Pruning API": [[587, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[587, "sparse-model-deployment"]], "Reference": [[587, "reference"], [590, "reference"], [594, "reference"]], "Full Publications/Events (57)": [[588, "full-publications-events-57"]], "2023 (4)": [[588, "id1"]], "2022 (34)": [[588, "id2"]], "2021 (15)": [[588, "id3"]], "2018 - 2020 (4)": [[588, "id4"]], "Pythonic Style Access for Configurations": [[589, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[589, "pythonic-api-for-user-configurations"], [589, "id1"]], "Pythonic API for Framework Configurations": [[589, "pythonic-api-for-framework-configurations"], [589, "id2"]], "Get Started with Pythonic API for Configurations": [[589, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[589, "nas"]], "Quantization Introduction": [[590, "quantization-introduction"]], "Quantization Fundamentals": [[590, "quantization-fundamentals"], [594, "quantization-fundamentals"]], "Quantization Support Matrix": [[590, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[590, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[590, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[590, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[590, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[590, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[590, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[590, "with-or-without-accuracy-aware-tuning"]], "Get Started": [[590, "get-started"]], "Post Training Quantization": [[590, "post-training-quantization"]], "Specify Quantization Rules": [[590, "specify-quantization-rules"]], "Specify Quantization Recipes": [[590, "specify-quantization-recipes"]], "Specify Quantization Backend": [[590, "specify-quantization-backend"]], "Turn OFF Auto Mixed Precision during Quantization": [[591, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[591, "tensorflow"]], "Release": [[592, "release"]], "Release Notes": [[592, "release-notes"]], "Known Issues": [[592, "known-issues"]], "Incompatible Changes": [[592, "incompatible-changes"]], "SigOpt Strategy": [[593, "sigopt-strategy"]], "Preparation": [[593, "preparation"]], "SigOpt Platform": [[593, "sigopt-platform"]], "Neural Compressor Configuration": [[593, "neural-compressor-configuration"]], "Performance": [[593, "performance"]], "Benefit of SigOpt Strategy": [[593, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[593, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[594, "smooth-quant"]], "Per-tenor & Per-channel": [[594, "per-tenor-per-channel"]], "Per-tensor example": [[594, "per-tensor-example"]], "Per-channel example": [[594, "per-channel-example"]], "Matmul quantization example": [[594, "matmul-quantization-example"]], "Per-channel limitation": [[594, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[594, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[594, "smoothquant"]], "Our enhancement:": [[594, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[594, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[594, "engineering"]], "TensorBoard": [[595, "tensorboard"]], "Get Started with TensorBoard": [[595, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[595, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[595, "tensorflow-tensorboard"]], "PyTorch Examples": [[595, "pytorch-examples"]], "TensorFlow Examples": [[595, "tensorflow-examples"]], "Transform": [[596, "transform"]], "Transform Support List": [[596, "transform-support-list"]], "Pytorch": [[596, "pytorch"]], "Tuning Strategies": [[597, "tuning-strategies"]], "Strategy Design": [[597, "strategy-design"]], "Tuning Space": [[597, "tuning-space"]], "Exit Policy": [[597, "exit-policy"]], "Accuracy Criteria": [[597, "accuracy-criteria"]], "Tuning Process": [[597, "tuning-process"]], "Tuning Algorithms": [[597, "tuning-algorithms"]], "Auto": [[597, "auto"]], "Conservative Tuning": [[597, "conservative-tuning"]], "Basic": [[597, "basic"]], "MSE": [[597, "mse"]], "MSE_V2": [[597, "mse-v2"]], "HAWQ_V2": [[597, "hawq-v2"]], "Bayesian": [[597, "bayesian"]], "Exhaustive": [[597, "exhaustive"]], "Random": [[597, "random"]], "SigOpt": [[597, "sigopt"]], "TPE": [[597, "tpe"]], "Distributed Tuning": [[597, "distributed-tuning"]], "Customize a New Tuning Strategy": [[597, "customize-a-new-tuning-strategy"]], "User Guide": [[598, "user-guide"]], "Overview": [[598, "overview"]], "Python-based APIs": [[598, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[598, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[598, "advanced-topics"]], "User YAML Configuration Files": [[599, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[599, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[600, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[600, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[600, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[600, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[600, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[600, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[600, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[600, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[600, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[600, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils.conv2d"], [10, "module-neural_compressor.adaptor.keras_utils.dense"], [11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [12, "module-neural_compressor.adaptor.keras_utils"], [13, "module-neural_compressor.adaptor.keras_utils.quantizer"], [14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [15, "module-neural_compressor.adaptor.mxnet"], [16, "module-neural_compressor.adaptor.mxnet_utils"], [17, "module-neural_compressor.adaptor.mxnet_utils.util"], [18, "module-neural_compressor.adaptor.onnxrt"], [19, "module-neural_compressor.adaptor.ox_utils.calibration"], [20, "module-neural_compressor.adaptor.ox_utils"], [21, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [22, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [23, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [24, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [25, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [26, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [27, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [28, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [29, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [30, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [31, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [32, "module-neural_compressor.adaptor.ox_utils.operators"], [33, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [35, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [36, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [37, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [38, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [39, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [40, "module-neural_compressor.adaptor.ox_utils.operators.split"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.util"], [43, "module-neural_compressor.adaptor.pytorch"], [44, "module-neural_compressor.adaptor.query"], [45, "module-neural_compressor.adaptor.tensorflow"], [46, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_util"], [109, "module-neural_compressor.adaptor.tf_utils"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [138, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [139, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [140, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [141, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [144, "module-neural_compressor.adaptor.tf_utils.util"], [145, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [146, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [147, "module-neural_compressor.adaptor.torch_utils"], [148, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [149, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [150, "module-neural_compressor.adaptor.torch_utils.util"], [151, "module-neural_compressor.algorithm.algorithm"], [152, "module-neural_compressor.algorithm.fast_bias_correction"], [153, "module-neural_compressor.algorithm"], [154, "module-neural_compressor.algorithm.smooth_quant"], [155, "module-neural_compressor.algorithm.weight_correction"], [156, "module-neural_compressor.benchmark"], [157, "module-neural_compressor.compression.callbacks"], [158, "module-neural_compressor.compression.distillation.criterions"], [159, "module-neural_compressor.compression.distillation"], [160, "module-neural_compressor.compression"], [161, "module-neural_compressor.compression.pruner.criteria"], [162, "module-neural_compressor.compression.pruner"], [163, "module-neural_compressor.compression.pruner.patterns"], [164, "module-neural_compressor.compression.pruner.pruners"], [165, "module-neural_compressor.compression.pruner.regs"], [166, "module-neural_compressor.compression.pruner.schedulers"], [167, "module-neural_compressor.compression.pruner.utils"], [168, "module-neural_compressor.conf.config"], [169, "module-neural_compressor.conf.dotdict"], [170, "module-neural_compressor.conf"], [171, "module-neural_compressor.conf.pythonic_config"], [172, "module-neural_compressor.config"], [173, "module-neural_compressor.contrib"], [174, "module-neural_compressor.contrib.strategy"], [175, "module-neural_compressor.contrib.strategy.sigopt"], [176, "module-neural_compressor.contrib.strategy.tpe"], [177, "module-neural_compressor.data.dataloaders.base_dataloader"], [178, "module-neural_compressor.data.dataloaders.dataloader"], [179, "module-neural_compressor.data.dataloaders.default_dataloader"], [180, "module-neural_compressor.data.dataloaders.fetcher"], [181, "module-neural_compressor.data.dataloaders"], [182, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [183, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [184, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [185, "module-neural_compressor.data.dataloaders.sampler"], [186, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [187, "module-neural_compressor.data.datasets.bert_dataset"], [188, "module-neural_compressor.data.datasets.coco_dataset"], [189, "module-neural_compressor.data.datasets.dataset"], [190, "module-neural_compressor.data.datasets.dummy_dataset"], [191, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [192, "module-neural_compressor.data.datasets.imagenet_dataset"], [193, "module-neural_compressor.data.datasets"], [194, "module-neural_compressor.data.datasets.style_transfer_dataset"], [195, "module-neural_compressor.data.filters.coco_filter"], [196, "module-neural_compressor.data.filters.filter"], [197, "module-neural_compressor.data.filters"], [198, "module-neural_compressor.data"], [199, "module-neural_compressor.data.transforms.coco_transform"], [200, "module-neural_compressor.data.transforms.imagenet_transform"], [201, "module-neural_compressor.data.transforms"], [202, "module-neural_compressor.data.transforms.postprocess"], [203, "module-neural_compressor.data.transforms.tokenization"], [204, "module-neural_compressor.data.transforms.transform"], [205, "module-neural_compressor.experimental.benchmark"], [206, "module-neural_compressor.experimental.common.criterion"], [207, "module-neural_compressor.experimental.common.dataloader"], [208, "module-neural_compressor.experimental.common"], [209, "module-neural_compressor.experimental.common.metric"], [210, "module-neural_compressor.experimental.common.model"], [211, "module-neural_compressor.experimental.common.optimizer"], [212, "module-neural_compressor.experimental.common.postprocess"], [213, "module-neural_compressor.experimental.common.torch_utils"], [214, "module-neural_compressor.experimental.component"], [215, "module-neural_compressor.experimental.compression"], [216, "module-neural_compressor.experimental.compression.pruning"], [217, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [218, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [219, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [220, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [221, "module-neural_compressor.experimental.data.dataloaders"], [222, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [223, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [224, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [225, "module-neural_compressor.experimental.data.dataloaders.sampler"], [226, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [227, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [228, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [229, "module-neural_compressor.experimental.data.datasets.dataset"], [230, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [231, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [232, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [233, "module-neural_compressor.experimental.data.datasets"], [234, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [235, "module-neural_compressor.experimental.data.filters.coco_filter"], [236, "module-neural_compressor.experimental.data.filters.filter"], [237, "module-neural_compressor.experimental.data.filters"], [238, "module-neural_compressor.experimental.data"], [239, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [240, "module-neural_compressor.experimental.data.transforms"], [241, "module-neural_compressor.experimental.data.transforms.tokenization"], [242, "module-neural_compressor.experimental.data.transforms.transform"], [243, "module-neural_compressor.experimental.distillation"], [244, "module-neural_compressor.experimental.export"], [245, "module-neural_compressor.experimental.export.qlinear2qdq"], [246, "module-neural_compressor.experimental.export.tf2onnx"], [247, "module-neural_compressor.experimental.export.torch2onnx"], [248, "module-neural_compressor.experimental.export.utils"], [249, "module-neural_compressor.experimental.graph_optimization"], [250, "module-neural_compressor.experimental"], [251, "module-neural_compressor.experimental.metric.bleu"], [252, "module-neural_compressor.experimental.metric.bleu_util"], [253, "module-neural_compressor.experimental.metric.coco_label_map"], [254, "module-neural_compressor.experimental.metric.coco_tools"], [255, "module-neural_compressor.experimental.metric.evaluate_squad"], [256, "module-neural_compressor.experimental.metric.f1"], [257, "module-neural_compressor.experimental.metric"], [258, "module-neural_compressor.experimental.metric.metric"], [259, "module-neural_compressor.experimental.mixed_precision"], [260, "module-neural_compressor.experimental.model_conversion"], [261, "module-neural_compressor.experimental.nas.basic_nas"], [262, "module-neural_compressor.experimental.nas.dynas"], [263, "module-neural_compressor.experimental.nas"], [264, "module-neural_compressor.experimental.nas.nas"], [265, "module-neural_compressor.experimental.nas.nas_utils"], [266, "module-neural_compressor.experimental.nas.search_algorithms"], [267, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [268, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [269, "module-neural_compressor.experimental.pruner_legacy"], [270, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [271, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [272, "module-neural_compressor.experimental.pruner_legacy.pruner"], [273, "module-neural_compressor.experimental.pruning"], [274, "module-neural_compressor.experimental.pruning_recipes"], [275, "module-neural_compressor.experimental.pruning_recipes.patterns"], [276, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [277, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [278, "module-neural_compressor.experimental.pruning_v2"], [279, "module-neural_compressor.experimental.pytorch_pruner"], [280, "module-neural_compressor.experimental.pytorch_pruner.logger"], [281, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [282, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [283, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [284, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [285, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [286, "module-neural_compressor.experimental.quantization"], [287, "module-neural_compressor.experimental.scheduler"], [288, "module-neural_compressor"], [289, "module-neural_compressor.metric.bleu"], [290, "module-neural_compressor.metric.bleu_util"], [291, "module-neural_compressor.metric.coco_label_map"], [292, "module-neural_compressor.metric.coco_tools"], [293, "module-neural_compressor.metric.evaluate_squad"], [294, "module-neural_compressor.metric.f1"], [295, "module-neural_compressor.metric"], [296, "module-neural_compressor.metric.metric"], [297, "module-neural_compressor.mix_precision"], [298, "module-neural_compressor.model.base_model"], [299, "module-neural_compressor.model"], [300, "module-neural_compressor.model.keras_model"], [301, "module-neural_compressor.model.model"], [302, "module-neural_compressor.model.mxnet_model"], [303, "module-neural_compressor.model.nets_factory"], [304, "module-neural_compressor.model.onnx_model"], [305, "module-neural_compressor.model.tensorflow_model"], [306, "module-neural_compressor.model.torch_model"], [307, "module-neural_compressor.objective"], [308, "module-neural_compressor.quantization"], [309, "module-neural_compressor.strategy.auto"], [310, "module-neural_compressor.strategy.auto_mixed_precision"], [311, "module-neural_compressor.strategy.basic"], [312, "module-neural_compressor.strategy.bayesian"], [313, "module-neural_compressor.strategy.conservative"], [314, "module-neural_compressor.strategy.exhaustive"], [315, "module-neural_compressor.strategy.hawq_v2"], [316, "module-neural_compressor.strategy"], [317, "module-neural_compressor.strategy.mse"], [318, "module-neural_compressor.strategy.mse_v2"], [319, "module-neural_compressor.strategy.random"], [320, "module-neural_compressor.strategy.strategy"], [321, "module-neural_compressor.strategy.utils.constant"], [322, "module-neural_compressor.strategy.utils"], [323, "module-neural_compressor.strategy.utils.tuning_sampler"], [324, "module-neural_compressor.strategy.utils.tuning_space"], [325, "module-neural_compressor.strategy.utils.tuning_structs"], [326, "module-neural_compressor.strategy.utils.utility"], [327, "module-neural_compressor.template.api_doc_example"], [328, "module-neural_compressor.template"], [329, "module-neural_compressor.training"], [330, "module-neural_compressor.utils.collect_layer_histogram"], [331, "module-neural_compressor.utils.constant"], [332, "module-neural_compressor.utils.create_obj_from_config"], [333, "module-neural_compressor.utils"], [334, "module-neural_compressor.utils.kl_divergence"], [335, "module-neural_compressor.utils.load_huggingface"], [336, "module-neural_compressor.utils.logger"], [337, "module-neural_compressor.utils.options"], [338, "module-neural_compressor.utils.pytorch"], [339, "module-neural_compressor.utils.utility"], [340, "module-neural_compressor.ux.components.benchmark.benchmark"], [341, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [342, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [343, "module-neural_compressor.ux.components.benchmark"], [344, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [345, "module-neural_compressor.ux.components.config_generator.config_generator"], [346, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [347, "module-neural_compressor.ux.components.config_generator"], [348, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [349, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [350, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [351, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [352, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [353, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [354, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [355, "module-neural_compressor.ux.components.configuration_wizard"], [356, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [357, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [358, "module-neural_compressor.ux.components.db_manager.db_manager"], [359, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [360, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [361, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [362, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [363, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [364, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [365, "module-neural_compressor.ux.components.db_manager.db_models.example"], [366, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [367, "module-neural_compressor.ux.components.db_manager.db_models"], [368, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [369, "module-neural_compressor.ux.components.db_manager.db_models.model"], [370, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [371, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [372, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [373, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [374, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [375, "module-neural_compressor.ux.components.db_manager.db_models.project"], [376, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [377, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [378, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [379, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [380, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [381, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [382, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [383, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [384, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [385, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [386, "module-neural_compressor.ux.components.db_manager.db_operations"], [387, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [388, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [389, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [390, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [391, "module-neural_compressor.ux.components.db_manager"], [392, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [393, "module-neural_compressor.ux.components.db_manager.utils"], [394, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [395, "module-neural_compressor.ux.components.diagnosis.factory"], [396, "module-neural_compressor.ux.components.diagnosis"], [397, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [398, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [399, "module-neural_compressor.ux.components.diagnosis.op_details"], [400, "module-neural_compressor.ux.components.diagnosis.op_entry"], [401, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [402, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [403, "module-neural_compressor.ux.components.file_browser.file_browser"], [404, "module-neural_compressor.ux.components.file_browser"], [405, "module-neural_compressor.ux.components.graph.attribute"], [406, "module-neural_compressor.ux.components.graph.collapser"], [407, "module-neural_compressor.ux.components.graph.edge"], [408, "module-neural_compressor.ux.components.graph.graph"], [409, "module-neural_compressor.ux.components.graph.graph_reader"], [410, "module-neural_compressor.ux.components.graph"], [411, "module-neural_compressor.ux.components.graph.node"], [412, "module-neural_compressor.ux.components.graph.reader"], [413, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [414, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [415, "module-neural_compressor.ux.components"], [416, "module-neural_compressor.ux.components.jobs_management"], [417, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [418, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [419, "module-neural_compressor.ux.components.jobs_management.request"], [420, "module-neural_compressor.ux.components.manage_workspace"], [421, "module-neural_compressor.ux.components.model.domain"], [422, "module-neural_compressor.ux.components.model"], [423, "module-neural_compressor.ux.components.model.model"], [424, "module-neural_compressor.ux.components.model.model_type_getter"], [425, "module-neural_compressor.ux.components.model.onnxrt"], [426, "module-neural_compressor.ux.components.model.onnxrt.model"], [427, "module-neural_compressor.ux.components.model.pytorch"], [428, "module-neural_compressor.ux.components.model.pytorch.model"], [429, "module-neural_compressor.ux.components.model.repository"], [430, "module-neural_compressor.ux.components.model.shape"], [431, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [432, "module-neural_compressor.ux.components.model.tensorflow"], [433, "module-neural_compressor.ux.components.model.tensorflow.keras"], [434, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [435, "module-neural_compressor.ux.components.model.tensorflow.model"], [436, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [437, "module-neural_compressor.ux.components.model.tensorflow.utils"], [438, "module-neural_compressor.ux.components.model_zoo.download_config"], [439, "module-neural_compressor.ux.components.model_zoo.download_model"], [440, "module-neural_compressor.ux.components.model_zoo.downloader"], [441, "module-neural_compressor.ux.components.model_zoo"], [442, "module-neural_compressor.ux.components.model_zoo.list_models"], [443, "module-neural_compressor.ux.components.names_mapper"], [444, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [445, "module-neural_compressor.ux.components.optimization.execute_optimization"], [446, "module-neural_compressor.ux.components.optimization.factory"], [447, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [448, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [449, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [450, "module-neural_compressor.ux.components.optimization"], [451, "module-neural_compressor.ux.components.optimization.mixed_precision"], [452, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [453, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [454, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [455, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [456, "module-neural_compressor.ux.components.optimization.optimization"], [457, "module-neural_compressor.ux.components.optimization.pruning"], [458, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [459, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [460, "module-neural_compressor.ux.components.optimization.tune"], [461, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [462, "module-neural_compressor.ux.components.optimization.tune.tuning"], [463, "module-neural_compressor.ux.components.optimization.tuning_history"], [464, "module-neural_compressor.ux.components.profiling.execute_profiling"], [465, "module-neural_compressor.ux.components.profiling.factory"], [466, "module-neural_compressor.ux.components.profiling"], [467, "module-neural_compressor.ux.components.profiling.profile_model"], [468, "module-neural_compressor.ux.components.profiling.profiler"], [469, "module-neural_compressor.ux.components.profiling.profiling"], [470, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [471, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [472, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [474, "module-neural_compressor.ux.inc_bench"], [475, "module-neural_compressor.ux"], [476, "module-neural_compressor.ux.utils.consts"], [477, "module-neural_compressor.ux.utils.environment"], [478, "module-neural_compressor.ux.utils.exceptions"], [479, "module-neural_compressor.ux.utils.executor"], [480, "module-neural_compressor.ux.utils.expiring_dict"], [481, "module-neural_compressor.ux.utils.github_info"], [482, "module-neural_compressor.ux.utils.hw_info"], [483, "module-neural_compressor.ux.utils"], [484, "module-neural_compressor.ux.utils.json_serializer"], [485, "module-neural_compressor.ux.utils.logger"], [486, "module-neural_compressor.ux.utils.parser"], [487, "module-neural_compressor.ux.utils.proc"], [488, "module-neural_compressor.ux.utils.processes"], [489, "module-neural_compressor.ux.utils.singleton"], [490, "module-neural_compressor.ux.utils.status_updates"], [491, "module-neural_compressor.ux.utils.templates"], [492, "module-neural_compressor.ux.utils.templates.metric"], [493, "module-neural_compressor.ux.utils.templates.workdir"], [494, "module-neural_compressor.ux.utils.utils"], [495, "module-neural_compressor.ux.utils.workload.config"], [496, "module-neural_compressor.ux.utils.workload.dataloader"], [497, "module-neural_compressor.ux.utils.workload.evaluation"], [498, "module-neural_compressor.ux.utils.workload.graph_optimization"], [499, "module-neural_compressor.ux.utils.workload"], [500, "module-neural_compressor.ux.utils.workload.mixed_precision"], [501, "module-neural_compressor.ux.utils.workload.model"], [502, "module-neural_compressor.ux.utils.workload.pruning"], [503, "module-neural_compressor.ux.utils.workload.quantization"], [504, "module-neural_compressor.ux.utils.workload.tuning"], [505, "module-neural_compressor.ux.utils.yaml_utils"], [506, "module-neural_compressor.ux.web.communication"], [507, "module-neural_compressor.ux.web.configuration"], [508, "module-neural_compressor.ux.web.exceptions"], [509, "module-neural_compressor.ux.web"], [510, "module-neural_compressor.ux.web.router"], [511, "module-neural_compressor.ux.web.server"], [512, "module-neural_compressor.ux.web.service.benchmark"], [513, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [514, "module-neural_compressor.ux.web.service"], [515, "module-neural_compressor.ux.web.service.model"], [516, "module-neural_compressor.ux.web.service.optimization"], [517, "module-neural_compressor.ux.web.service.profiling"], [518, "module-neural_compressor.ux.web.service.request_data_processor"], [519, "module-neural_compressor.ux.web.service.response_generator"], [520, "module-neural_compressor.ux.web.service.workload"], [521, "module-neural_compressor.version"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[13, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[15, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[15, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[16, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[18, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[19, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[20, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[21, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[21, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[21, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[21, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[22, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[22, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[22, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[23, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[23, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[23, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[24, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[24, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[24, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[25, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[25, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[25, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[26, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[26, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[26, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[27, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[27, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[27, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[28, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[28, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[29, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[29, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[29, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[30, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[30, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[30, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[31, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[31, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[32, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[33, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[34, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[34, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[34, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[35, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[35, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[35, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[36, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[36, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[36, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[36, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[36, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[37, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[37, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[37, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[38, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[38, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[38, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[39, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[39, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[39, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[40, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[40, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[40, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[42, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[43, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[43, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[43, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[43, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[43, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[43, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[44, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[44, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[45, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[45, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[45, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[45, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[46, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[46, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[108, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[108, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[108, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[109, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[138, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[138, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[139, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[144, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[145, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[145, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[145, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[145, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[146, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[146, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[146, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[146, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[146, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[147, "module-neural_compressor.adaptor.torch_utils"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[148, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[148, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[148, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[149, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[149, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[149, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[150, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[151, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[151, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[151, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[151, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[151, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[152, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[152, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[153, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[154, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[154, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[155, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[155, "module-neural_compressor.algorithm.weight_correction"]], "fit() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.fit"]], "get_architecture() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[156, "module-neural_compressor.benchmark"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.set_env_var"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[157, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[157, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[157, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[157, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[157, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[157, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[157, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[157, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[157, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[158, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[159, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[160, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[161, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[162, "module-neural_compressor.compression.pruner"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[163, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[163, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[163, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[163, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[163, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[163, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[163, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[163, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[163, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[163, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[163, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[163, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[163, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[163, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[163, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[163, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[163, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[163, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[164, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[164, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[164, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[164, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[164, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[164, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[164, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[164, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[165, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[165, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[165, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[165, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[165, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[165, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[165, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[165, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[166, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[166, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[166, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[166, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[166, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[166, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[166, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[167, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[167, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[167, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[167, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[167, "module-neural_compressor.compression.pruner.utils"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[167, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[167, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[167, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[167, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[167, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[167, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[167, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[168, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[168, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[168, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[168, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[168, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[168, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[168, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[168, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[168, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[168, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[168, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[169, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[169, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[169, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[169, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[170, "module-neural_compressor.conf"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[171, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "neural_compressor.conf.pythonic_config": [[171, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[172, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[172, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[172, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[172, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[172, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[172, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[172, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[172, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[172, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[172, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[172, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[172, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[172, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[172, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[172, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[172, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[172, "module-neural_compressor.config"]], "neural_compressor.contrib": [[173, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[174, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[175, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[175, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[176, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[176, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[177, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[177, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[178, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[178, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[179, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[179, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[179, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[180, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[180, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[180, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[180, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[181, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[182, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[182, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[183, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[183, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[183, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[184, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[184, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[185, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[185, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[185, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[185, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[185, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[186, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[186, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[186, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[186, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[186, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[187, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[187, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[187, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[187, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[187, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[187, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[187, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[187, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[187, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[188, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[188, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[188, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[188, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[188, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[189, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[189, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[190, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[190, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[191, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[191, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[191, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[192, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[192, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[192, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[192, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[192, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[192, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[192, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[193, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[194, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[194, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[195, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[195, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[195, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[196, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[196, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[196, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[196, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[196, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[196, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[196, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[196, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[196, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[197, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[198, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[199, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[199, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[200, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[200, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[200, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[200, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[200, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[200, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[200, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[200, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[200, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[200, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[201, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[202, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[202, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[203, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[203, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[203, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[203, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[203, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[203, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[203, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[203, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.TRANSFORMS"], [204, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[204, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[204, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[205, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[205, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[205, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[205, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[205, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[205, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[205, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[205, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[205, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[205, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[206, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[206, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[207, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[207, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[208, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[209, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[209, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[210, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[210, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[210, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[211, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[211, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[211, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[211, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[211, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[211, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[211, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[211, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[211, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[212, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[212, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[213, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[213, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[213, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[214, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[214, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[215, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[216, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[216, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[216, "neural_compressor.experimental.compression.pruning.save"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[217, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[217, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[218, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[219, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[219, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[219, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[220, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[220, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[220, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[220, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[221, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[222, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[222, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[223, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[223, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[223, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[225, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[225, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[225, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[225, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[225, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[227, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[227, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[227, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[227, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[227, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[227, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[227, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[227, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[227, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[228, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[228, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[228, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[228, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[228, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[229, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[229, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[230, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[230, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[231, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[231, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[231, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[232, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[232, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[232, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[232, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[232, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[232, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[232, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[233, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[234, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[234, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[235, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[235, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[235, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[236, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[236, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[236, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[236, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[236, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[236, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[236, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[236, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[236, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[237, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[238, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[239, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[239, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[239, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[239, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[239, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[239, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[239, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[239, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[239, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[239, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[240, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[241, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[241, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[241, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[241, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[241, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[241, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[241, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[241, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [242, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[242, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[242, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[243, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[243, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[243, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[243, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[243, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[243, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[244, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[245, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[245, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[245, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[246, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[246, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[246, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[247, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[247, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[248, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[248, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils": [[248, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[249, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[249, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[250, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[251, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[251, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[251, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[251, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[251, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[251, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[251, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[251, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[251, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[252, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[252, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[253, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[254, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[254, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[254, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[254, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[254, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[254, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[254, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[254, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[255, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[255, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[255, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[255, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[255, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[256, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[256, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[256, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[256, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[256, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[257, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[258, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[258, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[258, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[258, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[258, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[258, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[258, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[258, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[258, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[258, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[258, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[258, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[258, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[258, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[258, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[258, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[258, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[258, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[258, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[258, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[258, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[258, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[258, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[258, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[258, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[258, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[259, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[259, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[260, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[260, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[261, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[261, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[262, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[262, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[263, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[264, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[264, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[264, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[265, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[265, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[265, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[265, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[266, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[266, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[266, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[266, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[266, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[267, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[267, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[268, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[268, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[269, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[270, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[270, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[271, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[271, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[272, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[272, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[272, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[273, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[273, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[273, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[273, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[273, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[274, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[275, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[276, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[276, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[276, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[276, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[276, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[277, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[277, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[277, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[277, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[277, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[277, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[277, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[278, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[278, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[278, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[278, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[278, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[279, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[280, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[281, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[281, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[281, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[281, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[281, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[281, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[282, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[282, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[282, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[282, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[282, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[282, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[282, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[283, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[284, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[284, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[285, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[285, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[285, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[285, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[285, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[285, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[285, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[286, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[286, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[287, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[287, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[288, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[289, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[289, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[289, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[289, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[289, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[289, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[289, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[289, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[289, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[290, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[290, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[291, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[292, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[292, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[292, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[292, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[292, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[292, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[292, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[292, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[293, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[293, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[293, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[293, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[293, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[294, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[294, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[294, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[294, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[294, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[295, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[296, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[296, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[296, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[296, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[296, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[296, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[296, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[296, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[296, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[296, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[296, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[296, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[296, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[296, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[296, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[296, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[296, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[296, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[296, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[296, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[296, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[296, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[296, "neural_compressor.metric.metric.MSE.pred_list"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[296, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[296, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[296, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[297, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[297, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[298, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[298, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[299, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[300, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[300, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[301, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[301, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[301, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[302, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[302, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[303, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[303, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[304, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[304, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[305, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[305, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[306, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[306, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[306, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[306, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[306, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[307, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[307, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[307, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[307, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[307, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[307, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[307, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[307, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[307, "neural_compressor.objective.objective_registry"]], "fit() (in module neural_compressor.quantization)": [[308, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[308, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[309, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[309, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[310, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[310, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[311, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[311, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[312, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[312, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[312, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[312, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[312, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[313, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[313, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[314, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[314, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[315, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[315, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[316, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[317, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[317, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[318, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[318, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[319, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[319, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[320, "neural_compressor.strategy.strategy.TuneStrategy"]], "neural_compressor.strategy.strategy": [[320, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[320, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[321, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[322, "module-neural_compressor.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[323, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[323, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[323, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[323, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[323, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[323, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[323, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[323, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[324, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[324, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "get_op_mode_by_query_order() (in module neural_compressor.strategy.utils.tuning_space)": [[324, "neural_compressor.strategy.utils.tuning_space.get_op_mode_by_query_order"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[324, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[324, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[324, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[324, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[324, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[325, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[325, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[326, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[326, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[326, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[326, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[326, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[327, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[327, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[327, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[327, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[327, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[327, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[327, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[327, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[327, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[327, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[327, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[328, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[329, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[329, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[329, "neural_compressor.training.fit"]], "neural_compressor.training": [[329, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[329, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[330, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[330, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[331, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[332, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[333, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[334, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[334, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[335, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[335, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[335, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[336, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[337, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[337, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[338, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[338, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[338, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.compute_sparsity"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_size() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[339, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.version1_lte_version2"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[340, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[340, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark": [[340, "module-neural_compressor.ux.components.benchmark.benchmark"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[341, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[341, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[341, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[341, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[342, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[342, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[342, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[342, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[342, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[342, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[342, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[343, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[343, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[344, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[344, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[345, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[345, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[346, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[346, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[347, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[348, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[348, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[349, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[349, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[350, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[350, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[351, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[351, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[352, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[353, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[353, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[354, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[354, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[354, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[355, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[356, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[357, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[358, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "neural_compressor.ux.components.db_manager.db_manager": [[358, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[359, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[360, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[360, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[361, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[361, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[361, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[362, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[362, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[363, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[363, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[363, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[364, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[364, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[364, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[365, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[365, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[366, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[366, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[366, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[367, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[368, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[368, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[368, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[369, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "neural_compressor.ux.components.db_manager.db_models.model": [[369, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[370, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[371, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[371, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[371, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[372, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[372, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[372, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[373, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[374, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[374, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[375, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "neural_compressor.ux.components.db_manager.db_models.project": [[375, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[376, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[376, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[377, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[377, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[377, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[378, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[378, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[379, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[379, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[380, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[381, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[382, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[386, "module-neural_compressor.ux.components.db_manager.db_operations"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[387, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[390, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[391, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[392, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[393, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[393, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[393, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[393, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[394, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[394, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[395, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory": [[395, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[396, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[397, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[398, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[398, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[399, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[399, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[399, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[399, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[399, "module-neural_compressor.ux.components.diagnosis.op_details"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[400, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[400, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[402, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[402, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[403, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[404, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[405, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[405, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[406, "neural_compressor.ux.components.graph.collapser.Collapser"]], "neural_compressor.ux.components.graph.collapser": [[406, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[407, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[407, "module-neural_compressor.ux.components.graph.edge"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[408, "neural_compressor.ux.components.graph.graph.Graph"]], "neural_compressor.ux.components.graph.graph": [[408, "module-neural_compressor.ux.components.graph.graph"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[409, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "neural_compressor.ux.components.graph.graph_reader": [[409, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[410, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[411, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[411, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[411, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[412, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[413, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[413, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[414, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[414, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[415, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[416, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[417, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[418, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[419, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[420, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[420, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[421, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[421, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[422, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[423, "neural_compressor.ux.components.model.model.Model"]], "neural_compressor.ux.components.model.model": [[423, "module-neural_compressor.ux.components.model.model"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[424, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[424, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[425, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[426, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "neural_compressor.ux.components.model.onnxrt.model": [[426, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[426, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[427, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[428, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model": [[428, "module-neural_compressor.ux.components.model.pytorch.model"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[429, "neural_compressor.ux.components.model.repository.ModelRepository"]], "neural_compressor.ux.components.model.repository": [[429, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[430, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[430, "module-neural_compressor.ux.components.model.shape"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[431, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[431, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[432, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[433, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[433, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[434, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[434, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[435, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[435, "module-neural_compressor.ux.components.model.tensorflow.model"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[436, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[436, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[437, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[437, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[438, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[438, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[439, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[439, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[440, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "neural_compressor.ux.components.model_zoo.downloader": [[440, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[441, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[442, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[442, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[442, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[442, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[442, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[442, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[442, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[443, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[444, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[444, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[444, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[445, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[445, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[445, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[445, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[445, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[445, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[445, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[446, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory": [[446, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[447, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[447, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[448, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[449, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[450, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[450, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[451, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[452, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[452, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[453, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[453, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[453, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[453, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[453, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[454, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[455, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[455, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[456, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[456, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[456, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization": [[456, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[457, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[458, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[458, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[458, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[459, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[459, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[460, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[461, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[461, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[461, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[461, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning": [[462, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[463, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[463, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "neural_compressor.ux.components.optimization.tuning_history": [[463, "module-neural_compressor.ux.components.optimization.tuning_history"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[463, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[463, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[464, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[464, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[464, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[465, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory": [[465, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[466, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[467, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[467, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[467, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[468, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[468, "module-neural_compressor.ux.components.profiling.profiler"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[469, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "neural_compressor.ux.components.profiling.profiling": [[469, "module-neural_compressor.ux.components.profiling.profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[470, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[470, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[471, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[472, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[473, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[474, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[474, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[474, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[475, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[476, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[477, "neural_compressor.ux.utils.environment.Environment"]], "neural_compressor.ux.utils.environment": [[477, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[478, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[478, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[478, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[478, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[478, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[479, "neural_compressor.ux.utils.executor.Executor"]], "neural_compressor.ux.utils.executor": [[479, "module-neural_compressor.ux.utils.executor"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[480, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[480, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict": [[480, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[481, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[481, "module-neural_compressor.ux.utils.github_info"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[482, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[483, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[484, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[484, "module-neural_compressor.ux.utils.json_serializer"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[485, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[485, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.ProfilingParser"]], "neural_compressor.ux.utils.parser": [[486, "module-neural_compressor.ux.utils.parser"]], "proc (class in neural_compressor.ux.utils.proc)": [[487, "neural_compressor.ux.utils.proc.Proc"]], "neural_compressor.ux.utils.proc": [[487, "module-neural_compressor.ux.utils.proc"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[488, "neural_compressor.ux.utils.processes.NCProcesses"]], "neural_compressor.ux.utils.processes": [[488, "module-neural_compressor.ux.utils.processes"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[489, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[489, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[490, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[490, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[491, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[492, "neural_compressor.ux.utils.templates.metric.Metric"]], "neural_compressor.ux.utils.templates.metric": [[492, "module-neural_compressor.ux.utils.templates.metric"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[493, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "neural_compressor.ux.utils.templates.workdir": [[493, "module-neural_compressor.ux.utils.templates.workdir"]], "are_archive_filenames_valid() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.are_archive_filenames_valid"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[494, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.replace_with_values"]], "safe_extract_archive() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.safe_extract_archive"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[495, "neural_compressor.ux.utils.workload.config.Config"]], "neural_compressor.ux.utils.workload.config": [[495, "module-neural_compressor.ux.utils.workload.config"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[496, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[496, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[496, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[496, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[496, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "neural_compressor.ux.utils.workload.dataloader": [[496, "module-neural_compressor.ux.utils.workload.dataloader"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation": [[497, "module-neural_compressor.ux.utils.workload.evaluation"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[498, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[498, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[499, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[500, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[500, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "model (class in neural_compressor.ux.utils.workload.model)": [[501, "neural_compressor.ux.utils.workload.model.Model"]], "neural_compressor.ux.utils.workload.model": [[501, "module-neural_compressor.ux.utils.workload.model"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[502, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[503, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[503, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[503, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[503, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[503, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[503, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[504, "module-neural_compressor.ux.utils.workload.tuning"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[505, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[505, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[505, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[506, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[506, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[506, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[506, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[506, "neural_compressor.ux.web.communication.create_simple_response"]], "neural_compressor.ux.web.communication": [[506, "module-neural_compressor.ux.web.communication"]], "configuration (class in neural_compressor.ux.web.configuration)": [[507, "neural_compressor.ux.web.configuration.Configuration"]], "neural_compressor.ux.web.configuration": [[507, "module-neural_compressor.ux.web.configuration"]], "servicenotfoundexception (class in neural_compressor.ux.web.exceptions)": [[508, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[508, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[509, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.get_system_info"]], "neural_compressor.ux.web.router": [[510, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[511, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[512, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[512, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[513, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[513, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[514, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[515, "neural_compressor.ux.web.service.model.ModelService"]], "neural_compressor.ux.web.service.model": [[515, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[516, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[516, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[517, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "neural_compressor.ux.web.service.profiling": [[517, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[518, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor": [[518, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[519, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator": [[519, "module-neural_compressor.ux.web.service.response_generator"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[520, "neural_compressor.ux.web.service.workload.WorkloadService"]], "neural_compressor.ux.web.service.workload": [[520, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[521, "module-neural_compressor.version"]]}})