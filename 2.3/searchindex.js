Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (75)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 161, 165, 166, 181, 191, 194, 199, 205, 321, 362, 404, 459, 499, 501, 506, 509, 512], "mask": [0, 181, 187, 189, 192, 194, 198, 199, 225, 268, 294, 323, 347, 501, 515], "adaptor_registri": [1, 427], "cl": [1, 158, 167, 174, 178, 179, 187, 192, 201, 202, 203, 227, 234, 242, 244, 249, 270, 277, 283, 305, 312, 316, 321, 323, 325, 336, 351, 362, 397, 417], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 368, 369, 370, 371, 373, 374, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 400, 401, 402, 403, 404, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 426, 461, 463, 476, 478, 480, 481, 483, 502], "The": [1, 3, 11, 14, 16, 34, 53, 74, 113, 119, 121, 140, 148, 157, 159, 165, 167, 172, 173, 174, 178, 179, 181, 185, 187, 189, 190, 192, 193, 194, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 214, 215, 225, 226, 227, 228, 229, 233, 234, 242, 244, 247, 249, 252, 256, 257, 258, 268, 269, 270, 271, 272, 276, 277, 283, 284, 289, 291, 292, 293, 295, 296, 298, 300, 301, 302, 304, 305, 307, 308, 310, 311, 312, 313, 316, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 340, 342, 344, 345, 346, 348, 349, 351, 352, 360, 362, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 401, 403, 404, 406, 407, 409, 411, 412, 416, 417, 418, 421, 423, 424, 427, 428, 429, 430, 432, 436, 439, 442, 444, 445, 446, 447, 449, 450, 452, 454, 456, 458, 459, 460, 462, 463, 464, 465, 468, 469, 471, 474, 476, 477, 478, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515], "decor": [1, 16, 34, 67, 68, 70, 148, 167, 178, 179, 187, 192, 201, 203, 242, 249, 283, 298, 305, 312, 316, 321, 323, 325, 336, 339, 351, 362, 397, 417, 423, 424, 427, 512], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 152, 157, 159, 165, 166, 172, 174, 178, 179, 181, 185, 187, 192, 196, 197, 201, 203, 204, 206, 207, 209, 210, 213, 214, 223, 224, 225, 226, 227, 228, 229, 232, 241, 242, 243, 244, 249, 256, 257, 266, 267, 268, 269, 270, 271, 272, 275, 282, 283, 287, 288, 289, 291, 292, 294, 298, 299, 300, 305, 312, 313, 316, 318, 321, 323, 324, 325, 326, 327, 330, 333, 336, 339, 340, 344, 345, 347, 351, 362, 379, 384, 385, 389, 392, 394, 397, 401, 403, 404, 406, 407, 408, 409, 410, 417, 421, 422, 423, 424, 427, 428, 444, 445, 447, 449, 450, 451, 452, 454, 456, 458, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 474, 476, 478, 480, 481, 483, 485, 486, 487, 488, 495, 496, 497, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515], "regist": [1, 16, 34, 155, 157, 167, 174, 178, 179, 181, 182, 187, 188, 192, 195, 201, 202, 203, 204, 227, 234, 242, 244, 249, 270, 277, 283, 298, 305, 312, 316, 321, 323, 325, 336, 339, 351, 362, 397, 403, 414, 424, 427, 447, 452, 462, 463, 484, 499, 509, 512], "all": [1, 13, 16, 34, 44, 45, 63, 97, 151, 157, 158, 165, 166, 167, 169, 172, 173, 179, 182, 187, 195, 205, 209, 210, 215, 216, 223, 227, 234, 242, 243, 249, 252, 258, 266, 270, 277, 283, 288, 291, 294, 296, 298, 305, 312, 316, 317, 321, 327, 336, 339, 344, 347, 349, 351, 353, 362, 397, 403, 409, 417, 421, 426, 427, 428, 429, 446, 447, 452, 456, 460, 463, 466, 474, 477, 478, 481, 482, 483, 484, 485, 487, 488, 490, 491, 495, 496, 497, 500, 501, 502, 504, 505, 506, 509, 511, 512], "subclass": [1, 16, 34, 167, 178, 179, 187, 192, 201, 203, 220, 224, 227, 234, 242, 249, 263, 267, 270, 277, 283, 298, 305, 312, 316, 321, 323, 325, 336, 339, 351, 362, 397, 427], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 150, 151, 152, 157, 158, 162, 163, 165, 166, 167, 172, 173, 174, 176, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 214, 224, 225, 227, 234, 238, 242, 244, 249, 256, 257, 267, 268, 270, 277, 280, 283, 284, 286, 287, 288, 289, 291, 292, 294, 295, 296, 298, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 316, 318, 321, 322, 323, 324, 325, 326, 330, 336, 340, 342, 344, 345, 347, 348, 349, 351, 352, 356, 360, 362, 379, 384, 385, 389, 397, 401, 403, 404, 406, 409, 413, 414, 416, 417, 423, 428, 446, 447, 450, 452, 459, 462, 463, 477, 483, 484, 485, 486, 490, 495, 496, 501, 504, 506, 507, 508, 509, 511, 512, 514], "framework_specific_info": [1, 3, 11, 14, 45, 47, 427], "base": [1, 13, 16, 34, 46, 47, 86, 105, 116, 120, 122, 132, 144, 152, 155, 161, 165, 167, 173, 178, 179, 180, 181, 182, 188, 195, 202, 204, 210, 215, 218, 223, 225, 227, 234, 242, 252, 258, 261, 266, 268, 270, 277, 283, 298, 304, 306, 312, 313, 316, 318, 323, 333, 336, 340, 351, 353, 360, 361, 362, 394, 397, 401, 424, 426, 427, 428, 429, 447, 451, 452, 456, 463, 464, 471, 472, 474, 483, 486, 490, 493, 496, 497, 501, 502, 504, 506, 508, 510, 512, 515], "framework": [1, 3, 11, 13, 14, 45, 172, 174, 182, 188, 192, 195, 199, 200, 201, 211, 212, 216, 217, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 236, 239, 242, 244, 245, 249, 254, 255, 259, 260, 262, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 279, 281, 283, 289, 298, 299, 326, 334, 340, 351, 352, 353, 354, 356, 395, 401, 409, 426, 427, 429, 445, 449, 452, 453, 457, 458, 459, 460, 462, 463, 464, 485, 486, 501, 502, 504, 507, 510, 511, 512, 513, 514, 515], "layer": [1, 3, 11, 14, 46, 47, 116, 117, 118, 119, 121, 122, 151, 154, 156, 158, 162, 166, 170, 174, 183, 185, 186, 187, 191, 196, 205, 209, 210, 244, 251, 321, 322, 407, 409, 417, 427, 428, 429, 451, 459, 486, 501, 506, 507], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 150, 152, 153, 154, 163, 180, 182, 209, 210, 251, 290, 292, 322, 332, 343, 345, 377, 382, 393, 428, 429, 430, 445, 452, 463, 466, 486, 501, 504, 509, 512, 513], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 185, 186, 191, 209, 210, 238, 280, 321, 379, 384, 423, 444, 446, 449, 454, 483, 488, 501, 504, 506, 509, 511, 512], "activ": [2, 17, 29, 44, 141, 149, 165, 166, 209, 210, 251, 340, 401, 403, 427, 428, 429, 445, 449, 451, 456, 463, 484, 485, 487, 495, 496, 497, 503, 504, 506, 509, 510, 514], "argmax": [2, 17, 29], "attent": [2, 17, 29, 161, 183, 185, 196, 209, 210, 225, 268, 421, 450, 501], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 170, 209, 210, 423, 428, 429, 463, 501, 503, 504, 512], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 209, 210, 321], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 209, 210], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 52, 59, 65, 73, 94, 109, 128, 137, 191, 209, 210, 321, 456, 486, 512], "maxpool": [2, 17, 29, 129, 138, 456], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 44, 45, 52, 57, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 150, 152, 163, 165, 170, 185, 209, 210, 288, 333, 340, 341, 379, 384, 390, 392, 394, 401, 402, 403, 411, 417, 427, 428, 429, 449, 456, 463, 464, 487, 501, 504, 505, 507, 509, 510, 512, 514], "pad": [2, 17, 29, 44, 71, 72, 225, 242, 268, 283, 447, 506, 511], "pool": [2, 17, 29, 492], "reduc": [2, 17, 29, 209, 210, 427, 445, 451, 463, 464, 483, 484, 501, 502, 504, 505, 506, 509, 512, 514], "resiz": [2, 17, 29, 225, 226, 238, 242, 268, 269, 280, 283, 447, 511], "split": [2, 17, 29, 43, 44, 82, 166, 241, 242, 282, 283, 423, 506, 509, 511], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 165, 166, 172, 209, 210, 213, 214, 256, 257, 289, 326, 385, 411, 427, 429, 447, 458, 459, 501, 504, 506, 512, 513, 514], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 150, 151, 152, 153, 154, 158, 159, 160, 162, 164, 165, 166, 170, 172, 173, 209, 210, 213, 214, 238, 245, 252, 256, 257, 280, 288, 289, 290, 300, 327, 333, 339, 343, 390, 392, 394, 403, 406, 407, 411, 416, 417, 427, 434, 446, 447, 452, 453, 456, 458, 459, 462, 465, 466, 471, 473, 474, 477, 489, 491, 492, 494, 500, 502, 507, 510, 511, 512, 513, 514], "smooth_quant": [2, 17, 156, 169, 209, 210, 343, 504, 509], "weight_onli": [2, 17, 210, 416, 506], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 57, 87, 111, 150, 209, 210, 340, 401, 427, 428, 456, 463, 468, 473, 477, 483, 505, 512, 515], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 151, 162, 165, 172, 185, 205, 213, 214, 215, 224, 227, 228, 229, 230, 242, 256, 257, 258, 267, 270, 271, 272, 273, 283, 291, 299, 330, 344, 352, 380, 385, 389, 404, 406, 423, 427, 429, 446, 450, 462, 463, 464, 466, 471, 476, 478, 480, 481, 483, 485, 486, 499, 501, 502, 504, 505, 506, 509, 510, 511, 512], "int8": [2, 18, 19, 43, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 166, 171, 172, 209, 210, 238, 280, 286, 287, 288, 340, 342, 401, 403, 416, 417, 423, 426, 427, 428, 429, 444, 447, 451, 456, 463, 464, 468, 471, 473, 474, 477, 483, 486, 487, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 170, 209, 210, 221, 264, 286, 287, 288, 352, 359, 379, 415, 426, 427, 428, 430, 446, 449, 453, 454, 456, 457, 459, 464, 465, 468, 473, 474, 486, 502, 503, 506, 507, 509, 512], "qdq": [2, 42, 87, 111, 112, 113, 142, 165, 166, 209, 210, 286, 287, 288, 427, 449, 454, 459, 473, 474, 504, 507, 509], "graph_bas": [2, 87, 111], "quantize_graph": [2, 111], "qat": [2, 111, 112, 163, 210, 300, 360, 451, 452, 459, 463, 504], "quantize_graph_bas": [2, 111, 112], "quantize_graph_bn": [2, 111, 112], "quantize_graph_concatv2": [2, 111, 112], "quantize_graph_conv": [2, 111, 112], "quantize_graph_for_intel_cpu": [2, 111, 112], "quantize_graph_matmul": [2, 111, 112], "quantize_graph_pool": [2, 111, 112], "transform_graph": [2, 111], "bias_correct": [2, 111, 145], "graph_transform_bas": [2, 111, 145], "insert_log": [2, 111, 145], "rerange_quantized_concat": [2, 111, 145], "graph_convert": [2, 111], "graph_converter_without_calib": [2, 111], "graph_util": [2, 111], "quantize_graph_common": [2, 111], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 246, 290, 343, 509], "layer_wise_qu": [2, 153, 210], "modified_pickl": [2, 153, 154], "torch_load": [2, 153, 154], "bf16_convert": [2, 51, 87, 111, 153], "hawq_metr": [2, 153], "model_wrapp": [2, 15, 153], "pattern_detector": [2, 153], "symbolic_trac": [2, 153], "tensorflow": [2, 51, 53, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 204, 209, 210, 224, 225, 226, 227, 230, 232, 234, 242, 244, 249, 267, 268, 269, 270, 273, 275, 277, 283, 287, 288, 289, 292, 294, 298, 299, 300, 326, 334, 345, 347, 351, 352, 360, 378, 379, 383, 384, 385, 395, 417, 424, 426, 427, 428, 445, 446, 449, 450, 451, 453, 456, 457, 459, 460, 463, 464, 465, 473, 474, 485, 487, 501, 502, 503, 508, 509, 512, 514], "kerasadaptor": 3, "mxnetadaptor": 11, "do": [11, 14, 151, 173, 201, 209, 210, 224, 225, 267, 268, 284, 288, 291, 294, 324, 344, 347, 416, 421, 428, 447, 452, 456, 459, 462, 463, 478, 481, 501, 505, 507, 509, 512], "inspect": [11, 14, 507, 510], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 148, 152, 157, 158, 165, 166, 181, 182, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 210, 242, 283, 286, 288, 321, 323, 333, 360, 394, 417, 423, 429, 446, 447, 449, 501, 504, 507, 510, 511, 512], "dict": [11, 13, 14, 44, 45, 116, 148, 150, 151, 152, 157, 162, 165, 166, 167, 172, 178, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 214, 224, 243, 249, 256, 257, 267, 286, 288, 293, 294, 295, 296, 298, 301, 304, 305, 306, 313, 316, 318, 321, 322, 323, 324, 325, 330, 333, 339, 342, 346, 347, 348, 349, 351, 352, 360, 385, 400, 403, 404, 406, 407, 409, 416, 417, 423, 428, 454, 462, 501, 503, 504, 509, 510, 512], "specif": [11, 14, 42, 46, 104, 116, 166, 172, 205, 209, 210, 225, 226, 227, 228, 232, 234, 249, 268, 269, 270, 271, 275, 277, 307, 308, 310, 311, 312, 351, 385, 414, 421, 424, 427, 428, 445, 446, 449, 450, 456, 458, 462, 463, 464, 465, 466, 470, 471, 473, 477, 483, 485, 490, 499, 501, 503, 512, 514], "configur": [11, 13, 14, 45, 118, 150, 165, 172, 205, 206, 209, 210, 213, 214, 216, 227, 230, 243, 248, 256, 257, 270, 273, 284, 288, 289, 300, 301, 302, 304, 313, 318, 322, 326, 327, 333, 351, 352, 362, 385, 394, 403, 406, 408, 409, 415, 416, 423, 424, 427, 428, 447, 449, 463, 470, 484, 490, 495, 496, 497, 499, 501, 504, 507, 511, 512, 515], "mxnet": [12, 13, 16, 210, 220, 224, 227, 230, 234, 242, 263, 267, 270, 273, 277, 283, 289, 298, 326, 351, 352, 357, 385, 426, 427, 428, 445, 446, 453, 456, 459, 460, 463, 464, 465, 503, 512, 514], "init": [12, 17, 42, 169, 175, 182, 184, 447, 462, 512], "optyp": [13, 209, 210, 286, 428], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 150, 151, 152, 157, 165, 166, 167, 174, 178, 179, 185, 186, 187, 192, 201, 202, 203, 205, 207, 209, 210, 223, 225, 227, 234, 242, 244, 249, 266, 268, 270, 277, 283, 288, 291, 292, 294, 298, 305, 312, 316, 321, 323, 325, 330, 336, 340, 342, 344, 345, 347, 351, 360, 362, 389, 390, 397, 401, 403, 404, 416, 417, 422, 427, 428, 447, 449, 452, 454, 456, 459, 463, 464, 484, 486, 490, 491, 495, 496, 504, 506, 508, 511, 512, 513, 514], "isiter": 13, "obj": [13, 105, 182, 205, 224, 267, 284, 289, 300, 301, 302, 304, 313, 318, 322, 326, 352, 362, 385, 406, 409, 417], "bool": [13, 42, 43, 44, 141, 148, 151, 157, 163, 165, 166, 187, 209, 210, 225, 227, 238, 242, 268, 270, 280, 283, 288, 292, 298, 321, 339, 345, 351, 400, 404, 416, 417, 446, 447, 462, 493, 503, 511], "check": [13, 44, 67, 68, 105, 148, 165, 166, 205, 216, 227, 270, 286, 322, 416, 417, 422, 426, 449, 452, 460, 467, 469, 471, 478, 481, 482, 486, 488, 491, 492, 507], "whether": [13, 43, 44, 105, 116, 148, 151, 157, 165, 166, 187, 209, 210, 223, 225, 238, 242, 266, 268, 280, 283, 292, 294, 298, 321, 345, 347, 351, 409, 416, 417, 427, 447, 462, 504, 506, 509, 511], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 150, 152, 155, 157, 163, 165, 172, 173, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 214, 215, 225, 226, 227, 242, 243, 245, 256, 257, 258, 268, 269, 270, 283, 284, 289, 294, 302, 304, 307, 308, 310, 311, 312, 313, 318, 321, 322, 323, 324, 325, 326, 330, 343, 347, 351, 352, 360, 361, 379, 384, 385, 389, 403, 406, 409, 416, 417, 423, 424, 428, 434, 444, 446, 447, 455, 462, 463, 465, 500, 501, 503, 504, 511, 512, 513, 515], "i": [13, 43, 44, 45, 48, 49, 53, 54, 57, 60, 64, 70, 82, 85, 105, 132, 143, 148, 151, 152, 155, 157, 159, 163, 165, 166, 171, 172, 173, 181, 185, 186, 192, 197, 198, 199, 200, 201, 202, 204, 205, 209, 210, 213, 214, 215, 223, 224, 225, 226, 227, 228, 229, 232, 234, 238, 242, 243, 245, 249, 251, 252, 256, 257, 258, 266, 267, 268, 269, 270, 271, 272, 275, 277, 280, 283, 291, 294, 296, 298, 300, 305, 313, 318, 322, 323, 327, 334, 344, 347, 349, 351, 352, 362, 368, 369, 373, 385, 390, 395, 403, 404, 406, 416, 417, 421, 422, 423, 424, 427, 428, 429, 430, 432, 436, 439, 442, 444, 445, 446, 447, 449, 450, 451, 452, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 476, 477, 478, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515], "iter": [13, 15, 105, 140, 148, 165, 166, 172, 186, 192, 199, 203, 209, 210, 213, 214, 218, 223, 227, 228, 245, 256, 257, 261, 266, 270, 271, 323, 325, 352, 385, 406, 409, 423, 424, 427, 444, 446, 447, 463, 501, 503, 504, 510, 512, 514], "return": [13, 16, 44, 45, 53, 67, 68, 70, 74, 105, 116, 148, 150, 151, 152, 157, 163, 165, 166, 167, 172, 174, 178, 179, 182, 185, 187, 188, 192, 195, 201, 202, 203, 205, 207, 213, 214, 227, 234, 238, 242, 243, 244, 249, 256, 257, 270, 277, 280, 283, 288, 291, 292, 294, 295, 296, 298, 304, 305, 312, 316, 321, 322, 323, 325, 330, 336, 340, 342, 344, 345, 347, 348, 349, 351, 352, 356, 360, 362, 379, 384, 385, 389, 397, 401, 403, 404, 406, 409, 414, 416, 417, 423, 424, 428, 429, 446, 447, 452, 462, 465, 495, 496, 497, 499, 501, 504, 506, 509, 510, 512], "true": [13, 43, 44, 85, 113, 146, 148, 151, 157, 166, 172, 178, 209, 210, 223, 225, 227, 228, 241, 242, 243, 266, 268, 270, 271, 282, 283, 288, 292, 298, 316, 339, 345, 351, 362, 385, 400, 404, 409, 416, 417, 428, 446, 447, 449, 452, 456, 462, 463, 466, 469, 470, 485, 486, 487, 493, 495, 503, 504, 506, 509, 510, 511, 512, 514], "els": [13, 148, 166, 210, 223, 266, 362, 414, 471, 506, 510], "fals": [13, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 149, 156, 157, 163, 165, 166, 172, 174, 209, 210, 215, 217, 222, 224, 225, 227, 238, 242, 243, 244, 245, 251, 258, 260, 265, 267, 268, 270, 280, 283, 294, 298, 347, 351, 362, 385, 404, 409, 417, 427, 428, 446, 447, 456, 462, 463, 476, 480, 486, 493, 496, 497, 503, 504, 506, 509, 510, 511, 512, 514], "boolean": 13, "ensure_list": 13, "x": [13, 54, 74, 151, 186, 209, 210, 224, 242, 267, 283, 330, 389, 404, 445, 449, 452, 464, 465, 490, 491, 495, 496, 498, 504, 509, 510, 511, 513], "ensur": [13, 242, 283, 330, 389, 452, 504, 511], "list": [13, 42, 43, 53, 105, 140, 148, 150, 151, 152, 161, 165, 172, 179, 185, 186, 191, 196, 201, 205, 209, 210, 213, 214, 218, 225, 238, 242, 243, 256, 257, 261, 268, 280, 283, 287, 288, 291, 292, 294, 295, 296, 298, 305, 313, 318, 321, 324, 339, 344, 345, 347, 348, 349, 351, 352, 360, 368, 369, 373, 385, 400, 404, 406, 407, 417, 423, 426, 427, 447, 454, 456, 460, 463, 466, 471, 473, 476, 477, 480, 487, 490, 492, 493, 499, 501, 503, 504, 505, 509, 510, 512], "input": [13, 15, 42, 43, 44, 45, 53, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 150, 160, 162, 163, 164, 165, 166, 170, 185, 186, 205, 209, 210, 213, 214, 225, 226, 227, 229, 238, 241, 242, 247, 256, 257, 268, 269, 270, 272, 280, 282, 283, 286, 287, 288, 351, 352, 356, 360, 385, 406, 414, 416, 417, 424, 427, 428, 444, 445, 446, 447, 449, 450, 451, 452, 454, 456, 458, 462, 463, 464, 465, 466, 471, 501, 503, 504, 506, 509, 510, 511, 514], "check_mx_vers": 13, "version": [13, 53, 104, 160, 165, 185, 210, 287, 288, 343, 421, 423, 427, 456, 460, 461, 463, 476, 478, 480, 481, 502, 507, 509, 512, 513], "str": [13, 42, 44, 140, 150, 152, 157, 158, 161, 162, 163, 165, 166, 167, 174, 182, 185, 201, 209, 210, 225, 226, 227, 234, 238, 242, 244, 248, 249, 268, 269, 270, 277, 280, 283, 287, 288, 291, 292, 294, 296, 298, 305, 316, 339, 342, 344, 345, 347, 349, 351, 370, 378, 380, 383, 384, 400, 403, 404, 409, 414, 417, 418, 446, 447, 462, 493, 503, 510, 511], "mx": 13, "__version__": [13, 155], "combine_cap": 13, "current": [13, 70, 104, 162, 166, 181, 182, 185, 188, 192, 195, 209, 210, 300, 307, 308, 310, 311, 312, 321, 323, 330, 334, 389, 395, 417, 423, 424, 427, 429, 445, 452, 456, 463, 466, 470, 483, 490, 499, 501, 504, 509, 512], "new": [13, 16, 148, 162, 172, 215, 227, 242, 243, 258, 270, 283, 322, 362, 422, 426, 428, 452, 463, 464, 477, 483, 484, 485, 486, 491, 492, 495, 496, 501, 502, 504, 506, 507, 508, 511, 513, 514], "combin": [13, 165, 209, 210, 213, 214, 238, 252, 256, 257, 280, 352, 385, 406, 417, 423, 427, 459, 463, 500, 502, 504, 505, 506, 511, 512], "capabl": [13, 47, 340, 401, 428, 429, 444, 456, 463, 464, 474, 485, 489, 501, 503, 504, 512, 514], "contain": [13, 67, 68, 70, 74, 139, 148, 152, 157, 162, 165, 166, 172, 173, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 209, 210, 213, 214, 225, 226, 227, 256, 257, 268, 269, 270, 284, 288, 289, 294, 295, 296, 300, 313, 316, 318, 321, 322, 323, 324, 325, 326, 347, 348, 349, 352, 385, 406, 409, 416, 445, 447, 450, 459, 462, 484, 490, 495, 496, 497, 501, 506, 510, 512, 513], "make_nc_model": 13, "target": [13, 42, 43, 102, 151, 185, 203, 205, 210, 322, 325, 330, 389, 447, 452, 463, 501, 510, 511, 512, 514], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 52, 53, 54, 55, 56, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 142, 150, 165, 185, 209, 210, 225, 238, 241, 242, 268, 280, 282, 283, 287, 294, 300, 322, 340, 347, 401, 404, 423, 428, 463, 464, 468, 504, 505, 506, 509, 511, 512], "symbol": [13, 150, 163, 165, 291, 344, 352, 385, 423, 465], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 149, 150, 151, 152, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 170, 172, 173, 178, 182, 183, 185, 192, 193, 194, 197, 199, 200, 201, 203, 205, 209, 210, 213, 214, 221, 224, 225, 227, 242, 243, 246, 247, 256, 257, 264, 267, 268, 270, 283, 284, 286, 287, 288, 289, 290, 298, 299, 300, 301, 304, 307, 308, 310, 311, 312, 313, 318, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 343, 351, 352, 362, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 403, 404, 406, 412, 414, 416, 417, 419, 423, 424, 426, 427, 429, 434, 444, 445, 446, 447, 449, 450, 451, 452, 453, 458, 459, 461, 462, 464, 466, 471, 473, 474, 477, 483, 485, 489, 491, 492, 493, 494, 499, 500, 502, 504, 507, 508, 510, 511, 512, 513, 514], "an": [13, 67, 68, 70, 105, 141, 143, 152, 155, 157, 165, 171, 192, 209, 210, 218, 223, 227, 242, 246, 251, 261, 266, 270, 283, 290, 291, 295, 296, 304, 305, 327, 343, 344, 348, 349, 352, 379, 384, 385, 404, 406, 417, 419, 421, 423, 424, 426, 427, 429, 445, 446, 447, 448, 449, 454, 462, 463, 464, 466, 470, 471, 474, 483, 486, 487, 490, 493, 499, 501, 502, 504, 507, 508, 509, 510, 511, 512], "neural": [13, 152, 172, 173, 187, 188, 189, 190, 201, 209, 210, 237, 238, 239, 242, 243, 246, 249, 252, 280, 281, 283, 285, 290, 297, 298, 300, 313, 318, 321, 324, 326, 327, 332, 338, 343, 350, 351, 352, 356, 363, 385, 392, 393, 399, 414, 419, 422, 427, 428, 429, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 464, 465, 467, 468, 471, 473, 474, 476, 478, 480, 481, 482, 493, 499, 500, 502, 504, 506, 507, 509, 510, 511, 512, 514, 515], "compressor": [13, 172, 173, 189, 190, 201, 209, 210, 237, 238, 239, 242, 243, 246, 249, 252, 280, 281, 283, 285, 290, 297, 298, 300, 321, 324, 326, 327, 332, 338, 343, 350, 351, 352, 356, 363, 385, 393, 399, 414, 419, 422, 424, 427, 428, 429, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 464, 465, 466, 467, 471, 473, 474, 476, 478, 480, 481, 482, 485, 486, 487, 489, 490, 499, 500, 501, 502, 504, 506, 507, 509, 510, 511, 512, 513, 514, 515], "tupl": [13, 105, 148, 165, 179, 210, 213, 214, 238, 242, 256, 257, 280, 283, 288, 339, 352, 385, 400, 406, 428, 447, 462, 463, 504, 511], "symnet": 13, "arg": [13, 53, 105, 165, 225, 226, 227, 268, 269, 270, 321, 330, 389, 404, 412, 413, 447, 452, 463, 472, 501, 504, 506, 509, 510, 511], "aux": 13, "data": [13, 42, 43, 44, 55, 105, 140, 148, 152, 157, 162, 165, 166, 170, 185, 209, 210, 213, 214, 243, 245, 256, 257, 288, 290, 330, 340, 342, 343, 352, 378, 383, 385, 389, 401, 403, 406, 409, 414, 417, 426, 427, 445, 446, 447, 452, 456, 457, 460, 462, 463, 464, 485, 486, 487, 490, 495, 496, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "descript": [13, 132, 404, 422, 423, 428, 429, 446, 490, 494, 509], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 163, 165, 170, 423, 509, 510], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 45, 67, 68, 70, 104, 105, 148, 151, 158, 162, 165, 172, 179, 181, 182, 183, 185, 188, 195, 202, 203, 204, 205, 207, 210, 218, 242, 243, 249, 251, 261, 283, 288, 321, 323, 325, 333, 340, 342, 351, 360, 385, 394, 401, 403, 409, 414, 417, 428, 445, 455, 459, 460, 463, 469, 486, 487, 495, 496, 502, 506, 509, 512, 513, 516], "name": [13, 43, 45, 53, 67, 68, 70, 104, 105, 110, 116, 140, 148, 150, 151, 152, 157, 158, 162, 163, 165, 167, 172, 178, 179, 181, 185, 187, 192, 195, 196, 201, 202, 203, 204, 205, 207, 209, 210, 225, 226, 227, 230, 234, 240, 242, 243, 247, 250, 251, 268, 269, 270, 273, 277, 283, 286, 287, 288, 293, 298, 316, 321, 323, 325, 340, 342, 346, 351, 356, 360, 362, 385, 401, 403, 407, 409, 414, 417, 423, 429, 447, 449, 452, 454, 456, 461, 462, 463, 465, 469, 476, 480, 484, 485, 490, 501, 504, 507, 508, 510, 512, 514, 515], "context": [13, 417, 503, 506], "prepare_model_data": 13, "nc_model": [13, 313, 318], "data_x": 13, "prepar": [13, 44, 165, 423, 426, 447, 452, 457, 485, 495, 496, 497, 501, 504], "dataload": [13, 15, 42, 44, 140, 141, 149, 151, 152, 162, 165, 166, 172, 182, 183, 185, 201, 205, 213, 214, 225, 236, 246, 256, 257, 268, 279, 284, 290, 313, 318, 327, 343, 378, 383, 385, 406, 409, 423, 426, 427, 428, 449, 450, 451, 452, 457, 458, 463, 464, 485, 486, 500, 501, 504, 505, 509, 510, 511, 513, 514], "need": [13, 42, 105, 109, 162, 166, 172, 185, 201, 210, 213, 214, 215, 223, 224, 227, 234, 242, 245, 247, 248, 256, 257, 258, 266, 267, 270, 277, 283, 288, 327, 333, 351, 352, 362, 385, 394, 406, 416, 417, 423, 427, 446, 447, 449, 450, 452, 459, 463, 466, 468, 469, 472, 476, 477, 478, 480, 481, 483, 484, 485, 486, 487, 489, 493, 495, 501, 503, 504, 505, 506, 507, 509, 511, 512, 514], "run": [13, 140, 148, 157, 166, 172, 192, 205, 209, 210, 213, 214, 224, 241, 243, 256, 257, 267, 282, 322, 323, 330, 352, 385, 389, 406, 422, 427, 444, 452, 455, 456, 463, 466, 468, 470, 471, 472, 474, 476, 477, 478, 480, 481, 483, 490, 491, 492, 493, 495, 496, 497, 502, 504, 506, 507, 508, 510, 512, 514], "loader": [13, 140, 213, 214, 256, 257, 352, 385, 406, 412, 446, 504], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 155, 209, 210, 215, 225, 227, 245, 258, 268, 270, 294, 304, 305, 340, 347, 379, 384, 401, 403, 404, 409, 421, 424, 427, 447, 465, 476, 478, 480, 481, 484, 495, 496, 497, 501, 504, 508, 510, 512, 513], "exampl": [13, 44, 152, 157, 165, 166, 172, 179, 185, 186, 201, 209, 210, 225, 226, 227, 238, 242, 268, 269, 270, 280, 283, 294, 295, 296, 298, 324, 347, 348, 349, 351, 352, 362, 385, 403, 404, 406, 421, 422, 426, 428, 429, 434, 458, 459, 466, 469, 470, 471, 474, 490, 493, 505, 507, 511, 512, 513, 516], "prepare_dataload": 13, "io": [13, 157, 488], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 242, 283, 407, 455, 511], "devic": [13, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 151, 156, 157, 166, 182, 185, 186, 201, 205, 209, 210, 428, 446, 450, 463, 464, 466, 469, 474, 483, 501, 503, 506], "is_model_quant": 13, "query_quantizable_nod": 13, "queri": [13, 47, 148, 165, 185, 196, 209, 210, 428, 429, 492, 504], "node": [13, 42, 43, 44, 50, 53, 54, 55, 56, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 185, 286, 288, 360, 384, 427, 449, 452, 486, 489, 492, 495, 496, 497, 510, 512, 515], "given": [13, 16, 67, 68, 70, 104, 105, 116, 148, 158, 165, 242, 283, 294, 347, 385, 424, 429, 501, 509, 511], "map": [13, 43, 105, 148, 157, 210, 242, 283, 286, 288, 289, 293, 295, 296, 298, 313, 318, 323, 326, 346, 348, 349, 351, 447, 452, 462, 463, 476, 480, 487, 501, 504, 506], "quantize_sym_model": 13, "qconfig": [13, 165, 416, 506, 510], "accord": [13, 122, 165, 172, 209, 210, 225, 226, 227, 242, 268, 269, 270, 283, 333, 392, 394, 409, 424, 427, 447, 452, 486, 490, 495, 496, 497, 501, 505, 509, 511, 512], "run_forward": 13, "b_filter": 13, "collector": [13, 152, 407], "none": [13, 41, 43, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 149, 151, 152, 156, 157, 158, 159, 160, 162, 164, 165, 166, 172, 173, 174, 179, 181, 182, 183, 185, 189, 201, 205, 206, 207, 209, 210, 213, 214, 215, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 238, 242, 243, 244, 245, 252, 256, 257, 258, 260, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 280, 283, 284, 287, 288, 289, 294, 298, 299, 300, 301, 304, 313, 318, 322, 326, 328, 329, 330, 331, 333, 334, 335, 336, 340, 347, 351, 352, 362, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 401, 404, 406, 407, 409, 414, 416, 417, 427, 428, 446, 447, 462, 486, 504, 506, 510, 511, 512], "pre_batch": 13, "post_batch": 13, "forward": [13, 205, 428, 463, 485, 501, 503, 504, 506, 509, 510], "propag": [13, 100], "filter": [13, 225, 226, 227, 228, 229, 230, 232, 236, 268, 269, 270, 271, 272, 273, 275, 279, 290, 343, 417, 429, 447, 459, 501, 510], "which": [13, 42, 55, 83, 110, 151, 152, 157, 162, 166, 181, 185, 186, 188, 192, 193, 194, 196, 199, 200, 201, 203, 205, 209, 210, 225, 226, 227, 238, 243, 268, 269, 270, 280, 291, 296, 305, 307, 308, 310, 311, 312, 316, 321, 322, 323, 325, 330, 344, 349, 351, 356, 362, 385, 389, 417, 421, 423, 424, 427, 428, 429, 445, 446, 447, 449, 450, 452, 455, 456, 459, 462, 463, 464, 465, 467, 471, 474, 477, 483, 484, 485, 487, 490, 495, 496, 497, 500, 501, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514], "batch": [13, 165, 215, 217, 218, 223, 224, 245, 258, 260, 261, 266, 267, 406, 446, 450, 451, 463, 500, 501, 511, 512, 515], "infer": [13, 105, 165, 166, 185, 289, 326, 360, 362, 385, 406, 427, 428, 445, 450, 451, 463, 464, 483, 499, 501, 502, 504, 506, 509, 510, 512], "collect": [13, 16, 43, 165, 240, 242, 245, 247, 248, 250, 283, 296, 298, 349, 351, 407, 417, 428, 504, 510, 512], "inform": [13, 152, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 210, 213, 214, 245, 247, 248, 256, 257, 321, 323, 324, 325, 327, 351, 417, 421, 422, 425, 426, 427, 428, 429, 430, 432, 436, 439, 442, 445, 450, 456, 463, 465, 478, 481, 484, 485, 487, 488, 490, 491, 495, 496, 501, 505, 506, 507, 510, 514, 515, 516], "dure": [13, 140, 155, 157, 187, 191, 203, 209, 210, 321, 325, 362, 417, 428, 449, 463, 465, 489, 499, 500, 501, 504, 509, 510, 514], "call": [13, 42, 157, 162, 167, 185, 193, 194, 199, 294, 323, 347, 423, 424, 427, 446, 458, 472, 474, 484, 501, 504, 509, 510, 511], "prior": [13, 88, 512], "after": [13, 78, 165, 183, 187, 192, 194, 199, 209, 210, 225, 238, 242, 245, 268, 280, 283, 323, 390, 404, 417, 424, 428, 447, 449, 450, 451, 454, 459, 462, 463, 476, 477, 480, 484, 487, 499, 500, 501, 504, 505, 506, 508, 509, 510, 511, 512], "count": [13, 424, 447, 506], "int": [13, 16, 42, 43, 44, 105, 140, 148, 149, 161, 165, 166, 183, 209, 210, 224, 225, 226, 238, 242, 267, 268, 269, 280, 283, 287, 288, 292, 294, 298, 305, 345, 347, 351, 370, 379, 384, 403, 404, 417, 446, 447, 462, 463, 493, 503, 506, 511], "make_symbol_block": 13, "gluon": [13, 352, 385, 465], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 150, 165, 427, 429, 512], "quantizable_nod": 13, "strategi": [13, 165, 199, 209, 210, 211, 227, 254, 270, 290, 343, 426, 427, 428, 429, 434, 445, 446, 452, 459, 463, 471, 483, 487, 502, 503, 504, 505, 507, 513, 514], "config": [13, 44, 115, 116, 118, 122, 165, 172, 181, 182, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 213, 214, 225, 256, 257, 268, 307, 308, 310, 311, 312, 313, 318, 321, 322, 323, 324, 325, 340, 341, 343, 352, 379, 384, 401, 402, 403, 404, 406, 409, 416, 417, 424, 426, 428, 429, 434, 444, 446, 449, 450, 451, 452, 454, 457, 459, 462, 463, 464, 465, 485, 486, 500, 501, 503, 504, 505, 506, 508, 510, 512], "tune": [13, 45, 172, 209, 210, 213, 214, 225, 227, 256, 257, 268, 270, 289, 326, 328, 329, 330, 331, 333, 334, 335, 336, 339, 340, 341, 342, 352, 362, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 400, 401, 402, 403, 406, 417, 427, 428, 445, 446, 447, 449, 452, 459, 461, 463, 464, 483, 489, 491, 492, 499, 501, 502, 505, 506, 507, 508, 510, 514], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 157, 158, 162, 165, 166, 172, 173, 174, 179, 181, 182, 188, 189, 190, 191, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 213, 214, 215, 218, 222, 225, 226, 227, 228, 229, 230, 232, 237, 238, 244, 245, 248, 256, 257, 258, 261, 265, 268, 269, 270, 271, 272, 273, 275, 280, 284, 286, 287, 288, 291, 294, 295, 296, 300, 305, 321, 322, 323, 325, 340, 342, 344, 347, 348, 349, 352, 360, 362, 385, 401, 403, 404, 406, 409, 416, 417, 421, 423, 424, 427, 429, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 459, 462, 464, 465, 466, 470, 471, 472, 474, 484, 486, 487, 488, 492, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 171, 209, 210, 215, 217, 218, 222, 223, 224, 245, 258, 260, 261, 265, 266, 267, 411, 426, 428, 446, 450, 460, 478, 481, 485, 487, 495, 502, 504, 506, 507, 509, 513, 515], "depend": [13, 213, 214, 243, 256, 257, 352, 385, 406, 422, 455, 456, 488, 503, 504, 512], "algorithm": [13, 44, 151, 162, 165, 178, 206, 210, 291, 298, 306, 343, 344, 351, 409, 411, 424, 427, 428, 429, 450, 451, 456, 459, 472, 477, 501, 504, 506, 510, 514], "set": [13, 43, 57, 96, 105, 115, 148, 157, 162, 165, 172, 205, 207, 209, 210, 213, 214, 215, 225, 227, 230, 242, 243, 248, 249, 256, 257, 258, 268, 270, 273, 283, 294, 300, 313, 318, 322, 327, 347, 351, 352, 360, 384, 385, 404, 406, 414, 417, 421, 424, 428, 444, 446, 447, 450, 452, 454, 456, 458, 459, 460, 462, 463, 464, 466, 468, 470, 484, 485, 486, 487, 488, 492, 495, 501, 503, 504, 506, 508, 509, 512, 514], "kl": [13, 16, 209, 210, 407, 411, 428, 429, 445, 456, 463, 512, 514], "minmax": [13, 16, 428, 429, 445, 456, 504, 514], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 156], "calibdata": 13, "threshold": [13, 168, 407, 411, 462], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 162, 170, 174, 182, 188, 195, 199, 200, 209, 210, 213, 214, 224, 225, 227, 234, 238, 242, 244, 245, 246, 249, 256, 257, 267, 268, 270, 277, 280, 283, 290, 298, 300, 305, 321, 323, 327, 334, 340, 343, 351, 352, 356, 362, 385, 395, 401, 404, 406, 409, 411, 417, 419, 426, 428, 463, 466, 471, 474, 477, 483, 489, 490, 493, 502, 505, 508, 512, 513], "amp": [13, 466, 473, 491], "wrap": [13, 105, 116, 174, 244, 294, 347, 423, 452, 478, 481], "dataiterload": 13, "data_it": [13, 185], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 407], "8001": [13, 407, 490, 495, 496, 497], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 167, 168, 170, 171, 301, 304, 355, 357, 359, 360, 361, 427, 428, 429, 460, 465, 476, 478, 480, 481, 484, 502, 512], "up": [13, 100, 196, 242, 283, 322, 452, 453, 456, 459, 474, 478, 481, 483, 501, 502, 503, 504, 508, 511, 512, 514], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 427], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 140], "white_nod": 15, "backend": [15, 41, 42, 46, 170, 209, 210, 211, 212, 216, 217, 221, 225, 226, 228, 229, 230, 231, 232, 236, 239, 242, 248, 249, 254, 255, 259, 260, 262, 264, 268, 269, 271, 272, 273, 274, 275, 279, 281, 283, 299, 334, 352, 353, 354, 356, 395, 423, 429, 449, 452, 458, 459, 463, 464, 472, 490, 495, 496, 497, 503, 511, 514], "cpuexecutionprovid": [15, 41, 42, 464, 504], "reduce_rang": [15, 41, 42, 209, 210, 429, 503], "augment": 15, "dump": [15, 155, 165, 172, 288, 417, 487, 504, 507, 510], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 151, 166, 417, 506], "percentil": [16, 44, 140, 166, 445], "99": [16, 509, 515], "999": [16, 514], "option": [16, 44, 105, 157, 165, 166, 187, 209, 210, 213, 214, 225, 242, 256, 257, 268, 283, 287, 288, 294, 300, 321, 327, 340, 343, 347, 351, 352, 385, 401, 403, 404, 406, 410, 417, 428, 429, 446, 447, 456, 460, 463, 477, 490, 493, 495, 496, 497, 501, 504, 506, 508, 511, 512, 514], "number": [16, 44, 67, 68, 105, 140, 165, 166, 179, 183, 189, 190, 209, 210, 223, 226, 238, 242, 266, 269, 280, 283, 295, 296, 298, 321, 330, 348, 349, 351, 379, 384, 389, 404, 409, 417, 444, 446, 447, 452, 462, 490, 492, 501, 504, 506, 508, 511, 512], "bin": [16, 157, 158, 417, 455], "histogram": [16, 407, 417, 485, 510], "valu": [16, 43, 44, 55, 67, 68, 70, 89, 90, 105, 143, 148, 157, 165, 171, 172, 179, 181, 185, 186, 196, 204, 205, 206, 207, 209, 210, 213, 214, 225, 228, 229, 238, 242, 243, 256, 257, 268, 271, 272, 280, 283, 294, 298, 322, 330, 333, 340, 347, 351, 352, 385, 389, 394, 401, 403, 404, 406, 407, 409, 417, 423, 428, 429, 445, 447, 449, 456, 462, 463, 464, 469, 486, 487, 493, 499, 501, 503, 504, 506, 507, 509, 511, 512, 514], "default": [16, 44, 97, 148, 157, 165, 166, 205, 207, 209, 210, 213, 214, 217, 225, 226, 227, 238, 242, 256, 257, 260, 268, 269, 270, 280, 283, 287, 288, 291, 300, 322, 342, 344, 351, 360, 403, 409, 417, 423, 427, 446, 447, 456, 459, 460, 462, 463, 464, 471, 474, 476, 480, 487, 490, 495, 496, 497, 499, 501, 503, 504, 505, 506, 508, 509, 511, 512, 514], "float": [16, 43, 44, 140, 141, 152, 166, 187, 192, 202, 205, 209, 210, 225, 238, 268, 280, 292, 294, 295, 296, 323, 345, 347, 348, 349, 400, 404, 414, 417, 447, 462, 503, 504, 509, 511], "A": [16, 54, 74, 75, 103, 116, 140, 141, 148, 155, 165, 173, 178, 179, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 227, 242, 245, 247, 248, 270, 283, 284, 291, 294, 295, 296, 298, 301, 304, 305, 306, 313, 316, 318, 321, 322, 323, 324, 325, 330, 344, 347, 348, 349, 351, 352, 356, 360, 389, 406, 417, 428, 446, 447, 453, 456, 462, 463, 465, 476, 477, 480, 483, 490, 501, 502, 504, 506, 509, 511, 512, 514], "between": [16, 42, 143, 171, 198, 209, 210, 242, 283, 295, 298, 348, 351, 379, 384, 417, 423, 427, 428, 429, 445, 449, 450, 459, 462, 463, 474, 504, 506, 507, 508, 509, 511, 512], "0": [16, 43, 44, 53, 90, 105, 148, 156, 157, 165, 166, 168, 170, 174, 179, 181, 183, 205, 209, 210, 215, 217, 222, 224, 225, 228, 229, 232, 238, 242, 244, 245, 258, 260, 265, 267, 268, 271, 272, 275, 280, 283, 288, 289, 298, 305, 313, 318, 326, 351, 362, 385, 390, 404, 423, 446, 447, 450, 452, 454, 455, 456, 460, 461, 462, 463, 464, 469, 471, 476, 480, 486, 495, 496, 501, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514], "100": [16, 172, 179, 209, 210, 227, 270, 404, 444, 447, 452, 458, 463, 487, 503, 504, 509, 511, 512, 514, 515], "klcalibr": 16, "128": [16, 44, 149, 151, 165, 166, 225, 228, 229, 242, 268, 271, 272, 283, 447, 463, 504, 506, 511], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 484, 485, 506], "ep": [16, 171, 464], "0001": [16, 179, 209, 210, 450, 463, 503], "smooth": [16, 140, 141, 148, 162, 170, 209, 210, 339, 501, 512], "discret": [16, 179, 512], "mai": [16, 148, 155, 157, 307, 308, 310, 311, 312, 404, 421, 422, 428, 445, 449, 454, 455, 461, 464, 476, 480, 486, 488, 490, 502, 504, 506, 512], "have": [16, 74, 83, 141, 148, 157, 182, 186, 188, 195, 223, 245, 266, 291, 294, 321, 323, 344, 347, 351, 385, 403, 404, 421, 422, 428, 429, 446, 447, 449, 452, 456, 461, 462, 463, 464, 466, 483, 486, 488, 490, 495, 496, 497, 499, 501, 504, 506, 509, 512, 513], "been": [16, 157, 182, 188, 195, 291, 321, 323, 344, 422, 424, 429, 450, 463, 464, 483, 506, 509], "normal": [16, 33, 242, 283, 296, 349, 463, 491, 499, 506, 509, 511], "1": [16, 42, 43, 44, 54, 74, 89, 105, 109, 113, 146, 148, 157, 160, 162, 165, 166, 168, 170, 171, 172, 174, 179, 181, 193, 194, 196, 209, 210, 215, 217, 222, 224, 225, 226, 228, 229, 232, 233, 238, 242, 243, 244, 245, 258, 260, 265, 267, 268, 269, 271, 272, 275, 276, 280, 283, 289, 294, 295, 296, 298, 313, 318, 323, 326, 327, 347, 348, 349, 351, 362, 385, 403, 404, 409, 421, 423, 426, 427, 429, 445, 446, 447, 449, 450, 454, 456, 457, 460, 462, 464, 467, 469, 485, 486, 492, 493, 495, 496, 497, 499, 500, 501, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514], "replac": [16, 158, 162, 165, 166, 296, 349, 452, 463, 474, 507], "zero": [16, 43, 44, 151, 166, 192, 205, 242, 283, 323, 417, 426, 487, 501, 504, 506, 509, 511, 512], "multipli": [16, 209, 210, 506], "scale": [16, 43, 44, 100, 141, 143, 151, 160, 162, 164, 165, 166, 170, 171, 238, 242, 280, 283, 504, 506, 508, 509, 511, 512], "factor": [16, 141, 506, 509, 515], "take": [16, 187, 210, 213, 214, 218, 242, 247, 256, 257, 261, 283, 321, 330, 351, 352, 385, 389, 406, 421, 423, 424, 446, 449, 450, 456, 463, 483, 501, 504, 505, 506, 511, 512, 514], "correspond": [16, 152, 185, 196, 209, 210, 225, 268, 291, 294, 298, 344, 347, 351, 409, 417, 427, 456, 463, 501, 503, 504, 508, 509, 512], "amount": 16, "off": [16, 67, 68, 70, 422, 506], "non": [16, 322, 417, 423, 449, 506, 512], "ref": [16, 148], "http": [16, 151, 152, 181, 189, 190, 199, 200, 201, 225, 227, 268, 270, 291, 292, 294, 295, 296, 321, 323, 324, 344, 345, 347, 348, 349, 351, 385, 423, 426, 447, 449, 457, 460, 461, 463, 472, 478, 481, 485, 487, 488, 489, 490, 493, 495, 496, 497, 501, 507], "hanj": 16, "c": [16, 74, 227, 270, 447, 455, 460, 506, 512], "illinoi": 16, "edu": [16, 227, 270, 447], "cs412": 16, "bk3": 16, "diverg": [16, 407, 411, 429, 445, 450, 512], "pdf": 16, "github": [16, 152, 189, 190, 201, 225, 268, 291, 292, 295, 296, 321, 324, 344, 345, 348, 349, 351, 385, 422, 426, 447, 449, 453, 460, 461, 463, 472, 478, 481, 485, 487, 488, 489, 490, 493, 496, 497, 507], "com": [16, 152, 189, 190, 201, 225, 268, 291, 292, 295, 296, 321, 324, 344, 345, 348, 349, 351, 385, 421, 426, 447, 449, 457, 460, 461, 463, 466, 472, 485, 487, 489, 490, 493, 496, 497, 507, 508, 515], "apach": [16, 461], "incub": 16, "blob": [16, 152, 189, 190, 291, 292, 295, 296, 321, 344, 345, 348, 349, 351, 385, 463, 472, 493, 496, 497], "master": [16, 189, 190, 201, 291, 292, 295, 296, 321, 324, 344, 345, 348, 349, 351, 385, 463, 512], "python": [16, 75, 148, 155, 157, 227, 246, 270, 290, 343, 404, 417, 419, 422, 423, 447, 449, 452, 455, 460, 463, 468, 474, 477, 483, 487, 489, 490, 492, 495, 497, 501, 502, 511], "contrib": [16, 290, 343], "py": [16, 148, 152, 172, 192, 209, 210, 292, 294, 295, 296, 323, 345, 347, 348, 349, 404, 423, 427, 449, 452, 460, 463, 468, 470, 471, 472, 478, 481, 485, 487, 489, 490, 492, 493, 495, 496, 497, 504, 507, 510], "microsoft": [16, 426, 427], "onnxruntim": [16, 209, 210, 221, 227, 234, 264, 270, 277, 299, 379, 427, 445, 446, 459, 460, 464, 486, 503], "main": [16, 151, 179, 196, 201, 249, 324, 423, 446, 449, 452, 463, 470, 472, 484, 492, 501, 504, 506], "tool": [16, 148, 287, 417, 426, 427, 463, 476, 480, 486, 488, 489, 490, 501, 502, 504], "arrai": [16, 43, 44, 148, 157, 242, 283, 294, 305, 347, 417, 511], "small": [16, 67, 68, 69, 70, 392, 424, 487, 488, 501, 506, 512, 515], "probabl": [16, 209, 210, 411, 506], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 56, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 183, 196, 296, 349, 421, 422, 463, 476, 480, 488, 495, 496, 501, 510], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 158], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 157, 174, 192, 213, 214, 222, 225, 244, 256, 257, 265, 268, 322, 323, 340, 385, 401, 406, 424, 429, 447, 462, 482, 501, 504, 509, 512], "qoper": [18, 34, 209, 210, 454, 486], "format": [18, 43, 53, 148, 209, 210, 225, 226, 227, 268, 269, 270, 288, 294, 300, 340, 347, 401, 404, 428, 429, 447, 452, 454, 462, 463, 464, 465, 466, 487, 490, 504, 507], "float16activationoper": 18, "float16": [18, 21, 43, 447, 506], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 298, 351, 455, 462, 478, 481, 507], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 423, 509], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 148, 341, 402], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 165, 288, 427], "mode": [41, 42, 43, 45, 110, 157, 162, 234, 277, 294, 340, 347, 360, 401, 414, 416, 417, 427, 428, 449, 459, 476, 480, 487, 488, 504, 505, 506, 512], "static": [41, 42, 47, 162, 170, 185, 210, 288, 340, 385, 401, 427, 428, 429, 449, 454, 459, 463, 466, 471, 472, 473, 474, 477, 483, 486, 493, 495, 496, 497, 509, 512, 515], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 79, 131, 136, 143, 165, 166, 171, 209, 210, 213, 214, 256, 257, 287, 288, 298, 333, 340, 351, 390, 394, 401, 409, 416, 417, 426, 427, 429, 449, 456, 457, 462, 463, 464, 473, 485, 486, 487, 503, 504, 505, 506, 507, 508, 509, 510, 512, 514, 515], "add_qdq_pair_to_weight": [41, 209, 210, 504], "optypes_to_exclude_output_qu": [41, 209, 210, 504], "dedicated_qdq_pair": [41, 209, 210, 504], "smoothquant": [42, 162, 165, 170, 426, 502, 506, 513], "onnxrt": [42, 43, 44, 225, 227, 234, 242, 268, 270, 277, 283, 298, 351, 378, 415, 427, 449, 464, 485, 504, 515], "get_quant_dequant_output": 42, "input_data": [42, 446], "output_data": 42, "loss": [42, 174, 209, 210, 244, 289, 298, 313, 318, 326, 351, 406, 445, 449, 450, 451, 452, 453, 462, 463, 464, 474, 486, 487, 500, 501, 502, 504, 506, 509, 512, 514], "output": [42, 43, 44, 53, 57, 59, 74, 98, 105, 110, 148, 165, 166, 185, 186, 191, 205, 207, 209, 210, 213, 214, 247, 251, 256, 257, 287, 288, 291, 321, 344, 351, 352, 360, 385, 406, 412, 413, 417, 423, 427, 428, 450, 451, 452, 454, 456, 458, 462, 463, 465, 474, 483, 484, 486, 490, 491, 495, 496, 497, 500, 501, 503, 504, 506, 507, 509, 510, 511, 512, 514], "numpi": [42, 43, 67, 68, 70, 105, 148, 242, 283, 294, 305, 347, 455, 509, 511], "7": [42, 166, 172, 209, 210, 362, 429, 444, 455, 456, 460, 463, 501, 504, 507, 509, 512, 515], "bit": [42, 44, 149, 165, 166, 209, 210, 403, 429, 445, 451, 464, 502, 504, 506, 509], "execut": [42, 43, 53, 151, 157, 172, 192, 193, 194, 209, 210, 323, 327, 329, 384, 385, 386, 388, 406, 409, 416, 417, 449, 450, 451, 463, 464, 468, 469, 476, 477, 480, 483, 484, 485, 486, 489, 492, 500, 501, 504, 506, 508, 512, 515], "provid": [42, 43, 102, 105, 110, 185, 213, 214, 242, 256, 257, 283, 289, 294, 313, 318, 326, 327, 347, 352, 385, 406, 410, 412, 424, 426, 427, 428, 429, 444, 446, 449, 451, 452, 453, 459, 460, 462, 463, 464, 465, 466, 470, 474, 477, 483, 484, 485, 490, 491, 501, 503, 504, 506, 509, 510, 512, 513, 514, 515], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 210, 287, 288, 454], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 152, 155, 157, 165, 166, 171, 173, 178, 183, 185, 187, 189, 190, 191, 192, 196, 197, 198, 199, 201, 202, 203, 209, 210, 213, 214, 224, 225, 226, 227, 228, 229, 230, 232, 242, 245, 251, 252, 256, 257, 267, 268, 269, 270, 271, 272, 273, 275, 283, 291, 294, 295, 296, 298, 307, 308, 310, 311, 312, 313, 318, 321, 323, 325, 326, 327, 330, 333, 344, 347, 348, 349, 351, 352, 362, 385, 389, 394, 403, 404, 406, 416, 417, 421, 422, 423, 424, 427, 428, 429, 445, 446, 447, 450, 451, 452, 454, 455, 456, 459, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 474, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 495, 496, 497, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "quant_dequant_data": 42, "qtype": [42, 43, 427], "3": [42, 148, 157, 194, 210, 227, 242, 270, 283, 294, 347, 404, 423, 424, 426, 445, 446, 447, 450, 452, 454, 456, 457, 460, 462, 463, 464, 466, 470, 474, 476, 480, 485, 489, 490, 492, 493, 495, 499, 501, 503, 504, 506, 507, 508, 509, 511, 512, 515], "scheme": [42, 43, 44, 149, 160, 165, 166, 427, 428, 429, 446, 456, 474, 506, 512, 514], "sym": [42, 43, 44, 166, 428, 429, 456, 504, 506, 514], "dequant": [42, 43, 44, 57, 88, 91, 92, 93, 94, 96, 152, 165, 166, 417, 423, 428, 509, 510], "asym": [42, 43, 44, 149, 160, 165, 166, 429, 456, 506, 514], "ortsmoothqu": 42, "fake": [42, 44, 113, 160, 162, 166, 170, 403, 463, 504, 506, 509], "channel": [42, 43, 44, 143, 162, 166, 170, 171, 183, 186, 191, 209, 210, 238, 242, 280, 283, 321, 427, 429, 459, 460, 466, 468, 473, 487, 501, 506, 511, 515], "For": [42, 44, 165, 166, 170, 185, 186, 189, 190, 201, 210, 227, 242, 270, 283, 295, 296, 298, 321, 324, 348, 349, 351, 352, 385, 421, 423, 425, 427, 429, 450, 451, 452, 454, 456, 459, 466, 468, 469, 471, 474, 485, 486, 490, 501, 505, 509, 510, 512, 514, 515], "more": [42, 148, 162, 170, 189, 190, 242, 283, 321, 424, 425, 426, 428, 445, 447, 450, 452, 454, 457, 459, 460, 463, 464, 466, 474, 478, 481, 486, 490, 499, 500, 501, 505, 506, 509, 512, 513, 515], "detail": [42, 162, 170, 185, 242, 283, 417, 418, 421, 422, 426, 428, 429, 445, 450, 456, 457, 458, 462, 463, 464, 466, 474, 483, 490, 491, 501, 507, 508, 510, 512, 513], "pleas": [42, 151, 152, 162, 170, 181, 189, 190, 191, 199, 200, 201, 209, 210, 225, 226, 227, 230, 268, 269, 270, 273, 321, 323, 324, 351, 385, 404, 423, 424, 425, 426, 427, 444, 445, 447, 451, 452, 454, 460, 462, 464, 466, 467, 471, 474, 489, 490, 491, 501, 504, 505, 506, 507, 508, 509, 512, 513], "refer": [42, 151, 152, 162, 170, 181, 189, 190, 191, 199, 200, 201, 205, 209, 210, 225, 268, 291, 292, 298, 321, 323, 324, 344, 345, 351, 385, 404, 423, 427, 428, 444, 446, 447, 449, 451, 452, 454, 458, 460, 461, 462, 463, 464, 466, 471, 474, 485, 486, 487, 489, 490, 491, 499, 503, 507, 511, 512], "accur": [42, 151, 162, 170, 200, 501, 506, 509], "effici": [42, 162, 170, 424, 445, 446, 450, 466, 490, 500, 501, 502, 506, 509, 512], "post": [42, 97, 98, 151, 162, 170, 199, 210, 213, 214, 256, 257, 385, 421, 426, 427, 428, 449, 451, 452, 454, 459, 460, 466, 472, 483, 492, 501, 502, 506, 509, 510, 512], "train": [42, 56, 80, 151, 162, 170, 173, 193, 194, 197, 199, 200, 209, 210, 213, 214, 225, 227, 242, 252, 256, 257, 268, 270, 283, 284, 300, 323, 343, 385, 409, 424, 427, 428, 434, 447, 449, 450, 451, 454, 459, 464, 466, 472, 483, 487, 495, 500, 502, 506, 508, 509, 512, 514], "larg": [42, 43, 162, 170, 200, 426, 446, 450, 463, 502, 506, 509, 515], "languag": [42, 162, 170, 200, 291, 344, 421, 426, 454, 502, 506, 509], "2": [42, 43, 53, 74, 105, 109, 157, 162, 166, 168, 170, 172, 187, 193, 194, 209, 210, 226, 243, 269, 294, 296, 298, 323, 330, 347, 349, 351, 362, 389, 404, 423, 426, 427, 445, 446, 447, 449, 450, 456, 459, 460, 461, 462, 464, 492, 493, 495, 496, 497, 499, 501, 502, 504, 506, 507, 508, 509, 511, 512, 513], "spiq": [42, 162, 170, 509], "free": [42, 162, 170, 199, 213, 214, 256, 257, 385, 421, 472, 477, 485, 492, 499, 508, 509], "per": [42, 43, 44, 162, 166, 170, 172, 209, 210, 243, 411, 427, 429, 446, 490, 501, 505, 506, 515], "we": [42, 43, 67, 68, 70, 74, 86, 143, 157, 162, 170, 171, 172, 185, 189, 196, 209, 210, 224, 243, 245, 267, 291, 294, 344, 347, 392, 421, 423, 427, 428, 429, 446, 449, 452, 454, 456, 462, 463, 470, 471, 474, 478, 481, 483, 484, 486, 488, 495, 496, 497, 499, 500, 501, 503, 504, 506, 507, 508, 509, 510, 512, 513], "onli": [42, 44, 53, 63, 70, 86, 109, 115, 143, 157, 162, 164, 166, 170, 171, 172, 179, 182, 188, 195, 209, 210, 225, 243, 245, 249, 268, 288, 300, 321, 323, 334, 385, 395, 403, 404, 417, 426, 427, 428, 429, 444, 445, 446, 449, 450, 452, 455, 456, 463, 464, 471, 484, 501, 502, 503, 504, 509, 510, 512, 513, 514], "inplac": [42, 162], "mean": [42, 44, 162, 166, 187, 196, 209, 210, 238, 242, 280, 283, 296, 298, 321, 333, 349, 351, 394, 423, 428, 429, 446, 449, 452, 456, 462, 463, 469, 487, 501, 504, 506, 509, 511, 512, 514, 515], "weight": [42, 43, 44, 60, 61, 122, 141, 143, 148, 149, 152, 162, 164, 165, 166, 171, 181, 182, 186, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 204, 209, 210, 288, 321, 323, 340, 351, 385, 392, 401, 403, 417, 418, 426, 427, 428, 429, 445, 449, 451, 456, 458, 463, 485, 495, 499, 501, 502, 503, 504, 509, 510, 512, 513, 514], "chang": [42, 96, 143, 162, 171, 193, 194, 196, 197, 199, 200, 203, 209, 210, 323, 325, 392, 417, 422, 428, 446, 452, 455, 461, 463, 466, 476, 477, 480, 483, 488, 501, 510, 511, 512], "you": [42, 157, 162, 209, 210, 223, 225, 266, 268, 323, 351, 385, 422, 423, 428, 446, 447, 449, 452, 460, 461, 462, 464, 466, 468, 469, 471, 476, 480, 483, 484, 485, 486, 487, 488, 490, 501, 504, 507, 508, 509, 510, 513], "can": [42, 44, 143, 152, 157, 162, 171, 178, 185, 186, 187, 192, 200, 201, 203, 209, 210, 213, 214, 224, 227, 242, 243, 245, 256, 257, 267, 270, 283, 294, 296, 298, 321, 323, 325, 347, 349, 351, 352, 362, 385, 406, 417, 423, 424, 426, 427, 428, 429, 444, 446, 447, 449, 450, 451, 452, 454, 456, 459, 460, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 476, 477, 478, 480, 481, 483, 484, 486, 487, 488, 489, 490, 492, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515], "recov": [42, 162, 417, 427, 451, 509], "helper": [43, 45, 110, 116, 148, 165, 225, 226, 227, 241, 268, 269, 270, 282, 286, 287, 288, 360, 415], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 209, 210, 228, 229, 238, 242, 271, 272, 280, 283, 428, 429, 447, 449, 454, 456, 466, 487, 503, 504, 506, 509, 510, 511, 514], "its": [43, 60, 96, 148, 152, 185, 194, 197, 199, 205, 210, 221, 227, 242, 264, 270, 283, 286, 292, 293, 323, 330, 345, 346, 389, 421, 447, 450, 461, 462, 464, 474, 476, 480, 483, 484, 501, 506, 508, 511, 512], "string": [43, 45, 116, 148, 151, 155, 157, 172, 174, 178, 179, 185, 187, 192, 201, 202, 203, 205, 206, 209, 210, 227, 244, 249, 270, 284, 289, 291, 294, 300, 301, 302, 304, 305, 313, 318, 321, 322, 323, 324, 325, 326, 344, 347, 356, 360, 409, 414, 417, 462, 509, 511], "represent": [43, 155, 421, 423, 445, 451, 501, 504], "quanttyp": [43, 403], "repres": [43, 187, 191, 192, 201, 202, 205, 227, 232, 270, 275, 294, 296, 298, 347, 349, 351, 421, 429, 445, 447, 454, 490, 501, 504, 512], "make_quant_nod": 43, "make": [43, 105, 143, 171, 178, 187, 192, 201, 203, 223, 266, 321, 323, 325, 417, 421, 422, 427, 428, 444, 446, 456, 462, 463, 471, 476, 480, 483, 485, 501, 504, 505, 506, 508, 509, 512], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 210], "dequantizelinear": 43, "is_b_transpos": 43, "inuput": 43, "b": [43, 74, 225, 268, 445, 447, 462, 501, 506, 509, 512], "transpos": [43, 73, 191, 238, 242, 283, 287, 321, 511], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 166, 455, 456, 506, 509, 512], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 464, 466, 474, 505], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 172, 226, 230, 233, 269, 273, 276, 333, 394, 462, 512], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 152, 165, 238, 242, 280, 283, 291, 294, 295, 296, 298, 344, 347, 348, 349, 351, 365, 385, 392, 406, 416, 417, 421, 424, 426, 446, 449, 450, 452, 459, 461, 462, 463, 471, 472, 483, 484, 490, 491, 492, 493, 499, 501, 502, 504, 506, 508, 509, 510, 511, 512, 513, 515], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44], "point": [43, 44, 166, 238, 280, 295, 296, 305, 330, 348, 349, 389, 417, 462, 483, 487, 488, 504, 506, 509, 511, 512], "To": [43, 294, 347, 362, 422, 428, 429, 447, 449, 452, 464, 467, 470, 476, 478, 480, 481, 485, 488, 501, 503, 505, 506, 507, 509, 512, 514], "pack": [43, 61], "comput": [43, 105, 152, 165, 291, 292, 295, 296, 298, 344, 345, 348, 349, 351, 406, 417, 445, 446, 451, 454, 462, 463, 464, 466, 477, 486, 501, 502, 504, 506, 509, 512], "linear": [43, 151, 160, 164, 165, 166, 170, 183, 185, 186, 191, 196, 205, 209, 210, 321, 423, 450, 454, 463, 501, 506, 509, 512], "transform": [43, 50, 143, 145, 146, 147, 151, 161, 164, 199, 225, 226, 227, 228, 229, 230, 232, 234, 236, 268, 269, 270, 271, 272, 273, 275, 277, 279, 290, 343, 423, 424, 445, 447, 450, 451, 452, 453, 457, 463, 466, 471, 472, 473, 474, 486, 493, 496, 497, 501, 502, 505, 506, 509, 510, 512, 514, 515], "when": [43, 53, 64, 70, 148, 155, 157, 186, 192, 197, 205, 209, 210, 225, 226, 234, 242, 268, 269, 277, 283, 292, 322, 323, 345, 385, 406, 421, 424, 428, 446, 447, 463, 474, 476, 477, 480, 484, 485, 487, 488, 489, 491, 495, 501, 504, 506, 509, 511, 512], "uint8": [43, 166, 238, 280, 294, 342, 347, 403, 427, 447, 456, 503, 504, 511, 514], "rmin": [43, 504], "rmax": [43, 504], "m": [43, 152, 166, 189, 190, 209, 210, 321, 450, 460, 466, 468, 471, 474, 478, 481, 490, 501, 515], "where": [43, 157, 209, 210, 294, 298, 347, 351, 403, 417, 429, 445, 449, 450, 476, 480, 484, 509, 510], "max": [43, 104, 143, 166, 171, 179, 209, 210, 242, 283, 295, 296, 330, 348, 349, 389, 417, 426, 449, 460, 463, 486, 487, 501, 504, 506, 509, 511, 512], "ab": [43, 151, 166, 181, 199, 200, 323, 501, 504, 509], "np": [43, 242, 283, 330, 389, 452, 492, 509, 511, 512], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 60, 165, 181, 189, 205, 210, 228, 229, 271, 272, 295, 296, 321, 323, 333, 348, 349, 394, 407, 417, 445, 447, 462, 463, 474, 486, 499, 501, 504, 506, 508, 509, 512, 514], "quantize_data": 43, "add": [43, 52, 64, 109, 119, 148, 205, 209, 210, 225, 227, 249, 268, 270, 322, 340, 401, 417, 422, 423, 429, 446, 447, 452, 454, 456, 462, 463, 478, 481, 485, 486, 492, 495, 496, 508, 510, 512, 513], "necessari": [43, 201, 421, 424, 428, 465, 484, 501, 508, 512], "intermedi": [43, 152, 174, 209, 210, 244, 423, 459, 504], "full": [43, 225, 226, 227, 268, 269, 270, 417, 426, 445, 447, 449, 455, 461, 484, 488, 501, 506, 507], "equat": [43, 296, 298, 349, 351, 504, 509], "r": [43, 143, 171, 449, 460, 484, 485, 487, 489, 490, 504, 515], "": [43, 44, 105, 143, 148, 157, 171, 185, 186, 187, 191, 192, 193, 194, 197, 199, 200, 205, 206, 207, 209, 210, 224, 227, 241, 242, 243, 245, 247, 267, 270, 282, 283, 296, 321, 323, 349, 351, 352, 356, 385, 414, 417, 421, 424, 428, 429, 449, 450, 452, 454, 456, 459, 463, 464, 471, 474, 476, 480, 483, 486, 487, 490, 500, 501, 502, 503, 504, 506, 507, 508, 509, 512, 513, 514, 515], "q": [43, 44, 107, 109, 131, 506, 509], "z": [43, 445, 450, 509], "real": [43, 228, 245, 271, 428, 445, 452, 485, 491, 502, 504], "origin": [43, 44, 158, 162, 165, 185, 197, 205, 210, 225, 242, 243, 268, 283, 307, 308, 310, 311, 312, 322, 323, 342, 390, 403, 417, 422, 447, 471, 501, 504, 511, 512, 514], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 157, 158], "new_dtyp": 43, "cast": [43, 57, 505, 511], "info": [43, 162, 165, 166, 189, 190, 205, 240, 245, 250, 321, 356, 413, 417, 423, 449, 465, 492, 497], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 417], "low": [43, 213, 214, 228, 229, 256, 257, 271, 272, 289, 299, 326, 352, 427, 428, 444, 445, 447, 452, 463, 464, 487, 502, 504, 506, 509, 512], "high": [43, 228, 229, 271, 272, 447, 449, 460, 487, 502, 512], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 165, 185, 196, 206, 207, 210, 417, 427, 446, 456, 458, 463, 503, 514], "kwarg": [43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 158, 165, 166, 183, 209, 210, 227, 240, 242, 247, 250, 270, 283, 339, 341, 351, 352, 353, 355, 357, 359, 360, 361, 385, 400, 402, 404, 406, 412, 413, 416, 417, 446], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 67, 68, 70, 105, 148, 298, 305, 330, 351, 389, 417, 427, 449, 469, 476, 480, 483, 484, 486, 487, 501, 506, 508, 509, 510, 512], "item": [43, 205, 207, 209, 210, 241, 282, 322, 340, 401, 445, 452, 501, 509, 512], "trt_env_setup": 43, "environ": [43, 172, 243, 421, 444, 476, 480, 483, 490, 493, 495, 496, 497, 512], "variabl": [43, 155, 172, 202, 209, 210, 227, 243, 270, 330, 389, 403, 460, 501, 512], "tensorrt": [43, 445, 464, 504], "to_numpi": 43, "weightonli": 44, "check_op_support_statu": 44, "make_matmul_weight_only_nod": 44, "weight_shap": 44, "num_bit": [44, 113, 160, 165, 166, 509], "group_siz": [44, 149, 160, 165, 166, 403, 506], "k_block": 44, "q_weight": 44, "matmulwithquantweight": 44, "shape": [44, 105, 148, 187, 228, 229, 238, 242, 271, 272, 280, 283, 294, 347, 426, 447, 456, 457, 463, 485, 486, 506, 509, 511], "how": [44, 157, 166, 173, 181, 187, 193, 194, 199, 200, 209, 210, 242, 283, 284, 321, 422, 423, 425, 427, 446, 447, 450, 451, 452, 458, 462, 463, 477, 478, 481, 482, 483, 485, 495, 496, 497, 501, 502, 504, 509, 511, 512, 513, 514], "mani": [44, 166, 351, 385, 446, 460, 506, 512, 514], "element": [44, 166, 189, 190, 205, 223, 266, 294, 321, 347, 417, 447, 459, 462, 501, 506, 509], "one": [44, 109, 110, 115, 157, 165, 166, 172, 187, 191, 196, 199, 200, 201, 203, 242, 252, 283, 291, 294, 298, 300, 321, 324, 325, 344, 347, 351, 424, 427, 445, 450, 451, 452, 456, 459, 460, 462, 463, 464, 466, 467, 471, 472, 474, 476, 477, 480, 483, 484, 485, 487, 488, 489, 490, 492, 499, 500, 501, 503, 504, 506, 507, 509, 511, 512], "zp": [44, 166, 509], "new_init": 44, "matmul_weight_only_nod": 44, "quant_tensor": 44, "4": [44, 53, 149, 160, 165, 166, 172, 187, 196, 209, 210, 234, 237, 238, 242, 277, 280, 283, 291, 292, 294, 344, 345, 347, 403, 404, 421, 427, 429, 444, 452, 453, 456, 459, 460, 462, 463, 471, 490, 492, 496, 501, 504, 506, 509, 511, 512, 515], "32": [44, 149, 166, 183, 403, 452, 458, 506, 509, 515], "ratio": [44, 143, 171, 187, 192, 205, 209, 210, 238, 242, 280, 283, 323, 447, 463, 486, 501, 511, 515], "group": [44, 166, 202, 308, 426, 459, 501, 506, 510, 511, 512, 515], "clip": [44, 166, 506, 509], "qdq_tensor": 44, "quant": [44, 148, 165, 166, 209, 210, 340, 401, 423, 463, 504], "pad_tensor": 44, "rowi": 44, "so": [44, 105, 242, 283, 403, 423, 427, 449, 455, 459, 464, 469, 471, 487, 488, 504, 505, 506, 509, 510, 511, 513], "divis": 44, "pade": 44, "rtn_quantiz": [44, 166], "weight_config": [44, 149, 151, 164, 166], "round": [44, 143, 166, 171, 426, 502, 504, 506, 509], "nearst": [44, 166], "method": [44, 141, 143, 155, 157, 165, 166, 178, 202, 209, 210, 218, 223, 224, 225, 227, 234, 242, 245, 261, 266, 267, 268, 270, 277, 283, 304, 305, 306, 340, 401, 403, 409, 410, 412, 413, 423, 424, 426, 445, 446, 447, 449, 450, 451, 462, 463, 500, 501, 504, 505, 506, 509, 511, 512], "modelproto": [44, 286, 352, 465], "onnxmodel": [44, 359, 378], "fc2": [44, 165, 166], "rtn": [44, 165, 506], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 160, 164, 173, 196, 198, 252, 292, 345, 421, 428, 429, 463, 466, 468, 474, 483, 487, 492, 500, 501, 504, 505, 508, 509, 512, 513, 514], "salient": [44, 166, 501, 506], "apply_awq_clip": 44, "mse": [44, 165, 166, 209, 210, 290, 298, 332, 343, 351, 385, 393, 417, 449, 462, 487, 503, 506, 507], "prepare_input": 44, "n_sampl": [44, 149, 165, 166], "sampl": [44, 77, 165, 166, 209, 210, 218, 223, 225, 226, 227, 238, 242, 261, 266, 268, 269, 270, 280, 283, 298, 305, 330, 351, 389, 424, 446, 447, 453, 459, 484, 504, 506, 511, 512, 514, 515], "session": [44, 148, 224, 267, 360, 463, 510], "awq_quant": [44, 166], "enable_auto_scal": [44, 166, 506], "enable_mse_search": [44, 166, 506], "n_block": [44, 166, 506], "5": [44, 156, 170, 174, 209, 210, 229, 238, 244, 272, 280, 298, 351, 385, 427, 447, 454, 456, 462, 463, 487, 492, 495, 496, 501, 503, 504, 506, 509, 511, 512, 514, 515], "awar": [44, 149, 152, 166, 173, 210, 252, 300, 321, 392, 406, 427, 428, 429, 445, 451, 452, 454, 459, 483, 492, 500, 502, 506, 512], "awq": [44, 166, 506], "enabl": [44, 109, 152, 166, 192, 209, 210, 323, 428, 429, 452, 460, 464, 466, 468, 471, 472, 474, 485, 487, 489, 492, 501, 502, 506, 512], "avoid": [44, 105, 157, 165, 166, 225, 268, 423, 510], "oom": [44, 166], "gptq": [44, 166, 506], "w": [44, 242, 283, 501, 509, 511], "h": [44, 209, 210, 242, 283, 452, 490, 491, 495, 496, 497, 511], "blocksiz": 44, "percdamp": [44, 506], "01": [44, 209, 210, 463, 503, 506, 512, 514, 515], "actord": [44, 506], "perchannel": 44, "hessian": [44, 152, 392, 506, 512], "matrix": [44, 351, 385, 426, 474, 513], "percent": 44, "averag": [44, 295, 296, 298, 348, 349, 351, 462, 463, 506, 512, 515], "diagon": [44, 506], "dampen": 44, "rearrang": [44, 199, 501, 506], "consid": [44, 148, 298, 351, 421, 445, 450, 484, 512], "diag": 44, "error": [44, 105, 152, 157, 298, 333, 351, 394, 413, 449, 462, 467, 487, 488, 491, 506, 509, 512], "gptq_quantiz": [44, 166], "get_ops_recurs": 45, "prefix": [45, 148, 150, 157, 158, 163, 165, 172, 466, 471, 510], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 150, 152, 157, 165, 178, 206, 207, 209, 210, 241, 282, 294, 301, 304, 306, 347, 417], "yaml": [45, 205, 206, 207, 210, 213, 214, 225, 227, 243, 256, 257, 268, 270, 284, 289, 300, 301, 302, 304, 313, 318, 326, 327, 416, 417, 427, 429, 458, 462, 463, 499, 503, 510, 511], "file": [45, 105, 148, 155, 157, 158, 162, 165, 169, 201, 205, 206, 209, 210, 213, 214, 225, 226, 227, 230, 241, 242, 248, 251, 256, 257, 268, 269, 270, 273, 282, 283, 284, 289, 294, 300, 301, 302, 304, 313, 318, 322, 324, 326, 327, 347, 352, 362, 368, 369, 373, 385, 416, 417, 424, 427, 428, 429, 452, 455, 458, 461, 462, 463, 465, 469, 478, 481, 482, 483, 484, 486, 487, 488, 490, 491, 495, 496, 497, 499, 503, 504, 506, 510, 511], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 151, 253, 289, 294, 326, 339, 340, 347, 351, 385, 400, 401, 404, 417, 422, 423, 430, 432, 436, 439, 442, 449, 454, 459, 463, 468, 472, 473, 474, 489, 490, 494, 507, 508, 512, 516], "pytorch_ipexadaptor": 45, "intel": [45, 189, 190, 201, 246, 249, 285, 290, 297, 298, 321, 324, 332, 338, 343, 350, 351, 363, 385, 393, 399, 419, 421, 422, 424, 425, 427, 428, 429, 445, 447, 448, 450, 451, 453, 454, 456, 457, 461, 464, 465, 466, 471, 473, 474, 485, 486, 487, 489, 490, 499, 500, 501, 502, 504, 505, 507, 509, 510, 512, 513, 514], "extens": [45, 155, 157, 417, 424, 426, 427, 456, 459, 460, 463, 464, 465, 467, 472, 473, 474, 478, 481, 482, 486, 501, 502, 504, 509, 512, 513, 514], "ipex": [45, 159, 165, 209, 210, 459, 463, 464, 468, 472, 473, 509], "pytorch_fxadaptor": 45, "fx": [45, 165, 209, 334, 395, 459, 464, 472, 473, 502, 504, 505], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 185, 224, 267, 289, 353, 360, 384, 423, 427, 447, 450, 452, 458, 465, 466, 485, 487, 504, 505, 510], "pytorchweightonlyadaptor": 45, "querybackendcap": [46, 427, 428], "defin": [46, 86, 152, 178, 179, 185, 187, 192, 193, 194, 199, 200, 201, 202, 203, 209, 210, 213, 214, 256, 257, 301, 302, 304, 305, 306, 313, 318, 321, 322, 323, 325, 352, 385, 406, 416, 421, 424, 427, 428, 446, 447, 450, 451, 456, 459, 462, 463, 484, 500, 501, 504, 508, 509, 510, 512, 514], "interfac": [46, 86, 113, 206, 289, 313, 318, 326, 327, 409, 459, 463, 474, 491, 504, 507], "each": [46, 141, 148, 152, 157, 165, 166, 205, 209, 210, 223, 227, 230, 238, 242, 266, 270, 273, 280, 283, 292, 294, 295, 296, 333, 345, 347, 348, 349, 394, 417, 422, 427, 428, 429, 447, 449, 450, 451, 456, 463, 468, 474, 477, 483, 490, 492, 499, 501, 506, 508, 509, 510, 511, 512, 513], "adapt": [46, 421, 426, 428, 447, 474, 502], "should": [46, 54, 115, 116, 157, 173, 183, 185, 196, 209, 210, 213, 214, 223, 225, 227, 242, 247, 256, 257, 266, 268, 270, 283, 288, 292, 345, 351, 352, 385, 404, 406, 417, 423, 424, 427, 428, 429, 447, 450, 452, 462, 463, 469, 478, 481, 483, 485, 486, 499, 501, 504, 506, 511, 512, 514], "implement": [46, 110, 143, 147, 149, 157, 213, 214, 220, 223, 224, 225, 227, 256, 257, 263, 266, 267, 268, 270, 291, 344, 352, 362, 385, 392, 406, 429, 446, 447, 462, 463, 474, 484, 501, 504, 506, 507, 510, 512, 514], "inherit": [46, 173, 174, 197, 198, 203, 209, 222, 242, 244, 252, 265, 283, 323, 325, 424, 427, 428, 447], "own": [46, 74, 157, 223, 242, 266, 283, 362, 424, 428, 446, 447, 459, 462, 485, 488, 499, 506, 508, 513], "tensorflowadaptor": 47, "stock": [47, 472, 509], "spr": 47, "tensorflow_itexadaptor": 47, "itex": [47, 109, 209, 210, 287, 464, 504, 509], "tensorflowqueri": [47, 427], "local_config_fil": 47, "performance_onli": [47, 48, 49, 107, 131, 136, 147, 209, 463], "itex_mod": [47, 48, 89, 107, 131, 136], "quant_mod": [47, 340, 401, 428, 429], "graphconvert": 48, "qt_config": 48, "recip": [48, 185, 209, 210, 289, 326, 463, 506, 509, 512], "int8_sequ": 48, "fp32_op": [48, 50, 107], "bf16_op": [48, 50, 107, 428, 505], "data_load": [48, 49, 427], "fake_qu": [48, 88, 107, 131, 136], "qdq_enabl": 48, "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143], "use_bf16": [48, 49, 209, 503], "without": [49, 90, 148, 197, 242, 283, 323, 342, 403, 421, 450, 452, 463, 474, 485, 487, 501, 502, 503, 512, 513], "graphconverterwithoutcalib": 49, "recover_config": 49, "rewrit": [50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 182], "bf16convert": [50, 505], "biasadd": [52, 59, 64, 66, 109, 456], "convertaddtobiasaddoptim": 52, "conv2d": [52, 59, 60, 61, 65, 66, 71, 125, 135, 143, 151, 428, 429, 449, 454, 456, 487, 509, 510, 512], "addv2": [52, 69, 456], "layout": 53, "convertlayoutoptim": 53, "convers": [53, 54, 210, 300, 427, 428, 463, 464, 504, 505, 509], "optim": [53, 74, 75, 79, 80, 116, 118, 176, 177, 178, 182, 185, 194, 199, 206, 209, 210, 246, 252, 289, 290, 306, 326, 330, 343, 389, 406, 407, 414, 417, 424, 426, 444, 449, 450, 451, 452, 456, 457, 459, 460, 463, 465, 466, 468, 470, 471, 474, 477, 485, 487, 488, 489, 491, 493, 502, 503, 504, 505, 506, 508, 509, 510, 512, 514], "nchw": [53, 238], "nhwc": [53, 238], "It": [53, 157, 173, 187, 213, 214, 251, 256, 257, 296, 298, 305, 321, 326, 333, 349, 351, 352, 385, 390, 394, 406, 427, 428, 429, 445, 449, 450, 463, 469, 472, 477, 483, 484, 485, 486, 487, 488, 490, 501, 504, 506, 507, 508, 512, 514], "exist": [53, 172, 207, 243, 360, 454, 462, 470, 512], "abov": [53, 427, 428, 429, 450, 485, 486, 487, 490, 501, 504, 509, 512], "graph_def": [53, 148, 287, 352, 360, 384, 385], "leakyrelu": [54, 509], "convertleakyreluoptim": 54, "below": [54, 66, 74, 209, 210, 327, 351, 385, 422, 423, 426, 427, 428, 429, 446, 449, 450, 452, 458, 462, 466, 468, 476, 477, 480, 483, 486, 490, 499, 500, 501, 503, 504, 506, 508, 509, 510, 512, 513], "subgraph": [54, 66, 105, 163, 512], "mul": [54, 65, 66, 69, 166, 170, 454, 506, 509], "maximum": [54, 187, 192, 209, 210, 225, 242, 268, 283, 292, 323, 330, 345, 389, 429, 445, 447, 449, 463, 501, 504, 511], "note": [54, 155, 191, 294, 334, 347, 395, 424, 428, 429, 446, 449, 452, 454, 456, 460, 463, 468, 471, 476, 480, 483, 485, 488, 490, 492, 501, 504, 506, 509, 510, 512, 513, 514], "coeffici": [54, 202, 501], "less": [54, 148, 165, 209, 210, 417, 444, 450, 463, 489, 501], "than": [54, 148, 225, 242, 268, 283, 417, 424, 426, 444, 447, 458, 487, 495, 499, 500, 501, 504, 506, 508, 511, 512], "valid": [54, 67, 68, 105, 192, 195, 205, 209, 210, 227, 270, 294, 322, 323, 347, 360, 422, 424, 426, 427, 447, 449, 450, 453, 456, 459, 461, 463, 474, 487, 501, 504, 506, 507], "nan": 55, "random": [55, 148, 178, 209, 210, 238, 242, 280, 283, 290, 306, 330, 332, 343, 389, 393, 417, 422, 424, 463, 501, 503, 511, 514], "convertnantorandom": 55, "const": [55, 56, 63, 64, 67, 68, 70, 82, 98], "consist": [55, 63, 422, 423, 490, 509, 512], "placehold": [56, 223, 266], "convertplaceholdertoconst": 56, "rerewrit": 57, "dequantizecastoptim": 57, "b16": 57, "dilat": 58, "contract": 58, "dilatedcontract": 58, "spacetobatchnd": 58, "batchtospacend": 58, "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 165, 178, 179, 180, 181, 182, 185, 186, 192, 193, 194, 195, 197, 199, 200, 202, 206, 209, 210, 227, 270, 290, 311, 312, 314, 319, 323, 340, 343, 401, 427, 447, 456, 459, 463, 484, 500, 503, 509, 512, 515], "inject": [59, 463], "dummi": [59, 185, 228, 229, 271, 272, 298, 351, 426, 447, 457, 462, 463, 485], "injectdummybiasaddoptim": 59, "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 423, 427, 456], "expanddim": 60, "expanddimsoptim": 60, "next": [60, 218, 261, 404, 424, 428, 429, 446, 503, 506, 512], "fetch": [61, 165, 169, 218, 261, 428, 447, 495, 496, 497], "reshap": [61, 67, 68, 73, 509], "fetchweightfromreshapeoptim": 61, "handl": [61, 148, 162, 170, 413, 423, 425, 446, 490, 509], "fold": [62, 63, 165, 166, 288, 456, 506, 509], "foldbatchnormnodesoptim": 62, "graphfoldconstantoptim": 63, "sequenc": [63, 105, 186, 189, 190, 209, 210, 225, 241, 242, 268, 282, 283, 292, 296, 321, 345, 349, 427, 447, 456, 501, 506, 511], "self": [63, 165, 166, 185, 209, 210, 362, 427, 428, 446, 447, 459, 462, 485, 508, 510, 512], "supported_op_typ": 63, "fusebiasaddandaddoptim": 64, "second": [64, 157, 186, 209, 210, 225, 268, 390, 417, 449, 463, 476, 480, 484, 495, 496, 506, 509, 512, 514], "columnwis": 65, "fusecolumnwisemuloptim": 65, "depthwiseconv2dn": [65, 71, 125, 135, 456], "math": [66, 504], "fuseconvwithmathoptim": 66, "elimin": [66, 489], "sub": [66, 165, 172, 185, 243, 424, 512], "realdiv": [66, 69], "decompos": [67, 68], "fusedecomposedbnoptim": 67, "input_graph_def": [67, 68, 70], "node_name_from_input": [67, 68, 70], "node_nam": [67, 68, 70, 148, 360, 370, 428], "strip": [67, 68, 70, 83, 84, 148, 510], "port": [67, 68, 70, 485, 491], "other": [67, 68, 70, 155, 162, 170, 224, 267, 296, 349, 360, 421, 422, 423, 428, 429, 449, 456, 459, 461, 463, 465, 486, 499, 501, 504, 509, 511, 512, 515], "underli": [67, 68, 70, 157], "node_from_map": [67, 68, 70], "node_map": [67, 68, 70], "pull": [67, 68, 70], "def": [67, 68, 70, 213, 214, 256, 257, 385, 404, 406, 423, 427, 446, 447, 450, 451, 452, 462, 463, 504, 509, 510, 512], "entri": [67, 68, 70, 152, 249, 289, 327, 417, 461], "index": [67, 68, 70, 105, 172, 205, 210, 218, 223, 227, 261, 266, 270, 305, 417, 447, 462, 484, 487, 509], "everi": [67, 68, 70, 187, 190, 192, 209, 210, 321, 323, 427, 446, 471, 476, 480, 506, 512], "identifi": [67, 68, 70, 157, 294, 347, 360, 490, 501], "want": [67, 68, 70, 185, 209, 210, 223, 225, 266, 268, 323, 390, 406, 423, 427, 446, 447, 452, 463, 471, 483, 484, 490, 499, 508, 510, 512], "nodedef": [67, 68, 70], "rais": [67, 68, 70, 105, 155, 157, 165, 182, 188, 195, 205, 294, 321, 322, 323, 347, 352, 404, 426, 485, 501, 502], "valueerror": [67, 68, 70, 165, 294, 347, 404, 455], "If": [67, 68, 70, 74, 157, 166, 172, 209, 210, 213, 214, 227, 242, 256, 257, 270, 283, 322, 352, 385, 404, 406, 422, 423, 428, 444, 446, 447, 452, 460, 461, 462, 463, 469, 477, 478, 481, 483, 488, 493, 499, 501, 504, 506, 508, 509, 510, 511, 512], "isn": [67, 68, 70], "t": [67, 68, 70, 143, 157, 171, 187, 209, 210, 242, 245, 283, 296, 349, 423, 427, 449, 450, 452, 463, 464, 484, 488, 501, 504, 506, 512, 514], "present": [67, 68, 70, 449, 490, 502, 509], "values_from_const": [67, 68, 70], "node_def": [67, 68, 70], "extract": [67, 68, 70, 148, 185, 227, 270, 342, 403, 447], "ha": [67, 68, 70, 74, 151, 157, 191, 192, 243, 291, 321, 323, 344, 404, 422, 424, 427, 428, 429, 446, 454, 459, 463, 464, 469, 483, 487, 488, 490, 493, 501, 503, 504, 505, 508, 509, 512], "access": [67, 68, 70, 206, 207, 210, 412, 417, 478, 481, 485], "valid_reshape_input": [67, 68], "reshape_in0_ndef": [67, 68], "reshape_in1_ndef": [67, 68], "ar": [67, 68, 105, 157, 165, 187, 192, 193, 194, 199, 200, 209, 210, 225, 242, 268, 283, 294, 298, 305, 321, 322, 323, 327, 329, 330, 347, 351, 386, 388, 389, 403, 404, 409, 416, 417, 421, 422, 423, 424, 427, 428, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 471, 474, 477, 483, 485, 486, 487, 488, 489, 490, 493, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514], "bypass_reshap": [67, 68], "input_node_map": [67, 68], "input_nam": [67, 68, 102, 142, 210, 287, 288, 454], "get_const_dim_count": [67, 68], "dimens": [67, 68, 105, 217, 242, 260, 283, 447, 450, 511], "instancenorm": [68, 509], "fusedecomposedinoptim": 68, "gelu": 69, "fusegeluoptim": 69, "sqrt": [69, 449], "erf": 69, "layernorm": [70, 509], "fuselayernormoptim": 70, "remap": [70, 157], "smaller": [70, 242, 283, 450, 463, 501, 511], "case": [70, 74, 157, 166, 172, 210, 224, 241, 242, 243, 267, 282, 283, 289, 313, 318, 326, 362, 429, 446, 450, 451, 452, 456, 458, 462, 467, 471, 483, 484, 485, 487, 493, 496, 497, 499, 501, 502, 504, 506, 507, 511, 513, 514, 515], "fusedbatcnormv3": 70, "And": [70, 423, 444, 463, 469, 509], "further": [70, 210, 421, 464, 465, 466, 468, 477, 483, 504], "restrict": [70, 157, 209, 210, 501, 508], "2d": [70, 509], "3d": [70, 502, 509], "kera": [70, 116, 185, 205, 210, 227, 234, 249, 270, 277, 355, 360, 428, 446, 452, 465, 473, 474, 507], "fusepadwithconv2doptim": 71, "excluded_op_nam": [71, 72, 206, 209, 210, 463, 501], "cfg": [71, 72, 165, 206, 340, 401, 409, 428, 429], "itex_qdq_mod": [71, 72], "conv3d": [71, 125], "fusepadwithfp32conv2doptim": 72, "fusetransposereshapeoptim": 73, "cse": [74, 98], "graphcseoptim": 74, "introduc": [74, 422, 427, 428, 429, 456, 463, 504, 506, 507, 509, 513], "ident": [74, 80, 186, 421, 450], "three": [74, 205, 225, 268, 329, 386, 388, 423, 427, 428, 445, 460, 464, 477, 490, 500, 504, 505, 508, 509, 510], "d": [74, 165, 450, 458, 484, 486, 491, 501, 515], "those": [74, 157, 333, 394, 417, 449, 450, 451, 458, 463, 464, 500, 501, 504, 512], "child": [74, 151, 158, 510], "b1": 74, "c1c2": 74, "d1": [74, 417], "c1": 74, "c2": 74, "memori": [74, 165, 289, 313, 318, 326, 362, 417, 445, 446, 451, 463, 464, 466, 499, 501, 504, 506, 509, 512, 515], "bound": [74, 172, 179, 242, 283, 294, 330, 347, 389, 462, 511], "like": [74, 96, 98, 148, 157, 185, 205, 210, 213, 214, 215, 227, 256, 257, 258, 270, 289, 298, 323, 326, 327, 351, 360, 385, 406, 422, 423, 424, 427, 428, 449, 450, 451, 459, 471, 486, 487, 500, 501, 504, 506, 507, 509, 512], "relu": [74, 78, 109, 423, 456, 509, 510], "relu6": [74, 456], "updat": [74, 158, 162, 165, 181, 187, 205, 323, 351, 385, 414, 455, 462, 463, 469, 474, 477, 492, 501, 506, 509, 512, 513], "graphdef": [74, 148, 360, 384, 465], "grappler": [75, 456], "grappleroptim": 75, "input_output_nam": 75, "opt_cfg": 75, "wrapper": [75, 102, 103, 104, 105, 122, 140, 150, 160, 164, 174, 182, 224, 242, 244, 245, 247, 248, 267, 283, 294, 298, 347, 351, 356, 360, 505], "leverag": [75, 424, 426, 450, 454, 466, 483, 500, 504, 506, 512], "built": [75, 196, 211, 212, 216, 221, 225, 226, 231, 233, 235, 236, 238, 239, 242, 247, 249, 254, 255, 259, 262, 264, 268, 269, 274, 276, 278, 279, 280, 281, 283, 327, 351, 354, 362, 385, 406, 424, 427, 447, 452, 463, 476, 480, 499, 504, 508, 511, 512, 514], "convert_add_to_biasadd": [76, 87, 111], "convert_layout": [76, 87, 111], "convert_leakyrelu": [76, 87, 111], "convert_nan_to_random": [76, 87, 111], "convert_placeholder_to_const": [76, 87, 111], "dequantize_cast_optim": [76, 87, 111], "dilated_contract": [76, 87, 111], "dummy_biasadd": [76, 87, 111], "expanddims_optim": [76, 87, 111], "fetch_weight_from_reshap": [76, 87, 111], "fold_batch_norm": [76, 87, 111], "fold_const": [76, 87, 111], "fuse_biasadd_add": [76, 87, 111], "fuse_column_wise_mul": [76, 87, 111], "fuse_conv_with_math": [76, 87, 111], "fuse_decomposed_bn": [76, 87, 111], "fuse_decomposed_in": [76, 87, 111], "fuse_gelu": [76, 87, 111], "fuse_layer_norm": [76, 87, 111], "fuse_pad_with_conv": [76, 87, 111], "fuse_pad_with_fp32_conv": [76, 87, 111], "fuse_reshape_transpos": [76, 87, 111], "graph_cse_optim": [76, 87, 111], "grappler_pass": [76, 87, 111], "insert_print_nod": [76, 87, 111], "move_squeeze_after_relu": [76, 87, 111], "pre_optim": [76, 87, 111], "remove_training_nod": [76, 87, 111], "rename_batch_norm": [76, 87, 111], "split_shared_input": [76, 87, 111], "strip_equivalent_nod": [76, 87, 111, 148], "strip_unused_nod": [76, 87, 111, 148], "switch_optim": [76, 87, 111], "insert": [77, 105, 107, 109, 113, 146, 162, 170, 423, 428, 446, 459, 463, 466, 501, 504, 505, 506, 509, 510], "print": [77, 151, 152, 185, 298, 351, 404, 417, 452, 462, 463, 485, 486, 501, 509, 512], "insertprintminmaxnod": 77, "pre_node_nam": 77, "post_node_nam": 77, "pass": [77, 148, 155, 157, 172, 351, 385, 417, 423, 427, 444, 447, 450, 451, 452, 458, 462, 463, 484, 490, 501, 503, 504, 505, 509, 514], "move": [78, 157, 423, 488, 503, 506, 507], "squeez": [78, 423], "movesqueezeafterreluoptim": 78, "match": [78, 102, 157, 185, 294, 295, 347, 348, 450, 484, 506], "pre": [79, 116, 158, 185, 213, 214, 225, 256, 257, 268, 352, 385, 406, 447, 450, 451, 463, 471, 487, 501, 502, 504, 506, 510, 512], "entranc": [79, 179, 216], "preoptim": 79, "removetrainingnodesoptim": 80, "protected_nod": 80, "types_to_splic": 80, "checknumer": 80, "stopgradi": 80, "renam": [81, 507], "fusedbatchnorm": 81, "fusedbatchnormv2": 81, "renamebatchnormoptim": 81, "splitsharedinputoptim": 82, "equival": [83, 164, 506, 509], "stripequivalentnodesoptim": 83, "output_node_nam": [83, 84, 131, 132, 136, 148], "same": [83, 141, 148, 166, 199, 210, 225, 242, 268, 283, 294, 347, 417, 427, 429, 444, 446, 447, 450, 452, 456, 463, 467, 471, 476, 480, 501, 503, 504, 506, 509, 510, 511, 512], "unus": [84, 148], "stripunusednodesoptim": 84, "input_node_nam": [84, 131, 136, 148], "switch": [85, 466, 510], "switchoptim": 85, "condit": [85, 225, 226, 227, 242, 268, 269, 270, 283, 329, 386, 388, 447, 461, 511, 512], "graphrewriterbas": 86, "abstract": [86, 173, 179, 242, 283, 284, 289, 326, 427, 429, 458], "freeze_fake_qu": [87, 95, 111], "freeze_valu": [87, 95, 111], "freeze_value_without_calib": [87, 95, 111], "fuse_conv_redundant_dequant": [87, 95, 111], "fuse_conv_requant": [87, 95, 111], "fuse_matmul_redundant_dequant": [87, 95, 111], "fuse_matmul_requant": [87, 95, 111], "meta_op_optim": [87, 95, 111], "post_hostconst_convert": [87, 95, 111], "post_quantized_op_cs": [87, 95, 111], "rnn_convert": [87, 95, 111], "scale_propag": [87, 95, 111], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111], "merge_duplicated_qdq": [87, 106, 111], "share_qdq_y_pattern": [87, 106, 111], "freez": [88, 89, 90, 466, 501], "fakequ": 88, "freezefakequantopoptim": 88, "follow": [88, 110, 186, 227, 270, 291, 294, 344, 347, 421, 422, 423, 424, 427, 428, 429, 446, 447, 450, 451, 452, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 476, 480, 485, 487, 490, 495, 500, 501, 503, 504, 506, 509, 510, 512], "freezevaluetransform": 89, "max_min_data": [89, 90], "postfix": [89, 90], "tensor_data": [89, 417, 418], "th": [89, 90], "gpu": [89, 90, 97, 157, 209, 210, 426, 444, 459, 463, 464, 468, 474, 483, 503, 504], "freezevaluewithoutcalibtransform": 90, "95": [90, 298, 351, 462, 509, 515], "quantizedconv": [91, 92], "quantizeddeconv": 91, "redund": [91, 93], "fuseconvredundantdequantizetransform": 91, "cpu": [91, 92, 93, 94, 156, 157, 209, 210, 417, 426, 428, 444, 445, 459, 463, 464, 466, 468, 474, 483, 490, 502, 503, 504, 505, 506, 510], "_quantizedconv": 91, "_quantizeddeconv": 91, "successor": [91, 92, 93, 94], "requant": [92, 94, 510], "fuseconvrequantizetransform": 92, "quantizedmatmul": [93, 94], "fusematmulredundantdequantizetransform": 93, "_quantizedmatmul": [93, 94], "fusematmulrequantizedequantizetransform": 94, "quantizedmatmulwithbiasanddequant": 94, "fusematmulrequantizetransform": 94, "fusematmulrequantizedequantizenewapitransform": 94, "fusematmulrequantizenewapitransform": 94, "newapi": 94, "meta": [96, 502, 515], "metainfochangingmemopoptim": 96, "metaop": 96, "With": [96, 362, 423, 427, 429, 446, 463, 471, 476, 480, 484, 489, 499, 501, 502, 508, 509, 512, 515], "better": [96, 209, 210, 213, 214, 256, 257, 305, 352, 385, 406, 451, 462, 464, 501, 502, 504, 506, 508, 512], "perform": [96, 140, 172, 202, 209, 210, 225, 237, 238, 243, 268, 280, 289, 313, 318, 326, 333, 351, 362, 385, 390, 394, 423, 424, 427, 428, 444, 447, 448, 449, 451, 453, 454, 459, 460, 462, 463, 464, 465, 466, 468, 472, 474, 477, 483, 488, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 512, 514, 515], "hostconst": 97, "posthostconstconvert": 97, "just": [97, 215, 240, 242, 245, 247, 248, 250, 258, 283, 362, 424, 463, 473, 477, 483, 490, 500, 504, 509, 511, 512], "postcseoptim": 98, "duplic": [98, 108, 330, 389], "quantizev2": 98, "decreas": [98, 487, 501], "size": [98, 166, 189, 190, 217, 218, 224, 227, 233, 238, 242, 260, 261, 267, 270, 276, 280, 283, 321, 362, 417, 421, 428, 446, 447, 452, 455, 463, 483, 484, 499, 501, 506, 509, 511, 514, 515], "rnn": 99, "quantizedrnnconvert": 99, "calibration_data": [99, 107], "rnn_detail": 99, "scalepropagationtransform": 100, "direct": [100, 191, 321, 501], "export": [101, 210, 290, 294, 343, 347, 426, 457, 469, 484, 486, 510, 513], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 210, 287, 288, 454], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 166], "onnxopschema": 104, "domain": [104, 105, 209, 210, 501, 512], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 193, 194, 199, 200, 289, 294, 326, 347, 360, 379, 384, 421, 423, 429, 445, 464, 476, 480, 483, 490, 501, 502, 509, 512], "get_max_supported_opset_vers": 104, "packag": [104, 427, 455, 460, 483, 484, 502, 507, 512], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 490, 491, 495, 496, 497, 512], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 165, 225, 226, 238, 242, 268, 269, 280, 283, 368, 369, 373, 428, 429, 511], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 185], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 157, 230, 242, 273, 283, 322, 447, 505, 508], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 210, 287, 288, 454], "input_shap": [105, 229, 272, 447], "input_dtyp": 105, "sometim": [105, 423, 449, 504], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 201, 241, 242, 282, 283, 291, 296, 324, 344, 349, 454, 461, 472, 493, 496, 497, 501, 502, 506, 509, 511, 515], "datatyp": [105, 165, 505, 512, 515], "save_protobuf": 105, "path": [105, 148, 158, 162, 165, 185, 201, 205, 206, 225, 226, 227, 242, 268, 269, 270, 283, 284, 287, 288, 289, 300, 301, 302, 304, 313, 318, 322, 324, 326, 327, 340, 352, 360, 384, 385, 401, 414, 417, 423, 424, 427, 447, 449, 452, 458, 462, 463, 464, 465, 469, 472, 483, 486, 487, 490, 495, 496, 497, 500, 506, 511, 514], "as_text": 105, "save": [105, 156, 157, 182, 205, 209, 210, 227, 270, 287, 288, 327, 360, 385, 406, 407, 412, 417, 423, 427, 458, 463, 464, 465, 467, 471, 476, 480, 486, 490, 495, 496, 497, 500, 504, 506, 509], "protobuf": [105, 486], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 484], "dest": 105, "equal": [105, 143, 148, 171, 404, 417, 501, 506], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 157, 227, 270, 298, 351, 428, 453, 457, 459, 462, 474, 483, 488, 492, 501, 503, 509, 512], "df": 105, "initialize_name_count": 105, "conflict": [105, 455], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 242, 283, 511], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 157, 187, 209, 210, 450, 453, 457, 466, 471, 501, 506, 507, 509, 512], "const_node_valu": 105, "graph_output": 105, "constant": [105, 288, 290, 330, 332, 338, 343, 389, 393, 399, 410, 446, 456, 486, 511], "tf": [105, 116, 148, 185, 205, 224, 225, 226, 227, 242, 267, 268, 269, 270, 283, 358, 360, 452, 465, 502, 505, 507, 511], "generategraphwithqdqpattern": 107, "op_wise_config": [107, 131, 136, 428], "quantized_nod": 107, "dq": [107, 109, 131, 509], "pair": [107, 209, 210, 428, 446, 463, 464, 507], "befor": [107, 109, 151, 170, 178, 187, 192, 194, 199, 201, 203, 209, 210, 225, 268, 321, 323, 325, 422, 429, 446, 447, 450, 451, 452, 455, 456, 460, 463, 478, 481, 487, 504, 506, 508, 510, 512], "merg": [108, 217, 260, 340, 401, 478, 481, 510, 512], "mergeduplicatedqdqoptim": 108, "y": [109, 209, 210, 242, 283, 330, 389, 449, 455, 469, 509, 511], "shareqdqforitexypatternoptim": 109, "break": [109, 452, 463], "graphanalyz": 110, "extend_engin": 110, "analyz": [110, 185, 360, 508, 509, 510], "under": [110, 209, 210, 227, 270, 416, 424, 447, 461, 462, 463, 466, 471, 472, 483, 490, 500, 501, 506, 509, 510, 512], "singleton": [110, 417], "specifi": [110, 157, 165, 172, 205, 209, 210, 213, 214, 242, 243, 256, 257, 283, 289, 294, 298, 300, 301, 304, 313, 318, 326, 327, 347, 351, 352, 385, 404, 406, 416, 417, 428, 429, 452, 456, 462, 463, 471, 485, 490, 494, 495, 496, 497, 499, 501, 503, 511, 512, 514], "graphrewriterhelp": 110, "encapsul": [110, 213, 214, 256, 257, 352, 385, 406, 465], "quantize_lay": [111, 112, 114], "fake_quant": [111, 112, 114], "quantize_config": [111, 112, 114, 428], "quantize_help": [111, 112, 114], "quantize_wrapp": [111, 112, 114], "fuse_qdq_bn": [111, 112, 130], "fuse_qdq_concatv2": [111, 112, 130], "fuse_qdq_conv": [111, 112, 130], "fuse_qdq_deconv": [111, 112, 130], "fuse_qdq_in": [111, 112, 130], "fuse_qdq_matmul": [111, 112, 130], "fuse_qdq_pool": [111, 112, 130], "optimize_qdq": [111, 112, 130], "optimize_lay": [112, 114, 117], "quantize_layer_add": [112, 114, 117], "quantize_layer_bas": [112, 114, 117], "quantize_layer_bn": [112, 114, 117], "fakequantizebas": 113, "abc": [113, 296, 349, 427, 510, 512], "fakequant": 113, "per_channel": [113, 428, 429, 456, 504, 514], "8": [113, 157, 166, 209, 210, 241, 282, 423, 428, 445, 456, 460, 489, 490, 501, 502, 506, 509, 512, 515], "channel_axi": [113, 168, 171], "symmetr": [113, 429, 504, 506, 511, 512], "narrow_rang": 113, "quantizeconfig": [115, 116], "custom": [115, 155, 165, 166, 172, 210, 327, 351, 362, 416, 444, 450, 451, 466, 488, 489, 490, 494, 496, 497, 501, 502, 506, 508], "There": [115, 327, 329, 386, 388, 449, 450, 456, 459, 463, 466, 487, 489, 490, 506, 509, 512, 514], "instanc": [115, 116, 172, 209, 210, 213, 214, 243, 256, 257, 295, 296, 298, 301, 304, 307, 308, 310, 311, 312, 330, 342, 348, 349, 351, 352, 385, 389, 403, 406, 414, 417, 421, 423, 427, 444, 463, 468, 474, 506, 512, 514, 515], "global": [115, 187, 209, 210, 307, 308, 310, 311, 312, 321, 403, 417, 423, 463, 501, 503, 512], "class": [116, 155, 165, 182, 188, 195, 305, 352, 385, 423, 424, 428, 446, 447, 450, 462, 463, 474, 499, 500, 504, 507, 510, 512, 514], "init_quantize_config": 116, "quantize_recip": 116, "begin": [116, 193, 194, 199, 323, 446, 450, 451, 463, 501, 512], "process": [116, 140, 152, 172, 187, 192, 193, 194, 201, 203, 205, 209, 210, 213, 214, 225, 226, 227, 238, 242, 243, 256, 257, 268, 269, 270, 280, 283, 321, 323, 325, 329, 330, 352, 385, 386, 388, 389, 406, 416, 417, 424, 427, 428, 429, 445, 446, 447, 450, 451, 452, 454, 463, 467, 487, 489, 490, 492, 500, 501, 504, 509, 510, 511, 514], "model_nam": [116, 209, 210], "special": [116, 157, 185, 362, 423, 446, 462, 463, 499, 501, 513], "decid": [116, 209, 210, 292, 323, 345, 427, 428, 463, 504, 507, 512], "qat_clone_funct": 116, "leav": [116, 477], "quantizewrapp": [116, 122], "wrapped_lay": 116, "config_quantizable_lay": 118, "quantizelayeradd": 119, "quantizelay": 120, "quantizelayerbas": 120, "quantizelayerbatchnorm": 121, "quantizewrapperbas": 122, "fusedbatchnormv3": [123, 133], "fusenodestartwithfusedbatchnormv3": [123, 133], "_quantizedfusedbatchnorm": 123, "concatv2": [124, 134, 147, 456], "fusenodestartwithconcatv2": [124, 134], "quantizedconcatv2": [124, 134], "fusenodestartwithconv2d": [125, 135], "conv2dbackpropinput": 126, "conv3dbackpropinputv2": 126, "fusenodestartwithdeconv2d": 126, "fusedinstancenorm": 127, "fusenodestartwithfusedinstancenorm": 127, "batchmatmul": 128, "batchmatmulv2": 128, "fusenodestartwithmatmul": [128, 137], "avgpool": [129, 138, 456], "fusenodestartwithpool": [129, 138], "optimizeqdqgraph": 131, "input_graph": [131, 136, 143, 380, 384, 427], "op_wise_sequ": [131, 136], "quantizegraph": 132, "quantizegraphbas": 132, "quantizenodebas": 132, "quantizegraphforintel": 136, "common": [139, 155, 157, 178, 210, 240, 290, 300, 304, 305, 306, 343, 409, 421, 447, 451, 452, 454, 458, 460, 463, 504, 509], "herlper": 139, "quantizegraphhelp": 139, "sever": [139, 203, 242, 283, 325, 327, 424, 449, 450, 451, 459, 463, 464, 476, 480, 490, 501, 503, 509, 511, 512, 514], "staticmethod": 139, "function": [139, 155, 193, 194, 199, 209, 210, 213, 214, 226, 256, 257, 269, 301, 304, 313, 318, 423, 424, 427, 428, 429, 444, 446, 450, 451, 454, 458, 459, 460, 462, 463, 464, 474, 484, 489, 490, 501, 504, 506, 507, 508, 509, 510, 512, 513], "smoothquantcalibr": 140, "dataset": [140, 141, 165, 201, 213, 214, 215, 217, 218, 222, 223, 224, 236, 245, 256, 257, 258, 260, 261, 265, 266, 267, 279, 290, 294, 295, 296, 298, 327, 343, 347, 348, 349, 351, 352, 385, 406, 409, 424, 426, 427, 428, 446, 452, 457, 462, 463, 471, 485, 486, 495, 501, 504, 506, 507, 509, 512, 514, 515], "outlier": [140, 428, 445, 449, 487, 506, 509], "ignor": [140, 417, 445, 447, 506, 509, 512], "smoothquantscal": 141, "alpha": [141, 156, 160, 170, 181, 202, 504, 512], "scales_per_op": 141, "individu": [141, 187, 321, 379, 384, 421, 490, 501, 509], "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 287], "default_opset_vers": 142, "bia": [143, 209, 210, 506, 510], "correct": [143, 171, 205, 209, 210, 294, 295, 296, 298, 322, 347, 348, 349, 351, 421, 466], "biascorrect": 143, "fp32_graph": 143, "weight_empir": 143, "Will": [143, 450, 459], "our": [143, 162, 165, 209, 210, 424, 426, 454, 463, 484, 485, 487, 508, 513], "task": [143, 225, 232, 268, 275, 298, 351, 447, 450, 451, 454, 459, 462, 463, 486, 489, 492, 501, 506, 509, 515], "close": [143, 171, 445, 491], "w_int8": [143, 171], "u": [143, 171, 466, 485, 489], "w_fp32": [143, 171], "varianc": [143, 171, 449], "differ": [143, 167, 171, 174, 178, 196, 209, 210, 218, 227, 242, 244, 261, 270, 283, 289, 298, 304, 306, 315, 326, 351, 362, 411, 421, 423, 424, 428, 446, 447, 449, 450, 452, 453, 458, 459, 462, 463, 465, 476, 480, 485, 487, 490, 499, 501, 504, 509, 510, 511, 512], "wise": [143, 154, 156, 158, 166, 171, 209, 210, 330, 333, 389, 390, 394, 428, 459, 487, 501, 506, 510, 512, 514], "minim": [143, 171, 330, 389, 428, 429, 445, 450, 453, 462, 463, 476, 480, 501, 504, 512], "scale_c": [143, 171], "shift": [143, 171, 238, 280, 484, 511], "notic": [143, 171, 243, 461, 464, 486, 507], "first": [143, 157, 165, 171, 186, 207, 209, 210, 225, 268, 294, 340, 347, 390, 401, 417, 423, 424, 427, 428, 429, 447, 449, 460, 464, 468, 477, 478, 481, 484, 486, 487, 503, 504, 505, 506, 508, 509, 510, 512, 514], "empir": [143, 171], "solut": [143, 171, 426, 427, 428, 455, 468, 472, 477, 502, 506, 507, 509, 512, 513], "don": [143, 171, 187, 209, 210, 423, 488, 501, 512], "min": [143, 166, 171, 179, 210, 417, 449, 486, 487, 501, 504, 506, 509, 511, 512], "graphtransform": 144, "graphtransformbas": 144, "input_pb": [144, 146, 147], "log": [146, 172, 185, 368, 369, 373, 413, 423, 474, 495, 496, 497, 508, 510, 512], "insertlog": 146, "node_name_list": 146, "show_nam": 146, "show_op": 146, "first_n": 146, "summar": [146, 450], "1024": [146, 227, 270, 469], "dump_fp32": 146, "rerang": 147, "rerangequantizedconcat": 147, "rerange_quant": 147, "version1_lt_version2": [148, 417], "version1": [148, 417], "version2": [148, 417], "version1_gt_version2": [148, 417], "greater": [148, 417, 495, 501, 512], "version1_eq_version2": [148, 417], "version1_gte_version2": [148, 417], "version1_lte_version2": [148, 417], "disable_random": 148, "seed": [148, 178, 209, 210, 306, 417, 463, 514], "disabl": [148, 209, 210, 421, 483, 487, 505], "read_graph": 148, "in_graph": 148, "in_graph_is_binari": 148, "write_graph": 148, "out_graph_def": 148, "out_graph_fil": 148, "write": [148, 234, 277, 417, 452, 458, 463, 466, 510], "is_ckpt_format": 148, "model_path": [148, 449, 495], "ckpt": [148, 352, 360, 385, 515], "folder": [148, 227, 232, 270, 275, 352, 385, 416, 447, 471, 476, 480, 488, 495, 496, 497, 506, 510], "is_saved_model_format": 148, "saved_model": [148, 300], "get_estimator_graph": 148, "estim": [148, 298, 351, 360, 512], "input_fn": [148, 360], "get_tensor_by_nam": 148, "try_cnt": 148, "import": [148, 172, 179, 209, 210, 300, 352, 362, 385, 404, 406, 417, 423, 424, 426, 429, 444, 446, 447, 449, 450, 451, 452, 454, 457, 462, 463, 464, 465, 466, 470, 472, 485, 486, 493, 499, 500, 501, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513], "scope": [148, 428, 463], "onc": [148, 157, 203, 249, 325, 329, 386, 388, 428, 429, 446, 483, 488, 501, 502, 512, 515], "both": [148, 210, 421, 424, 427, 451, 463, 467, 486, 487, 489, 501, 503, 504, 506, 509, 512], "compat": [148, 360, 452, 465, 478, 481, 483, 501, 507], "v1": [148, 237, 238, 280, 295, 296, 298, 348, 349, 351, 360, 452, 454, 455, 462, 465, 501, 507, 508, 515], "suffix": 148, "time": [148, 157, 209, 210, 242, 283, 298, 330, 351, 362, 389, 417, 428, 446, 449, 452, 455, 463, 471, 473, 476, 480, 483, 484, 488, 491, 495, 496, 499, 501, 502, 504, 506, 508, 510, 511, 512], "got": [148, 428, 455, 510], "iterator_sess_run": 148, "sess": [148, 360], "iter_op": 148, "feed_dict": [148, 224, 267], "output_tensor": [148, 360], "measur": [148, 243, 352, 411, 424, 427, 444, 449, 450, 462, 463, 506, 510, 512, 515], "integr": [148, 174, 244, 427, 463, 484, 485, 489, 506], "makeiter": 148, "feed": [148, 224, 267, 450, 501], "end": [148, 192, 193, 194, 199, 209, 210, 225, 241, 242, 268, 282, 283, 323, 329, 386, 388, 427, 428, 429, 450, 451, 456, 460, 463, 477, 492, 499, 501, 510, 511, 512], "predict": [148, 242, 247, 283, 291, 295, 296, 298, 344, 348, 349, 351, 385, 424, 450, 462, 474, 506, 509, 510, 511], "pred": [148, 298, 351, 462], "collate_tf_pr": 148, "collat": [148, 165], "get_input_output_node_nam": 148, "fix_ref_type_of_graph_def": 148, "fix": [148, 197, 199, 225, 268, 323, 422, 446, 447, 470, 501, 506, 509, 512], "strip_unused_lib": 148, "offici": [148, 291, 295, 296, 344, 348, 349, 421, 509], "r1": 148, "15": [148, 456, 460, 496], "branch": 148, "get_graph_def": 148, "auto_input_output": 148, "get_model_input_shap": 148, "get_tensor_val_from_graph_nod": 148, "graph_node_name_map": 148, "kei": [148, 152, 157, 158, 162, 185, 196, 205, 207, 209, 210, 305, 322, 360, 404, 407, 409, 417, 426, 428, 485, 486, 491, 502, 506, 510, 512], "val": [148, 205, 227, 230, 270, 273, 322, 449, 463, 487], "tensor_v": 148, "int8_node_name_revers": 148, "revers": [148, 486], "tf_diagnosis_help": 148, "fp32_model": [148, 152, 165, 288, 417, 427], "quan_model": 148, "save_path": [148, 287, 288, 427, 465], "diagnosi": [148, 209, 210, 463, 486, 487, 502, 507, 513], "generate_feed_dict": 148, "input_tensor": [148, 360], "get_weight_from_input_tensor": 148, "input_tensor_nam": [148, 360], "associ": [148, 157, 294, 347], "search": [148, 151, 166, 178, 179, 185, 199, 206, 210, 213, 214, 256, 257, 289, 291, 301, 304, 305, 306, 326, 330, 344, 389, 426, 459, 462, 466, 467, 477, 501, 502, 506, 510, 512, 513], "look": [148, 196, 427, 429, 456, 462, 485, 486, 487, 514], "sq_weight_tensor": 148, "sq_weights_nod": 148, "two": [148, 152, 157, 172, 186, 191, 198, 203, 227, 232, 243, 270, 275, 294, 321, 325, 327, 334, 347, 395, 417, 423, 424, 446, 447, 450, 452, 454, 456, 463, 464, 489, 490, 492, 501, 504, 505, 506, 508, 512, 514], "actawareweightqu": 149, "example_input": [149, 159, 162, 164, 165, 166, 209, 210, 288, 454], "calib_func": [149, 165, 166, 385, 505], "data_typ": [149, 166, 342, 403], "enable_full_rang": [149, 166, 506], "algo": [149, 409], "torch": [150, 151, 152, 153, 154, 157, 158, 160, 161, 162, 163, 165, 166, 170, 182, 185, 186, 188, 196, 206, 209, 210, 288, 352, 385, 416, 423, 426, 429, 430, 450, 452, 454, 463, 464, 465, 466, 471, 474, 486, 504, 506, 509, 510], "bf16modulewrapp": 150, "bf16modul": 150, "mix": [150, 159, 209, 210, 328, 340, 352, 387, 401, 426, 427, 434, 459, 466, 472, 473, 474, 513], "precis": [150, 159, 209, 210, 213, 214, 256, 257, 289, 296, 298, 299, 326, 328, 340, 349, 351, 352, 362, 387, 390, 401, 417, 426, 427, 428, 434, 444, 445, 451, 452, 456, 459, 466, 472, 473, 474, 502, 503, 504, 506, 509, 512, 513], "mixed_precision_model": 150, "bf16_symbolic_trac": 150, "fx_sub_module_list": 150, "trace": [150, 152, 163, 165, 185, 209, 210, 288, 392, 423, 473, 512], "_description_": 150, "is_leaf": 151, "judg": 151, "nn": [151, 158, 160, 162, 165, 166, 185, 186, 196, 209, 210, 288, 352, 385, 416, 423, 450, 463, 465, 506, 509, 510], "trace_gptq_target_block": 151, "module_typ": 151, "modulelist": 151, "stack": 151, "structur": [151, 186, 197, 198, 209, 210, 323, 341, 402, 459, 482, 484, 495, 501, 502, 504, 510, 513, 515], "critic": [151, 196, 421], "llm": [151, 200, 426, 501, 502, 506, 509], "gptq_related_block": 151, "embed": [151, 165, 445, 501], "transformers_pr": 151, "todo": [151, 225, 228, 268, 271, 294, 340, 347, 401], "transformers_nam": 151, "find_lay": 151, "conv1d": [151, 429], "find_layers_nam": 151, "log_quantizable_layers_per_transform": 151, "transformer_block": 151, "maxq": 151, "gptquantiz": 151, "nsampl": [151, 166, 506], "use_max_length": [151, 166], "pad_max_length": [151, 166], "compress": [151, 290, 313, 318, 343, 362, 406, 419, 426, 434, 450, 459, 463, 483, 485, 499, 500, 501, 502, 504, 509, 513, 515], "pretrain": [151, 412, 466, 472], "url": [151, 227, 270, 461, 493, 494, 501], "arxiv": [151, 181, 199, 200, 323, 426, 445, 501, 502, 506, 509], "org": [151, 181, 199, 200, 294, 323, 347, 422, 423, 449, 460, 478, 481, 501], "2210": [151, 506], "17323": [151, 506], "node_collector": 152, "hook": [152, 173, 196, 251, 252, 313, 318, 409, 450, 451, 463, 501, 509, 510], "record": [152, 165, 174, 225, 226, 227, 233, 244, 251, 268, 269, 270, 276, 417, 447, 487, 508, 510, 512], "hessiantrac": 152, "q_model": [152, 156, 210, 300, 385, 423, 426, 446, 447, 449, 452, 454, 457, 458, 462, 463, 465, 485, 486, 504, 505, 506], "criterion": [152, 173, 175, 180, 181, 187, 192, 193, 194, 196, 199, 200, 204, 209, 210, 246, 249, 290, 343, 450, 451, 463, 501, 504, 512, 514], "yao": 152, "zhewei": 152, "et": [152, 445, 506, 509], "al": [152, 445, 506, 509], "pyhessian": 152, "network": [152, 181, 187, 188, 323, 392, 424, 445, 450, 451, 454, 463, 485, 502, 504, 509, 512], "through": [152, 213, 214, 256, 257, 351, 352, 385, 426, 444, 456, 458, 459, 462, 469, 489, 499, 500, 501, 503, 504, 509], "len": [152, 210, 242, 283, 447, 452, 511], "2020": 152, "ieee": [152, 464, 509], "intern": [152, 223, 266, 340, 401, 446, 447, 462, 501], "confer": [152, 501, 509], "big": [152, 449, 506], "dong": 152, "zhen": 152, "hawq": [152, 392, 512], "v2": [152, 392, 446, 452, 454, 455, 460, 472, 507, 512, 513, 515], "advanc": [152, 209, 210, 421, 426, 428, 434, 501, 504, 514], "system": [152, 157, 172, 243, 417, 444, 469, 501, 515], "33": [152, 515], "18518": 152, "18529": 152, "openvinotoolkit": 152, "nncf": 152, "develop": [152, 362, 422, 423, 460, 463, 464, 466, 472, 483, 488, 501, 502, 505, 508], "hessian_trac": 152, "compare_weight": 152, "float_dict": 152, "ani": [152, 157, 294, 296, 339, 347, 349, 379, 384, 400, 404, 414, 417, 421, 422, 426, 429, 452, 466, 471, 484, 485, 488, 489, 501, 508, 512], "quantized_dict": 152, "compar": [152, 298, 351, 417, 451, 462, 486, 501, 504, 506, 508, 509, 510, 512], "being": [152, 294, 347, 429, 490], "wt_compare_dict": 152, "float_model": 152, "state_dict": [152, 452, 506, 510], "qmodel": 152, "compute_error": 152, "state": [152, 186, 429, 469, 501], "weight_dict": 152, "hawq_top": 152, "enable_act": 152, "modul": [153, 154, 182, 188, 195, 303, 309, 319, 320, 423, 446, 450, 459, 462, 463, 465, 501, 503, 505, 506, 510, 513], "portabl": 155, "serial": [155, 157], "see": [155, 242, 283, 291, 344, 421, 423, 425, 461, 463, 476, 477, 480, 483, 484, 487, 488, 506, 509, 510, 512], "copyreg": 155, "mechan": [155, 181, 501, 508, 513], "pickler": 155, "pickletool": 155, "comment": [155, 421, 428, 447, 462, 463, 506, 511], "unpickl": [155, 157], "load": [155, 157, 158, 225, 241, 242, 268, 282, 283, 352, 360, 385, 416, 417, 428, 446, 476, 480, 484, 486, 503, 504, 509], "misc": [155, 461], "format_vers": 155, "compatible_format": 155, "except": [155, 157, 404, 417, 488, 504], "pickleerror": 155, "pickl": [155, 157], "picklingerror": 155, "unpicklingerror": 155, "problem": [155, 225, 268, 298, 351, 462, 464, 484], "secur": [155, 426, 485, 502, 516], "violat": 155, "also": [155, 186, 224, 227, 242, 267, 270, 283, 291, 344, 351, 362, 385, 422, 424, 427, 428, 429, 446, 449, 453, 457, 459, 462, 463, 466, 471, 476, 477, 480, 483, 484, 485, 487, 488, 499, 501, 502, 504, 505, 506, 509, 512], "includ": [155, 174, 181, 185, 187, 202, 204, 209, 210, 225, 227, 234, 242, 244, 268, 270, 277, 283, 289, 299, 321, 326, 404, 417, 421, 422, 427, 428, 429, 446, 447, 449, 460, 461, 462, 463, 466, 469, 472, 477, 488, 492, 495, 496, 497, 501, 504, 505, 506, 510, 512], "necessarili": 155, "limit": [155, 179, 330, 389, 417, 426, 449, 450, 506, 507, 510], "attributeerror": [155, 404], "eoferror": 155, "importerror": [155, 455], "indexerror": 155, "layerwisequ": 156, "pretrained_model_name_or_path": [156, 158], "op_cfg": 156, "output_dir": [156, 412, 463, 471, 472, 487, 493, 496, 497], "order": [156, 165, 291, 292, 327, 330, 333, 342, 344, 345, 389, 394, 403, 423, 449, 462, 486, 503, 506, 509, 510, 512], "memomeri": 156, "f": [157, 182, 450, 452, 504, 506, 509], "file_lik": 157, "map_loc": 157, "pickle_modul": [157, 182], "weights_onli": 157, "pickle_load_arg": 157, "facil": 157, "treat": [157, 446], "storag": [157, 426, 457, 462, 485, 487, 506, 509], "thei": [157, 243, 404, 421, 450, 456, 463, 471, 486, 488, 499], "deseri": 157, "were": [157, 298, 351, 469, 501], "fail": [157, 423, 446, 454, 491], "e": [157, 187, 209, 210, 421, 450, 453, 457, 466, 471, 472, 476, 480, 501, 506, 509, 512], "becaus": [157, 191, 196, 242, 283, 321, 423, 487, 504, 509, 511, 512], "doesn": [157, 242, 283, 427, 452, 463, 464, 484, 514], "certain": [157, 507, 508], "howev": [157, 488, 501, 506, 509], "dynam": [157, 210, 215, 258, 288, 340, 401, 427, 446, 450, 454, 459, 463, 466, 471, 472, 473, 474, 477, 483, 502, 512, 515], "altern": [157, 209, 210, 385], "argument": [157, 210, 404, 424, 449, 487, 490, 493, 495, 496, 497, 506], "callabl": [157, 209, 210, 296, 349, 406, 446], "locat": [157, 167, 205, 242, 283, 452, 469, 476, 480, 483, 490, 504, 507, 511, 514], "resid": 157, "tag": [157, 360, 509, 510], "wa": [157, 209, 210, 427, 463, 487, 488, 491, 502, 512], "builtin": [157, 452], "cuda": [157, 205, 464, 466, 468, 501, 504], "device_id": 157, "either": [157, 210, 294, 347, 467, 471, 490, 500, 503, 504], "final": [157, 185, 192, 205, 323, 428, 463, 469, 499, 501, 504, 507, 512], "alreadi": [157, 172, 227, 241, 243, 270, 282, 427, 447, 459, 478, 481, 485, 493, 512], "right": [157, 238, 280, 294, 347, 421, 423, 483, 488, 509, 511], "otherwis": [157, 227, 242, 270, 283, 417, 421, 428, 447, 478, 481, 503, 506, 511], "fall": [157, 165], "back": [157, 165, 242, 248, 283, 449, 483, 488], "behavior": [157, 421, 422, 427, 428, 429, 456, 465, 510, 512, 514], "wasn": 157, "indic": [157, 173, 209, 210, 218, 223, 225, 261, 266, 268, 284, 294, 305, 347, 423, 446, 455, 486, 490, 510], "appear": [157, 421, 477, 483, 485], "ones": [157, 294, 347, 501], "put": [157, 227, 270, 447, 450], "user": [157, 172, 185, 197, 205, 209, 210, 213, 214, 227, 230, 234, 242, 243, 249, 256, 257, 270, 273, 277, 283, 289, 313, 318, 324, 326, 327, 351, 352, 362, 385, 390, 403, 406, 417, 423, 424, 426, 427, 428, 429, 434, 444, 446, 450, 451, 454, 456, 459, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 477, 483, 489, 490, 491, 492, 495, 496, 497, 499, 500, 501, 502, 504, 505, 507, 509, 510, 511, 512, 516], "register_packag": 157, "readlin": 157, "tell": [157, 351, 385, 503], "seek": 157, "o": [157, 404, 460, 468, 486, 509], "pathlik": 157, "metadata": 157, "primit": 157, "keyword": [157, 210], "unless": [157, 456], "implicitli": 157, "known": [157, 245, 330, 389, 463, 501, 510, 512], "insecur": [157, 485], "possibl": [157, 243, 449, 485, 500, 501, 505, 512], "construct": [157, 225, 228, 229, 232, 240, 245, 247, 248, 250, 268, 271, 272, 275, 351, 356, 360, 403, 409, 421, 428, 429, 447, 452, 501, 512], "malici": 157, "arbitrari": [157, 463, 500], "code": [157, 185, 213, 214, 243, 256, 257, 300, 324, 327, 385, 406, 423, 426, 427, 428, 429, 447, 450, 451, 452, 458, 459, 461, 462, 466, 468, 470, 471, 472, 474, 477, 483, 487, 489, 490, 491, 499, 500, 501, 502, 503, 504, 508, 509, 510, 511], "never": [157, 512], "could": [157, 162, 170, 187, 213, 214, 227, 256, 257, 270, 327, 352, 385, 406, 421, 423, 451, 463, 500, 501, 504, 506, 507, 509, 513], "come": [157, 512], "untrust": 157, "unsaf": 157, "tamper": 157, "trust": [157, 449, 485], "load_state_dict": 157, "ram": 157, "surg": 157, "checkpoint": [157, 360, 416, 465], "By": [157, 185, 209, 210, 291, 344, 428, 429, 462, 465, 476, 477, 480, 501, 502, 506, 512], "decod": [157, 237, 238, 280, 291, 344, 462, 511], "byte": 157, "utf": [157, 241, 282], "unicodedecodeerror": 157, "ascii": 157, "codec": 157, "0x": 157, "incorrect": 157, "extra": [157, 296, 349, 463], "encod": [157, 294, 347, 486, 511], "latin1": 157, "them": [157, 185, 225, 268, 423, 429, 446, 449, 454, 456, 458, 486, 488, 500, 501, 506, 512], "keep": [157, 196, 205, 322, 390, 423, 427, 482, 483, 507], "later": [157, 162, 170, 489, 490, 510], "byte_arrai": 157, "xdoctest": 157, "skip": [157, 510, 512], "undefin": [157, 205, 322], "filepath": [157, 417], "pt": [157, 416, 465, 502, 504, 505, 506], "onto": 157, "lambda": 157, "loc": 157, "bytesio": 157, "open": [157, 246, 290, 343, 409, 419, 421, 426, 454, 455, 463, 478, 481, 484, 485, 488, 489, 490, 502, 507], "rb": 157, "buffer": 157, "get_modul": [158, 162], "get_children": 158, "get_named_children": 158, "dowload_hf_model": 158, "repo_id": 158, "cache_dir": 158, "repo_typ": 158, "revis": 158, "download": [158, 227, 270, 447, 449, 460, 487, 493, 507], "hug": [158, 426, 489, 502], "face": [158, 421, 426, 434, 466, 470, 489, 491, 502, 507, 515], "hf": [158, 515], "hub": [158, 426, 453, 457, 474], "load_shel": 158, "empti": [158, 209, 210, 469], "get_super_module_by_nam": 158, "module_nam": [158, 181, 182, 192, 193, 194, 195, 197, 198, 199, 200, 202, 204, 323, 417], "father": [158, 185], "update_modul": 158, "new_modul": [158, 162, 165], "load_layer_wise_quantized_model": 158, "load_tensor_from_shard": 158, "shard": 158, "load_tensor": 158, "ipex_mixed_precis": 159, "definit": [160, 218, 223, 261, 266], "fakeaffinetensorquantfunct": 160, "affin": [160, 504], "teqlinearfakequ": 160, "orig_lay": 160, "mullinear": [160, 166], "input_scal": 160, "detector": 161, "transformerbasedmodelblockpatterndetector": 161, "pattern_lst": 161, "block_pattern": 161, "detect": [161, 165, 185, 209, 210, 294, 298, 347, 351, 356, 423, 466, 473, 474, 501, 512], "ffn": [161, 196], "set_modul": [162, 165], "torchsmoothqu": [162, 509], "q_func": [162, 213, 214, 256, 257, 328, 329, 330, 331, 333, 334, 335, 336, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 427, 428, 463, 512], "traced_model": [162, 163], "whose": [162, 170, 187, 322, 458, 509, 512], "absorb": [162, 165, 166, 170, 506], "update_sq_scal": [162, 165], "ipex_config_path": [162, 165], "smoothquant_scale_info": [162, 165], "ipex_config": [162, 165], "json": [162, 165, 226, 242, 269, 283, 416, 447, 465, 484, 490, 491, 495, 496, 497, 506, 511], "temporari": [162, 165, 417, 421], "trace_and_fuse_sub_graph": 163, "is_qat": 163, "tequant": 164, "absorb_to_lay": [164, 165, 166], "extra_config": [164, 166], "trainabl": [164, 506], "get_embedding_contigu": 165, "contigu": 165, "is_fused_modul": 165, "_propagate_qconfig_help": 165, "collate_torch_pr": 165, "collate_result": 165, "input2tupl": 165, "append_attr": 165, "fx_model": 165, "fx_white_list": 165, "append": [165, 327, 330, 389, 423, 451, 463, 500], "graphmodul": [165, 423, 505], "addit": [165, 210, 406, 428, 429, 450, 477, 485, 490, 506, 507, 512], "dir": [165, 225, 268, 416, 447, 455, 458], "generate_activation_observ": 165, "observ": [165, 429, 506, 508, 510, 512], "what": [165, 192, 223, 266, 351, 385, 406, 421, 502], "check_cfg_and_qconfig": 165, "op_infos_from_cfg": 165, "output_tensor_ids_op_nam": 165, "paser_cfg": 165, "ops_nam": 165, "get_quantizable_ops_from_cfg": 165, "input_tensor_ids_op_nam": 165, "auto_copi": 165, "fetch_modul": 165, "op_nam": [165, 206, 209, 210, 341, 402, 417, 418, 428, 463, 501, 510], "simple_infer": 165, "get_example_input": 165, "example_inp": 165, "get_fallback_ord": 165, "confidence_batch": [165, 512], "fallback": [165, 210, 333, 334, 392, 394, 395, 454, 464, 486, 505, 512], "requantize_cfg": 165, "confid": 165, "ordered_op": 165, "get_mse_order_per_fp32": 165, "influenc": [165, 501], "last": [165, 181, 205, 209, 210, 446, 464, 466, 468, 473, 477, 504, 506, 509], "fallback_ord": 165, "get_mse_order_per_int8": 165, "get_torch_vers": 165, "match_datatype_pattern": 165, "calculate_quant_min_max": 165, "unsign": [165, 342, 403, 429, 506], "qmin": 165, "qmax": 165, "get_depth": 165, "depth": [165, 450, 505], "get_dict_at_depth": 165, "target_depth": 165, "nest": [165, 207], "get_element_under_depth": 165, "ops_lst": 165, "get_op_type_by_nam": 165, "quantizable_op": 165, "collect_weight_info": 165, "fc": [165, 210, 501], "param": [165, 172, 215, 243, 249, 258, 298, 330, 351, 389, 417, 427, 465, 512], "_type_": 165, "get_module_input_output": 165, "module_hook_config": 165, "input_func": 165, "output_func": 165, "help": [165, 251, 300, 465, 466, 472, 483, 490, 495, 496, 497, 506, 512, 513], "module_name_list": 165, "requir": [165, 166, 209, 210, 216, 327, 360, 384, 423, 427, 428, 444, 445, 446, 449, 451, 452, 456, 463, 464, 465, 467, 477, 483, 485, 489, 490, 493, 496, 497, 501, 504, 506, 507, 508, 509, 510, 512, 514], "fc1": [165, 166], "preprocess": [165, 209, 210, 225, 242, 268, 283, 403, 409, 452, 511], "usag": [165, 224, 267, 294, 300, 327, 347, 404, 428, 447, 452, 453, 466, 474, 485, 490, 495, 496, 497, 499, 503, 511], "input_valu": 165, "output_valu": 165, "total_valu": 165, "get_absorb_lay": 165, "supported_lay": 165, "no_absorb_lay": 165, "allow": [165, 330, 389, 450, 452, 462, 463, 464, 485, 489, 501, 503, 506, 509, 512, 514], "absorpt": 165, "eg": [165, 207, 227, 270, 447, 503], "absorbed_1": 165, "xx": 165, "get_block_prefix": 165, "block_list": 165, "block_num": 165, "block_prefix": 165, "get_hidden_st": 165, "func": [165, 417, 504, 514], "calib": [165, 428], "rest": [165, 489, 490, 495, 496, 497], "part": [165, 183, 192, 321, 323, 423, 460, 464, 478, 481, 490, 492, 501, 509, 513], "total_block_kwarg": 165, "total_block_arg": 165, "quantize_4bit": 166, "quantil": [166, 512], "nf4": [166, 426, 506], "return_int": 166, "fp4": [166, 426, 506], "q_tensor": 166, "qdq_weight_asym": 166, "choos": [166, 227, 270, 459, 471, 502, 507, 509, 512, 514], "qdq_weight_sym": 166, "full_rang": 166, "rang": [166, 228, 229, 242, 271, 272, 283, 404, 406, 426, 427, 429, 445, 447, 449, 450, 451, 452, 463, 486, 487, 500, 501, 504, 506, 509, 511], "amax": 166, "qdq_weight_actor": 166, "select": [166, 202, 205, 210, 225, 268, 423, 424, 445, 459, 460, 483, 501, 504, 506, 510, 512], "quant_weight": 166, "search_clip": 166, "best": [166, 173, 242, 283, 284, 289, 326, 333, 394, 421, 424, 460, 466, 472, 483, 488, 499, 504, 506, 509, 511, 512], "num": [166, 417], "best_clip_ratio": 166, "group_dim": 166, "configir": 166, "gptq_perm": 166, "perm": [166, 242, 283, 511], "int32": [166, 447, 506], "absorb_lay": 166, "absorb_dict": 166, "absorbed_lay": 166, "fc3": 166, "teq_quant": 166, "quant_weight_w_scal": 166, "algorithm_registri": 167, "algorithm_typ": 167, "registr": [167, 227, 234, 242, 270, 277, 283, 316], "algorithmschedul": 167, "conf": [167, 172, 173, 210, 213, 214, 243, 256, 257, 300, 307, 308, 310, 311, 312, 313, 318, 328, 329, 330, 331, 333, 334, 335, 336, 340, 352, 362, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 401, 404, 406, 423, 424, 426, 429, 444, 450, 457, 458, 463, 464, 465, 485, 487, 500, 504, 505, 506, 508, 509, 512], "control": [167, 209, 210, 423, 463, 488, 501, 512], "phase": [167, 424, 463, 501, 504, 505, 512], "fastbiascorrect": [168, 171], "fast_bias_correct": [169, 209, 210, 343, 504], "weight_correct": [169, 209, 210, 343, 504], "kernel": [170, 209, 210, 427, 428, 512], "futur": [170, 213, 214, 245, 256, 257, 459, 463, 474, 495, 496, 497, 513], "weightcorrect": 171, "1e": [171, 509, 514], "05": [171, 210, 298, 351, 462, 509, 515], "evalu": [172, 173, 187, 209, 213, 214, 225, 243, 256, 257, 268, 284, 291, 294, 295, 296, 298, 300, 344, 347, 348, 349, 351, 352, 362, 385, 406, 409, 424, 427, 428, 447, 450, 451, 458, 459, 462, 463, 464, 466, 472, 474, 477, 483, 499, 501, 504, 508, 509, 510, 512, 514], "set_env_var": [172, 243], "env_var": [172, 243], "overwrite_exist": [172, 243], "env": [172, 243, 455, 495, 496, 497], "set_all_env_var": [172, 243], "physic": [172, 243, 421, 444, 490], "core": [172, 209, 210, 243, 444, 461, 476, 480, 490, 515], "get_architectur": [172, 243], "architectur": [172, 243, 301, 304, 426, 444, 450, 463, 489, 501, 502, 506, 513], "get_threads_per_cor": [172, 243], "thread": [172, 209, 210, 243, 379, 384, 446, 492], "get_thread": [172, 243], "get_physical_id": [172, 243], "socket": [172, 243, 417, 490, 492, 515], "get_core_id": [172, 243], "id": [172, 241, 243, 282, 291, 293, 294, 295, 296, 344, 346, 347, 348, 349, 462, 490, 491, 495, 496, 497, 508, 512], "get_bounded_thread": [172, 243], "core_id": [172, 243], "bind": [172, 243], "run_inst": 172, "b_dataload": [172, 209, 210, 444, 463], "b_func": [172, 444], "benchmarkconfig": [172, 209, 210, 444, 449, 463], "accuraci": [172, 205, 209, 210, 213, 214, 256, 257, 284, 289, 298, 313, 318, 326, 351, 352, 362, 385, 390, 404, 406, 414, 423, 426, 428, 429, 445, 446, 447, 449, 451, 452, 453, 454, 462, 463, 474, 483, 485, 491, 492, 495, 496, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 513, 514, 515], "goal": [172, 284, 289, 313, 318, 326, 352, 385, 428, 446, 500, 504, 512], "prefer": [172, 289, 326, 385, 501, 506], "space": [172, 178, 179, 193, 194, 199, 200, 209, 210, 213, 214, 256, 257, 289, 296, 301, 304, 305, 306, 326, 330, 333, 340, 349, 352, 385, 389, 394, 401, 421, 422, 424, 427, 428, 429, 501, 504, 514], "etc": [172, 173, 241, 282, 284, 289, 296, 313, 318, 326, 349, 352, 385, 416, 426, 450, 459, 485, 488, 501, 508, 512], "generate_prefix": 172, "core_list": 172, "command": [172, 243, 406, 449, 452, 466, 468, 471, 476, 480, 484, 485, 487, 488, 490], "numactl": [172, 455, 469, 477], "call_on": 172, "cmd": 172, "log_fil": [172, 378, 383], "window": [172, 444, 483, 484], "config_inst": 172, "raw_cmd": 172, "multi": [172, 183, 185, 196, 294, 347, 351, 385, 424, 446, 447, 459, 463, 499, 501, 504, 512], "trigger": [172, 192, 323, 422], "summary_benchmark": 172, "summari": [172, 406, 449, 478, 481, 510, 515], "profil": [172, 210, 343], "benchmark_with_raw_cmd": 172, "fit_with_raw_cmd": 172, "cores_per_inst": [172, 209, 210, 444, 463, 503], "num_of_inst": [172, 209, 210, 444, 463, 503], "test": [172, 209, 210, 242, 283, 422, 426, 449, 460, 490, 495, 515], "fit": [172, 187, 209, 210, 330, 352, 385, 389, 404, 406, 423, 426, 444, 446, 447, 449, 452, 457, 458, 462, 463, 464, 465, 485, 486, 501, 504, 505, 506], "pb": [172, 209, 210, 352, 360, 385, 426, 444, 452, 457, 463, 465, 485, 487, 495, 510, 515], "eval_dataload": [172, 209, 210, 213, 214, 256, 257, 327, 328, 329, 330, 331, 333, 334, 335, 336, 352, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 406, 444, 458, 462, 463, 485, 504, 512], "compon": [173, 284, 290, 327, 343, 423, 449, 452, 460, 461, 466, 483, 490, 500, 501], "quantizationawaretrainingcallback": 173, "pruningcallback": 173, "distillationcallback": 173, "basecallback": 173, "design": [173, 224, 247, 252, 267, 351, 390, 424, 426, 463, 471, 474, 501, 504, 513], "mainli": [173, 203, 252, 325, 426, 463, 501, 504], "prune": [173, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 209, 210, 252, 253, 290, 307, 308, 310, 311, 312, 316, 318, 319, 321, 322, 323, 325, 327, 343, 417, 426, 452, 453, 456, 457, 459, 500, 502, 513, 514], "distil": [173, 180, 209, 210, 244, 251, 252, 290, 343, 426, 453, 457, 459, 500, 513, 514], "In": [173, 189, 190, 191, 196, 197, 198, 202, 210, 224, 252, 267, 294, 321, 323, 347, 362, 421, 423, 424, 426, 427, 428, 446, 447, 449, 450, 451, 452, 462, 463, 473, 476, 477, 480, 486, 487, 488, 495, 496, 497, 499, 500, 501, 504, 505, 506, 508, 509, 510, 511, 512, 513], "adaptor": [173, 209, 210, 342, 403, 409, 426, 429, 459, 505, 507, 509, 510, 513], "deriv": [173, 181, 189, 190, 191, 197, 198, 199, 200, 201, 202, 203, 204, 284, 321, 323, 325], "pipelin": [173, 284, 301, 302, 327, 451, 463, 500], "knowledg": [173, 174, 209, 210, 244, 284, 451, 453, 457, 459, 463, 465, 514], "transfer": [173, 232, 275, 284, 447, 450, 451, 463, 509], "teacher": [173, 209, 210, 284, 450, 451, 463, 515], "student": [173, 209, 210, 225, 251, 268, 284, 447, 450, 451, 515], "distillation_conf": [173, 206, 284], "_epoch_ran": [173, 284], "integ": [173, 191, 192, 209, 210, 284, 294, 298, 305, 321, 323, 347, 351, 404, 427, 429, 445, 504, 506, 509, 512], "much": [173, 181, 209, 210, 242, 283, 284, 450, 477, 509, 511], "epoch": [173, 193, 194, 199, 284, 323, 406, 446, 450, 451, 452, 463, 500, 501, 514], "ran": [173, 284], "eval_frequ": [173, 284], "frequenc": [173, 192, 209, 210, 284, 323, 463, 501, 514], "term": [173, 193, 194, 199, 200, 202, 284, 422, 445, 450, 461, 462, 499, 500, 512], "best_scor": [173, 284], "metric": [173, 209, 210, 213, 214, 246, 256, 257, 284, 289, 290, 305, 313, 318, 326, 327, 343, 352, 385, 406, 409, 424, 427, 428, 447, 449, 452, 463, 464, 485, 504, 508, 509, 510, 512, 513, 514, 515], "best_model": [173, 284, 416, 506], "found": [173, 284, 426, 450, 464, 471, 487, 491, 509, 512, 515], "critet": [174, 244], "tensorflowknowledgedistillationloss": [174, 244], "pytorchknowledgedistillationloss": [174, 244, 463], "pytorchintermediatelayersknowledgedistillationloss": [174, 244], "tensorflowcriterion": [174, 244], "pytorchcriterion": [174, 244], "criterion_registri": [174, 244], "criterion_typ": [174, 244], "registry_criterion": [174, 244], "knowledgedistillationframework": [174, 244], "student_model": [174, 210, 244, 463], "teacher_model": [174, 209, 210, 244, 450, 451, 463], "knowledgedistillationloss": [174, 244, 463, 514], "temperatur": [174, 209, 210, 244, 463, 514], "loss_typ": [174, 178, 209, 210, 244, 463, 514], "ce": [174, 209, 210, 244, 463, 514], "loss_weight": [174, 209, 210, 244, 463, 514], "pytorchknowledgedistillationlosswrapp": [174, 244], "param_dict": [174, 244, 249], "tensorflowknowledgedistillationlosswrapp": [174, 244], "tensorflowknowledgedistillationlossextern": [174, 244], "intermediatelayersknowledgedistillationloss": [174, 244], "layer_map": [174, 210, 244, 450], "add_origin_loss": [174, 210, 244], "pytorch": [174, 182, 185, 188, 191, 192, 195, 200, 201, 209, 210, 224, 225, 227, 230, 234, 242, 244, 249, 251, 267, 268, 270, 273, 277, 283, 288, 289, 298, 299, 319, 321, 324, 326, 334, 343, 351, 352, 361, 385, 395, 410, 417, 423, 424, 426, 427, 428, 429, 445, 446, 450, 451, 453, 456, 459, 460, 463, 464, 465, 466, 468, 471, 472, 473, 474, 483, 493, 496, 497, 501, 502, 503, 506, 507, 509, 512, 514], "pytorchintermediatelayersknowledgedistillationlosswrapp": [174, 244], "selfknowledgedistillationloss": [174, 244], "selfknowledg": [174, 244], "pytorchselfknowledgedistillationloss": [174, 244], "pytorchselfknowledgedistillationlosswrapp": [174, 244], "hyper": [176, 514], "sa_optim": [176, 180], "simul": [177, 429], "anneal": 177, "register_search": 178, "searcher": [178, 185, 210, 306], "registri": [178, 179, 181, 187, 192, 201, 202, 203, 204, 321, 323, 325, 424], "sure": [178, 187, 192, 201, 203, 321, 323, 325, 444, 485], "search_spac": [178, 206, 210, 301, 304, 305, 306], "gridsearch": [178, 306], "grid": [178, 210, 306, 424, 501], "whole": [178, 306, 429, 485, 504, 515], "exhaust": [178, 210, 290, 306, 332, 343, 393, 503], "randomsearch": [178, 306], "randomli": [178, 242, 283, 306, 330, 389, 424, 509, 511, 512], "bayesianoptimizationsearch": [178, 306], "42": [178, 210, 306, 515], "bayesian": [178, 210, 290, 306, 332, 343, 393, 424, 501, 503], "xgbsearcher": 178, "higher_is_bett": [178, 209, 210, 351, 385, 512, 514], "reg": [178, 180, 182, 193, 194, 199, 200, 210], "min_train_sampl": [178, 210], "10": [178, 209, 210, 227, 270, 330, 389, 426, 444, 447, 454, 460, 463, 485, 486, 501, 503, 511, 512, 515], "xgboost": [178, 501], "searchspac": 179, "factori": [179, 358, 365, 367, 372, 375, 377, 382], "actual": [179, 298, 351, 452, 509], "interv": [179, 198, 501], "store": [179, 181, 182, 185, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 209, 210, 227, 270, 316, 323, 458], "continu": [179, 190, 294, 321, 347, 424, 463, 484, 501, 513], "learning_r": [179, 209, 210, 463, 503, 514], "001": [179, 227, 270, 447, 452, 509, 514], "num_train_epoch": [179, 463, 501], "20": [179, 242, 283, 487, 490, 495, 496, 497, 501, 509, 511, 514, 515], "weight_decai": [179, 463, 514], "register_searchspac": 179, "pruner": [179, 180, 290, 307, 308, 309, 310, 311, 313, 318, 319, 321, 324, 343, 463, 501, 514], "basesearchspac": 179, "discretesearchspac": 179, "continuoussearchspac": 179, "hpo": [180, 213, 256, 501], "model_slim": [180, 182, 196], "auto_slim": [180, 182, 184], "pattern_analyz": [180, 182, 184], "weight_slim": [180, 182, 184, 196], "mha": [180, 182, 188, 195, 501], "ninm": [180, 182, 188], "nxm": [180, 182, 188, 198, 209, 210, 317, 321, 501], "basic": [180, 182, 185, 187, 195, 209, 210, 241, 282, 290, 301, 321, 332, 336, 339, 343, 393, 397, 400, 406, 459, 460, 463, 485, 503, 508], "block_mask": [180, 181, 182, 195], "pattern_lock": [180, 182, 195, 209, 210, 290, 309, 343], "progress": [180, 182, 195, 227, 270, 477, 483, 485, 501, 504], "retrain_fre": [180, 181, 182, 195, 501], "criteria": [180, 182, 209, 210, 289, 313, 318, 321, 323, 326, 423, 483, 509], "schedul": [180, 182, 192, 193, 194, 199, 200, 202, 209, 210, 290, 319, 323, 343, 463, 489, 490, 492, 500], "tf_criteria": [180, 182], "callback": [180, 313, 318, 406, 409, 423, 463, 500, 501, 504], "register_criterion": [181, 204], "get_criterion": 181, "pruningcriterion": [181, 204], "about": [181, 204, 417, 421, 446, 463, 487, 488, 501, 505, 512, 513, 515], "score": [181, 187, 192, 196, 204, 209, 210, 291, 292, 294, 295, 296, 298, 323, 344, 345, 347, 348, 349, 351, 392, 409, 423, 462, 486, 499, 501, 508, 512], "magnitudecriterion": [181, 204], "magnitud": [181, 204, 209, 210, 290, 298, 309, 343, 351, 459, 501], "criterion_class": [181, 204], "determin": [181, 187, 192, 204, 209, 210, 411, 421, 423, 445, 501, 504, 509], "gradientcriterion": 181, "gradient": [181, 307, 426, 459, 463, 501, 502, 515], "absolut": [181, 209, 210, 298, 351, 462, 463, 501, 504, 512], "snipcriterion": 181, "snip": [181, 209, 210, 323, 459, 501, 515], "product": [181, 426, 459, 464, 466, 467, 483, 488, 502, 504, 508, 512], "singl": [181, 203, 209, 210, 218, 225, 242, 261, 268, 283, 294, 323, 325, 347, 351, 385, 423, 447, 449, 460, 488, 501], "shot": [181, 199, 200, 203, 252, 323, 325, 424, 459, 463, 501, 502, 506], "connect": [181, 323, 483, 485, 491, 501, 508], "sensit": [181, 307, 323, 459, 501], "1810": [181, 323], "02340": [181, 323], "snipmomentumcriterion": 181, "snip_momentum": [181, 209, 210, 463, 501], "momentum": [181, 323, 459, 463, 501, 514], "preserv": [181, 445, 501, 506], "step": [181, 191, 192, 193, 194, 198, 199, 203, 209, 210, 321, 323, 325, 406, 428, 429, 449, 450, 451, 452, 463, 478, 481, 483, 495, 496, 497, 500, 501, 503, 505, 506, 508, 509, 510, 512], "beta": 181, "blockmaskcriterion": 181, "9": [181, 209, 210, 423, 460, 463, 501, 503, 509, 512, 514, 515], "retrainfreecriterion": 181, "pickle_protocol": 182, "_use_new_zipfile_seri": 182, "prepare_prun": [182, 501], "loss_func": [182, 201], "assertionerror": [182, 188, 195, 205, 321, 322, 323, 352], "auto": [183, 185, 209, 210, 328, 343, 387, 393, 417, 423, 445, 466, 469, 471, 473, 474, 501, 504, 506], "slim": [183, 184, 185, 294, 347, 358, 360, 465, 501], "round_multipli": 183, "spars": [183, 197, 323, 447, 502], "automat": [183, 185, 186, 209, 210, 227, 230, 237, 238, 270, 273, 280, 289, 299, 326, 423, 426, 444, 447, 459, 463, 464, 466, 468, 471, 472, 474, 476, 477, 478, 480, 481, 483, 489, 492, 500, 501, 504, 509, 511, 512], "model_slim_ffn2": 183, "some": [183, 185, 209, 210, 225, 268, 322, 428, 429, 447, 449, 454, 460, 462, 463, 485, 486, 487, 490, 499, 501, 504, 505, 506, 509, 510, 512, 513, 515], "perman": [183, 421, 501], "obtain": [183, 185, 194, 199, 202, 205, 322, 423, 428, 490, 501, 508, 509, 512], "acceler": [183, 426, 450, 463, 466, 474, 483, 486, 489, 501, 502, 505, 506, 509, 512], "directli": [183, 209, 210, 224, 267, 294, 298, 322, 347, 351, 462, 463, 470, 501, 503, 504, 510], "sprase": 183, "multipl": [183, 211, 212, 216, 217, 225, 226, 228, 229, 230, 231, 232, 236, 239, 242, 249, 254, 255, 259, 260, 262, 268, 269, 271, 272, 273, 274, 275, 279, 281, 283, 299, 352, 353, 354, 356, 362, 444, 447, 454, 463, 489, 492, 500, 501, 508, 509, 512], "model_slim_mha": 183, "parse_auto_slim_config": [183, 501], "ffn2_sparsiti": [183, 501], "mha_spars": [183, 501], "generate_ffn2_pruning_config": 183, "consecut": [183, 185, 186, 501], "generate_mha_pruning_config": 183, "head": [183, 185, 189, 196, 205, 501, 515], "get_attribut": 185, "level": [185, 390, 404, 413, 421, 492, 509, 512], "descent": [185, 426, 502], "get_common_modul": 185, "layer1": [185, 209, 210, 463, 501, 504], "layer2": [185, 463, 501, 504], "nearest": [185, 242, 283, 506, 511], "print_iter": 185, "recipesearch": 185, "root": [185, 225, 226, 227, 230, 268, 269, 270, 273, 298, 351, 447, 452, 462, 463, 514], "levelwis": 185, "wai": [185, 226, 227, 230, 269, 270, 273, 424, 429, 446, 447, 449, 462, 463, 466, 469, 484, 485, 488, 489, 490, 500, 501, 504, 506, 509, 512, 514], "huggingfac": [185, 196, 225, 268, 412, 447, 453, 457, 471, 472, 473, 474, 493, 494, 496, 497, 509, 515], "bert": [185, 210, 221, 224, 225, 242, 264, 267, 268, 283, 426, 447, 450, 462, 464, 471, 493, 496, 497, 501, 511, 515], "recipe_sampl": 185, "bertattent": 185, "dens": [185, 203, 209, 210, 325, 486, 501, 515], "searching_result": 185, "jitbasicsearch": 185, "placeholder_shap": 185, "placeholder_dtyp": 185, "jit": [185, 209, 466, 468, 473, 509, 510], "script": [185, 291, 292, 295, 296, 344, 345, 348, 349, 452, 459, 466, 470, 473, 474, 477, 493, 495, 502], "static_graph": 185, "flatten_static_graph": 185, "target_lay": 185, "linear2linearsearch": 185, "target_op_lut": 185, "lookup": 185, "tabl": [185, 196, 417, 429, 449, 454, 486, 487, 515], "current_pattern": 185, "statu": [185, 414, 421, 446, 492, 495, 496, 497, 499, 501], "selfmhasearch": 185, "classifierheadsearch": 185, "classifi": [185, 205, 225, 268, 298, 351, 447, 450], "classifierheadsearchertf": 185, "squeezer": 186, "postcompressionutil": 186, "librari": [186, 246, 290, 343, 379, 419, 422, 426, 460, 463, 464, 468, 477, 483, 502, 504], "relat": [186, 202, 284, 294, 313, 318, 321, 347, 403, 409, 429, 466, 489, 490, 501, 507, 514], "linearcompress": 186, "root_linear": 186, "target_linear": 186, "while": [186, 197, 205, 323, 330, 389, 427, 428, 447, 453, 459, 464, 466, 471, 483, 485, 501, 503, 504, 506, 509], "hidden": [186, 191, 321, 427], "layer_1": 186, "act_fn": 186, "layer_2": 186, "linearcompressioniter": 186, "linear_pattern": 186, "register_pattern": [187, 321], "basepattern": [187, 189, 191], "unit": [187, 321, 422, 490, 501], "4x1": [187, 209, 210, 317, 463, 501, 515], "is_glob": [187, 321], "local": [187, 209, 210, 321, 417, 476, 480, 485, 491, 492, 501, 508], "contrast": [187, 321, 511], "keep_mask_lay": 187, "invalid_lay": 187, "max_sparsity_ratio_per_op": [187, 192, 206, 209, 210, 463, 501], "sparsiti": [187, 189, 190, 192, 193, 194, 197, 199, 200, 203, 205, 209, 210, 323, 325, 417, 426, 447, 459, 463, 513, 515], "reach": [187, 203, 209, 210, 325, 422, 446, 485, 501, 512], "min_sparsity_ratio_per_op": [187, 206, 209, 210, 463, 501], "minimum": [187, 209, 210, 429, 445, 449, 463, 474, 501, 512], "target_spars": [187, 206, 209, 210, 463, 501, 503, 514], "pytorchbasepattern": [187, 202], "kerasbasepattern": 187, "get_pattern": [188, 321], "patternmha": 189, "doc": [189, 190, 209, 210, 321, 339, 340, 351, 385, 400, 401, 404, 417, 462, 463, 478, 481, 488], "md": [189, 190, 209, 210, 321, 351, 385], "n": [189, 190, 209, 210, 226, 242, 269, 283, 292, 321, 345, 404, 429, 447, 449, 450, 490, 501, 504, 509, 511], "pytorchpatternninm": 190, "out": [190, 209, 210, 225, 226, 227, 268, 269, 270, 289, 321, 326, 422, 423, 426, 447, 466, 471, 476, 477, 478, 480, 481, 483, 488, 501, 503, 504, 506], "pytorchpatternnxm": 191, "kept": [191, 321], "block_siz": [191, 321, 506], "height": [191, 238, 242, 280, 283, 321, 452, 511, 514], "width": [191, 238, 242, 280, 283, 321, 445, 452, 501, 504, 511, 514], "vertic": [191, 242, 283, 321, 511], "keraspatternnxm": 191, "register_prun": [192, 201, 323], "baseprun": [192, 197, 199, 201], "current_sparsity_ratio": [192, 323], "global_step": [192, 323], "total": [192, 242, 283, 298, 323, 351, 447, 449, 501, 506, 511, 515], "start_step": [192, 206, 209, 210, 323, 463, 501, 503], "end_step": [192, 206, 209, 210, 323, 463, 501, 503], "pruning_frequ": [192, 206, 209, 210, 463, 501], "target_sparsity_ratio": [192, 323], "show": [192, 417, 421, 450, 452, 463, 469, 484, 485, 486, 487, 490, 495, 496, 497, 509, 512, 513], "pytorchbaseprun": [192, 200], "kerasbaseprun": 192, "pytorchbasicprun": 193, "arrang": [193, 194, 199, 200, 226, 227, 230, 269, 270, 273, 447, 501], "proce": [193, 194, 199, 200], "regul": [193, 194, 199, 200], "kerasbasicprun": 193, "pytorchblockmaskprun": 194, "grad": [194, 199], "parse_valid_pruner_typ": 195, "get_prun": [195, 323], "pythonmultiheadattentionprun": 196, "mha_modul": 196, "partial": [196, 501, 504], "qkv": 196, "feedward": 196, "simultan": [196, 466, 489, 500, 503], "qkv_name": 196, "query_layer_nam": 196, "key_layer_nam": 196, "value_layer_nam": 196, "ffn_name": 196, "attention_ffn_nam": 196, "mha_nam": 196, "qkv_modul": 196, "ffn_modul": 196, "mha_compress": 196, "mhacompress": 196, "modifi": [196, 227, 270, 384, 403, 423, 429, 452, 456, 487, 501, 514], "linear_lay": 196, "independ": [196, 379, 384, 429], "length": [196, 209, 210, 225, 242, 268, 283, 294, 347, 426, 447, 462, 502, 504, 506, 511], "4x": [196, 424, 504], "subsequ": [196, 428, 466, 483], "head_mask": 196, "mha_head_s": 196, "similar": [196, 206, 463, 503, 509, 512, 514], "mha_scor": 196, "lock": [197, 311, 312, 459, 500, 501], "pytorchpatternlockprun": 197, "parent": [197, 198, 203, 317, 323, 325, 510], "pytorchprogressiveprun": 198, "basicprun": [198, 201], "interpol": [198, 242, 283, 462, 501, 511], "fine": [198, 225, 268, 447, 469, 501, 502, 504], "grain": [198, 501, 502, 512], "improv": [198, 422, 445, 463, 466, 483, 484, 486, 501, 502, 504, 505, 506, 512, 513, 515], "ad": [198, 225, 268, 291, 330, 344, 389, 428, 429, 449, 464, 466, 471, 474, 478, 481, 490, 501, 506, 510], "retrain": [199, 451], "pytorchretrainfreeprun": 199, "pruner_class": [199, 200], "fast": [199, 209, 210, 426, 501, 502, 506], "retrainfreeprun": [199, 201], "effect": [199, 427, 501, 502], "2204": 199, "09656": 199, "sparsegptprun": [200, 201], "most": [200, 209, 210, 298, 351, 449, 463, 464, 501, 504, 506, 509, 512, 515], "sparsegpt": [200, 201, 501], "massiv": [200, 501], "One": [200, 429, 447, 452, 459, 487, 501, 502, 512], "2301": [200, 501], "00774": [200, 501], "opt": [201, 426, 471, 501, 509, 512, 515], "least": [201, 324, 463, 501, 512], "templat": [201, 324, 463, 501], "tree": [201, 324, 340, 401, 490], "nlp": [201, 209, 210, 324, 471, 501, 504], "huggingface_model": [201, 324], "classif": [201, 225, 242, 268, 283, 298, 324, 351, 450, 454, 462, 472, 486, 493, 496, 497, 501, 502], "pytorch_prun": [201, 290, 343], "eager": [201, 324, 384, 452, 459, 504, 505, 510], "config_file_path": [201, 324], "pruner_info": [201, 324], "pruning_class": 201, "avail": [201, 209, 210, 356, 430, 432, 436, 439, 442, 453, 455, 457, 459, 476, 480, 485, 489, 490, 491, 495, 496, 497, 501, 512, 515], "regular": [202, 291, 322, 344], "register_reg": 202, "regulariz": 202, "get_reg_typ": 202, "get_reg": 202, "basereg": 202, "grouplasso": 202, "coeff": 202, "lasso": [202, 308, 459, 501], "reg_term": 202, "register_schedul": [203, 325], "get_schedul": [203, 325], "pruningschedul": 203, "gradual": [203, 325, 501], "oneshotschedul": [203, 325], "iterativeschedul": [203, 325], "get_tf_criterion": 204, "get_sparsity_ratio": 205, "elementwise_over_matmul_gemm_conv": 205, "elementwise_over_al": 205, "blockwise_over_matmul_gemm_conv": 205, "get_sparsity_ratio_tf": 205, "check_config": [205, 322], "prune_config": [205, 322], "everyth": [205, 322, 471], "reset_none_to_default": 205, "update_param": 205, "process_weight_config": 205, "global_config": [205, 307, 308, 310, 311, 312], "local_config": [205, 209, 210, 307, 308, 310, 311, 312], "default_config": 205, "pruners_info": 205, "process_yaml_config": 205, "check_key_valid": 205, "template_config": 205, "user_config": 205, "process_and_check_config": [205, 322], "process_config": [205, 322], "parse_last_linear": 205, "often": [205, 446, 450, 487, 500, 501], "act": [205, 223, 266, 421], "might": [205, 423, 485, 512], "caus": [205, 428, 446, 467, 486, 487, 501, 506], "drop": [205, 294, 322, 347, 463, 464, 477, 501, 506, 515], "parse_last_linear_tf": 205, "parse_to_prun": [205, 322], "parse_to_prune_tf": 205, "generate_pruner_config": 205, "dotdict": [205, 206, 210, 362, 417], "get_lay": 205, "collect_layer_input": 205, "layer_idx": 205, "layer_input": 205, "previou": [205, 428, 429, 463, 501, 507, 509, 510, 512, 513, 515], "prunerv2": 206, "pruning_typ": [206, 209, 210, 463, 501], "pruning_scop": [206, 209, 210, 463, 501], "sparsity_decay_typ": [206, 209, 210, 463, 501], "pruning_op_typ": [206, 209, 210, 463, 501], "reg_typ": 206, "criterion_reduce_typ": 206, "resume_from_pruned_checkpoint": 206, "cfg_fname": 206, "parser": 206, "quantization_conf": 206, "pruning_conf": 206, "graph_optimization_conf": [206, 289], "mixedprecision_conf": 206, "benchmark_conf": 206, "nasconfig": [206, 210, 302, 304, 424], "approach": [206, 209, 210, 301, 302, 304, 423, 424, 445, 447, 450, 459, 463, 471, 483, 486, 493, 495, 496, 497, 501, 502, 503, 506, 512, 514], "search_algorithm": [206, 210, 290, 303, 343, 424], "na": [206, 210, 290, 343, 356, 459, 504, 515], "procedur": [206, 424, 501, 512], "defaultconf": 206, "instead": [206, 207, 210, 224, 267, 417, 469, 471, 474, 488, 501], "notat": [206, 207, 210, 417], "deep_get": [207, 362], "dot": [207, 464, 504], "person": [207, 421, 502], "john": 207, "deep": [207, 426, 427, 428, 446, 459, 460, 463, 464, 466, 468, 471, 472, 474, 477, 483, 502, 504, 512, 513, 515], "deep_set": [207, 362], "sex": [207, 421], "male": 207, "pythonic_config": 208, "random_se": [209, 210, 330, 389, 463, 514], "1978": [209, 210], "workspac": [209, 210, 416, 417, 465, 490, 495, 496, 497], "default_workspac": [209, 210], "resume_from": [209, 210, 417], "tensorboard": [209, 210, 409, 417, 427, 463, 486], "set_random_se": [209, 210, 417], "set_workspac": [209, 210, 417], "set_resume_from": [209, 210, 417], "set_tensorboard": [209, 210, 417], "directori": [209, 210, 226, 227, 269, 270, 360, 412, 414, 416, 417, 447, 452, 455, 476, 478, 480, 481, 488, 510], "histori": [209, 210, 416, 417, 483, 512], "nc_workspac": [209, 210, 486], "datetim": [209, 210], "now": [209, 210, 242, 283, 423, 424, 429, 447, 452, 474, 503, 511, 512], "strftime": [209, 210], "d_": [209, 210], "resum": [209, 210, 213, 214, 256, 257, 328, 329, 331, 334, 335, 336, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397], "flag": [209, 210, 292, 345, 449], "visual": [209, 210, 426, 474, 483, 508, 510, 512, 513], "displai": [209, 210, 339, 340, 400, 401, 417, 483, 486], "2022": [209, 210, 426, 461, 501, 506, 509, 515], "workspace_path": [209, 210], "accuracycriterion": [209, 210, 463, 512], "rel": [209, 210, 362, 463, 486, 503, 512, 514, 515], "tolerable_loss": [209, 210, 463, 512], "higher": [209, 210, 213, 214, 256, 257, 305, 352, 385, 406, 423, 449, 450, 454, 462, 486, 501, 504, 508], "accept": [209, 210, 404, 421, 444, 446, 485, 506], "accuracy_criterion": [209, 210, 362, 463, 499, 503, 512, 514], "warmup": [209, 210, 444, 463, 503], "inter_num_of_thread": [209, 210, 379, 384, 463, 503], "intra_num_of_thread": [209, 210, 379, 384, 463, 503], "benchmark": [209, 210, 245, 290, 327, 343, 362, 417, 426, 434, 465, 466, 470, 474, 477, 483, 486, 512, 513, 514, 515], "onnxrt_trt_ep": [209, 210, 464, 504], "onnxrt_cuda_ep": [209, 210, 464, 504], "inter": [209, 210], "intra": [209, 210], "quantizationconfig": 209, "post_training_static_qu": [209, 447, 463, 503, 512], "calibration_sampling_s": [209, 210, 463, 487], "op_type_dict": [209, 210, 429, 503, 504, 506, 512], "op_name_dict": [209, 210, 449, 463, 486, 487, 504, 512], "strategy_kwarg": [209, 210, 508, 512], "timeout": [209, 210, 463, 503, 512, 514], "max_trial": [209, 210, 463, 512], "quant_level": [209, 210, 486, 509, 512], "posttrainingquantconfig": [209, 210, 385, 423, 426, 429, 446, 449, 454, 457, 462, 463, 465, 485, 486, 487, 504, 505, 506, 508, 509, 512], "quantizationawaretrainingconfig": [209, 210, 406, 423, 451, 454, 463, 504, 505, 512], "cv": [209, 210, 501], "object_detect": [209, 210, 294, 347], "recommendation_system": [209, 210], "explicitli": [209, 210, 458, 501], "overrid": [209, 210, 417], "quantiztaion": [209, 210], "smooth_quant_arg": [209, 210, 504, 509], "gemm_to_matmul": [209, 210, 504], "graph_optimization_level": [209, 210, 503, 504], "disable_al": [209, 210, 503], "enable_bas": [209, 210], "enable_extend": [209, 210], "enable_al": [209, 210], "first_conv_or_matmul_quant": [209, 210, 504], "last_conv_or_matmul_quant": [209, 210, 504], "pre_post_process_quant": [209, 210, 504], "postprocess": [209, 210, 236, 239, 242, 246, 283, 290, 343, 351, 385, 409, 427, 463, 510, 511], "dedic": [209, 210], "quant_format": [209, 210, 288, 454, 486], "constraint": [209, 210, 289, 326, 463, 501, 508, 512, 514], "conv1": [209, 210, 504, 514], "tuning_strategi": [209, 210], "guarante": [209, 210, 463], "models": [209, 210, 362, 463, 499, 503], "footprint": [209, 210, 289, 313, 318, 326, 362, 451, 463, 499, 501, 503], "earli": [209, 210, 463, 504, 512, 514], "stop": [209, 210, 463, 512, 513, 514], "field": [209, 210, 227, 270, 294, 347, 423, 427, 429, 452, 463, 508, 512, 514], "exit": [209, 210, 329, 386, 388, 463, 490, 495, 496, 497, 514], "excluded_precis": [209, 210, 505], "exclud": [209, 210, 427, 445, 505], "conserv": [209, 210, 343, 393], "use_distributed_tun": 209, "weightpruningconfig": [209, 210, 463, 500, 501], "pruning_config": [209, 210, 463, 501], "98": [209, 210, 463, 501, 503, 515], "exp": [209, 210, 463, 501], "link": [209, 210, 225, 268, 351, 385, 445, 447, 454, 476, 480, 483, 515], "90": [209, 210, 514, 515], "magnitude_progress": [209, 210], "snip_progress": [209, 210], "snip_momentum_progress": [209, 210], "feasibl": [209, 210], "situat": [209, 210, 452, 501], "unstructur": [209, 210, 317, 459, 501, 515], "8x1": [209, 210], "channelx1": [209, 210, 501], "1xchannel": [209, 210, 501], "itrex": [209, 210], "start": [209, 210, 242, 283, 294, 347, 390, 460, 487, 502, 511, 512, 513, 516], "togeth": [209, 210, 242, 283, 450, 460, 470, 502, 510, 511], "sort": [209, 210, 333, 394, 449, 486, 506, 512], "sinc": [209, 210, 289, 291, 313, 318, 326, 344, 450, 454, 460, 462, 477, 483, 487, 500, 506, 507], "lead": [209, 210, 450, 463, 464, 487, 501, 506, 509], "increas": [209, 210, 448, 459, 466, 483, 487, 506, 512], "cube": [209, 210, 501], "6": [209, 210, 456, 504, 509, 512, 515], "update_config": [209, 210], "knowledgedistillationlossconfig": [209, 210, 450, 451, 463, 500], "hyperparamet": [209, 210, 339, 508, 509, 512], "entropi": [209, 210, 445, 512], "groundtruth": [209, 210, 294, 347], "label": [209, 210, 213, 214, 225, 227, 228, 229, 230, 233, 238, 242, 247, 256, 257, 268, 270, 271, 272, 273, 276, 280, 283, 291, 293, 298, 344, 346, 351, 352, 385, 406, 423, 446, 447, 449, 462, 463, 504, 511], "sum": [209, 210, 298, 351, 449, 450], "distillationconfig": [209, 210, 406, 450, 451, 463, 500], "prepare_compress": [209, 210, 406, 423, 450, 451, 463, 500, 501, 504], "criterion_conf": [209, 210], "d_conf": [209, 210, 451, 463, 500], "compression_manag": [209, 210, 406, 423, 450, 451, 463, 500, 501, 504], "sgd": [209, 210, 249, 450, 463, 503, 514], "featur": [209, 210, 225, 226, 238, 242, 268, 269, 280, 283, 422, 426, 444, 446, 448, 450, 463, 464, 465, 466, 470, 471, 474, 483, 485, 488, 501, 502, 507, 509, 511], "distil_loss": [209, 210, 463], "crossentropyloss": [209, 210, 244, 450, 463], "lr": [209, 210, 450, 452, 463], "ni_workload_nam": 210, "onnxrt_dnnl_ep": [210, 464, 504], "onnxrt_dml_ep": [210, 504], "tuningcriterion": [210, 463, 499, 508, 512], "tuning_criterion": [210, 463, 499, 508, 512], "ptq": [210, 385, 423, 449, 452, 459, 463, 487, 504, 509, 510, 512], "tri": [210, 512], "meet": [210, 216, 327, 329, 386, 388, 423, 428, 499, 502, 503, 504, 506, 510, 512], "mse_v2": [210, 290, 332, 343, 393], "hawq_v2": [210, 343, 393], "docstr": [210, 404], "workload": [210, 414, 417, 485, 502], "insight": [210, 414, 426, 449, 502, 507, 512, 513], "copi": [210, 322, 417, 446, 488], "deepcopi": 210, "model_origin": [210, 385, 505], "qat_op_name_dict": 210, "low_memory_usag": 210, "hpoconfig": 210, "xgb": 210, "bo": 210, "intermediatelayersknowledgedistillationlossconfig": [210, 450], "relationship": [210, 485], "student_layer_nam": 210, "student_layer_output_process": 210, "teacher_layer_nam": 210, "teacher_layer_output_process": 210, "desir": [210, 238, 242, 280, 283, 428, 429, 501, 511], "serv": [210, 360, 490, 495, 496, 497], "numer": [210, 298, 351, 429, 464, 502, 504, 506], "abbrevi": 210, "layer_nam": [210, 501], "l1": 210, "selfknowledgedistillationlossconfig": [210, 450, 463], "student1_layer_name1": 210, "teacher_layer_name1": 210, "student2_layer_name1": 210, "student1_layer_name2": 210, "teacher_layer_name2": 210, "student2_layer_name2": 210, "soft": 210, "l2": [210, 501], "hard": [210, 446, 449], "resblock": 210, "deepst": 210, "02": [210, 509, 515], "mixedprecisionconfig": [210, 352, 404, 463, 464], "mixedprecis": [210, 299, 463], "fp16": [210, 340, 401, 504], "won": [210, 504, 506], "work": [210, 289, 326, 425, 428, 446, 450, 478, 481, 488, 505, 506, 507, 509, 510], "mix_precis": [210, 343, 404, 463, 464], "converted_model": [210, 352, 463, 464], "exportconfig": 210, "14": [210, 287, 288, 454, 460, 497, 509, 515], "dynamic_ax": [210, 288, 454], "qlinear": [210, 227, 234, 270, 277, 298, 351, 427, 473], "ax": [210, 288], "onnxqlinear2qdqconfig": 210, "onnxqlinear2qdq": 210, "torch2onnxconfig": [210, 454], "torch2onnx": [210, 285, 290, 343], "qdq_op_fp32_bia": 210, "qdq_op_int32_bia": 210, "qdq_op_fp32_bias_qdq": 210, "resnet50": [210, 426, 449, 452, 454, 464, 466, 470, 501, 504, 508, 515], "int8_onnx_config": [210, 454], "randn": [210, 454], "224": [210, 238, 280, 426, 447, 452, 454, 457, 463, 466, 485, 511, 514], "batch_siz": [210, 215, 217, 222, 223, 224, 225, 226, 245, 258, 260, 265, 266, 267, 268, 269, 288, 424, 446, 447, 452, 454, 458, 463, 466, 504], "tf2onnxconfig": [210, 454], "tf2onnx": [210, 285, 290, 343], "output_graph": 210, "dyna": [210, 290, 303, 343, 424, 459, 503], "sigopt": [211, 212, 254, 255, 290, 343, 502], "tpe": [211, 212, 254, 255, 290, 343], "sigopttunestrategi": [213, 256], "q_dataload": [213, 214, 256, 257, 328, 329, 330, 331, 333, 334, 335, 336, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 458, 512], "eval_func": [213, 214, 256, 257, 327, 328, 329, 330, 331, 333, 334, 335, 336, 352, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 404, 406, 423, 446, 447, 449, 450, 451, 452, 463, 486, 504, 505, 506, 512, 514], "eval_metr": [213, 214, 352, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 406, 462, 485, 504], "q_hook": [213, 214, 256, 257, 328, 329, 330, 331, 333, 334, 335, 336, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397], "mandatori": [213, 214, 256, 257, 385, 463, 514], "yield": [213, 214, 223, 245, 256, 257, 266, 330, 352, 385, 389, 404, 406, 446, 504, 512], "_": [213, 214, 256, 257, 385, 423, 424, 426, 427, 428, 445, 449, 450, 452, 454, 456, 463, 464, 465, 466, 472, 476, 478, 480, 481, 487, 490, 491, 499, 501, 504, 506, 507, 508, 509, 510, 512, 514], "well": [213, 214, 256, 257, 352, 385, 406, 424, 426, 447, 501, 504, 507, 509, 514], "taken": [213, 214, 256, 257, 352, 385, 406, 504], "reserv": [213, 214, 256, 257], "abl": [213, 214, 256, 257, 352, 385, 406, 474, 483, 504], "tuner": [213, 214, 256, 257, 289, 326, 352, 385, 406, 504], "scalar": [213, 214, 256, 257, 352, 385, 406, 462, 504, 509, 512], "pseudo": [213, 214, 256, 257, 385, 406, 506, 510], "someth": [213, 214, 227, 256, 257, 270, 385, 406], "fefin": [214, 257], "tpetunestrategi": [214, 257], "basedatalod": [215, 258], "basedataload": [215, 220, 222, 258, 263, 265], "last_batch": [215, 217, 222, 224, 245, 258, 260, 265, 267, 446], "rollov": [215, 217, 222, 224, 245, 258, 260, 265, 267, 446], "collate_fn": [215, 217, 218, 222, 224, 245, 258, 260, 261, 265, 267, 446, 447], "sampler": [215, 217, 219, 222, 224, 245, 258, 260, 262, 265, 267, 279, 290, 339, 400, 446, 452], "batch_sampl": [215, 217, 222, 224, 245, 258, 260, 265, 267, 446], "num_work": [215, 217, 222, 224, 245, 258, 260, 265, 267, 446, 463, 504], "pin_memori": [215, 217, 222, 224, 245, 258, 260, 265, 267, 446], "shuffl": [215, 217, 222, 224, 245, 258, 260, 265, 267, 446, 463, 504], "_generate_dataload": [215, 258], "check_dataload": 216, "default_col": [217, 260], "outer": [217, 260], "defaultdataload": [217, 224, 260, 267], "style": [218, 232, 261, 275, 404, 422, 447, 458], "drop_last": [218, 223, 261, 266], "iterablefetch": [218, 261], "indexfetch": [218, 261], "base_dataload": [219, 262, 279, 290], "default_dataload": [219, 262, 279, 290], "fetcher": [219, 262, 279, 290], "mxnet_dataload": [219, 262, 279, 290], "onnxrt_dataload": [219, 262, 279, 290, 378], "pytorch_dataload": [219, 262, 279, 290], "tensorflow_dataload": [219, 262, 279, 290, 383], "mxnetdataload": [220, 263], "onnxrtbertdataload": [221, 264], "variant": [221, 264], "onnxrtdataload": [221, 264, 378], "pytorchdataload": [222, 265], "data_sourc": [223, 266, 409], "__iter__": [223, 227, 266, 270, 446, 447, 463], "matter": [223, 266, 505], "iterablesampl": [223, 266], "squential": [223, 266], "your": [223, 225, 266, 268, 422, 446, 447, 449, 452, 461, 463, 466, 469, 470, 471, 476, 477, 478, 480, 481, 483, 485, 488, 490, 495, 496, 497, 501, 502, 508, 510, 512, 513], "clear": [223, 266, 427, 456, 462, 463], "iterabledataset": [223, 227, 266, 270], "try": [223, 266, 423, 449, 486, 501, 504, 509, 512], "indexdataset": [223, 266], "__getitem__": [223, 227, 242, 266, 270, 283, 446, 447, 463], "__len__": [223, 227, 266, 270, 447], "retriev": [223, 266, 501], "sequentialsampl": [223, 266], "sequenti": [223, 266, 327, 329, 386, 388, 512], "batchsampl": [223, 266], "tfdatadataload": [224, 267], "tensorflow1": [224, 267], "coupl": [224, 267], "satisfi": [224, 267, 449, 460, 488], "tf1": [224, 267, 465], "although": [224, 267, 508], "tensorflowbertdataload": [224, 267], "tensorflowmodelzoobertdataload": [224, 267], "zoo": [224, 242, 267, 283, 426, 453, 457, 515], "tensorflowdataload": [224, 267, 383], "pytorchbertdataset": [225, 268], "model_typ": [225, 268, 417, 447], "tensordataset": [225, 268, 447], "repo": [225, 268, 420, 447, 453, 476, 478, 480, 481, 516], "easi": [225, 268, 326, 454, 463, 486, 489, 502, 504, 508], "squad": [225, 242, 268, 283, 295, 296, 298, 348, 349, 351, 447, 462, 501, 511, 515], "distilbert": [225, 268, 426, 447, 464, 502, 515], "xlnet": [225, 268, 447, 515], "xlm": [225, 268, 447, 515], "101": [225, 268, 298, 351, 462, 491, 509, 515], "2043": [225, 268], "2001": [225, 268], "onnxrtbertdataset": [225, 268], "data_dir": [225, 268, 447], "model_name_or_path": [225, 268, 447, 463, 471, 472, 493, 496, 497], "max_seq_length": [225, 242, 268, 283, 447, 511], "do_lower_cas": [225, 241, 242, 268, 282, 283, 447, 511], "mrpc": [225, 268, 298, 351, 447, 462, 471, 493, 496, 497, 501, 512, 515], "dynamic_length": [225, 268, 447], "shortcut": [225, 268, 447], "token": [225, 236, 239, 242, 268, 279, 281, 283, 290, 291, 292, 343, 344, 345, 412, 447, 462, 463, 485, 486, 506, 508, 509, 511, 512], "longer": [225, 242, 268, 283, 447, 511], "truncat": [225, 242, 268, 283, 447, 511], "shorter": [225, 242, 268, 283, 447, 511], "lowercas": [225, 268, 447], "choic": [225, 268, 427, 447, 462, 488, 509], "qqp": [225, 268, 447, 462, 515], "qnli": [225, 268, 447, 462, 515], "rte": [225, 268, 447, 462, 515], "st": [225, 268, 447, 462], "cola": [225, 268, 447, 462, 515], "mnli": [225, 268, 447, 462, 515], "wnli": [225, 268, 447, 462], "mobilebert": [225, 268, 447, 450, 515], "roberta": [225, 268, 447, 515], "uncas": [225, 242, 268, 283, 447, 511, 515], "load_and_cache_exampl": [225, 268], "cach": [225, 268, 455, 504, 506], "convert_examples_to_featur": [225, 242, 268, 283], "max_length": [225, 268], "label_list": [225, 268, 298, 351], "output_mod": [225, 268], "pad_token": [225, 268], "pad_token_segment_id": [225, 268], "mask_padding_with_zero": [225, 268], "inputfeatur": [225, 242, 268, 283], "properti": [225, 268, 403, 461], "input_id": [225, 242, 268, 283, 463], "vocabulari": [225, 241, 242, 268, 282, 283, 511], "attention_mask": [225, 268, 463], "usual": [225, 268, 428, 449, 450, 487, 500, 501, 504, 509], "NOT": [225, 268, 456], "token_type_id": [225, 268, 463], "segment": [225, 268, 292, 294, 345, 347], "portion": [225, 268], "regress": [225, 268, 449], "seq_length": [225, 268], "tensorflowbertdataset": [225, 268], "label_fil": [225, 242, 268, 283, 447, 511], "tfrecord": [225, 226, 227, 268, 269, 270, 447], "guid": [225, 268, 423, 426, 447, 450, 460, 466, 474, 483, 516], "parsedecodebert": [225, 268], "tensorflowmodelzoobertdataset": [225, 226, 268, 269], "num_cor": [225, 226, 230, 268, 269, 273, 447], "28": [225, 226, 230, 268, 269, 273, 447, 515], "coco": [226, 233, 237, 269, 276, 294, 298, 347, 351, 462, 501], "parsedecodecoco": [226, 269], "cocorecorddataset": [226, 269], "interleav": [226, 269, 447], "parallel": [226, 269, 379, 384, 447, 463, 489, 492, 512], "cocoraw": [226, 269, 447], "img_dir": [226, 269, 447], "val2017": [226, 269, 447], "anno_dir": [226, 269, 447], "annot": [226, 269, 294, 347, 404, 428, 429, 447, 462, 501, 512], "instances_val2017": [226, 269, 447], "jpg": [226, 230, 232, 269, 273, 275, 426, 447], "imag": [226, 227, 230, 232, 238, 242, 269, 270, 273, 275, 280, 283, 294, 347, 447, 452, 454, 501, 503, 509, 510, 511, 515], "coconpi": [226, 269, 447], "npy_dir": [226, 269, 447], "npy": [226, 269, 447], "tensorflowdataset": [227, 270], "pytorchdataset": [227, 270], "mxnetdataset": [227, 270], "onnxrtqldataset": [227, 270], "onnxrtitdataset": [227, 270], "IT": [227, 234, 270, 277, 502], "pytorchmxnetwrapdataset": [227, 270], "datafunc": [227, 270], "pytorchmxnetwrapfunct": [227, 242, 270, 283], "framework_dataset": [227, 270], "convent": [227, 270, 294, 347, 450], "imageclassifi": [227, 270], "tensorflow_itex": [227, 230, 232, 234, 270, 273, 275, 277, 446, 503], "onnxrt_qdq": [227, 234, 270, 277, 503], "onnxrt_qlinearop": [227, 234, 242, 270, 277, 283, 503], "onnxrt_integerop": [227, 234, 242, 270, 277, 283, 503], "pytorch_ipex": [227, 234, 270, 277, 463, 503, 514], "pytorch_fx": [227, 234, 270, 277, 463, 503], "dataset_registri": [227, 270], "dataset_typ": [227, 270], "dataset_format": [227, 270], "data_format": [227, 238, 270, 280], "raw_imag": [227, 270], "overwrit": [227, 270, 476, 480], "download_url": [227, 270], "filenam": [227, 270, 417, 447, 488], "md5": [227, 270], "address": [227, 270, 421, 464, 485, 487, 490, 502], "gen_bar_updat": [227, 270], "bar": [227, 270, 483, 502], "check_integr": [227, 270], "fpath": [227, 270], "checksum": [227, 270], "calculate_md5": [227, 270], "chunk_siz": [227, 270], "cifar10": [227, 270, 447], "cifar100": [227, 270, 447], "databas": [227, 270, 490], "www": [227, 270, 447, 515], "toronto": [227, 270, 447], "kriz": [227, 270, 447], "cifar": [227, 270, 447, 515], "tar": [227, 270, 447, 449, 478, 481], "gz": [227, 270, 447, 449, 478, 481], "manual": [227, 270, 447, 466, 472, 474, 477, 490, 495, 496, 497, 501], "subset": [227, 230, 270, 273, 447, 487], "internet": [227, 270, 447, 485], "again": [227, 270, 447, 486, 487, 505], "pytorchcifar10": [227, 270], "mxnetcifar10": [227, 270], "tensorflowcifar10": [227, 270], "pytorchcifar100": [227, 270], "mxnetcifar100": [227, 270], "tensorflowcifar100": [227, 270], "mnist": [227, 270, 447, 452], "nation": [227, 270, 421], "institut": [227, 270], "standard": [227, 242, 270, 283, 428, 449, 454, 462, 511, 512], "technologi": [227, 270, 463], "fashionmnist": [227, 270, 447], "npz": [227, 270, 447], "idx1": [227, 270, 447], "ubyt": [227, 270, 447], "idx3": [227, 270, 447], "t10k": [227, 270, 447], "pytorchmnist": [227, 270], "mxnetmnist": [227, 270], "tensorflowmnist": [227, 270], "pytorchfashionmnist": [227, 270], "mxnetfashionmnist": [227, 270], "tensorflowfashionmnist": [227, 270], "imagefold": [227, 270, 447, 452, 463], "expect": [227, 270, 421, 422, 455, 483, 504, 506, 512], "subfold": [227, 270, 486], "belong": [227, 270, 356, 504], "class_1": [227, 270, 447], "xxx": [227, 270, 422, 447, 463], "png": [227, 270, 447], "xxy": [227, 270, 447], "xxz": [227, 270, 447], "class_n": [227, 270, 447], "123": [227, 270, 447, 511], "nsdf3": [227, 270, 447], "asd932_": [227, 270, 447], "categori": [227, 270, 293, 346, 444, 447, 473], "mxnetimagefold": [227, 270], "tensorflowtfrecorddataset": [227, 270], "tensorflowimagerecord": [227, 270], "imagenet": [227, 230, 238, 270, 273, 280, 424, 449, 463, 472, 487, 501, 510, 511, 514, 515], "000": [227, 270, 426, 447], "099": [227, 270, 447], "tensorflowvocrecord": [227, 270], "pascal": [227, 270], "voc": [227, 270, 298, 351], "2012": [227, 270], "00000": [227, 270], "00004": [227, 270], "00001": [227, 270], "00003": [227, 270], "dummydataset": [228, 229, 271, 272], "127": [228, 229, 271, 272, 447, 504, 509], "float32": [228, 229, 242, 271, 272, 283, 294, 347, 427, 444, 447, 463, 504, 506, 509, 511], "stand_norm": [228, 229, 271, 272, 447], "dummy_v2": [229, 272, 447], "sparse_dummy_v2": [229, 272, 447], "label_shap": [229, 272, 447], "sparsedummydataset": [229, 272], "dense_shap": [229, 272, 447], "sparse_ratio": [229, 272, 447], "imagenetraw": [230, 273, 447], "data_path": [230, 273, 447], "image_list": [230, 273, 447], "img1": [230, 273, 447], "img2": [230, 273, 447], "imgx": [230, 273, 447], "val_map": [230, 273, 447], "txt": [230, 273, 447, 449, 460, 485, 487, 489, 490], "pytorchimagenetraw": [230, 273], "mxnetimagenetraw": [230, 273], "tensorflowimagenetraw": [230, 273], "inteltensorflow": [230, 232, 273, 275, 460], "tensorflowimagenetdataset": [230, 273], "onnxrtimagenetdataset": [230, 273], "bert_dataset": [231, 236, 274, 279, 290, 343], "coco_dataset": [231, 236, 274, 279, 290, 343], "dummy_dataset": [231, 236, 274, 279, 290, 343], "dummy_dataset_v2": [231, 236, 274, 279, 290, 343], "imagenet_dataset": [231, 236, 274, 279, 290, 343], "style_transfer_dataset": [231, 236, 274, 279, 290, 343], "styletransferdataset": [232, 275], "content_fold": [232, 275, 447], "style_fold": [232, 275, 447], "crop_ratio": [232, 275, 447], "resize_shap": [232, 275, 447], "256": [232, 238, 275, 280, 447, 452, 463, 511], "image_format": [232, 275, 447], "holder": [232, 275, 447], "labelbalancecocorecordfilt": [233, 276], "balanc": [233, 276, 506, 509], "labelbalancecocorawfilt": [233, 276], "tensorflowfilt": [234, 277], "onnxrtqlfilt": [234, 277], "onnxrtitfilt": [234, 277], "pytorchfilt": [234, 277], "mxnetfilt": [234, 277], "filter_registri": [234, 277], "filter_typ": [234, 277], "__call__": [234, 277], "coco_filt": [235, 236, 278, 279, 290, 343], "imagenet_transform": [236, 239, 279, 281, 290, 343], "parsedecodecocotransform": 237, "quantizedinput": [238, 280, 511], "labelshift": [238, 280, 511], "label_shift": [238, 280, 511], "parsedecodeimagenet": [238, 280, 511], "proto": [238, 242, 280, 283, 511], "parsedecodeimagenettransform": [238, 280], "tensorflowtransposelastchannel": 238, "tensorflowshiftrescal": 238, "rescal": [238, 242, 283, 511], "tensorflowresizecropimagenettransform": [238, 280], "random_crop": [238, 280, 511], "resize_sid": [238, 280, 511], "resize_method": [238, 280], "bilinear": [238, 242, 280, 283, 511], "random_flip_left_right": [238, 280, 511], "mean_valu": [238, 280, 511], "channels_last": [238, 280, 466], "subpixel": [238, 280], "rgb": [238, 280], "seri": [238, 280, 426, 460, 463, 511], "applic": [238, 280, 429, 454, 466, 483, 485, 490, 491, 495, 496, 502, 506, 509, 510, 511, 513], "crop": [238, 242, 280, 283, 447, 511], "flip": [238, 242, 280, 283, 511], "left": [238, 242, 280, 283, 477, 483, 509, 511], "std": [238, 242, 280, 283, 463, 511], "bilinearimagenettransform": [238, 280], "central_fract": [238, 280, 511], "875": [238, 280, 511], "fraction": [238, 280, 511], "onnxbilinearimagenettransform": [238, 280], "onnxresizecropimagenettransform": [238, 280], "std_valu": [238, 280], "229": [238, 280, 463], "225": [238, 280, 463], "resizewithaspectratio": [238, 280], "87": [238, 280, 515], "inter_pol": [238, 280], "cv2": [238, 280], "inter_area": [238, 280], "aspect": [238, 242, 280, 283, 511], "postprocess_cl": [240, 250, 463], "user_postprocess": [240, 250], "convert_to_unicod": [241, 282], "unicod": [241, 282], "assum": [241, 282, 294, 305, 347, 427, 456, 483], "load_vocab": [241, 282], "vocab_fil": [241, 242, 282, 283, 511], "convert_by_vocab": [241, 282], "vocab": [241, 282], "whitespace_token": [241, 282], "whitespac": [241, 282, 296, 349], "clean": [241, 282, 422, 463], "piec": [241, 282, 291, 344, 462, 506], "fulltoken": [241, 282], "tokenzi": [241, 282], "basictoken": [241, 282], "punctuat": [241, 282, 291, 296, 344, 349], "lower": [241, 242, 282, 283, 296, 349, 390, 451, 501, 502, 504, 509, 511, 512], "wordpiecetoken": [241, 282], "unk_token": [241, 282], "unk": [241, 282], "max_input_chars_per_word": [241, 282], "200": [241, 282, 423, 491, 512], "wordpiec": [241, 242, 282, 283, 511], "concat_gener": [242, 283], "inc": [242, 283, 421, 428, 466, 473, 483, 485, 489, 502, 503, 507, 512], "tensorflowtransform": [242, 283], "mxnettransform": [242, 283], "pytorchtransform": [242, 283], "onnxrtqltransform": [242, 283], "onnxrtittransform": [242, 283], "transform_registri": [242, 283], "transform_typ": [242, 283], "basetransform": [242, 283], "tensorflowwrapfunct": [242, 283], "transform_func": [242, 283], "pytorchmxnettransform": [242, 283], "get_torchvision_map": [242, 283], "torchvis": [242, 283, 453, 457, 466, 472, 486], "composetransform": [242, 283], "transform_list": [242, 283, 511], "compos": [242, 283, 409, 511], "croptoboundingbox": [242, 283, 511], "offset_height": [242, 283, 511], "offset_width": [242, 283, 511], "target_height": [242, 283, 511], "target_width": [242, 283, 511], "box": [242, 283, 294, 298, 347, 351, 423, 462, 466, 477, 483, 510, 511, 512], "coordin": [242, 283, 330, 389, 489, 511, 512], "top": [242, 283, 289, 298, 313, 318, 326, 351, 462, 483, 486, 487, 511], "corner": [242, 283, 427, 429, 511], "horizont": [242, 283, 511], "mxnetcroptoboundingbox": [242, 283], "onnxrtcroptoboundingbox": [242, 283], "tensorflowcroptoboundingbox": [242, 283], "resizewithratio": [242, 283, 511], "min_dim": [242, 283, 511], "800": [242, 283, 511], "max_dim": [242, 283, 511], "1365": [242, 283, 511], "constant_valu": [242, 283], "longest": [242, 283, 511], "side": [242, 283, 447, 477, 511], "exce": [242, 283, 506, 511], "tensorflowresizewithratio": [242, 283], "permut": [242, 283, 511], "tensorflowtranspos": [242, 283], "mxnettranspos": [242, 283], "pytorchtranspos": [242, 283], "randomverticalflip": [242, 283, 511], "tensorflowrandomverticalflip": [242, 283], "randomhorizontalflip": [242, 283, 463, 511], "tensorflowrandomhorizontalflip": [242, 283], "toarrai": [242, 283, 511], "pil": [242, 283, 511], "casttftransform": [242, 283], "castonnxtransform": [242, 283], "castpytorchtransform": [242, 283], "centercroptftransform": [242, 283], "center": [242, 283, 425, 426, 460, 511, 512], "paddedcentercroptransform": [242, 283], "crop_pad": [242, 283], "resizetftransform": [242, 283], "bicub": [242, 283, 511], "resizepytorchtransform": [242, 283], "randomcroptftransform": [242, 283], "randomresizedcroppytorchtransform": [242, 283], "08": [242, 283, 511, 515], "randomresizedcropmxnettransform": [242, 283], "randomresizedcroptftransform": [242, 283], "normalizetftransform": [242, 283], "deviat": [242, 283, 449, 511], "broadcast": [242, 283, 452, 511], "rescalekeraspretraintransform": [242, 283], "rescaletftransform": [242, 283], "rescaletransform": [242, 283], "alignimagechanneltransform": [242, 283], "dim": [242, 283, 506, 509, 511], "align": [242, 283, 421, 506, 511], "must": [242, 283, 294, 347, 422, 423, 428, 444, 446, 460, 504, 511], "pytorchalignimagechannel": [242, 283], "tondarraytransform": [242, 283], "resizemxnettransform": [242, 283], "resizetransform": [242, 283], "cropresizetftransform": [242, 283], "boundari": [242, 283, 511], "area": [242, 283, 294, 347, 462, 511], "pytorchcropresizetransform": [242, 283], "mxnetcropresizetransform": [242, 283], "cropresizetransform": [242, 283], "centercroptransform": [242, 283], "mxnetnormalizetransform": [242, 283], "pytorchnormalizetransform": [242, 283], "normalizetransform": [242, 283], "randomcroptransform": [242, 283], "randomresizedcroptransform": [242, 283], "get_final_text": [242, 283], "pred_text": [242, 283], "orig_text": [242, 283], "project": [242, 283, 420, 421, 422, 488, 502, 508, 512, 516], "squadexampl": [242, 283], "qas_id": [242, 283], "question_text": [242, 283], "doc_token": [242, 283], "orig_answer_text": [242, 283], "start_posit": [242, 283], "end_posit": [242, 283], "is_imposs": [242, 283], "simpl": [242, 283, 460, 463, 501, 508, 509, 512], "answer": [242, 283, 295, 296, 348, 349, 421, 487, 501, 511, 515], "posit": [242, 283, 421, 462, 466, 490, 495, 496, 497], "unique_id": [242, 283], "example_index": [242, 283], "doc_span_index": [242, 283], "token_to_orig_map": [242, 283], "token_is_max_context": [242, 283], "input_mask": [242, 283, 463], "segment_id": [242, 283, 463], "read_squad_exampl": [242, 283], "input_fil": [242, 283], "doc_strid": [242, 283, 511], "max_query_length": [242, 283, 511], "output_fn": [242, 283], "inputbatch": [242, 283], "collecttransform": [242, 283], "10833": [242, 283], "tfsquadv1posttransform": [242, 283], "n_best_siz": [242, 283, 511], "384": [242, 283, 511], "64": [242, 283, 424, 506, 509, 511, 515], "max_answer_length": [242, 283, 511], "30": [242, 283, 453, 457, 459, 509, 511, 515], "nbest_predict": [242, 283, 511], "question": [242, 283, 295, 296, 348, 349, 421, 422, 426, 427, 460, 466, 489, 501, 509, 511, 515], "anoth": [242, 283, 291, 300, 344, 417, 449, 450, 476, 480, 511, 512], "long": [242, 283, 455, 506, 511], "document": [242, 283, 404, 422, 428, 429, 434, 452, 464, 468, 478, 481, 482, 488, 489, 491, 501, 507, 511, 513], "chunk": [242, 283, 511], "tfmodelzoocollecttransform": [242, 283], "tfsquadv1modelzooposttransform": [242, 283], "squadv1": [242, 283, 511], "parsedecodevoctransform": [242, 283], "conf_fname_or_obj": [243, 252, 284, 289, 299, 300, 301, 302, 304, 313, 318, 326], "unnecessari": [243, 463], "tensorflowcrossentropyloss": 244, "pytorchcrossentropyloss": 244, "tensorflowsparsecategoricalcrossentropi": 244, "sparsecategoricalcrossentropyloss": 244, "setter": 245, "calib_dataload": [245, 327, 385, 423, 426, 446, 447, 449, 457, 458, 462, 463, 485, 486, 504, 505], "reason": [245, 421, 428, 446, 487, 506, 510, 512], "know": [245, 452, 507], "metric_cl": [247, 351, 385, 463], "user_metr": [247, 351, 385], "alwai": [247, 294, 347, 351, 385, 449, 462, 463, 487], "recommend": [247, 351, 427, 447, 456, 474, 477, 482, 484, 501, 503, 512], "set_backend": 248, "tensorflowoptim": 249, "pytorchoptim": 249, "optimizer_registri": 249, "optimizer_typ": 249, "cross": [249, 298, 351, 458, 512], "tensorflowsgd": 249, "tensorflowadamw": 249, "tensorflow_addon": 249, "adamw": 249, "tensorflowadam": 249, "adam": [249, 514], "pytorchsgd": 249, "record_output": 251, "output_process": 251, "get_activ": 251, "tensorflowimagefold": 270, "qlinear2qdq": [285, 290, 343], "qlinearop": [286, 449, 459, 474, 504, 515], "check_model": 286, "onnx_qlinear_to_qdq": 286, "input_name_to_nod": 286, "destin": [286, 300], "tf_to_fp32_onnx": 287, "tf_to_int8_onnx": 287, "int8_model": [287, 288, 427], "get_node_map": 288, "fp32_onnx_path": 288, "module_node_map": 288, "get_quantizable_onnx_op": 288, "quantize_nod": 288, "dynamic_quant_export": 288, "pt_fp32_model": 288, "pt_int8_model": 288, "weight_typ": 288, "s8": 288, "static_quant_export": 288, "_quantiz": 288, "torch_to_fp32_onnx": 288, "do_constant_fold": 288, "verbos": [288, 330, 389], "torch_to_int8_onnx": 288, "achiev": [289, 326, 454, 463, 486, 500, 501, 502, 504, 510, 512], "across": [289, 299, 326, 352, 448, 463, 489, 492, 501, 509, 512], "variou": [289, 299, 326, 352, 429, 459, 466, 492, 501, 503], "dl": [289, 299, 313, 318, 326, 352, 449, 458, 470, 483, 502, 515], "bring": [289, 326, 477, 489, 509], "unifi": [289, 326, 427, 428, 429, 446, 458, 459, 462, 463, 465], "vari": [289, 313, 318, 326, 487, 501, 509, 515], "roc": [289, 298, 313, 318, 326, 351], "flexibl": [289, 313, 318, 326, 450, 489, 501, 506], "via": [289, 313, 318, 326, 421, 426, 452, 459, 463, 466, 483, 501, 502], "popular": [290, 343, 419, 426, 427, 428, 445, 450, 453, 454, 457, 463, 501, 504, 506, 512, 513], "techniqu": [290, 343, 419, 426, 459, 463, 466, 485, 500, 501, 502, 503, 504, 513, 514, 515], "bleu": [290, 292, 297, 343, 345, 350, 462, 501], "bleu_util": [290, 297, 343, 350], "coco_label_map": [290, 297, 343, 350], "coco_tool": [290, 297, 343, 350], "evaluate_squad": [290, 297, 343, 350], "f1": [290, 295, 297, 298, 343, 348, 350, 351, 452, 462, 463, 486, 508, 515], "basic_na": [290, 303, 343], "nas_util": [290, 303, 343], "pruner_legaci": [290, 343], "gradient_sensit": [290, 309, 343], "group_lasso": [290, 309, 343], "pruning_recip": [290, 343], "tile_pattern": [290, 314, 315], "logger": [290, 319, 343, 407, 410, 417], "prune_util": [290, 319, 343], "tuning_sampl": [290, 332, 338, 343, 393, 399], "tuning_spac": [290, 332, 338, 339, 341, 343, 393, 399, 400, 402], "tuning_struct": [290, 332, 338, 339, 340, 343, 393, 399, 400, 401], "auto_mixed_precis": [290, 332, 343, 393], "graph_optim": [290, 343], "mixed_precis": [290, 343, 352, 463], "model_convers": [290, 343], "pruning_v2": [290, 343], "unicoderegex": [291, 344], "hoc": [291, 344], "hack": [291, 344], "recogn": [291, 344, 512], "nondigit_punct_r": [291, 344], "compil": [291, 344, 463], "express": [291, 344, 421], "preced": [291, 344, 509], "digit": [291, 344, 417, 502], "punct_nondigit_r": [291, 344], "symbol_r": [291, 344], "bleu_token": [291, 344], "mose": [291, 344], "smt": [291, 344], "mosesdecod": [291, 344], "mteval": [291, 344], "v14": [291, 344], "pl": [291, 344], "l954": [291, 344], "l983": [291, 344], "bilingu": [291, 344], "understudi": [291, 344], "qualiti": [291, 344], "machin": [291, 344, 454, 460, 469, 483, 485, 490, 502, 509, 510], "translat": [291, 292, 344, 345, 501, 512], "natur": [291, 344, 454], "approxim": [291, 292, 344, 345, 428, 462, 506], "glue": [291, 298, 344, 351, 447, 462, 463, 472], "word": [291, 344, 462, 501, 506, 515], "ngram": [291, 344, 462], "breviti": [291, 292, 344, 345, 462], "penalti": [291, 292, 344, 345, 462], "doe": [291, 344, 403, 446, 447, 462, 463, 506, 507, 511], "beam": [291, 344, 462], "tensor2tensor": [292, 345], "bleu_hook": [292, 345], "compute_bleu": [292, 345], "reference_corpu": [292, 345], "translation_corpu": [292, 345], "max_ord": [292, 345], "use_bp": [292, 345], "against": [292, 345], "gram": [292, 345], "bleu_scor": [292, 345], "third": [294, 347, 461], "parti": [294, 347, 461, 504], "pycocotool": [294, 347, 455, 460], "noth": [294, 347, 512], "thu": [294, 347, 463, 501, 504], "cannot": [294, 347, 423, 455, 506, 510], "jonathanhuang": [294, 347], "image_id": [294, 347, 462], "invok": [294, 347, 428], "groundtruth_dict": [294, 347], "exportgroundtruthtococo": [294, 347], "groundtruth_boxes_list": [294, 347], "groundtruth_classes_list": [294, 347], "max_num_class": [294, 347], "output_path": [294, 347], "detections_list": [294, 347], "exportdetectionstococo": [294, 347], "detection_boxes_list": [294, 347], "detection_scores_list": [294, 347], "detection_classes_list": [294, 347], "cocowrapp": [294, 347], "loadannot": [294, 347], "cocoevalwrapp": [294, 347], "agnostic_mod": [294, 347], "computemetr": [294, 347], "detection_typ": [294, 347], "bbox": [294, 347, 423, 462], "hold": [294, 330, 347, 389, 447], "iou_typ": [294, 347], "iou_thr": [294, 298, 347, 351, 462], "map_point": [294, 298, 347, 351, 462], "cocoev": [294, 347], "mscoco": [294, 347], "Then": [294, 347, 428, 449, 476, 478, 480, 481, 487, 509, 512], "exportsingleimagegroundtruthtococo": [294, 347], "next_annotation_id": [294, 347], "category_id_set": [294, 347], "groundtruth_box": [294, 347], "groundtruth_class": [294, 347], "groundtruth_mask": [294, 347], "groundtruth_is_crowd": [294, 347], "ingest": [294, 347], "here": [294, 347, 404, 428, 447, 452, 453, 454, 456, 457, 462, 471, 478, 481, 483, 486, 488, 490, 504, 507, 508, 509, 515], "exportsingleimagedetectionstococo": [294, 347], "uniqu": [294, 327, 347, 504], "assign": [294, 347, 417, 452, 503, 512], "num_gt_box": [294, 347], "num_detect": [294, 298, 347, 351, 462, 463, 514], "image_height": [294, 347], "image_width": [294, 347], "detection_mask": [294, 347], "crowd": [294, 347], "insid": [294, 347, 450, 451, 484, 501, 512], "exportsingleimagedetectionboxestococo": [294, 347], "detection_box": [294, 347, 463, 514], "detection_scor": [294, 347, 463, 514], "detection_class": [294, 347, 463, 514], "exporsingleimagedetectionboxestococo": [294, 347], "exportsingleimagedetectionmaskstococo": [294, 347], "allenai": [295, 296, 348, 349], "bi": [295, 296, 348, 349], "att": [295, 296, 348, 349], "flow": [295, 296, 348, 349, 423, 424, 463], "f1_score": [295, 296, 348, 349], "ground_truth": [295, 296, 348, 349], "ground": [295, 296, 348, 349], "truth": [295, 296, 348, 349], "metric_max_over_ground_truth": [295, 296, 348, 349], "metric_fn": [295, 296, 348, 349], "exact_match_scor": [295, 348], "exact": [295, 348], "articl": [295, 296, 348, 349], "paragraph": [295, 296, 348, 349], "qa": [295, 296, 348, 349, 426], "normalize_answ": [296, 349], "newlin": [296, 349, 417], "tab": [296, 349, 483, 510], "harmon": [296, 298, 349, 351], "recal": [296, 298, 349, 351], "answer_start": [296, 349], "177": [296, 349], "denver": [296, 349], "bronco": [296, 349], "nfl": [296, 349], "team": [296, 349, 421, 505], "afc": [296, 349], "super": [296, 349, 424], "bowl": [296, 349], "50": [296, 349, 424, 428, 487, 501, 509, 515], "56be4db0acb8001400a502ec": [296, 349], "form": [296, 349, 449, 450, 483], "percentag": [296, 349, 445, 506, 514], "tensorflowmetr": [298, 351], "maintain": [298, 351, 421, 422, 465, 466, 478, 481, 485, 489, 490, 501, 506, 507], "pytorchmetr": [298, 351], "mxnetmetr": [298, 351], "onnxrtqlmetr": [298, 351], "onnxrtitmetr": [298, 351], "metric_registri": [298, 351], "metric_typ": [298, 351], "decorator_metr": [298, 351], "basemetr": [298, 351, 385], "single_output": [298, 351], "hvd": [298, 351, 452], "wrappytorchmetr": [298, 351], "wrapmxnetmetr": [298, 351], "wraponnxrtmetr": [298, 351], "proport": [298, 351], "pred_list": [298, 351], "pytorchloss": [298, 351], "mae": [298, 351, 462], "compare_label": [298, 351, 385, 462], "rmse": [298, 351, 462, 512], "squar": [298, 333, 351, 394, 449, 462, 487, 509, 512], "tensorflowtopk": [298, 351], "k": [298, 351, 385, 462, 485, 501], "among": [298, 351, 477, 509], "outcom": [298, 351], "num_correct": [298, 351], "num_sampl": [298, 351], "generaltopk": [298, 351], "cocomapv2": [298, 351, 462], "anno_path": [298, 351, 462], "map_kei": [298, 351], "detectionboxes_precis": [298, 351], "output_index_map": [298, 351, 462], "tensorflowmap": [298, 351], "tensorflowcocomap": [298, 351], "tensorflowvocmap": [298, 351], "squadf1": [298, 351, 462], "miou": [298, 351], "num_class": [298, 351], "21": [298, 351, 471, 472, 493, 496, 497, 509, 515], "iou": [298, 351], "intersect": [298, 351, 427, 462], "union": [298, 351, 406, 462, 493], "onnxrtglu": [298, 351], "dlrm": [298, 351], "modelconvers": 300, "typic": [300, 327, 424, 426, 451, 453, 457, 487, 501, 515], "basicna": 301, "model_build": [301, 304], "conf_fnam": 301, "nasbas": [304, 424], "nas_registri": 305, "nas_method": 305, "create_search_space_pool": 305, "idx": [305, 447], "enumer": [305, 406, 427, 450, 451, 452, 463, 500, 501, 510], "find_pareto_front": 305, "pareto": [305, 424], "front": [305, 424], "n_point": 305, "n_metric": 305, "n_pareto_point": 305, "gradientsensitivityprun": 307, "pytorchmodel": [307, 308, 310, 311, 312, 361], "overwritten": [307, 308, 310, 311, 312, 471], "grouplassoprun": 308, "legaci": 309, "basicmagnitudeprun": 310, "patternlockprun": [311, 323], "pruner_registri": 312, "clase": 312, "pruningconf": [313, 318], "tfpruningcallback": [313, 318], "input_model": [313, 318, 465, 486, 487, 510], "pure": [313, 318, 501], "pattern_registri": 316, "pattern_typ": 316, "patternbas": 316, "mask_shap": [316, 317], "is_contigu": 316, "tile": 317, "tilepatternbas": 317, "tilepattern_1x1": 317, "1x1": [317, 450, 463, 501], "tilepattern_2x2": 317, "2x2": [317, 509], "tilepattern_1x16": 317, "1x16": 317, "tilepattern_4x1": 317, "tilepattern_1x2": 317, "1x2": [317, 509], "patternnxm": 321, "patternninm": 321, "reset_non_value_to_default": 322, "parse_not_to_prun": 322, "update_frequency_on_step": [323, 503], "max_sparsity_ratio_per_lay": [323, 503], "magnitudeprun": 323, "snipprun": 323, "snipmomentumprun": 323, "moreoev": 323, "quantconf": 326, "separ": [327, 421, 458, 461, 490, 492, 500, 503], "opt_model": [327, 463], "fulli": [327, 463, 490, 504, 509], "train_func": [327, 406, 452, 463, 504], "automixedprecisiontunestrategi": [328, 387], "basictunestrategi": [329, 388], "stage": [329, 334, 386, 388, 395, 450, 501, 510, 512], "polici": [329, 333, 386, 388, 394, 421, 426, 514, 516], "bayesiantunestrategi": [330, 389], "acq_max": [330, 389], "ac": [330, 389], "gp": [330, 389], "y_max": [330, 389], "n_warmup": [330, 389], "10000": [330, 389, 501], "n_iter": [330, 389], "acquisit": [330, 389], "gaussian": [330, 389, 512], "relev": [330, 389, 428, 429, 487, 501], "acq": [330, 389], "randomst": [330, 389], "scipi": [330, 389], "x_max": [330, 389], "targetspac": [330, 389], "pbound": [330, 389], "9527": [330, 389, 463, 514], "bayesianoptim": [330, 389], "exhaustivetunestrategi": [331, 391], "msetunestrategi": [333, 394], "mse_v2tunestrategi": [334, 395], "revert": [334, 342, 395, 403, 512], "randomtunestrategi": [335, 396], "strategy_registri": [336, 397, 512], "tunestrategi": [336, 397, 512], "tuningsamplerregistri": 339, "tuningsampl": [339, 400], "tuningord": [339, 400], "Not": [339, 340, 400, 401, 417, 424], "tuningspac": [339, 340, 400, 401], "tuning_order_lst": [339, 400], "initial_op_tuning_cfg": [339, 400], "modelwisetuningsampl": [339, 400], "tuning_items_prior": [339, 400], "op_dtype_dict": [339, 400], "optuningconfig": [339, 340, 341, 400, 401, 402], "optypewisetuningsampl": [339, 400], "opwisetuningsampl": [339, 400], "fallbacktuningsampl": [339, 400], "op_dtyp": [339, 400], "accumul": [339, 400, 512], "skip_first": [339, 400], "smoothquantsampl": [339, 400], "tuningitem": [340, 401], "item_typ": [340, 401], "pattern_to_intern": [340, 401], "default_dtyp": [340, 401], "pattern_to_path": [340, 401], "quant_mode_from_pattern": [340, 401], "internal_pattern": [340, 401], "initial_tuning_cfg_with_quant_mod": [340, 401], "op_name_typ": [340, 401], "step1": [340, 401], "step2": [340, 401], "complet": [340, 401, 427, 428, 501, 504, 512, 514, 515], "step3": [340, 401], "step4": [340, 401], "step5": [340, 401], "op_quant_mod": [341, 402], "ordereddefaultdict": [342, 403], "extract_data_typ": [342, 403], "sign": [342, 403, 422, 426, 429, 445, 485, 502, 504, 506, 508], "reverted_data_typ": [342, 403], "signed_flag": [342, 403], "get_adaptor_nam": [342, 403], "experiment": [343, 378, 383, 424, 447, 451, 452, 454, 463, 501, 503, 504, 507, 511], "base_model": [343, 354], "keras_model": [343, 354], "mxnet_model": [343, 354], "nets_factori": [343, 354], "onnx_model": [343, 354, 378, 486], "tensorflow_model": [343, 354, 383, 487], "torch_model": [343, 354], "collect_layer_histogram": [343, 410], "create_obj_from_config": [343, 410], "kl_diverg": [343, 410], "load_huggingfac": [343, 410, 463], "neural_insights_util": [343, 410], "weights_detail": [343, 410], "sub_class": [351, 385], "register_customer_metr": 351, "topk": [351, 385, 452, 462, 463, 485, 504], "frozen": [352, 360, 385, 465], "savedmodel": [352, 360, 385, 515], "onnx_ml_pb2": [352, 465], "hybirdblock": [352, 385], "basemodel": 353, "plai": [353, 502, 506, 509], "role": [353, 506, 509], "kerasmodel": 355, "get_model_fwk_nam": 356, "fwk": 356, "mxnetmodel": 357, "net": 358, "tfslimnetsfactori": 358, "get_model_typ": 360, "validate_graph_nod": 360, "validate_and_inference_input_output": 360, "output_tensor_nam": 360, "graph_sess": 360, "graph_def_sess": 360, "frozen_pb_sess": 360, "load_saved_model": 360, "saved_model_tag": 360, "signatur": 360, "saved_model_dir": 360, "metagraphdef": 360, "keras_sess": 360, "slim_sess": 360, "checkpoint_sess": 360, "estimator_sess": 360, "saved_model_sess": 360, "tensorflowbasemodel": [360, 383], "tensorflowsavedmodelmodel": 360, "tensorflowqatmodel": 360, "tensorflowcheckpointmodel": 360, "tensorflowmodel": 360, "pytorchbasemodel": 361, "pytorchfxmodel": 361, "ipexmodel": 361, "driven": [362, 426, 463, 483, 499, 510], "objective_registri": 362, "objective_custom_registri": 362, "obj_cl": 362, "eural_compressor": 362, "objective_cl": 362, "user_object": 362, "__class__": 362, "__name__": 362, "objective_cfg": 362, "usr_cfg": 362, "user_obj_cfg": 362, "easili": [362, 427, 467, 471, 483, 499, 509], "peak": [362, 499], "multiobject": 362, "metric_criterion": 362, "metric_weight": 362, "obj_criterion": 362, "obj_weight": 362, "is_measur": 362, "parserfactori": 364, "onnxrtparserfactori": 366, "onnxprofilingpars": 368, "respons": [368, 369, 373, 495, 496, 497, 504], "profilingpars": 369, "profilingresult": 370, "total_execution_tim": 370, "accelerator_execution_tim": 370, "cpu_execution_tim": 370, "op_run": 370, "op_defin": 370, "tensorflowparserfactori": 371, "tensorflowprofilingpars": 373, "profilerfactori": [374, 376, 381], "create_onnx_config": 379, "ort": 379, "sessionopt": 379, "delete_assign": 384, "create_tf_config": 384, "tf_modul": 384, "configproto": 384, "set_eager_execut": 384, "entir": [385, 406, 423, 428, 429, 445, 489, 501, 509], "autotunestrategi": 386, "conservativetunestrategi": 390, "o0": [390, 512], "who": [390, 421], "hawq_v2tunestrategi": 392, "made": [392, 427, 504, 507, 512], "impact": [392, 501, 507, 512], "tunestrategymeta": 397, "metaclass": 397, "lowerbitssampl": 400, "blockfallbacktuningsampl": 400, "op_block_lst": 400, "target_dtyp": 400, "alpha_list": 400, "quantopt": 403, "quant_typ": 403, "quant_opt": 403, "preprocess_user_cfg": 403, "op_user_cfg": 403, "op_user_cfg_modifi": 403, "build_slave_faker_model": 403, "slave": [403, 512], "virtual": [403, 502], "classregist": 403, "fun": 404, "attribute1": 404, "module_debug_level1": 404, "debug": [404, 413, 449, 476, 480, 484, 512, 513], "function1": 404, "param1": 404, "param2": 404, "parameter1": 404, "parameter2": 404, "function2": 404, "pep": 404, "484": 404, "output_model": [404, 463, 486, 487, 510], "function3": 404, "section": [404, 429, 449, 450, 451, 483, 486, 488, 501, 503, 506, 514], "restructuredtext": 404, "liter": 404, "generator1": 404, "example_gener": 404, "exampleclass": 404, "param3": 404, "public": [404, 421, 478, 481], "attr1": 404, "attr2": 404, "attr5": 404, "api_doc_exampl": 405, "loop": [406, 423, 424, 428, 429, 456, 492, 508, 512], "compressionmanag": 406, "deal": 406, "pruningconfig": 406, "orchestr": [406, 426, 459, 513], "on_train_begin": [406, 423, 450, 451, 463, 500, 501, 504], "train_loop": [406, 463, 500], "on_epoch_begin": [406, 409, 450, 451, 463, 500], "on_step_begin": [406, 409, 450, 451, 463, 500, 501], "on_after_compute_loss": [406, 450, 451, 463, 500], "backward": [406, 450, 451, 452, 463, 500, 501, 504, 507], "on_before_optimizer_step": [406, 450, 451, 463, 500, 501], "on_step_end": [406, 409, 450, 451, 463, 500], "on_epoch_end": [406, 409, 450, 451, 463, 500], "on_train_end": [406, 450, 451, 463, 500, 501, 504], "path_to_sav": 406, "manag": [406, 409, 463, 466, 467, 477], "top1": [406, 462, 485, 501, 504, 515], "callbacks_list": 406, "layerhistogramcollector": 407, "layer_tensor": 407, "include_lay": 407, "get_func_from_config": 409, "func_dict": 409, "get_preprocess": 409, "get_metr": 409, "get_postprocess": 409, "get_algorithm": 409, "create_dataset": 409, "cfg_preprocess": 409, "cfg_filter": 409, "create_dataload": 409, "dataloader_cfg": 409, "create_eval_func": 409, "postprocess_cfg": 409, "fp32_baselin": [409, 427], "baselin": [409, 508, 510], "create_train_func": 409, "train_cfg": 409, "Their": 409, "auxiliari": 410, "optimizedmodel": 412, "from_pretrain": [412, 463], "save_for_huggingface_upstream": [412, 463], "msg": [413, 491, 495, 496], "fatal": 413, "warn": 413, "alia": [413, 417, 468, 473], "register_neural_insights_workload": 414, "workload_loc": [414, 417], "workload_mod": 414, "workload_nam": 414, "uuid": 414, "update_neural_insights_workload": 414, "workload_uuid": 414, "update_neural_insights_workload_accuracy_data": 414, "baseline_accuraci": 414, "optimized_accuraci": 414, "get_model_path": 414, "is_int8_model": 416, "load_weight_onli": 416, "checkpoint_dir": 416, "history_cfg": 416, "best_configur": 416, "best_model_weight": 416, "snapshot": 416, "cfg_from_fil": 417, "yaml_fil": [417, 447, 452], "lazyimport": 417, "lazi": 417, "till": [417, 512], "decorat": 417, "time_limit": 417, "get_siz": 417, "seen": [417, 427], "recurs": 417, "compute_spars": 417, "fault_tolerant_fil": 417, "equal_dict": 417, "d2": 417, "compare_kei": 417, "ignore_kei": 417, "cpuinfo": 417, "dump_elapsed_tim": [417, 427], "customized_msg": 417, "elaps": 417, "combine_histogram": 417, "old_hist": 417, "old": [417, 463, 507], "get_tensor_histogram": 417, "get_all_fp32_data": 417, "get_tuning_histori": 417, "tuning_history_path": 417, "offlin": [417, 421, 463, 504, 509], "str2arrai": 417, "dequantize_weight": 417, "weight_tensor": 417, "min_filter_tensor": 417, "max_filter_tensor": 417, "scale_info": 417, "captureoutputtofil": 417, "tmp_file_path": 417, "stream": [417, 515], "sy": [417, 469], "stderr": 417, "captur": 417, "statist": [417, 418], "header": [417, 455], "field_nam": 417, "output_handl": 417, "printer": 417, "global_st": 417, "load_data_from_pkl": 417, "pkl": 417, "dump_data_to_loc": 417, "show_memory_info": 417, "hint": 417, "dump_class_attr": 417, "compare_object": 417, "obj1": 417, "obj2": 417, "ignore_attr": 417, "comparison": [417, 507, 510], "alias_param": 417, "param_nam": 417, "param_alia": 417, "alias": 417, "print_tabl": 417, "column_map": 417, "table_entri": 417, "titl": [417, 461, 484, 512], "insert_newlin": 417, "prettyt": 417, "column": [417, 506, 509], "handler": [417, 512], "row": [417, 449, 486, 509], "decim": 417, "get_tensors_info": 417, "get_weights_detail": 417, "weightdetail": 417, "dump_tabl": 417, "file_typ": 417, "csv": [417, 424, 486], "dump_table_to_csv": 417, "get_number_of_socket": 417, "platform": [417, 426, 459, 466, 474, 492, 502, 504], "opentri": 417, "activation_min": 417, "activation_max": 417, "print_op_list": 417, "get_op_list": 417, "minmax_file_path": 417, "input_model_tensor": 417, "optimized_model_tensor": 417, "activation_min_max": 417, "calculate_ms": 417, "mse_metric_gap": 417, "fp32_tensor": 417, "dequantize_tensor": 417, "euclidean": [417, 450], "distanc": [417, 450], "weightsdetail": 418, "input_tensor_data": 418, "optimized_tensor_data": 418, "weightsstatist": 418, "welcom": [420, 421, 422, 426, 485, 491, 516], "interest": [421, 426, 485, 510], "foster": 421, "particip": [421, 492], "commun": [421, 485], "harass": 421, "experi": [421, 466, 487, 508, 509, 512], "everyon": 421, "regardless": 421, "ag": 421, "bodi": 421, "ethnic": 421, "characterist": 421, "gender": 421, "educ": 421, "socio": 421, "econom": 421, "race": 421, "religion": 421, "sexual": 421, "orient": 421, "contribut": [421, 426, 501], "inclus": 421, "Being": 421, "respect": [421, 456, 501, 509, 514], "viewpoint": 421, "gracefulli": 421, "focus": [421, 427], "empathi": 421, "toward": [421, 450], "member": [421, 427], "unaccept": 421, "imageri": 421, "unwelcom": 421, "troll": 421, "insult": 421, "derogatori": 421, "polit": 421, "attack": 421, "privat": 421, "publish": [421, 461, 464, 484, 509], "electron": 421, "explicit": 421, "permiss": 421, "inappropri": 421, "profession": 421, "clarifi": 421, "appropri": [421, 445, 509], "fair": 421, "action": [421, 478, 481], "edit": 421, "reject": 421, "commit": [421, 422], "wiki": 421, "issu": [421, 422, 425, 426, 460, 486, 487, 504, 510], "ban": 421, "temporarili": 421, "deem": 421, "threaten": 421, "offens": 421, "harm": 421, "mail": 421, "social": [421, 426, 502], "media": [421, 426, 502], "account": [421, 508, 512], "appoint": 421, "onlin": [421, 508], "event": [421, 510], "abus": 421, "report": [421, 422, 426, 492, 508], "contact": [421, 507, 508], "complaint": 421, "review": [421, 422], "investig": [421, 487], "circumst": [421, 503], "oblig": [421, 488], "confidenti": [421, 485], "regard": [421, 505], "incid": 421, "good": [421, 504, 512], "faith": 421, "repercuss": 421, "leadership": 421, "faq": [421, 426], "page": [421, 422, 485, 487, 488], "send": [422, 428], "view": [422, 426, 453, 474, 483, 488, 507], "pylint": 422, "flake8": 422, "autopep8": 422, "cover": [422, 454, 458, 502], "would": [422, 463, 501, 504, 509], "adopt": [422, 466, 501, 502, 509], "certif": [422, 485], "agre": 422, "j": [422, 426, 501, 509, 515], "bug": [422, 426], "jira": 422, "ticket": 422, "potenti": [422, 424, 449, 507], "risk": 422, "pr": [422, 446, 462, 478, 481, 507], "reproduc": 422, "hardwar": [422, 426, 427, 450, 459, 463, 483, 501, 502, 503], "submit": [422, 489, 492, 502], "intend": 422, "safe": 422, "collabor": [422, 426, 468, 474], "adher": 422, "toolkit": [423, 460, 466, 474, 502, 513], "tracer": 423, "resolv": [423, 425], "floatfunct": 423, "cat": [423, 454, 469, 495, 496, 497], "done": [423, 450, 451, 467, 483, 491, 495, 496, 501, 504], "10004": [423, 424, 427, 446, 450, 451, 452, 456, 459, 464, 500, 503, 506, 514], "neural_compressor": [423, 424, 426, 429, 444, 446, 447, 449, 450, 451, 452, 454, 457, 458, 462, 463, 464, 465, 485, 486, 499, 500, 501, 503, 504, 505, 507, 508, 509, 511, 512, 514], "eval": [423, 446, 449, 466, 504, 510], "conduct": [423, 463, 471, 483, 512, 513], "imper": 423, "therefor": [423, 463, 486, 487, 501, 504, 507, 509], "lot": [423, 487, 509], "As": [423, 428, 446, 450, 462, 463, 477, 487, 501, 506, 512], "failur": 423, "successfulli": [423, 452, 491, 495, 496, 497, 502], "suggest": [423, 508], "traceabl": 423, "proxi": 423, "tutori": [423, 474, 502, 513], "prototyp": 423, "html": [423, 426, 428, 445, 452, 459, 478, 481, 484, 486, 491, 495, 504], "highlight": 423, "untrac": 423, "ssd": [423, 454, 515], "resnet34": [423, 515], "r34": 423, "bboxes_labels_scor": 423, "prob": 423, "45": [423, 509, 515], "max_output": 423, "zip": [423, 491, 495, 496], "dbox": 423, "dlabel": 423, "dscore": 423, "decode_singl": 423, "autom": [424, 466, 483, 484, 502, 509], "artifici": 424, "ann": 424, "par": [424, 492], "outperform": 424, "hand": 424, "propos": [424, 427, 450, 464, 506, 509], "lie": [424, 445], "predictor": 424, "shown": [424, 446, 449, 450, 462, 463, 477, 486, 487, 499, 500, 501, 509, 512], "figur": [424, 476, 477, 480], "popul": 424, "inner": 424, "evolutionari": 424, "cycl": 424, "until": [424, 428, 512], "conclud": 424, "met": [424, 456, 504, 510], "yet": [424, 478, 481, 484, 490], "simplest": [424, 445, 469], "launcher": [424, 426, 450, 451, 474, 513], "agent": 424, "nsga2": 424, "supernet": 424, "ofa_mbv3_d234_e346_k357_w1": 424, "acc": [424, 492, 501, 510, 515], "mac": [424, 484], "num_ev": 424, "250": [424, 501], "results_csv_path": 424, "search_result": 424, "dataset_path": 424, "ilsvrc2012": 424, "aim": [424, 426, 466, 501, 509, 512, 513], "mobilenetv3": 424, "lt": [424, 447, 515], "wmt": 424, "en": 424, "de": 424, "guidelin": [425, 426], "mainstream": [426, 513], "learn": [426, 427, 428, 446, 447, 454, 458, 459, 460, 463, 464, 466, 468, 471, 472, 474, 477, 478, 481, 483, 501, 502, 504, 509, 510, 512, 513], "runtim": [426, 427, 428, 430, 446, 449, 453, 456, 459, 464, 468, 473, 474, 503, 506, 507], "workflow": [426, 428, 429, 449, 450, 454, 460, 464, 478, 481, 485, 510, 513], "particular": [426, 501], "wide": [426, 453, 464, 501, 504, 515], "xeon": [426, 460, 461, 464, 502, 504, 505, 515], "scalabl": [426, 460, 464, 502, 504, 505], "processor": [426, 464, 490, 502, 504, 505], "flex": [426, 460], "amd": [426, 460, 515], "arm": [426, 459, 460, 515], "nvidia": [426, 445, 459, 460, 515], "llama2": 426, "llama": [426, 501, 502, 515], "mpt": [426, 501, 515], "falcon": [426, 501, 515], "gpt": [426, 501, 509, 515], "bloom": [426, 501, 509, 515], "broad": [426, 459, 472, 513], "stabl": [426, 460, 501, 502], "diffus": [426, 502], "vision": [426, 454, 470, 509], "coder": [426, 459, 467, 468, 471, 474, 477, 489, 493, 502], "cloud": [426, 492, 502], "marketplac": [426, 484, 502], "googl": [426, 464, 502], "amazon": [426, 466, 474], "web": [426, 485, 490, 495, 496, 497, 510], "servic": [426, 483, 489, 502], "azur": [426, 502], "softwar": [426, 461, 501, 502, 507], "alibaba": [426, 473, 480, 481, 502], "tencent": [426, 502], "taco": [426, 502], "oliv": [426, 502], "ai": [426, 466, 502, 505, 513], "ecosystem": [426, 502], "lightn": [426, 473], "pip": [426, 449, 452, 455, 457, 460, 468, 471, 476, 478, 480, 481, 485, 486, 487, 507], "wget": [426, 449, 455, 457, 485, 487], "googleapi": [426, 457, 485, 487], "v1_6": [426, 457, 485, 487], "mobilenet_v1_1": [426, 457, 485, 495], "0_224_frozen": [426, 457, 485, 495], "overview": [426, 512], "jupyterlab": [426, 466, 472, 474, 476, 480, 513], "studio": [426, 474, 483, 492, 513], "topic": 426, "int4": [426, 504], "innov": [426, 474, 502], "sep": [426, 502], "2023": [426, 497, 501, 506, 509, 515], "onnxcommunitymeetup2023": [426, 502], "juli": [426, 502], "blog": [426, 502], "neurip": [426, 502], "oct": [426, 502], "quala": [426, 502], "minilm": [426, 502, 515], "releas": [426, 460, 472, 474, 476, 480, 482, 493, 496, 497, 516], "legal": [426, 516], "request": [426, 490, 491, 492, 495, 496, 497, 504], "ask": [426, 460], "email": 426, "research": [426, 461, 509, 515], "idea": [426, 485, 501, 509, 512], "wechat": [426, 502], "img": 426, "scan": 426, "join": [426, 486, 490, 495, 496], "technic": 426, "discuss": 426, "bridg": [427, 428, 459], "vanilla": [427, 428, 459], "abcadaptor": 427, "__init__": [427, 446, 447, 462, 512], "query_fw_cap": [427, 429], "query_fused_pattern": 427, "he": 427, "besid": [427, 450, 487, 506], "describ": [427, 429, 449, 456, 485, 510], "past": [427, 506], "mainten": 427, "difficult": [427, 509], "abil": [427, 428, 447, 456, 509], "modif": [427, 456, 471, 489], "fragment": 427, "scenario": [427, 444, 450, 463, 501, 506], "granular": [427, 428, 429, 456, 459, 469, 504, 509, 514], "semant": [427, 456], "mla": [427, 464, 504], "becom": [427, 454, 501, 506], "explor": 427, "inspect_tensor": 427, "op_list": [427, 510], "iteration_list": 427, "inspect_typ": 427, "save_to_disk": 427, "quantization_cfg": 427, "set_tensor": 427, "tensor_dict": 427, "diagnosis_help": 427, "fw": 428, "outlin": [428, 429], "instruct": [428, 429, 450, 460, 464, 478, 481, 485, 486, 487, 501, 502, 503, 504, 515], "extend": [428, 429], "accommod": [428, 429], "incorpor": [428, 429, 451, 501, 512], "give": [428, 483, 512], "diagram": [428, 429, 449, 512], "illustr": [428, 429, 451, 512], "sequencediagram": [428, 429, 492], "autonumb": [428, 429], "query_framework_cap": 428, "opwis": 428, "optypewis": 428, "travers": [428, 429, 512], "\u2776": 428, "\u2777": 428, "\u2778": 428, "\u2779": 428, "\u277a": 428, "\u277b": 428, "\u277c": 428, "These": [428, 459, 486], "chapter": 428, "node_op": 428, "confirm": 428, "chosen": [428, 445], "tune_config": 428, "int8_conv_config": 428, "optype_wise_": 428, "per_tensor": [428, 429, 456, 504, 514], "tuning_cfg_to_fw": 428, "Its": [428, 445, 501], "calib_iter": 428, "dispatch": [428, 459, 489, 492], "is_perchannel": 428, "is_asymmetr": 428, "weight_bit": 428, "convert_bf16": 428, "larger": [428, 501, 506, 509], "somewhat": 428, "distort": 428, "line": [428, 452, 459, 466, 471, 472, 490, 510], "At": [428, 488, 492, 512], "explain": [429, 449, 509], "let": [429, 456, 471, 501, 503, 514], "overal": [429, 490, 514], "drive": 429, "uint4": 429, "asymmetr": [429, 504, 506, 512], "kullback": [429, 450], "leibler": [429, 450], "pytorch_cpu": 429, "1_11_capabl": 429, "cap_s8_1_11": 429, "cap_s8_1_11_conv1d": 429, "per_channel_symmetr": 429, "addition": [429, 452, 501, 512], "per_tensor_symmetr": 429, "due": [429, 454, 501, 504, 509, 510], "nativ": 429, "with_arg": 429, "qscheme": 429, "torch_dtyp": 429, "quant_min": 429, "quant_max": 429, "linux": [444, 455, 477, 483], "x86_64": 444, "aarch64": 444, "prove": [445, 506, 509], "benefici": 445, "uniform": [445, 506], "\u03b2": 445, "\u03b1": 445, "fundament": [445, 463], "primari": [445, 512], "focu": [445, 512], "essenti": [445, 455], "remaind": 445, "enhanc": [445, 466, 501, 502, 505], "resolut": 445, "extrem": 445, "still": [445, 463, 488, 502, 504, 505], "retain": 445, "noteworthi": 445, "vanhouck": 445, "vincent": 445, "andrew": 445, "senior": 445, "mark": 445, "mao": 445, "speed": [445, 463, 474, 501, 502, 504, 512], "2011": 445, "szymon": 445, "migacz": 445, "2017": 445, "mckinstri": 445, "jeffrei": 445, "l": [445, 450, 510, 512], "discov": [445, 510], "preprint": [445, 501, 506, 509], "1809": 445, "04191": 445, "2018": 445, "encount": 446, "consum": 446, "previous": 446, "lack": [446, 455], "faster": [446, 448, 454, 502, 512, 515], "Of": 446, "evenli": 446, "divid": [446, 492, 509, 512], "discard": 446, "throw": 446, "awai": 446, "draw": [446, 508, 512], "subprocess": 446, "pin": [446, 476, 480], "reshuffl": 446, "manner": [446, 450, 465], "newdataload": 446, "customis": [446, 447, 462], "ensp": [447, 511], "imagerecord": [447, 452, 514], "image_nam": 447, "cocorecord": 447, "gt": [447, 509, 511], "int64": 447, "offer": 447, "style_transf": 447, "content": [447, 490, 491, 495, 496, 497], "tfrecorddataset": 447, "labelbal": 447, "300": [447, 501], "16": [447, 495, 506, 509, 515], "helloworld": [447, 464, 511], "aid": 448, "deploy": [448, 466, 483, 502, 509], "infrastructur": 448, "gap": [449, 465], "diagnos": 449, "gui": [449, 459, 487, 501], "termin": [449, 476, 477, 480, 486], "repeat": [449, 512], "durat": [449, 491, 495, 496, 508], "git": [449, 455, 460, 485, 487, 489, 490], "clone": [449, 460, 476, 480, 485, 487, 489, 490], "cd": [449, 452, 460, 485, 487, 489, 490, 495, 496, 497], "setup": [449, 456, 460, 478, 481, 485, 487, 489, 490, 501], "ilsvr2012": 449, "caff": 449, "berkeleyvis": 449, "caffe_ilsvrc12": 449, "xvzf": 449, "image_recognit": [449, 487, 510], "resnet50_torchvis": 449, "ptq_static": 449, "resnet50_v1": [449, 452, 463], "dataset_loc": [449, 487, 495, 510], "label_path": 449, "quantiti": 449, "vec": 449, "mu": 449, "frac": [449, 509], "sigma": 449, "var": 449, "happen": 449, "dispers": [449, 486], "rule": [449, 466, 501], "v0": [449, 487, 510], "cg": [449, 487, 510], "conv0": [449, 487, 510], "expens": [450, 463, 512], "deploi": [450, 463, 488, 492, 506, 512], "power": [450, 463, 477, 502], "mobil": [450, 463, 515], "produc": 450, "logit": 450, "softmax": 450, "kd": 450, "patient": 450, "compact": [450, 463, 469, 501], "agnost": 450, "resourc": [450, 489, 492, 512], "convolut": [450, 502], "ia": 450, "attach": [450, 463, 509], "shallow": 450, "deepest": 450, "deeper": 450, "paper": [450, 501, 506, 509], "10006": [450, 451], "student_output": [450, 451], "student_loss": [450, 451], "training_func_for_nc": [450, 451], "distil_loss_conf": 450, "accordingli": [450, 474], "promis": [451, 463, 501], "huge": [451, 487, 501], "heavi": 451, "light": 451, "booster": 451, "degrad": [451, 501, 512], "novel": [451, 466, 477, 483], "place": [451, 460, 495, 501, 510, 512], "comb": 451, "distillation_criterion": [451, 463, 500], "q_conf": 451, "horovod": 452, "instal": [452, 455, 457, 466, 468, 471, 474, 478, 481, 483, 484, 486, 487, 516], "program": [452, 461, 466, 483], "enable_eager_execut": 452, "yaml_file_path": 452, "pre_process": 452, "simpli": [452, 465, 466, 468, 471, 483, 490], "evaluation_result": 452, "evaluation_time_cost": 452, "partit": [452, 501], "distributedsampl": 452, "train_sampl": 452, "train_dataset": [452, 504], "num_replica": 452, "rank": 452, "train_load": 452, "train_kwarg": 452, "adadelta": 452, "distributedoptim": 452, "named_paramet": 452, "broadcast_paramet": 452, "root_rank": 452, "broadcast_optimizer_st": 452, "set_epoch": 452, "batch_idx": 452, "zero_grad": [452, 463, 501], "nll_loss": 452, "log_interv": 452, "0f": 452, "tloss": 452, "6f": 452, "dry_run": 452, "test_func": 452, "host": [452, 490, 492, 495, 496, 497], "num_of_process": 452, "002": 452, "ssh": [452, 483], "prompt": 452, "readm": [452, 495], "exactli": [452, 467], "recognit": [452, 454, 501, 510], "resizecropimagenet": [452, 511], "realiz": [452, 499, 505, 508], "tow": 452, "node1": [452, 495, 496], "node2": [452, 495, 496], "TO": [452, 468, 487], "your_node1_nam": 452, "your_node2_nam": 452, "resnet50_fp32_pretrained_model": 452, "nc_resnet50_v1": 452, "resnet": [452, 515], "varieti": [453, 503, 512], "demonstr": [453, 466, 495, 496, 497, 510], "10k": [453, 457], "speedup": [453, 459, 504], "2x": [453, 459], "vnni": [453, 459, 503, 504], "exchang": 454, "hope": 454, "inc_model": [454, 465], "fp32_onnx_config": 454, "verifi": 454, "vgg16": [454, 515], "mobilenet": [454, 508, 515], "rcnn": 454, "torchscript": [454, 509], "unsupport": [454, 463, 501], "add_relu": 454, "conv1d_relu": 454, "conv2d_relu": 454, "group_norm": 454, "hardswish": 454, "instance_norm": 454, "layer_norm": 454, "leaky_relu": 454, "sigmoid": 454, "toolchain": [455, 502], "bare": 455, "metal": 455, "sudo": [455, 469], "apt": [455, 460, 469, 477], "python3": 455, "dev": [455, 476, 480], "distutil": 455, "libgl1": 455, "mesa": 455, "glx": 455, "libglib2": 455, "ln": 455, "sf": 455, "usr": 455, "incompat": 455, "88": [455, 508, 515], "80": [455, 509, 510, 515], "pyobject": 455, "reinstal": 455, "libgl": 455, "No": [455, 463, 490, 491, 502], "yum": [455, 460], "opencv": [455, 477], "conda": [455, 460, 469, 477, 495, 496, 497, 507], "13": [455, 460, 485, 507, 509, 515], "pend": [455, 491], "sqlalchemi": 455, "27": [455, 515], "alemb": 455, "forg": [455, 460], "quick": [456, 464, 501, 513, 514], "friendli": [456, 463, 502, 509, 513, 514], "dive": [456, 513], "purpos": [456, 464, 483, 485, 503, 504], "syntax": 456, "go": [456, 478, 481, 488, 503, 511], "up1": 456, "up2": 456, "valid_mixed_precis": 456, "addn": 456, "grappler_optim": 456, "constfold": 456, "arithmet": 456, "debug_stripp": 456, "major": [458, 487, 504, 509], "concept": [458, 508, 513], "rather": 458, "custom_metr": 458, "refin": [458, 501], "420": 459, "geomean": 459, "snippet": 459, "upload": [459, 478, 481], "click": [459, 466, 467, 474, 477, 483, 487, 502, 510], "button": [459, 477, 483], "qintegerop": [459, 504], "plan": 459, "oneapi": [460, 502, 513], "analyt": [460, 502, 513], "success": [460, 485, 507], "11": [460, 462, 464, 485, 509, 512, 515], "frequent": 460, "pypi": [460, 478, 481], "nightli": 460, "consolid": 460, "latest": [460, 502, 507], "eas": [460, 468, 502], "along": [460, 501, 506], "streamlin": [460, 489, 502], "scienc": 460, "websit": 460, "anaconda": [460, 489, 490], "suit": [460, 484, 510], "esri": 460, "formerli": 460, "skylak": 460, "cascad": 460, "lake": [460, 464, 502], "cooper": [460, 464, 502], "ic": [460, 502], "sapphir": 460, "rapid": 460, "hbm": 460, "arctic": 460, "sound": 460, "pont": 460, "vecchio": 460, "cento": [460, 515], "ubuntu": 460, "22": [460, 515], "04": [460, 515], "fortensorflow": 460, "forpytorch": 460, "12": [460, 485], "tf_enable_onednn_opt": 460, "onednn": [460, 464, 504], "newer": 460, "copyright": 461, "subject": 461, "accompani": [461, 512], "wish": 461, "bibtex": 461, "author": 461, "feng": 461, "tian": 461, "hanwen": 461, "haihao": [461, 501], "shen": [461, 501], "suyu": 461, "chen": 461, "howpublish": 461, "year": 461, "logo": 461, "atom": 461, "phi": 461, "pentium": 461, "vtune": 461, "corpor": 461, "subsidiari": 461, "brand": 461, "claim": 461, "popularli": 462, "industri": [462, 502], "label_map": 462, "decis": 462, "ap": 462, "curv": 462, "turn": [462, 477], "target_boxes_num": 462, "str_label": 462, "int_label": 462, "inturn": 462, "cocomap": 462, "vocmap": 462, "categor": 462, "multiclass": 462, "multilabel": 462, "newmetr": 462, "reset": 462, "reflect": [462, 511], "new_metr": 462, "deliv": [463, 502, 507], "conveni": [463, 489], "upgrad": 463, "veri": [463, 484, 487, 504, 506, 512, 513], "comprehens": [463, 513], "kind": 463, "resort": 463, "automodelforsequenceclassif": 463, "autotoken": 463, "val_dataset": [463, 504], "val_dataload": [463, 504], "worker": [463, 492, 495, 496, 497, 504], "ping_memori": [463, 504], "formul": 463, "effort": 463, "written": 463, "onnxrt_integ": [463, 514], "onnxrt_qlinear": [463, 514], "image_tensor": [463, 514], "post_training_dynamic_qu": [463, 503, 512], "1000": [463, 491, 514], "2000": 463, "sampling_s": [463, 514], "model_wis": [463, 514], "op_dict": 463, "op_wis": [463, 510, 514], "sigopt_api_token": [463, 508, 512], "sigopt_project_id": [463, 508, 512], "sigopt_experiment_nam": [463, 508, 512], "demo": 463, "600": 463, "training_arg": 463, "emul": [463, 504], "trainer": [463, 474], "briefli": [463, 509], "maxim": [463, 501, 512], "pruning_func": 463, "train_dataload": [463, 501, 504], "n_gpu": 463, "gradient_accumulation_step": 463, "clip_grad_norm_": 463, "max_grad_norm": 463, "rate": [463, 501, 504], "start_epoch": [463, 503, 514], "end_epoch": [463, 503, 514], "97": [463, 509, 515], "newli": [463, 501], "on_after_optimizer_step": [463, 501], "layer3": [463, 501], "lr_schedul": [463, 501], "0004": 463, "nesterov": [463, 514], "randomresizedcrop": [463, 511], "totensor": [463, 511], "485": [463, 515], "456": [463, 515], "406": 463, "nepoch": 463, "cnt": 463, "loss_sum": 463, "iter_bar": 463, "tqdm": 463, "desc": 463, "teacher_logit": 463, "train_fun": 463, "training_func": 463, "recent": [463, 464], "growth": [463, 464, 501], "complex": [463, 464, 501], "significantli": [463, 464, 486, 487, 501, 512], "bandwidth": [463, 464, 506], "exit_polici": [463, 514], "determinist": 463, "meaning": [463, 500], "reli": [463, 509], "prune_conf": 463, "quantization_aware_training_conf": 463, "aforement": 463, "inset": 463, "p_conf": [463, 500], "ssd_mobilenet_v1": 463, "benchmarkconf": 463, "half": [464, 474], "sixteen": 464, "launch": [464, 484, 488], "3rd": [464, 502, 504, 505], "gen": [464, 502, 504, 505], "codenam": 464, "boost": [464, 467, 483, 501, 502], "x86": 464, "avx512": [464, 504], "vcvtne2ps2bf16": 464, "vcvtneps2bf16": 464, "vdpbf16p": 464, "fbgemm": [464, 504], "tensorrtexecutionprovid": [464, 504], "cudaexecutionprovid": [464, 504], "dnnlexecutionprovid": [464, 504], "avx512_bf16": 464, "plu": 464, "resnet18": [464, 468, 515], "persist": 465, "brought": [465, 467, 474, 504], "tf2": 465, "h5": 465, "hybridblock": 465, "0000": 465, "saved_result": [465, 506], "simplifi": [466, 477, 483, 501, 502], "acquir": 466, "analysi": [466, 483, 501, 508], "heurist": [466, 483], "great": 466, "facilit": 466, "autocast": 466, "my_model": 466, "no_grad": 466, "memory_format": 466, "112": [466, 515], "rand": [466, 509], "plugin": [466, 484], "aw": [466, 474, 492, 502, 515], "sagemak": [466, 474], "inlin": [466, 471, 474], "neural_cod": [466, 468, 470, 471, 472, 474], "bench": 466, "superbench": 466, "enjoi": [467, 471, 474], "rebuild": [467, 476, 480], "reload": [467, 484, 486, 488], "modern": [468, 506], "democrat": [468, 502], "programm": [468, 474, 483], "nano_bf16_channels_last": 468, "nano_bf16_ipex_channels_last": 468, "nano_bf16_ipex": 468, "nano_bf16": 468, "nano_fp32_channels_last": 468, "nano_fp32_ipex_channels_last": 468, "nano_fp32_ipex": 468, "nano_gpu_to_cpu": 468, "nano_int8": 468, "nano_jit_bf16_channels_last": 468, "nano_jit_bf16_ipex_channels_last": 468, "nano_jit_bf16_ipex": 468, "nano_jit_bf16": 468, "nano_jit_fp32_channels_last": 468, "nano_jit_fp32_ipex_channels_last": 468, "nano_jit_fp32_ipex": 468, "nano_jit_fp32": 468, "nano_onnxruntime_fp32": 468, "nano_onnxruntime_int8_qlinear": 468, "openvino": 468, "nano_openvino_fp32": 468, "nano_openvino_int8": 468, "bc": [469, 477], "conda_prefix": 469, "echo": 469, "tradit": [469, 501], "libjemalloc": 469, "libiomp5": 469, "home": 469, "lib": 469, "ld_preload": 469, "malloc_conf": 469, "oversize_threshold": 469, "background_thread": 469, "metadata_thp": 469, "dirty_decay_m": 469, "9000000000": 469, "muzzy_decay_m": 469, "kmp_affin": 469, "kmp_blocktim": 469, "dnnl_primitive_cache_capac": 469, "governor": 469, "cpufreq": 469, "scaling_governor": 469, "powersav": 469, "tee": 469, "pytorch_jit_script": [470, 473], "pytorch_channels_last": [470, 473], "run_bench": 470, "patch": [470, 483], "patch_path": 470, "your_patch_path": 470, "sweep": 470, "sweep_object": 470, "bench_config": 470, "bench_featur": 470, "sai": 471, "run_glu": [471, 472, 493, 496, 497], "requisit": 471, "task_nam": [471, 472, 493, 496, 497], "do_ev": [471, 472, 493, 496, 497], "remain": 471, "itself": [471, 501], "run_glue_optim": 471, "static_ipex": 471, "auto_qu": 472, "v4": [472, 493, 496, 497, 515], "albert": [472, 515], "sst2": 472, "alexnet": [472, 515], "pytorch_amp": 473, "optimize_for_infer": 473, "pytorch_jit_trac": 473, "pytorch_jit_script_ofi": 473, "pytorch_jit_trace_ofi": 473, "torchdynamo": 473, "pytorch_torchdynamo_jit_script": 473, "pytorch_torchdynamo_jit_trac": 473, "pytorch_torchdynamo_jit_script_ofi": 473, "pytorch_torchdynamo_jit_trace_ofi": 473, "pytorch_inc_bf16": 473, "pytorch_inc_static_quant_fx": 473, "pytorch_inc_static_quant_ipex": 473, "pytorch_inc_dynamic_qu": 473, "pytorch_ipex_fp32": 473, "pytorch_ipex_bf16": 473, "pytorch_ipex_int8_static_qu": 473, "pytorch_ipex_int8_dynamic_qu": 473, "blade": 473, "disc": 473, "pytorch_aliblad": 473, "pytorch_lightning_bf16_cpu": 473, "tensorflow_amp": 473, "keras_amp": 473, "tensorflow_inc": 473, "keras_inc": 473, "onnx_inc_static_quant_qlinear": 473, "onnx_inc_static_quant_qdq": 473, "onnx_inc_dynamic_qu": 473, "optimum": [473, 474, 486], "pytorch_inc_huggingface_optimum_stat": 473, "pytorch_inc_huggingface_optimum_dynam": 473, "intel_extension_for_transform": 473, "bigdl": [473, 474], "nano": [473, 474], "nano_": 473, "inc_auto": 473, "delight": 474, "announc": 474, "v": [474, 483, 501, 512, 514], "500": [474, 491], "jupyt": [474, 476, 477, 480], "isa": 474, "adjust": [474, 504, 509], "xpu": 474, "delta": 474, "acc_delta": 474, "int8_acc": 474, "fp32_acc": 474, "ext": [476, 478, 480, 481, 482], "lab": [476, 477, 478, 480, 481], "nodej": [476, 480], "jlpm": [476, 480], "yarn": [476, 480], "npm": [476, 477, 480], "lieu": [476, 480], "labextens": [476, 477, 480], "typescript": [476, 480], "watch": [476, 480, 488], "immedi": [476, 480, 501], "refresh": [476, 480], "browser": [476, 480, 485, 488], "wait": [476, 480, 483, 492], "rebuilt": [476, 480], "easier": [476, 480, 483, 485, 502], "symlink": [476, 480], "down": 477, "finish": [477, 492], "enter": [477, 483, 490], "blank": 477, "cell": 477, "gain": [477, 500, 502], "mkl": 477, "jemalloc": 477, "pip3": 477, "headless": 477, "pyproject": [478, 481], "toml": [478, 481], "twine": [478, 481], "whl": [478, 481], "dist": [478, 481], "sdist": [478, 481], "bdist_wheel": [478, 481], "deprec": [478, 481, 507, 511], "frontend": [478, 481, 490], "login": [478, 481, 508], "repositori": [478, 481], "cut": [478, 481], "fork": [478, 481], "admin_github_token": [478, 481], "pypi_token": [478, 481], "npm_token": [478, 481], "secret": [478, 481], "panel": [478, 481, 483], "draft": [478, 481], "changelog": [478, 481, 482], "pkg": [478, 481], "bot": [478, 481], "pick": [478, 481, 484], "feedstock": [478, 481], "hatch": 481, "notabl": 482, "vscode": [482, 484], "daili": 483, "advantag": [483, 501, 503, 512], "remot": 483, "server": [483, 485, 487, 490, 495, 496, 497], "re": [483, 488, 506], "market": 483, "uninstal": 483, "fill": [483, 508, 511, 512], "upper": 483, "sidebar": 483, "hover": 483, "track": [483, 508], "argpars": 483, "pop": [483, 492], "diff": 483, "manifest": 484, "declar": 484, "palett": 484, "registercommand": 484, "amodio": 484, "tsl": 484, "matcher": 484, "dbaeumer": 484, "eslint": [484, 488], "press": 484, "f5": 484, "ctrl": 484, "hello": 484, "world": 484, "breakpoint": 484, "consol": [484, 488], "relaunch": 484, "toolbar": 484, "node_modul": 484, "viewlet": 484, "dropdown": 484, "runner": [484, 488], "startup": 484, "bundl": 484, "neural_insight": [485, 487], "tl": 485, "ui": 485, "5000": 485, "338174d13706855fc6924cec7b3a8ae8": 485, "listen": 485, "firewal": 485, "8080": 485, "cert": 485, "path_to_cert": 485, "crt": 485, "path_to_private_kei": 485, "encrypt": 485, "expos": 485, "forfeit": 485, "client": [485, 490, 497], "extern": 485, "threat": 485, "diagnost": 485, "skill": 485, "feel": [485, 488], "layoutlmv3": [486, 515], "seqev": 486, "sentencepiec": 486, "timm": 486, "fvcore": 486, "pillow": 486, "einop": 486, "textdist": 486, "setuptool": 486, "cli": 486, "hypjudi": 486, "finetun": [486, 501, 506, 515], "funsd": [486, 515], "calib_dataset": 486, "incdataset": 486, "eval_dataset": 486, "poor": [486, 510], "9049": 486, "2989": 486, "66": [486, 509, 515], "9631": 486, "glob": 486, "panda": 486, "pd": 486, "set_opt": 486, "max_row": 486, "max_column": 486, "getmtim": 486, "activations_t": 486, "weights_tabl": 486, "read_csv": 486, "nweight": 486, "descend": 486, "sorted_data": 486, "sort_valu": 486, "ascend": 486, "evid": 486, "tip": 486, "8981": 486, "7502": 486, "incept": [487, 515], "v3": [487, 515], "inception_v3": [487, 510], "inceptionv3_fp32_pretrained_model": [487, 510], "bash": [487, 510], "prepare_dataset": 487, "sh": [487, 510], "raw_dir": 487, "img_raw": 487, "delet": [487, 501], "run_tun": 487, "nc_inception_v3": 487, "highest": [487, 493, 512], "satisfactori": 487, "webpag": 487, "spike": 487, "bottom": 487, "chart": [487, 504, 508, 510], "concentr": 487, "toler": 487, "But": 487, "bigger": 487, "bootstrap": 488, "localhost": [488, 490, 495, 496], "3000": 488, "lint": 488, "interact": [488, 508], "correctli": 488, "hash": [488, 491], "readi": [488, 501], "aren": 488, "transit": 488, "webpack": 488, "babel": 488, "tweak": 488, "ever": 488, "curat": 488, "suitabl": 488, "middl": [488, 509], "shouldn": 488, "understand": [488, 504, 510, 513], "wouldn": 488, "couldn": 488, "facebook": [488, 509, 515], "troubleshoot": 488, "effortlessli": 489, "grpc": [489, 490, 494, 495, 496, 498], "queue": 489, "seamlessli": [489, 501, 512], "mpi": [489, 490, 512], "neural_solut": [489, 490, 495, 496, 497], "task_monitor_port": [490, 495, 496, 497], "22222": [490, 495, 496, 497], "result_monitor_port": [490, 495, 496, 497], "33333": [490, 495, 496, 497], "restful_api_port": [490, 495, 496, 497], "hostfil": [490, 492, 495, 496, 497], "grpc_api_port": [490, 495, 496, 497], "api_typ": [490, 495, 496, 497], "conda_env": [490, 495, 496, 497], "upload_path": [490, 495, 496, 497], "8000": [490, 495, 496, 497], "monitor": [490, 495, 496, 497], "3333": [490, 495, 496, 497], "2222": [490, 495, 496, 497], "ns_workspac": [490, 495, 496, 497], "hf_model": [490, 494, 496], "curl": [490, 491, 495, 496], "task_id": [490, 495, 496, 497], "usernam": 490, "db": [490, 492], "serve_log": [490, 495, 496, 497], "frontend_grpc": 490, "task_log": 490, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 490, "task_workspac": 490, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 490, "aliv": 490, "properli": 490, "commonli": [490, 501], "hostnam": 490, "breakdown": 490, "ip": 490, "hous": 490, "host1": [490, 495, 496], "host2": [490, 495, 496], "query_id": 490, "oaa": 491, "host_ip": 491, "task_request": [491, 495, 496, 497], "tuning_info": [491, 495], "optimization_result": [491, 495], "result_path": [491, 495, 496], "closur": 491, "404": [491, 501, 515], "health": 491, "healthi": 491, "quantized_model": [491, 495, 496], "400": 491, "alloc": 492, "incom": 492, "taskmonitor": 492, "cluster": [492, 495, 496, 512], "tasklaunch": 492, "resultmonitor": 492, "receiv": [492, 508], "p1": 492, "notif": 492, "p2": 492, "p3": 492, "mpirun": [492, 512], "perf": 492, "p4": 492, "four": [492, 510, 515], "classdiagram": 492, "taskdb": 492, "get_statu": 492, "update_statu": 492, "task_collect": 492, "append_task": 492, "get_all_pending_task": 492, "update_task_statu": 492, "task_db": 492, "wait_new_task": 492, "schedule_task": 492, "dispatch_task": 492, "launch_task": 492, "query_task_statu": 492, "node_list": 492, "reserve_resourc": 492, "get_node_statu": 492, "gcp": [492, 502], "script_url": [493, 495, 496, 497], "archiv": 493, "prioriti": 493, "tf_example1": [494, 495, 496], "hf_models_grpc": [494, 497], "00173": 495, "01024": 495, "task_request_distribut": 495, "custom_models_optim": 495, "7602cd63d4c849e7a686a8165a77f69d": [495, 496], "151": 495, "8617": 495, "17": [495, 509, 515], "8213": [495, 515], "number_of_socket": [495, 496], "number_of_thread": [495, 496], "cdf419910f9b4d2a8320d0e420ac1d0a": 496, "optimized_result": 496, "58": [496, 509, 515], "3162": 496, "6488": [496, 515], "test_task_request": 497, "06": [497, 514, 515], "34": [497, 515], "55": [497, 509, 515], "d3e10a49326449fb9d0d62f2bfc1cb43": 497, "fastapi": 498, "multi_object": 499, "benefit": 500, "instanti": 500, "neuron": 501, "art": 501, "grown": 501, "unpreced": 501, "increasingli": 501, "crucial": 501, "stand": [501, 512], "shrink": 501, "contextu": 501, "scene": 501, "haven": 501, "color": 501, "lowest": [501, 512], "formula": [501, 509], "emsp": 501, "downstream": 501, "prone": 501, "co": 501, "discourag": 501, "push": [501, 506, 509], "penal": 501, "parameter": 501, "lightweight": 501, "perceptron": 501, "mlp": 501, "valuabl": [501, 510], "basi": 501, "billion": 501, "dolli": [501, 515], "lm": [501, 515], "lamini": 501, "worth": 501, "mention": [501, 506], "tend": 501, "exemplifi": 501, "complement": 501, "fortieth": 501, "miss": [501, 504], "pruner2": 501, "few": [501, 502, 512], "lm_head": 501, "yourself": 501, "uncertain": 501, "auto_config": 501, "quit": 501, "straightforward": [501, 506, 509], "carri": 501, "pruning_pattern": 501, "pruning_start": 501, "pruning_end": 501, "sparse_gpt": 501, "embed_out": 501, "card": 501, "hesit": 501, "causal": 501, "clm": 501, "sst": [501, 515], "25": [501, 509, 515], "63": [501, 509, 515], "24": [501, 509, 512, 515], "35": [501, 515], "flan": 501, "t5": 501, "english": 501, "romanian": 501, "381": 501, "yolov5": 501, "75": [501, 509, 515], "2x1": [501, 515], "801": 501, "7895": 501, "signific": [501, 502, 509], "reduct": [501, 514], "namhoon": 501, "lee": 501, "thalaiyasingam": 501, "ajanthan": 501, "philip": 501, "torr": 501, "2019": 501, "zafrir": 501, "ofir": 501, "ariel": 501, "larei": 501, "boudoukh": 501, "mosh": 501, "wasserblat": 501, "2111": 501, "05754": 501, "2021": 501, "kwon": 501, "kim": 501, "mahonei": 501, "hassoun": 501, "keutzer": 501, "gholami": 501, "pp": 501, "24101": 501, "24116": 501, "frantar": [501, 506], "alistarh": 501, "medium": 502, "aug": 502, "chatbot": 502, "june": 502, "msft": 502, "netflix": 502, "apr": 502, "mlperf": [502, 515], "5x": 502, "heterogen": 502, "mar": 502, "jan": 502, "busi": 502, "amx": 502, "4th": [502, 504], "journei": 502, "dec": 502, "mleffici": 502, "deepen": 502, "foundat": 502, "intellig": 502, "vmware": 502, "applianc": 502, "bitnami": 502, "nov": 502, "sota": 502, "plug": 502, "twitter": 502, "linkedin": 502, "zone": 502, "land": 502, "pat": 502, "keynot": 502, "intelon": 502, "chines": 502, "purif": 502, "sacrif": 502, "jun": 502, "partner": 502, "feb": 502, "joint": 502, "bilibili": 502, "gestalt": 502, "ml": 502, "doubl": 502, "reconstruct": 502, "abound": 502, "lpot": [502, 507], "nextplatform": 502, "cern": 502, "gan": 502, "3dgan": 502, "iml": 502, "workshop": 502, "asplo": 502, "18": [502, 515], "highli": [502, 506], "intelcaff": 502, "aris": 503, "henc": 503, "onnxrt_qoper": 503, "quant_aware_train": 503, "weight_compress": [503, 514], "initial_spars": [503, 514], "prune_typ": [503, 514], "basic_magnitud": [503, 514], "update_frequ": 503, "prune_domain": 503, "tile_pattern_1x1": 503, "invent": 504, "cost": [504, 506], "On": [504, 515], "theoret": [504, 506], "zeropoint": 504, "255": [504, 509], "overflow": 504, "solv": [504, 507], "unseen": 504, "enough": 504, "peopl": 504, "mimic": 504, "fact": 504, "ultim": 504, "pain": 504, "lossi": 504, "philosophi": 504, "neither": 504, "nor": 504, "val_load": 504, "avg": 504, "themselv": 504, "dmlexecutionprovid": 504, "ON": 505, "forc": 505, "postposttrainingquantconfig": 505, "bf16wrapper": 505, "retrac": 505, "preval": 506, "grow": 506, "demand": 506, "w8a8": 506, "trade": 506, "bottleneck": 506, "roughli": 506, "speak": 506, "capac": [506, 508], "flop": 506, "famou": 506, "approx": 506, "bmm": 506, "100x": 506, "excel": 506, "teq": 506, "stai": [506, 509], "quantif": [506, 509], "think": 506, "intuit": [506, 509], "uniformli": 506, "qlora": 506, "invers": 506, "restor": 506, "protect": 506, "greatli": 506, "inspir": 506, "normalfloat": 506, "e2m1": 506, "bnb": 506, "805": 506, "005": 506, "91": [506, 509, 515], "stabil": 506, "weightonlylinear": 506, "date": 506, "qweight": 506, "rtn_arg": 506, "gptq_arg": 506, "use_full_length": 506, "awq_arg": 506, "compressed_model": 506, "export_compressed_model": 506, "compression_dtyp": 506, "compression_dim": 506, "scale_dtyp": 506, "xiao": [506, 509], "guangxuan": [506, 509], "2211": [506, 509], "10438": [506, 509], "wei": [506, 509], "xiui": [506, 509], "suppress": [506, 509], "2209": [506, 509], "13325": [506, 509], "lin": 506, "ji": 506, "2306": 506, "00978": 506, "elia": 506, "dettmer": 506, "tim": 506, "2305": 506, "14314": 506, "site": 507, "assist": 507, "experienc": 507, "18284": 507, "absenc": 507, "safe_mod": 507, "model_from_json": 507, "defici": 507, "hinder": 507, "sed": 507, "your_script": 507, "backbon": 508, "sigopt_experiment_id": 508, "nc": [508, 512], "suffici": 508, "ordinari": 508, "latenc": [508, 512], "8266": 508, "8372": 508, "2132": 508, "83": [508, 509, 515], "7495": 508, "8299": 508, "8294": 508, "85": [508, 509, 515], "0837": 508, "8291": 508, "4469": 508, "gigant": 509, "systemat": 509, "migrat": [509, 513], "difficulti": 509, "mathemat": 509, "allevi": 509, "coarsest": 509, "finer": [509, 512], "matric": 509, "similarli": 509, "finest": 509, "consumpt": 509, "why": [509, 510], "suppos": 509, "6839": 509, "4741": 509, "7451": 509, "9301": 509, "1742": 509, "6835": 509, "q_min": 509, "q_max": 509, "q_x": 509, "clamp_": 509, "round_": 509, "w_q": 509, "00296431384049356": 509, "59": [509, 515], "172": 509, "192": 509, "w_dq": 509, "1220": 509, "0500": 509, "1430": 509, "2570": 509, "1890": 509, "mseloss": 509, "1983354538679123": 509, "6848": 509, "4743": 509, "7440": 509, "9308": 509, "1749": 509, "385297635664756e": 509, "07": [509, 514, 515], "affect": 509, "quantize_per_channel": 509, "x_tmp": 509, "detach": 509, "keepdim": 509, "dequantize_per_channel": 509, "0029": [509, 515], "0036": 509, "162": [509, 515], "48": [509, 515], "72": [509, 515], "93": [509, 515], "207": 509, "139": 509, "6837": 509, "4734": 509, "1751": 509, "6821": 509, "637690492221736e": 509, "6376e": 509, "3852e": 509, "cdot": 509, "quantize_per_tensor_absmax": 509, "n_bit": 509, "div_": 509, "0806": 509, "7589": 509, "6038": 509, "3815": 509, "5040": 509, "7174": 509, "5444": 509, "5826": 509, "7772": 509, "5555": 509, "3740": 509, "3253": 509, "0698": 509, "1381": 509, "5972": [509, 515], "0086": 509, "0737": 509, "8298": 509, "6883": 509, "2991": 509, "1601": 509, "6506": 509, "8246": 509, "3924": 509, "3845": 509, "8768": 509, "w_scale": 509, "x_q": 509, "x_scale": 509, "84": [509, 515], "120": 509, "0059755356051027775": 509, "89": [509, 515], "119": 509, "57": [509, 515], "006533813662827015": 509, "y_q": 509, "17509": 509, "7608": 509, "4055": 509, "16599": 509, "21020": 509, "10016": 509, "9860": 509, "22444": 509, "y_dq": 509, "6836": 509, "2970": 509, "1583": 509, "6481": 509, "8207": 509, "3911": 509, "3850": 509, "8763": 509, "though": 509, "simplic": 509, "denot": 509, "fp1": 509, "fp2": 509, "subsect": [509, 514], "even": 509, "x1": [509, 512], "x2": [509, 512], "herebi": 509, "recalcul": 509, "sq": 509, "overhead": 509, "hardtanh": 509, "t5norm": 509, "llamanorm": 509, "groupnorm": 509, "lambada": 509, "sweet": 509, "spot": 509, "region": 509, "bigscienc": [509, 515], "560m": 509, "65": [509, 515], "44": [509, 515], "76": [509, 515], "1b7": 509, "71": [509, 515], "43": [509, 515], "67": [509, 515], "78": [509, 511, 515], "56": [509, 515], "3b": 509, "73": [509, 515], "69": [509, 515], "74": [509, 515], "7b1": [509, 515], "77": [509, 515], "46": [509, 515], "176b": 509, "82": [509, 515], "52": [509, 515], "125m": 509, "41": [509, 515], "70": [509, 515], "94": [509, 511, 515], "7b": [509, 515], "79": [509, 510, 515], "60": [509, 515], "81": [509, 515], "26": [509, 515], "39": [509, 515], "68": [509, 511, 515], "eleutherai": [509, 515], "6b": [509, 515], "29": [509, 515], "96": [509, 515], "arang": 509, "tolist": 509, "jason": 509, "emerg": 509, "transact": 509, "yvinec": 509, "edouard": 509, "proceed": 509, "cvf": 509, "winter": 509, "instrument": 510, "writer": 510, "_pre_eval_hook": 510, "_post_eval_hook": 510, "submodul": 510, "whitelist": 510, "_recordingobserv": 510, "output_tensors_dict": 510, "current_it": 510, "get_tensor_valu": 510, "_observer_forward_hook": 510, "activation_post_process": 510, "_add_observer_": 510, "named_children": 510, "leaf": 510, "add_modul": 510, "register_forward_hook": 510, "dump_tim": 510, "summarywrit": 510, "_acc": 510, "tune_": 510, "add_graph": 510, "get_observer_dict": 510, "observer_dict": 510, "is_quant": 510, "add_histogram": 510, "shell": 510, "bind_al": 510, "logdir_spec": 510, "tune_0_acc0": 510, "tune_1": 510, "tune_1_acc0": 510, "baseline_acc_0": 510, "776": 510, "tune_1_acc_0": 510, "095": 510, "runs_v3": 510, "run_tuning_dump_tensor": 510, "inceptionv3": 510, "run_quant": 510, "topologi": 510, "nc_inceptionv3": 510, "inceptionv3_dump_tensor": 510, "eightbit": 510, "disappear": 510, "centercrop": 511, "randomcrop": 511, "cropres": 511, "decodeimag": 511, "jpeg": 511, "encodejp": 511, "alignimagechannel": 511, "116": 511, "103": 511, "017": 511, "bilinearimagenet": [511, 514], "topilimag": 511, "padding_mod": 511, "border": 511, "pixel": 511, "edg": 511, "colorjitt": 511, "bright": 511, "satur": 511, "hue": 511, "jitter": 511, "tondarrai": 511, "quickli": [512, 513], "o1": 512, "human": 512, "concret": 512, "aggress": 512, "classic": 512, "flowchart": 512, "htmllabel": 512, "td": 512, "classdef": 512, "itemstyl": 512, "cce5ff": 512, "stroke": 512, "99ccff": 512, "s1": 512, "s2": 512, "s3": 512, "s4": 512, "s5": 512, "s6": 512, "s7": 512, "nbsp": 512, "subgraphstyl": 512, "ffffff": 512, "attempt": 512, "post_training_auto_qu": 512, "trial": 512, "increment": 512, "ii": 512, "spent": 512, "hawq_v2_loss": 512, "model_loss": 512, "black": 512, "compli": 512, "posterior": 512, "short": 512, "loglevel": 512, "endlessli": 512, "perspect": 512, "smbo": 512, "appl": 512, "surrog": 512, "densiti": 512, "parzen": 512, "greatest": 512, "hour": 512, "dai": 512, "next_tune_cfg": 512, "overridden": 512, "replic": 512, "replica": 512, "fed": 512, "synchron": 512, "number_of_process": 512, "run_cmd": 512, "abctunestrategi": 512, "familiar": 513, "notebook": 513, "introduct": 513, "organ": 514, "logic": 514, "mobilenet_v1": 514, "40": [514, 515], "beta_1": 514, "beta_2": 514, "epsilon": 514, "sparsecategoricalcrossentropi": 514, "sum_over_batch_s": 514, "from_logit": 514, "54": [514, 515], "19": [514, 515], "1x": 515, "platinum": 515, "8480": 515, "8ghz": 515, "ht": 515, "turbo": 515, "256gb": 515, "16x16gb": 515, "ddr5": 515, "4800": 515, "mt": 515, "bio": 515, "3a14": 515, "tel2p1": 515, "microcod": 515, "0x2b0001b0": 515, "gcc": 515, "20210514": 515, "red": 515, "hat": 515, "visit": 515, "1s4c14ins1bsthroughput": 515, "sec": 515, "2721": 515, "638": 515, "26x": 515, "23": 515, "31": 515, "2123": 515, "552": 515, "84x": 515, "resnet101": 515, "37": 515, "1477": 515, "432": 515, "42x": 515, "3267": 515, "92": 515, "1266": 515, "03": 515, "58x": 515, "38": 515, "2399": 515, "1098": 515, "18x": 515, "1593": 515, "508": 515, "13x": 515, "1032": 515, "249": 515, "14x": 515, "427": 515, "185": 515, "30x": 515, "5503": 515, "1791": 515, "62": 515, "07x": 515, "3639": 515, "1864": 515, "95x": 515, "47": 515, "1538": 515, "236": 515, "51x": 515, "vgg19": 515, "1368": 515, "196": 515, "resnetv2": 515, "1105": 515, "657": 515, "68x": 515, "716": 515, "49": 515, "369": 515, "94x": 515, "152": 515, "269": 515, "89x": 515, "densenet": 515, "121": 515, "617": 515, "498": 515, "24x": 515, "161": 515, "372": 515, "242": 515, "54x": 515, "169": 515, "496": 515, "411": 515, "21x": 515, "efficientnet": 515, "b0": 515, "748": 515, "709": 515, "05x": 515, "00": 515, "134": 515, "34x": 515, "1273": 515, "671": 515, "90x": 515, "136": 515, "53": 515, "1235": 515, "477": 515, "09": 515, "179": 515, "85x": 515, "cnn": 515, "79x": 515, "83x": 515, "156": 515, "67x": 515, "23x": 515, "173": 515, "00x": 515, "yolov3": 515, "211": 515, "41x": 515, "82x": 515, "61": 515, "49x": 515, "86": 515, "424": 515, "174": 515, "44x": 515, "29x": 515, "55612": 515, "43479": 515, "28x": 515, "1s56c1ins1bsthroughput": 515, "65x": 515, "gpt2": 515, "2716": 515, "569": 515, "77x": 515, "2683": 515, "476": 515, "64x": 515, "2349": 515, "1035": 515, "27x": 515, "930": 515, "763": 515, "262": 515, "91x": 515, "4003": 515, "1677": 515, "39x": 515, "2766": 515, "36": 515, "2643": 515, "1495": 515, "238": 515, "1372": 515, "199": 515, "88x": 515, "1457": 515, "630": 515, "31x": 515, "842": 515, "338": 515, "645": 515, "231": 515, "938": 515, "707": 515, "33x": 515, "1533": 515, "1258": 515, "22x": 515, "981": 515, "647": 515, "52x": 515, "850": 515, "444": 515, "37x": 515, "543": 515, "74x": 515, "93x": 515, "947": 515, "233": 515, "788": 515, "462": 515, "71x": 515, "15x": 515, "51958": 515, "39974": 515, "1631": 515, "662": 515, "46x": 515, "1162": 515, "330": 515, "968": 515, "334": 515, "resnest50": 515, "394": 515, "resnext101_32x8d": 515, "558": 515, "108": 515, "efficientnet_b0": 515, "703": 515, "656": 515, "efficientnet_b3": 515, "510": 515, "391": 515, "efficientnet_b7": 515, "150": 515, "55x": 515, "peleenet": 515, "857": 515, "585": 515, "yolo": 515, "160": 515, "66x": 515, "141": 515, "407": 515, "camembert": 515, "402": 515, "32x": 515, "343": 515, "804": 515, "352": 515, "17x": 515, "302": 515, "183": 515, "382": 515, "19x": 515, "35x": 515, "51": 515, "414": 515, "stsb": 515, "413": 515, "410": 515, "138": 515, "69x": 515, "385": 515, "76x": 515, "126": 515, "wikitext": 515, "reform": 515, "crime": 515, "punish": 515, "449": 515, "364": 515, "lvwerra": 515, "pegasu": 515, "samsum": 515, "openai": 515, "whisper": 515, "abeja": 515, "neox": 515, "japanes": 515, "1723": 515, "654": 515, "63x": 515, "1141": 515, "306": 515, "73x": 515, "106": 515, "1379": 515, "729": 515, "389": 515, "25x": 515, "1980": 515, "672": 515, "5032": 515, "1500": 515, "resnext101_32x16d_wsl": 515, "533": 515, "36x": 515, "556": 515, "149": 515, "lambada_openai": 515, "hellaswag": 515, "winogrand": 515, "piqa": 515, "word_perplex": 515, "6831": 515, "4954": 515, "6409": 515, "7541": 515, "6434": 515, "8816": 515, "gptqw4g128asym": 515, "679": 515, "4895": 515, "6433": 515, "7476": 515, "6399": 515, "9945": 515, "0999": 515, "gptqw4g32asym": 515, "6829": 515, "4923": 515, "6401": 515, "7486": 515, "6410": 515, "9963": 515, "0141": 515, "gptqw4g128sym": 515, "685": 515, "4907": 515, "6361": 515, "7443": 515, "6390": 515, "9932": 515, "1498": 515, "gptqw4g32sym": 515, "6911": 515, "4899": 515, "6448": 515, "7497": 515, "6439": 515, "0008": 515, "0927": 515, "6769": 515, "5049": 515, "6543": 515, "7628": 515, "6497": 515, "2862": 515, "6804": 515, "4984": 515, "6535": 515, "7568": 515, "6473": 515, "9962": 515, "4193": 515, "6885": 515, "4973": 515, "753": 515, "6455": 515, "9935": 515, "4607": 515, "decapoda": 515, "7361": 515, "5642": 515, "6709": 515, "7835": 515, "6887": 515, "4202": 515, "7244": 515, "5603": 515, "6614": 515, "6824": 515, "9909": 515, "5881": 515, "13b": 515, "7627": 515, "5911": 515, "7009": 515, "7878": 515, "7106": 515, "212": 515, "7518": 515, "5843": 515, "6961": 515, "7911": 515, "7058": 515, "4319": 515, "7572": 515, "5898": 515, "7056": 515, "7894": 515, "7105": 515, "9998": 515, "3429": 515, "7596": 515, "5841": 515, "6977": 515, "7905": 515, "7080": 515, "4916": 515, "30b": 515, "7759": 515, "6266": 515, "7277": 515, "8096": 515, "7350": 515, "2384": 515, "778": 515, "624": 515, "7269": 515, "8047": 515, "7334": 515, "9979": 515, "4237": 515, "7706": 515, "6239": 515, "7285": 515, "8058": 515, "7322": 515, "4697": 515, "7836": 515, "6195": 515, "7337": 515, "9983": 515, "5604": 515, "chat": 515, "5732": 515, "648": 515, "7715": 515, "6746": 515, "7107": 515, "6982": 515, "5637": 515, "6527": 515, "7704": 515, "6713": 515, "9950": 515, "9702": 515, "6953": 515, "5682": 515, "6575": 515, "7758": 515, "6742": 515, "9994": 515, "9317": 515, "7392": 515, "567": 515, "6902": 515, "7353": 515, "6622": 515, "7829": 515, "6862": 515, "9942": 515, "9635": 515, "7246": 515, "5617": 515, "6756": 515, "7797": 515, "6854": 515, "9931": 515, "2799": 515, "7312": 515, "6059": 515, "7103": 515, "7077": 515, "2213": 515, "7273": 515, "6018": 515, "7088": 515, "7742": 515, "7030": 515, "9934": 515, "2538": 515, "083": 515, "7283": 515, "6053": 515, "7024": 515, "7764": 515, "7031": 515, "1889": 515, "374": 515, "727": 515, "5997": 515, "7018": 515, "9916": 515, "2504": 515, "497": 515, "7677": 515, "7122": 515, "8984": 515, "5933": 515, "689": 515, "7851": 515, "7075": 515, "1556": 515, "448": 515, "7675": 515, "5934": 515, "7856": 515, "7111": 515, "9984": 515, "1514": 515, "927": 515, "7566": 515, "5899": 515, "7032": 515, "9953": 515, "1374": 515, "728": 515, "5764": 515, "4628": 515, "6456": 515, "6029": 515, "6438": 515, "5799": 515, "4542": 515, "6004": 515, "9957": 515, "0626": 515, "bloomz": 515, "5593": 515, "4789": 515, "6134": 515, "7432": 515, "5525": 515, "4731": 515, "6504": 515, "7617": 515, "6094": 515, "7828": 515, "databrick": 515, "6866": 515, "5098": 515, "7622": 515, "6505": 515, "3242": 515, "6878": 515, "5058": 515, "6393": 515, "7633": 515, "6491": 515, "9978": 515, "5514": 515, "6864": 515, "5084": 515, "6519": 515, "6509": 515, "0006": 515, "4728": 515, "6876": 515, "5045": 515, "6474": 515, "9952": 515, "6379": 515, "5282": 515, "614": 515, "7448": 515, "6312": 515, "6377": 515, "5228": 515, "5991": 515, "6261": 515, "9919": 515, "4096": 515, "neo": 515, "6224": 515, "4271": 515, "577": 515, "722": 515, "5871": 515, "9359": 515, "6123": 515, "4227": 515, "5738": 515, "7203": 515, "5823": 515, "9917": 515, "3377": 515, "615": 515, "4259": 515, "5714": 515, "7247": 515, "9951": 515, "2083": 515, "6154": 515, "4208": 515, "5777": 515, "7198": 515, "5834": 515, "9937": 515, "3121": 515, "20b": 515, "7233": 515, "5359": 515, "7753": 515, "6740": 515, "195": 515, "7186": 515, "5328": 515, "7699": 515, "6687": 515, "9922": 515, "3463": 515, "7268": 515, "659": 515, "6726": 515, "2897": 515, "mosaicml": 515, "5718": 515, "6859": 515, "7927": 515, "6890": 515, "9324": 515, "7006": 515, "5655": 515, "6803": 515, "7965": 515, "6857": 515, "1515": 515, "655": 515, "5752": 515, "6748": 515, "7845": 515, "6724": 515, "5951": 515, "6472": 515, "5716": 515, "6685": 515, "784": 515, "6678": 515, "8539": 515, "6918": 515, "5819": 515, "678": 515, "6861": 515, "8863": 515, "5765": 515, "6827": 515, "7873": 515, "6832": 515, "9958": 515, "1451": 515, "storywrit": 515, "693": 515, "5477": 515, "663": 515, "6719": 515, "9125": 515, "5443": 515, "6661": 515, "7813": 515, "6693": 515, "9961": 515, "1137": 515, "tiiuae": 515, "rw": 515, "6604": 515, "5419": 515, "6598": 515, "6594": 515, "7616": 515, "6484": 515, "5369": 515, "7807": 515, "6559": 515, "9947": 515, "9411": 515, "6571": 515, "5398": 515, "6582": 515, "6579": 515, "8809": 515, "652": 515, "535": 515, "7682": 515, "6532": 515, "9906": 515, "0048": 515, "6437": 515, "5177": 515, "6669": 515, "7824": 515, "5053": 515, "6301": 515, "5142": 515, "6654": 515, "6483": 515, "9933": 515, "8146": 515, "517": 515, "9941": 515, "1412": 515, "710": 515, "99x": 515, "1564": 515, "712": 515, "20x": 515, "1377": 515, "719": 515, "1446": 515, "06x": 515, "1579": 515, "747": 515, "11x": 515, "1508": 515, "749": 515, "01x": 515, "6950": 515, "4214": 515, "6881": 515, "4192": 515, "6563": 515, "3804": 515, "6631": 515, "3922": 515, "423": 515, "158": 515, "571": 515, "53x": 515, "598": 515, "163": 515, "594": 515, "164": 515, "62x": 515, "5473": 515, "2567": 515, "5455": 515, "2563": 515, "shufflenet": 515, "6818": 515, "3839": 515, "78x": 515, "5750": 515, "3861": 515, "googlenet": 515, "1783": 515, "1095": 515, "1755": 515, "1071": 515, "squeezenet": 515, "9918": 515, "5639": 515, "9423": 515, "5501": 515, "caffenet": 515, "3363": 515, "1015": 515, "3276": 515, "798": 515, "10x": 515, "2104": 515, "985": 515, "2054": 515, "745": 515, "zfnet": 515, "864": 515, "866": 515, "455": 515, "1802": 515, "1170": 515, "1813": 515, "1164": 515, "56x": 515, "2615": 515, "1349": 515, "2343": 515, "1322": 515, "499": 515, "1288": 515, "878": 515, "47x": 515, "1173": 515, "851": 515, "38x": 515, "1114": 515, "825": 515, "1056": 515, "792": 515, "669": 515, "140": 515, "110": 515, "yolov4": 515, "12x": 515, "duc": 515, "tini": 515, "1163": 515, "993": 515, "ultra": 515, "8501": 515, "1922": 515, "emot": 515, "ferplu": 515, "3552": 515, "3114": 515, "arcfac": 515, "246": 515, "399": 515, "226": 515, "392": 515, "223": 515, "integerop": 515, "474": 515, "222": 515, "557": 515, "963": 515, "529": 515, "603": 515, "398": 515, "187": 515, "96x": 515, "144": 515, "124": 515, "bidaf": 515, "2757": 515, "2279": 515, "357": 515, "472": 515, "365": 515, "214": 515, "70x": 515, "489": 515, "213": 515, "61x": 515, "270": 515, "215": 515, "491": 515, "l12": 515, "h384": 515, "1051": 515, "583": 515, "80x": 515, "1076": 515, "589": 515, "896": 515, "396": 515, "274": 515, "210": 515, "271": 515, "l6": 515, "1124": 515, "2010": 515, "1127": 515, "401": 515, "494": 515, "electra": 515, "discrimin": 515, "1804": 515, "1154": 515, "1961": 515, "1158": 515, "mini": 515, "4986": 515, "3444": 515, "45x": 515, "3320": 515, "bart": 515, "deberta": 515, "147": 515, "170": 515, "16x": 515, "spanbert": 515, "multilingu": 515, "159": 515, "distilgpt2": 515, "layoutlm": 515, "50x": 515, "fcn": 515, "perplex": 515, "2788": 515, "7002": 515, "4124": 515, "9921": 515, "3950": 515, "5711": 515, "9892": 515, "9163": 515, "7240": 515, "9902": 515, "0438": 515, "7634": 515, "1186": 515, "9944": 515, "7615": 515, "1276": 515, "70b": 515, "7543": 515, "6181": 515, "rtnw4g32asym": 515, "6496": 515, "9967": 515, "7964": 515, "6612": 515, "rtnw4g32sym": 515, "7941": 515, "7243": 515, "9971": 515, "taskdataset": 515, "accuracyspars": 515, "ratiospars": 515, "commentsbalancedor": 515, "unbalanc": 515, "answeringsquad": 515, "87f1": 515, "momentumunbalanc": 515, "momentumbalanc": 515, "90f1": 515, "59f1": 515, "23f1": 515, "classificationmrpc": 515, "52f1": 515, "26f1": 515, "classificationsst": 515, "61accuraci": 515, "recognitionimagenet": 515, "95top1": 515, "v5s6": 515, "detectioncoco": 515, "ap0": 515, "6ap0": 515, "393": 515, "584": 515, "34f1": 515, "lassounbalanc": 515, "classificationmnli": 515, "mm": 515, "allbalanc": 515, "32accuraci": 515, "sensitivitybalanc": 515, "classificationqqp": 515, "classificationqnli": 515, "54accuraci": 515, "em": 515, "mobilenetv2": 515, "wideresnet40": 515, "9522": 515, "8178": 515, "0213": 515, "8235": 515, "027": 515, "5494": 515, "7153": 515, "5540": 515, "0046": 515, "5523": 515, "vgg": 515, "bn": 515, "7022": 515, "7415": 515, "7025": 515, "0003": 515, "6739": 515, "7399": 515, "6845": 515, "0106": 515, "blendcnn": 515, "7034": 515, "8382": 515, "bilstm": 515, "8314": 515, "9403": 515, "9048": 515, "0734": 515, "7323": 515, "8256": 515, "8084": 515, "8814": 515, "7442": 515, "8371": 515, "0119": 515, "0115": 515, "tinybert": 515, "8018": 515, "8044": 515, "8363": 515, "8411": 515, "8025": 515, "8074": 515, "0007": 515, "0030": 515, "8626": 515, "9091": 515, "8782": 515, "8684": 515, "8259": 515, "0058": 515, "distilroberta": 515, "6057": 515, "6187": 515, "0130": 515, "c6i": 515, "2xlarg": 515, "c6a": 515, "c6g": 515, "a100cuda": 515, "executionprovid": 515}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [343, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [169, 0, 0, "-", "algorithm"], [172, 0, 0, "-", "benchmark"], [180, 0, 0, "-", "compression"], [208, 0, 0, "-", "conf"], [210, 0, 0, "-", "config"], [211, 0, 0, "-", "contrib"], [236, 0, 0, "-", "data"], [290, 0, 0, "-", "experimental"], [350, 0, 0, "-", "metric"], [352, 0, 0, "-", "mix_precision"], [354, 0, 0, "-", "model"], [362, 0, 0, "-", "objective"], [363, 0, 0, "-", "profiling"], [385, 0, 0, "-", "quantization"], [393, 0, 0, "-", "strategy"], [405, 0, 0, "-", "template"], [406, 0, 0, "-", "training"], [410, 0, 0, "-", "utils"], [419, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [153, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "check_op_support_status"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[51, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[52, 0, 0, "-", "convert_add_to_biasadd"], [53, 0, 0, "-", "convert_layout"], [54, 0, 0, "-", "convert_leakyrelu"], [55, 0, 0, "-", "convert_nan_to_random"], [56, 0, 0, "-", "convert_placeholder_to_const"], [57, 0, 0, "-", "dequantize_cast_optimizer"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[149, 0, 0, "-", "awq"], [150, 0, 0, "-", "bf16_convert"], [151, 0, 0, "-", "gptq"], [152, 0, 0, "-", "hawq_metric"], [154, 0, 0, "-", "layer_wise_quant"], [159, 0, 0, "-", "mixed_precision"], [160, 0, 0, "-", "model_wrapper"], [161, 0, 0, "-", "pattern_detector"], [162, 0, 0, "-", "smooth_quant"], [163, 0, 0, "-", "symbolic_trace"], [164, 0, 0, "-", "teq"], [165, 0, 0, "-", "util"], [166, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.awq": [[149, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[150, 1, 1, "", "BF16ModuleWrapper"], [150, 2, 1, "", "Convert"], [150, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[151, 1, 1, "", "GPTQ"], [151, 1, 1, "", "GPTQuantizer"], [151, 2, 1, "", "find_layers"], [151, 2, 1, "", "find_layers_name"], [151, 2, 1, "", "is_leaf"], [151, 2, 1, "", "log_quantizable_layers_per_transformer"], [151, 2, 1, "", "quantize"], [151, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[152, 1, 1, "", "HessianTrace"], [152, 1, 1, "", "Node_collector"], [152, 2, 1, "", "compare_weights"], [152, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[155, 0, 0, "-", "modified_pickle"], [156, 0, 0, "-", "quantize"], [157, 0, 0, "-", "torch_load"], [158, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[155, 3, 1, "", "PickleError"], [155, 3, 1, "", "PicklingError"], [155, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[156, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[157, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[158, 2, 1, "", "dowload_hf_model"], [158, 2, 1, "", "get_children"], [158, 2, 1, "", "get_module"], [158, 2, 1, "", "get_named_children"], [158, 2, 1, "", "get_super_module_by_name"], [158, 2, 1, "", "load_layer_wise_quantized_model"], [158, 2, 1, "", "load_shell"], [158, 2, 1, "", "load_tensor"], [158, 2, 1, "", "load_tensor_from_shard"], [158, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[159, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[160, 1, 1, "", "FakeAffineTensorQuantFunction"], [160, 1, 1, "", "MulLinear"], [160, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[161, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[162, 1, 1, "", "TorchSmoothQuant"], [162, 2, 1, "", "get_module"], [162, 2, 1, "", "set_module"], [162, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, 2, 1, "", "symbolic_trace"], [163, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[164, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[165, 2, 1, "", "append_attr"], [165, 2, 1, "", "auto_copy"], [165, 2, 1, "", "calculate_quant_min_max"], [165, 2, 1, "", "calibration"], [165, 2, 1, "", "check_cfg_and_qconfig"], [165, 2, 1, "", "collate_torch_preds"], [165, 2, 1, "", "collect_weight_info"], [165, 2, 1, "", "fetch_module"], [165, 2, 1, "", "generate_activation_observer"], [165, 2, 1, "", "get_absorb_layers"], [165, 2, 1, "", "get_block_prefix"], [165, 2, 1, "", "get_depth"], [165, 2, 1, "", "get_dict_at_depth"], [165, 2, 1, "", "get_element_under_depth"], [165, 2, 1, "", "get_embedding_contiguous"], [165, 2, 1, "", "get_example_input"], [165, 2, 1, "", "get_fallback_order"], [165, 2, 1, "", "get_hidden_states"], [165, 2, 1, "", "get_module_input_output"], [165, 2, 1, "", "get_mse_order_per_fp32"], [165, 2, 1, "", "get_mse_order_per_int8"], [165, 2, 1, "", "get_op_type_by_name"], [165, 2, 1, "", "get_quantizable_ops_from_cfgs"], [165, 2, 1, "", "get_torch_version"], [165, 2, 1, "", "input2tuple"], [165, 2, 1, "", "is_fused_module"], [165, 2, 1, "", "match_datatype_pattern"], [165, 2, 1, "", "paser_cfgs"], [165, 2, 1, "", "set_module"], [165, 2, 1, "", "simple_inference"], [165, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[166, 2, 1, "", "awq_quantize"], [166, 2, 1, "", "gptq_quantize"], [166, 2, 1, "", "qdq_weight_actor"], [166, 2, 1, "", "qdq_weight_asym"], [166, 2, 1, "", "qdq_weight_sym"], [166, 2, 1, "", "quant_weight"], [166, 2, 1, "", "quant_weight_w_scale"], [166, 2, 1, "", "quantize_4bit"], [166, 2, 1, "", "rtn_quantize"], [166, 2, 1, "", "search_clip"], [166, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[167, 0, 0, "-", "algorithm"], [168, 0, 0, "-", "fast_bias_correction"], [170, 0, 0, "-", "smooth_quant"], [171, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[167, 1, 1, "", "ALGORITHMS"], [167, 1, 1, "", "Algorithm"], [167, 1, 1, "", "AlgorithmScheduler"], [167, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[168, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[170, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[171, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[172, 2, 1, "", "benchmark_with_raw_cmd"], [172, 2, 1, "", "call_one"], [172, 2, 1, "", "config_instance"], [172, 2, 1, "", "fit"], [172, 2, 1, "", "generate_prefix"], [172, 2, 1, "", "get_architecture"], [172, 2, 1, "", "get_bounded_threads"], [172, 2, 1, "", "get_core_ids"], [172, 2, 1, "", "get_physical_ids"], [172, 2, 1, "", "get_threads"], [172, 2, 1, "", "get_threads_per_core"], [172, 2, 1, "", "profile"], [172, 2, 1, "", "run_instance"], [172, 2, 1, "", "set_all_env_var"], [172, 2, 1, "", "set_env_var"], [172, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[173, 0, 0, "-", "callbacks"], [175, 0, 0, "-", "distillation"], [176, 0, 0, "-", "hpo"], [182, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[173, 1, 1, "", "BaseCallbacks"], [173, 1, 1, "", "DistillationCallbacks"], [173, 1, 1, "", "PruningCallbacks"], [173, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[173, 4, 1, "", "_epoch_ran"], [173, 4, 1, "", "best_model"], [173, 4, 1, "", "best_score"], [173, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[174, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[174, 1, 1, "", "Criterions"], [174, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [174, 1, 1, "", "KnowledgeDistillationFramework"], [174, 1, 1, "", "KnowledgeDistillationLoss"], [174, 1, 1, "", "PyTorchCriterions"], [174, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [174, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [174, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [174, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [174, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [174, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [174, 1, 1, "", "SelfKnowledgeDistillationLoss"], [174, 1, 1, "", "TensorflowCriterions"], [174, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [174, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [174, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [174, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.hpo": [[177, 0, 0, "-", "sa_optimizer"], [178, 0, 0, "-", "search_algorithms"], [179, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[178, 1, 1, "", "BayesianOptimizationSearcher"], [178, 1, 1, "", "GridSearcher"], [178, 1, 1, "", "RandomSearcher"], [178, 1, 1, "", "Searcher"], [178, 1, 1, "", "XgbSearcher"], [178, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[179, 1, 1, "", "BaseSearchSpace"], [179, 1, 1, "", "ContinuousSearchSpace"], [179, 1, 1, "", "DiscreteSearchSpace"], [179, 1, 1, "", "SearchSpace"], [179, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[181, 0, 0, "-", "criteria"], [184, 0, 0, "-", "model_slim"], [188, 0, 0, "-", "patterns"], [182, 2, 1, "", "prepare_pruning"], [195, 0, 0, "-", "pruners"], [201, 0, 0, "-", "pruning"], [202, 0, 0, "-", "regs"], [182, 2, 1, "", "save"], [203, 0, 0, "-", "schedulers"], [204, 0, 0, "-", "tf_criteria"], [205, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[181, 1, 1, "", "BlockMaskCriterion"], [181, 1, 1, "", "GradientCriterion"], [181, 1, 1, "", "MagnitudeCriterion"], [181, 1, 1, "", "PruningCriterion"], [181, 1, 1, "", "RetrainFreeCriterion"], [181, 1, 1, "", "SnipCriterion"], [181, 1, 1, "", "SnipMomentumCriterion"], [181, 2, 1, "", "get_criterion"], [181, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[181, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[181, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[181, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[181, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[181, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[181, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[181, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[183, 0, 0, "-", "auto_slim"], [185, 0, 0, "-", "pattern_analyzer"], [186, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[183, 2, 1, "", "generate_ffn2_pruning_config"], [183, 2, 1, "", "generate_mha_pruning_config"], [183, 2, 1, "", "model_slim"], [183, 2, 1, "", "model_slim_ffn2"], [183, 2, 1, "", "model_slim_mha"], [183, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[185, 1, 1, "", "ClassifierHeadSearcher"], [185, 1, 1, "", "ClassifierHeadSearcherTF"], [185, 1, 1, "", "JitBasicSearcher"], [185, 1, 1, "", "Linear2LinearSearcher"], [185, 1, 1, "", "RecipeSearcher"], [185, 1, 1, "", "SelfMHASearcher"], [185, 2, 1, "", "get_attributes"], [185, 2, 1, "", "get_common_module"], [185, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[185, 4, 1, "", "device"], [185, 4, 1, "", "flatten_static_graph"], [185, 4, 1, "", "model"], [185, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[185, 4, 1, "", "device"], [185, 4, 1, "", "flatten_static_graph"], [185, 4, 1, "", "model"], [185, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[185, 4, 1, "", "device"], [185, 4, 1, "", "flatten_static_graph"], [185, 4, 1, "", "model"], [185, 4, 1, "", "searching_results"], [185, 4, 1, "", "static_graph"], [185, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[185, 4, 1, "", "current_pattern"], [185, 4, 1, "", "device"], [185, 4, 1, "", "flatten_static_graph"], [185, 4, 1, "", "model"], [185, 4, 1, "", "searching_results"], [185, 4, 1, "", "static_graph"], [185, 4, 1, "", "target_layers"], [185, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[185, 4, 1, "", "model"], [185, 4, 1, "", "recipe"], [185, 4, 1, "", "searching_results"], [185, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[185, 4, 1, "", "device"], [185, 4, 1, "", "flatten_static_graph"], [185, 4, 1, "", "model"], [185, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[186, 1, 1, "", "LinearCompression"], [186, 1, 1, "", "LinearCompressionIterator"], [186, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[186, 4, 1, "", "device"], [186, 4, 1, "", "layer_1"], [186, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[186, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[187, 0, 0, "-", "base"], [188, 2, 1, "", "get_pattern"], [189, 0, 0, "-", "mha"], [190, 0, 0, "-", "ninm"], [191, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[187, 1, 1, "", "BasePattern"], [187, 1, 1, "", "KerasBasePattern"], [187, 1, 1, "", "PytorchBasePattern"], [187, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[187, 4, 1, "", "config"], [187, 4, 1, "", "invalid_layers"], [187, 4, 1, "", "is_global"], [187, 4, 1, "", "keep_mask_layers"], [187, 4, 1, "", "max_sparsity_ratio_per_op"], [187, 4, 1, "", "min_sparsity_ratio_per_op"], [187, 4, 1, "", "modules"], [187, 4, 1, "", "pattern"], [187, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[187, 4, 1, "", "config"], [187, 4, 1, "", "invalid_layers"], [187, 4, 1, "", "is_global"], [187, 4, 1, "", "keep_mask_layers"], [187, 4, 1, "", "max_sparsity_ratio_per_op"], [187, 4, 1, "", "min_sparsity_ratio_per_op"], [187, 4, 1, "", "modules"], [187, 4, 1, "", "pattern"], [187, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[187, 4, 1, "", "config"], [187, 4, 1, "", "invalid_layers"], [187, 4, 1, "", "is_global"], [187, 4, 1, "", "keep_mask_layers"], [187, 4, 1, "", "max_sparsity_ratio_per_op"], [187, 4, 1, "", "min_sparsity_ratio_per_op"], [187, 4, 1, "", "modules"], [187, 4, 1, "", "pattern"], [187, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[189, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[189, 4, 1, "", "M"], [189, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[190, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[190, 4, 1, "", "M"], [190, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[191, 1, 1, "", "KerasPatternNxM"], [191, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[191, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[191, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[192, 0, 0, "-", "base"], [193, 0, 0, "-", "basic"], [194, 0, 0, "-", "block_mask"], [195, 2, 1, "", "get_pruner"], [196, 0, 0, "-", "mha"], [195, 2, 1, "", "parse_valid_pruner_types"], [197, 0, 0, "-", "pattern_lock"], [198, 0, 0, "-", "progressive"], [199, 0, 0, "-", "retrain_free"], [200, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[192, 1, 1, "", "BasePruner"], [192, 1, 1, "", "KerasBasePruner"], [192, 1, 1, "", "PytorchBasePruner"], [192, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[192, 4, 1, "", "config"], [192, 4, 1, "", "current_sparsity_ratio"], [192, 4, 1, "", "end_step"], [192, 4, 1, "", "global_step"], [192, 4, 1, "", "masks"], [192, 4, 1, "", "max_sparsity_ratio_per_op"], [192, 4, 1, "", "modules"], [192, 4, 1, "", "pattern"], [192, 4, 1, "", "pruning_frequency"], [192, 4, 1, "", "scheduler"], [192, 4, 1, "", "scores"], [192, 4, 1, "", "start_step"], [192, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[192, 4, 1, "", "config"], [192, 4, 1, "", "current_sparsity_ratio"], [192, 4, 1, "", "end_step"], [192, 4, 1, "", "global_step"], [192, 4, 1, "", "masks"], [192, 4, 1, "", "max_sparsity_ratio_per_op"], [192, 4, 1, "", "modules"], [192, 4, 1, "", "pattern"], [192, 4, 1, "", "pruning_frequency"], [192, 4, 1, "", "scheduler"], [192, 4, 1, "", "scores"], [192, 4, 1, "", "start_step"], [192, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[192, 4, 1, "", "config"], [192, 4, 1, "", "current_sparsity_ratio"], [192, 4, 1, "", "end_step"], [192, 4, 1, "", "global_step"], [192, 4, 1, "", "masks"], [192, 4, 1, "", "max_sparsity_ratio_per_op"], [192, 4, 1, "", "modules"], [192, 4, 1, "", "pattern"], [192, 4, 1, "", "pruning_frequency"], [192, 4, 1, "", "scheduler"], [192, 4, 1, "", "scores"], [192, 4, 1, "", "start_step"], [192, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[193, 1, 1, "", "KerasBasicPruner"], [193, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[193, 4, 1, "", "criterion"], [193, 4, 1, "", "pattern"], [193, 4, 1, "", "reg"], [193, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[193, 4, 1, "", "criterion"], [193, 4, 1, "", "pattern"], [193, 4, 1, "", "reg"], [193, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[194, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[194, 4, 1, "", "criterion"], [194, 4, 1, "", "pattern"], [194, 4, 1, "", "reg"], [194, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[196, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[196, 4, 1, "", "head_masks"], [196, 4, 1, "", "linear_layers"], [196, 4, 1, "", "mha_compressions"], [196, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[197, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[198, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[199, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[199, 4, 1, "", "criterion"], [199, 4, 1, "", "pattern"], [199, 4, 1, "", "reg"], [199, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[200, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[200, 4, 1, "", "criterion"], [200, 4, 1, "", "pattern"], [200, 4, 1, "", "reg"], [200, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[201, 1, 1, "", "BasePruning"], [201, 1, 1, "", "BasicPruning"], [201, 1, 1, "", "RetrainFreePruning"], [201, 1, 1, "", "SparseGPTPruning"], [201, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[201, 4, 1, "", "config_file_path"], [201, 4, 1, "", "model"], [201, 4, 1, "", "pruner_info"], [201, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[201, 4, 1, "", "config_file_path"], [201, 4, 1, "", "model"], [201, 4, 1, "", "pruner_info"], [201, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[201, 4, 1, "", "config_file_path"], [201, 4, 1, "", "model"], [201, 4, 1, "", "pruner_info"], [201, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[202, 1, 1, "", "BaseReg"], [202, 1, 1, "", "GroupLasso"], [202, 2, 1, "", "get_reg"], [202, 2, 1, "", "get_reg_type"], [202, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[202, 4, 1, "", "alpha"], [202, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[203, 1, 1, "", "IterativeScheduler"], [203, 1, 1, "", "OneshotScheduler"], [203, 1, 1, "", "PruningScheduler"], [203, 2, 1, "", "get_scheduler"], [203, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[203, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[204, 1, 1, "", "MagnitudeCriterion"], [204, 1, 1, "", "PruningCriterion"], [204, 2, 1, "", "get_tf_criterion"], [204, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[204, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[204, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[205, 2, 1, "", "check_config"], [205, 2, 1, "", "check_key_validity"], [205, 2, 1, "", "collect_layer_inputs"], [205, 2, 1, "", "generate_pruner_config"], [205, 2, 1, "", "get_layers"], [205, 2, 1, "", "get_sparsity_ratio"], [205, 2, 1, "", "get_sparsity_ratio_tf"], [205, 2, 1, "", "parse_last_linear"], [205, 2, 1, "", "parse_last_linear_tf"], [205, 2, 1, "", "parse_to_prune"], [205, 2, 1, "", "parse_to_prune_tf"], [205, 2, 1, "", "process_and_check_config"], [205, 2, 1, "", "process_config"], [205, 2, 1, "", "process_weight_config"], [205, 2, 1, "", "process_yaml_config"], [205, 2, 1, "", "reset_none_to_default"], [205, 2, 1, "", "update_params"]], "neural_compressor.conf": [[206, 0, 0, "-", "config"], [207, 0, 0, "-", "dotdict"], [209, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[206, 1, 1, "", "Benchmark_Conf"], [206, 1, 1, "", "Conf"], [206, 1, 1, "", "DefaultConf"], [206, 1, 1, "", "Distillation_Conf"], [206, 1, 1, "", "Graph_Optimization_Conf"], [206, 1, 1, "", "MixedPrecision_Conf"], [206, 1, 1, "", "NASConfig"], [206, 1, 1, "", "PrunerV2"], [206, 1, 1, "", "Pruning_Conf"], [206, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[207, 1, 1, "", "DotDict"], [207, 2, 1, "", "deep_get"], [207, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[209, 1, 1, "", "AccuracyCriterion"], [209, 1, 1, "", "BenchmarkConfig"], [209, 1, 1, "", "DistillationConfig"], [209, 1, 1, "", "KnowledgeDistillationLossConfig"], [209, 1, 1, "", "Options"], [209, 1, 1, "", "QuantizationConfig"], [209, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[210, 1, 1, "", "AccuracyCriterion"], [210, 1, 1, "", "BenchmarkConfig"], [210, 1, 1, "", "DistillationConfig"], [210, 1, 1, "", "DotDict"], [210, 1, 1, "", "ExportConfig"], [210, 1, 1, "", "HPOConfig"], [210, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [210, 1, 1, "", "Keras"], [210, 1, 1, "", "KnowledgeDistillationLossConfig"], [210, 1, 1, "", "MXNet"], [210, 1, 1, "", "MixedPrecisionConfig"], [210, 1, 1, "", "NASConfig"], [210, 1, 1, "", "ONNX"], [210, 1, 1, "", "ONNXQlinear2QDQConfig"], [210, 1, 1, "", "Options"], [210, 1, 1, "", "PostTrainingQuantConfig"], [210, 1, 1, "", "PyTorch"], [210, 1, 1, "", "QuantizationAwareTrainingConfig"], [210, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [210, 1, 1, "", "TF2ONNXConfig"], [210, 1, 1, "", "TensorFlow"], [210, 1, 1, "", "Torch2ONNXConfig"], [210, 1, 1, "", "TuningCriterion"], [210, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[212, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[213, 0, 0, "-", "sigopt"], [214, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[213, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[214, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[219, 0, 0, "-", "dataloaders"], [231, 0, 0, "-", "datasets"], [235, 0, 0, "-", "filters"], [239, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[215, 0, 0, "-", "base_dataloader"], [216, 0, 0, "-", "dataloader"], [217, 0, 0, "-", "default_dataloader"], [218, 0, 0, "-", "fetcher"], [220, 0, 0, "-", "mxnet_dataloader"], [221, 0, 0, "-", "onnxrt_dataloader"], [222, 0, 0, "-", "pytorch_dataloader"], [223, 0, 0, "-", "sampler"], [224, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[215, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[216, 1, 1, "", "DataLoader"], [216, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[217, 1, 1, "", "DefaultDataLoader"], [217, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[218, 1, 1, "", "Fetcher"], [218, 1, 1, "", "IndexFetcher"], [218, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[220, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[221, 1, 1, "", "ONNXRTBertDataLoader"], [221, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[222, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[223, 1, 1, "", "BatchSampler"], [223, 1, 1, "", "IterableSampler"], [223, 1, 1, "", "Sampler"], [223, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[224, 1, 1, "", "TFDataDataLoader"], [224, 1, 1, "", "TensorflowBertDataLoader"], [224, 1, 1, "", "TensorflowDataLoader"], [224, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[225, 0, 0, "-", "bert_dataset"], [226, 0, 0, "-", "coco_dataset"], [227, 0, 0, "-", "dataset"], [228, 0, 0, "-", "dummy_dataset"], [229, 0, 0, "-", "dummy_dataset_v2"], [230, 0, 0, "-", "imagenet_dataset"], [232, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[225, 1, 1, "", "InputFeatures"], [225, 1, 1, "", "ONNXRTBertDataset"], [225, 1, 1, "", "ParseDecodeBert"], [225, 1, 1, "", "PytorchBertDataset"], [225, 1, 1, "", "TensorflowBertDataset"], [225, 1, 1, "", "TensorflowModelZooBertDataset"], [225, 2, 1, "", "convert_examples_to_features"], [225, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[226, 1, 1, "", "COCONpy"], [226, 1, 1, "", "COCORaw"], [226, 1, 1, "", "COCORecordDataset"], [226, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[227, 1, 1, "", "CIFAR10"], [227, 1, 1, "", "CIFAR100"], [227, 1, 1, "", "Dataset"], [227, 1, 1, "", "Datasets"], [227, 1, 1, "", "FashionMNIST"], [227, 1, 1, "", "ImageFolder"], [227, 1, 1, "", "IterableDataset"], [227, 1, 1, "", "MNIST"], [227, 1, 1, "", "MXNetCIFAR10"], [227, 1, 1, "", "MXNetCIFAR100"], [227, 1, 1, "", "MXNetDatasets"], [227, 1, 1, "", "MXNetFashionMNIST"], [227, 1, 1, "", "MXNetImageFolder"], [227, 1, 1, "", "MXNetMNIST"], [227, 1, 1, "", "ONNXRTITDatasets"], [227, 1, 1, "", "ONNXRTQLDatasets"], [227, 1, 1, "", "PyTorchDatasets"], [227, 1, 1, "", "PytorchCIFAR10"], [227, 1, 1, "", "PytorchCIFAR100"], [227, 1, 1, "", "PytorchFashionMNIST"], [227, 1, 1, "", "PytorchMNIST"], [227, 1, 1, "", "PytorchMxnetWrapDataset"], [227, 1, 1, "", "PytorchMxnetWrapFunction"], [227, 1, 1, "", "Tensorflow"], [227, 1, 1, "", "TensorflowCIFAR10"], [227, 1, 1, "", "TensorflowCIFAR100"], [227, 1, 1, "", "TensorflowDatasets"], [227, 1, 1, "", "TensorflowFashionMNIST"], [227, 1, 1, "", "TensorflowImageRecord"], [227, 1, 1, "", "TensorflowMNIST"], [227, 1, 1, "", "TensorflowTFRecordDataset"], [227, 1, 1, "", "TensorflowVOCRecord"], [227, 2, 1, "", "calculate_md5"], [227, 2, 1, "", "check_integrity"], [227, 2, 1, "", "dataset_registry"], [227, 2, 1, "", "download_url"], [227, 5, 1, "", "framework_datasets"], [227, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[228, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[229, 1, 1, "", "DummyDataset"], [229, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[230, 1, 1, "", "ImagenetRaw"], [230, 1, 1, "", "MXNetImagenetRaw"], [230, 1, 1, "", "ONNXRTImagenetDataset"], [230, 1, 1, "", "PytorchImagenetRaw"], [230, 1, 1, "", "TensorflowImagenetDataset"], [230, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[232, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[233, 0, 0, "-", "coco_filter"], [234, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[233, 1, 1, "", "LabelBalanceCOCORawFilter"], [233, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[234, 1, 1, "", "FILTERS"], [234, 1, 1, "", "Filter"], [234, 1, 1, "", "MXNetFilters"], [234, 1, 1, "", "ONNXRTITFilters"], [234, 1, 1, "", "ONNXRTQLFilters"], [234, 1, 1, "", "PyTorchFilters"], [234, 1, 1, "", "TensorflowFilters"], [234, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[237, 0, 0, "-", "coco_transform"], [238, 0, 0, "-", "imagenet_transform"], [240, 0, 0, "-", "postprocess"], [241, 0, 0, "-", "tokenization"], [242, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[237, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[238, 1, 1, "", "BilinearImagenetTransform"], [238, 1, 1, "", "LabelShift"], [238, 1, 1, "", "ONNXResizeCropImagenetTransform"], [238, 1, 1, "", "OnnxBilinearImagenetTransform"], [238, 1, 1, "", "ParseDecodeImagenet"], [238, 1, 1, "", "ParseDecodeImagenetTransform"], [238, 1, 1, "", "QuantizedInput"], [238, 1, 1, "", "ResizeWithAspectRatio"], [238, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [238, 1, 1, "", "TensorflowShiftRescale"], [238, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[240, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[241, 1, 1, "", "BasicTokenizer"], [241, 1, 1, "", "FullTokenizer"], [241, 1, 1, "", "WordpieceTokenizer"], [241, 2, 1, "", "convert_by_vocab"], [241, 2, 1, "", "convert_to_unicode"], [241, 2, 1, "", "load_vocab"], [241, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[242, 1, 1, "", "AlignImageChannelTransform"], [242, 1, 1, "", "BaseTransform"], [242, 1, 1, "", "CastONNXTransform"], [242, 1, 1, "", "CastPyTorchTransform"], [242, 1, 1, "", "CastTFTransform"], [242, 1, 1, "", "CenterCropTFTransform"], [242, 1, 1, "", "CenterCropTransform"], [242, 1, 1, "", "CollectTransform"], [242, 1, 1, "", "ComposeTransform"], [242, 1, 1, "", "CropResizeTFTransform"], [242, 1, 1, "", "CropResizeTransform"], [242, 1, 1, "", "CropToBoundingBox"], [242, 1, 1, "", "InputFeatures"], [242, 1, 1, "", "MXNetCropResizeTransform"], [242, 1, 1, "", "MXNetCropToBoundingBox"], [242, 1, 1, "", "MXNetNormalizeTransform"], [242, 1, 1, "", "MXNetTransforms"], [242, 1, 1, "", "MXNetTranspose"], [242, 1, 1, "", "NormalizeTFTransform"], [242, 1, 1, "", "NormalizeTransform"], [242, 1, 1, "", "ONNXRTCropToBoundingBox"], [242, 1, 1, "", "ONNXRTITTransforms"], [242, 1, 1, "", "ONNXRTQLTransforms"], [242, 1, 1, "", "PaddedCenterCropTransform"], [242, 1, 1, "", "ParseDecodeVocTransform"], [242, 1, 1, "", "PyTorchAlignImageChannel"], [242, 1, 1, "", "PyTorchCropResizeTransform"], [242, 1, 1, "", "PyTorchNormalizeTransform"], [242, 1, 1, "", "PyTorchTransforms"], [242, 1, 1, "", "PyTorchTranspose"], [242, 1, 1, "", "PytorchMxnetTransform"], [242, 1, 1, "", "PytorchMxnetWrapFunction"], [242, 1, 1, "", "RandomCropTFTransform"], [242, 1, 1, "", "RandomCropTransform"], [242, 1, 1, "", "RandomHorizontalFlip"], [242, 1, 1, "", "RandomResizedCropMXNetTransform"], [242, 1, 1, "", "RandomResizedCropPytorchTransform"], [242, 1, 1, "", "RandomResizedCropTFTransform"], [242, 1, 1, "", "RandomResizedCropTransform"], [242, 1, 1, "", "RandomVerticalFlip"], [242, 1, 1, "", "RescaleKerasPretrainTransform"], [242, 1, 1, "", "RescaleTFTransform"], [242, 1, 1, "", "RescaleTransform"], [242, 1, 1, "", "ResizeMXNetTransform"], [242, 1, 1, "", "ResizePytorchTransform"], [242, 1, 1, "", "ResizeTFTransform"], [242, 1, 1, "", "ResizeTransform"], [242, 1, 1, "", "ResizeWithRatio"], [242, 1, 1, "", "SquadExample"], [242, 1, 1, "", "TFModelZooCollectTransform"], [242, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [242, 1, 1, "", "TFSquadV1PostTransform"], [242, 1, 1, "", "TRANSFORMS"], [242, 1, 1, "", "TensorflowCropToBoundingBox"], [242, 1, 1, "", "TensorflowRandomHorizontalFlip"], [242, 1, 1, "", "TensorflowRandomVerticalFlip"], [242, 1, 1, "", "TensorflowResizeWithRatio"], [242, 1, 1, "", "TensorflowTransform"], [242, 1, 1, "", "TensorflowTransforms"], [242, 1, 1, "", "TensorflowTranspose"], [242, 1, 1, "", "TensorflowWrapFunction"], [242, 1, 1, "", "ToArray"], [242, 1, 1, "", "ToNDArrayTransform"], [242, 1, 1, "", "Transforms"], [242, 1, 1, "", "Transpose"], [242, 2, 1, "", "convert_examples_to_features"], [242, 2, 1, "", "get_final_text"], [242, 2, 1, "", "get_torchvision_map"], [242, 2, 1, "", "read_squad_examples"], [242, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[243, 0, 0, "-", "benchmark"], [246, 0, 0, "-", "common"], [252, 0, 0, "-", "component"], [253, 0, 0, "-", "compression"], [254, 0, 0, "-", "contrib"], [279, 0, 0, "-", "data"], [284, 0, 0, "-", "distillation"], [285, 0, 0, "-", "export"], [289, 0, 0, "-", "graph_optimization"], [297, 0, 0, "-", "metric"], [299, 0, 0, "-", "mixed_precision"], [300, 0, 0, "-", "model_conversion"], [303, 0, 0, "-", "nas"], [309, 0, 0, "-", "pruner_legacy"], [313, 0, 0, "-", "pruning"], [314, 0, 0, "-", "pruning_recipes"], [318, 0, 0, "-", "pruning_v2"], [319, 0, 0, "-", "pytorch_pruner"], [326, 0, 0, "-", "quantization"], [327, 0, 0, "-", "scheduler"], [332, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[243, 1, 1, "", "Benchmark"], [243, 2, 1, "", "get_architecture"], [243, 2, 1, "", "get_bounded_threads"], [243, 2, 1, "", "get_core_ids"], [243, 2, 1, "", "get_physical_ids"], [243, 2, 1, "", "get_threads"], [243, 2, 1, "", "get_threads_per_core"], [243, 2, 1, "", "set_all_env_var"], [243, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[244, 0, 0, "-", "criterion"], [245, 0, 0, "-", "dataloader"], [247, 0, 0, "-", "metric"], [248, 0, 0, "-", "model"], [249, 0, 0, "-", "optimizer"], [250, 0, 0, "-", "postprocess"], [251, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[244, 1, 1, "", "Criterions"], [244, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [244, 1, 1, "", "KnowledgeDistillationFramework"], [244, 1, 1, "", "KnowledgeDistillationLoss"], [244, 1, 1, "", "PyTorchCriterions"], [244, 1, 1, "", "PyTorchCrossEntropyLoss"], [244, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [244, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [244, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [244, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [244, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [244, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [244, 1, 1, "", "SelfKnowledgeDistillationLoss"], [244, 1, 1, "", "TensorFlowCrossEntropyLoss"], [244, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [244, 1, 1, "", "TensorflowCriterions"], [244, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [244, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [244, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [244, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[245, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[247, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[248, 1, 1, "", "Model"], [248, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[249, 1, 1, "", "Optimizers"], [249, 1, 1, "", "PyTorchOptimizers"], [249, 1, 1, "", "PyTorchSGD"], [249, 1, 1, "", "TensorFlowAdam"], [249, 1, 1, "", "TensorFlowAdamW"], [249, 1, 1, "", "TensorFlowSGD"], [249, 1, 1, "", "TensorflowOptimizers"], [249, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[250, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[251, 2, 1, "", "get_activation"], [251, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[252, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[255, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[256, 0, 0, "-", "sigopt"], [257, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[256, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[257, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[262, 0, 0, "-", "dataloaders"], [274, 0, 0, "-", "datasets"], [278, 0, 0, "-", "filters"], [281, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[258, 0, 0, "-", "base_dataloader"], [259, 0, 0, "-", "dataloader"], [260, 0, 0, "-", "default_dataloader"], [261, 0, 0, "-", "fetcher"], [263, 0, 0, "-", "mxnet_dataloader"], [264, 0, 0, "-", "onnxrt_dataloader"], [265, 0, 0, "-", "pytorch_dataloader"], [266, 0, 0, "-", "sampler"], [267, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[258, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[260, 1, 1, "", "DefaultDataLoader"], [260, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[261, 1, 1, "", "Fetcher"], [261, 1, 1, "", "IndexFetcher"], [261, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[263, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[264, 1, 1, "", "ONNXRTBertDataLoader"], [264, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[265, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[266, 1, 1, "", "BatchSampler"], [266, 1, 1, "", "IterableSampler"], [266, 1, 1, "", "Sampler"], [266, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[267, 1, 1, "", "TFDataDataLoader"], [267, 1, 1, "", "TensorflowBertDataLoader"], [267, 1, 1, "", "TensorflowDataLoader"], [267, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[268, 0, 0, "-", "bert_dataset"], [269, 0, 0, "-", "coco_dataset"], [270, 0, 0, "-", "dataset"], [271, 0, 0, "-", "dummy_dataset"], [272, 0, 0, "-", "dummy_dataset_v2"], [273, 0, 0, "-", "imagenet_dataset"], [275, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[268, 1, 1, "", "InputFeatures"], [268, 1, 1, "", "ONNXRTBertDataset"], [268, 1, 1, "", "ParseDecodeBert"], [268, 1, 1, "", "PytorchBertDataset"], [268, 1, 1, "", "TensorflowBertDataset"], [268, 1, 1, "", "TensorflowModelZooBertDataset"], [268, 2, 1, "", "convert_examples_to_features"], [268, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[269, 1, 1, "", "COCONpy"], [269, 1, 1, "", "COCORaw"], [269, 1, 1, "", "COCORecordDataset"], [269, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[270, 1, 1, "", "CIFAR10"], [270, 1, 1, "", "CIFAR100"], [270, 1, 1, "", "Dataset"], [270, 1, 1, "", "Datasets"], [270, 1, 1, "", "FashionMNIST"], [270, 1, 1, "", "ImageFolder"], [270, 1, 1, "", "IterableDataset"], [270, 1, 1, "", "MNIST"], [270, 1, 1, "", "MXNetCIFAR10"], [270, 1, 1, "", "MXNetCIFAR100"], [270, 1, 1, "", "MXNetDatasets"], [270, 1, 1, "", "MXNetFashionMNIST"], [270, 1, 1, "", "MXNetImageFolder"], [270, 1, 1, "", "MXNetMNIST"], [270, 1, 1, "", "ONNXRTITDatasets"], [270, 1, 1, "", "ONNXRTQLDatasets"], [270, 1, 1, "", "PyTorchDatasets"], [270, 1, 1, "", "PytorchCIFAR10"], [270, 1, 1, "", "PytorchCIFAR100"], [270, 1, 1, "", "PytorchFashionMNIST"], [270, 1, 1, "", "PytorchMNIST"], [270, 1, 1, "", "PytorchMxnetWrapDataset"], [270, 1, 1, "", "PytorchMxnetWrapFunction"], [270, 1, 1, "", "TensorflowCIFAR10"], [270, 1, 1, "", "TensorflowCIFAR100"], [270, 1, 1, "", "TensorflowDatasets"], [270, 1, 1, "", "TensorflowFashionMNIST"], [270, 1, 1, "", "TensorflowImageFolder"], [270, 1, 1, "", "TensorflowImageRecord"], [270, 1, 1, "", "TensorflowMNIST"], [270, 1, 1, "", "TensorflowTFRecordDataset"], [270, 1, 1, "", "TensorflowVOCRecord"], [270, 2, 1, "", "calculate_md5"], [270, 2, 1, "", "check_integrity"], [270, 2, 1, "", "dataset_registry"], [270, 2, 1, "", "download_url"], [270, 5, 1, "", "framework_datasets"], [270, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[271, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[272, 1, 1, "", "DummyDataset"], [272, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[273, 1, 1, "", "ImagenetRaw"], [273, 1, 1, "", "MXNetImagenetRaw"], [273, 1, 1, "", "ONNXRTImagenetDataset"], [273, 1, 1, "", "PytorchImagenetRaw"], [273, 1, 1, "", "TensorflowImagenetDataset"], [273, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[275, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[276, 0, 0, "-", "coco_filter"], [277, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[276, 1, 1, "", "LabelBalanceCOCORawFilter"], [276, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[277, 1, 1, "", "FILTERS"], [277, 1, 1, "", "Filter"], [277, 1, 1, "", "MXNetFilters"], [277, 1, 1, "", "ONNXRTITFilters"], [277, 1, 1, "", "ONNXRTQLFilters"], [277, 1, 1, "", "PyTorchFilters"], [277, 1, 1, "", "TensorflowFilters"], [277, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[280, 0, 0, "-", "imagenet_transform"], [282, 0, 0, "-", "tokenization"], [283, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[280, 1, 1, "", "BilinearImagenetTransform"], [280, 1, 1, "", "LabelShift"], [280, 1, 1, "", "ONNXResizeCropImagenetTransform"], [280, 1, 1, "", "OnnxBilinearImagenetTransform"], [280, 1, 1, "", "ParseDecodeImagenet"], [280, 1, 1, "", "ParseDecodeImagenetTransform"], [280, 1, 1, "", "QuantizedInput"], [280, 1, 1, "", "ResizeWithAspectRatio"], [280, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[282, 1, 1, "", "BasicTokenizer"], [282, 1, 1, "", "FullTokenizer"], [282, 1, 1, "", "WordpieceTokenizer"], [282, 2, 1, "", "convert_by_vocab"], [282, 2, 1, "", "convert_to_unicode"], [282, 2, 1, "", "load_vocab"], [282, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[283, 1, 1, "", "AlignImageChannelTransform"], [283, 1, 1, "", "BaseTransform"], [283, 1, 1, "", "CastONNXTransform"], [283, 1, 1, "", "CastPyTorchTransform"], [283, 1, 1, "", "CastTFTransform"], [283, 1, 1, "", "CenterCropTFTransform"], [283, 1, 1, "", "CenterCropTransform"], [283, 1, 1, "", "CollectTransform"], [283, 1, 1, "", "ComposeTransform"], [283, 1, 1, "", "CropResizeTFTransform"], [283, 1, 1, "", "CropResizeTransform"], [283, 1, 1, "", "CropToBoundingBox"], [283, 1, 1, "", "InputFeatures"], [283, 1, 1, "", "MXNetCropResizeTransform"], [283, 1, 1, "", "MXNetCropToBoundingBox"], [283, 1, 1, "", "MXNetNormalizeTransform"], [283, 1, 1, "", "MXNetTransforms"], [283, 1, 1, "", "MXNetTranspose"], [283, 1, 1, "", "NormalizeTFTransform"], [283, 1, 1, "", "NormalizeTransform"], [283, 1, 1, "", "ONNXRTCropToBoundingBox"], [283, 1, 1, "", "ONNXRTITTransforms"], [283, 1, 1, "", "ONNXRTQLTransforms"], [283, 1, 1, "", "PaddedCenterCropTransform"], [283, 1, 1, "", "ParseDecodeVocTransform"], [283, 1, 1, "", "PyTorchAlignImageChannel"], [283, 1, 1, "", "PyTorchCropResizeTransform"], [283, 1, 1, "", "PyTorchNormalizeTransform"], [283, 1, 1, "", "PyTorchTransforms"], [283, 1, 1, "", "PyTorchTranspose"], [283, 1, 1, "", "PytorchMxnetTransform"], [283, 1, 1, "", "PytorchMxnetWrapFunction"], [283, 1, 1, "", "RandomCropTFTransform"], [283, 1, 1, "", "RandomCropTransform"], [283, 1, 1, "", "RandomHorizontalFlip"], [283, 1, 1, "", "RandomResizedCropMXNetTransform"], [283, 1, 1, "", "RandomResizedCropPytorchTransform"], [283, 1, 1, "", "RandomResizedCropTFTransform"], [283, 1, 1, "", "RandomResizedCropTransform"], [283, 1, 1, "", "RandomVerticalFlip"], [283, 1, 1, "", "RescaleKerasPretrainTransform"], [283, 1, 1, "", "RescaleTFTransform"], [283, 1, 1, "", "RescaleTransform"], [283, 1, 1, "", "ResizeMXNetTransform"], [283, 1, 1, "", "ResizePytorchTransform"], [283, 1, 1, "", "ResizeTFTransform"], [283, 1, 1, "", "ResizeTransform"], [283, 1, 1, "", "ResizeWithRatio"], [283, 1, 1, "", "SquadExample"], [283, 1, 1, "", "TFModelZooCollectTransform"], [283, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [283, 1, 1, "", "TFSquadV1PostTransform"], [283, 1, 1, "", "TRANSFORMS"], [283, 1, 1, "", "TensorflowCropToBoundingBox"], [283, 1, 1, "", "TensorflowRandomHorizontalFlip"], [283, 1, 1, "", "TensorflowRandomVerticalFlip"], [283, 1, 1, "", "TensorflowResizeWithRatio"], [283, 1, 1, "", "TensorflowTransform"], [283, 1, 1, "", "TensorflowTransforms"], [283, 1, 1, "", "TensorflowTranspose"], [283, 1, 1, "", "TensorflowWrapFunction"], [283, 1, 1, "", "ToArray"], [283, 1, 1, "", "ToNDArrayTransform"], [283, 1, 1, "", "Transforms"], [283, 1, 1, "", "Transpose"], [283, 2, 1, "", "convert_examples_to_features"], [283, 2, 1, "", "get_final_text"], [283, 2, 1, "", "get_torchvision_map"], [283, 2, 1, "", "read_squad_examples"], [283, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[284, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[284, 4, 1, "", "_epoch_ran"], [284, 4, 1, "", "best_model"], [284, 4, 1, "", "best_score"], [284, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[286, 0, 0, "-", "qlinear2qdq"], [287, 0, 0, "-", "tf2onnx"], [288, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[286, 2, 1, "", "check_model"], [286, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[287, 2, 1, "", "tf_to_fp32_onnx"], [287, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[288, 2, 1, "", "dynamic_quant_export"], [288, 2, 1, "", "get_node_mapping"], [288, 2, 1, "", "get_quantizable_onnx_ops"], [288, 2, 1, "", "static_quant_export"], [288, 2, 1, "", "torch_to_fp32_onnx"], [288, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[289, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[291, 0, 0, "-", "bleu"], [292, 0, 0, "-", "bleu_util"], [293, 0, 0, "-", "coco_label_map"], [294, 0, 0, "-", "coco_tools"], [295, 0, 0, "-", "evaluate_squad"], [296, 0, 0, "-", "f1"], [298, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[291, 1, 1, "", "BLEU"], [291, 1, 1, "", "UnicodeRegex"], [291, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[291, 4, 1, "", "labels"], [291, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[291, 4, 1, "", "nondigit_punct_re"], [291, 4, 1, "", "punct_nondigit_re"], [291, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[292, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[294, 1, 1, "", "COCOEvalWrapper"], [294, 1, 1, "", "COCOWrapper"], [294, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [294, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [294, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[294, 4, 1, "", "dataset"], [294, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[295, 2, 1, "", "evaluate"], [295, 2, 1, "", "exact_match_score"], [295, 2, 1, "", "f1_score"], [295, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[296, 2, 1, "", "evaluate"], [296, 2, 1, "", "f1_score"], [296, 2, 1, "", "metric_max_over_ground_truths"], [296, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[298, 1, 1, "", "Accuracy"], [298, 1, 1, "", "BaseMetric"], [298, 1, 1, "", "COCOmAPv2"], [298, 1, 1, "", "F1"], [298, 1, 1, "", "GeneralTopK"], [298, 1, 1, "", "Loss"], [298, 1, 1, "", "MAE"], [298, 1, 1, "", "METRICS"], [298, 1, 1, "", "MSE"], [298, 1, 1, "", "MXNetMetrics"], [298, 1, 1, "", "ONNXRTGLUE"], [298, 1, 1, "", "ONNXRTITMetrics"], [298, 1, 1, "", "ONNXRTQLMetrics"], [298, 1, 1, "", "PyTorchLoss"], [298, 1, 1, "", "PyTorchMetrics"], [298, 1, 1, "", "RMSE"], [298, 1, 1, "", "ROC"], [298, 1, 1, "", "SquadF1"], [298, 1, 1, "", "TensorflowCOCOMAP"], [298, 1, 1, "", "TensorflowMAP"], [298, 1, 1, "", "TensorflowMetrics"], [298, 1, 1, "", "TensorflowTopK"], [298, 1, 1, "", "TensorflowVOCMAP"], [298, 1, 1, "", "WrapMXNetMetric"], [298, 1, 1, "", "WrapONNXRTMetric"], [298, 1, 1, "", "WrapPyTorchMetric"], [298, 1, 1, "", "mIOU"], [298, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[298, 4, 1, "", "label_list"], [298, 4, 1, "", "pred_list"], [298, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[298, 4, 1, "", "k"], [298, 4, 1, "", "num_correct"], [298, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[298, 4, 1, "", "sample"], [298, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[298, 4, 1, "", "compare_label"], [298, 4, 1, "", "label_list"], [298, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[298, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[298, 4, 1, "", "compare_label"], [298, 4, 1, "", "label_list"], [298, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[298, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[298, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[298, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[298, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[298, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[298, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[298, 4, 1, "", "k"], [298, 4, 1, "", "num_correct"], [298, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[299, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[300, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[301, 0, 0, "-", "basic_nas"], [302, 0, 0, "-", "dynas"], [304, 0, 0, "-", "nas"], [305, 0, 0, "-", "nas_utils"], [306, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[301, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[302, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[304, 1, 1, "", "NAS"], [304, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[305, 2, 1, "", "create_search_space_pool"], [305, 2, 1, "", "find_pareto_front"], [305, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[306, 1, 1, "", "BayesianOptimizationSearcher"], [306, 1, 1, "", "GridSearcher"], [306, 1, 1, "", "RandomSearcher"], [306, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[307, 0, 0, "-", "gradient_sensitivity"], [308, 0, 0, "-", "group_lasso"], [310, 0, 0, "-", "magnitude"], [311, 0, 0, "-", "pattern_lock"], [312, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[307, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[308, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[310, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[311, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[312, 1, 1, "", "Pruner"], [312, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[313, 1, 1, "", "Pruning"], [313, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[313, 4, 1, "", "conf"], [313, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[315, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[316, 0, 0, "-", "pattern"], [317, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[316, 1, 1, "", "PATTERNS"], [316, 1, 1, "", "PatternBase"], [316, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[316, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[317, 1, 1, "", "TilePatternBase"], [317, 1, 1, "", "TilePattern_1x1"], [317, 1, 1, "", "TilePattern_1x16"], [317, 1, 1, "", "TilePattern_1x2"], [317, 1, 1, "", "TilePattern_2x2"], [317, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[318, 1, 1, "", "Pruning"], [318, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[318, 4, 1, "", "conf"], [318, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[320, 0, 0, "-", "logger"], [321, 0, 0, "-", "patterns"], [322, 0, 0, "-", "prune_utils"], [323, 0, 0, "-", "pruner"], [324, 0, 0, "-", "pruning"], [325, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[321, 1, 1, "", "Pattern"], [321, 1, 1, "", "PatternNInM"], [321, 1, 1, "", "PatternNxM"], [321, 2, 1, "", "get_pattern"], [321, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[321, 4, 1, "", "is_global"], [321, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[321, 4, 1, "", "M"], [321, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[321, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[322, 2, 1, "", "check_config"], [322, 2, 1, "", "parse_not_to_prune"], [322, 2, 1, "", "parse_to_prune"], [322, 2, 1, "", "process_and_check_config"], [322, 2, 1, "", "process_config"], [322, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[323, 1, 1, "", "MagnitudePruner"], [323, 1, 1, "", "PatternLockPruner"], [323, 1, 1, "", "Pruner"], [323, 1, 1, "", "SnipMomentumPruner"], [323, 1, 1, "", "SnipPruner"], [323, 2, 1, "", "get_pruner"], [323, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[323, 4, 1, "", "config"], [323, 4, 1, "", "current_sparsity_ratio"], [323, 4, 1, "", "end_step"], [323, 4, 1, "", "global_step"], [323, 4, 1, "", "masks"], [323, 4, 1, "", "max_sparsity_ratio_per_layer"], [323, 4, 1, "", "modules"], [323, 4, 1, "", "pattern"], [323, 4, 1, "", "scheduler"], [323, 4, 1, "", "scores"], [323, 4, 1, "", "start_step"], [323, 4, 1, "", "target_sparsity_ratio"], [323, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[324, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[324, 4, 1, "", "config_file_path"], [324, 4, 1, "", "model"], [324, 4, 1, "", "pruner_info"], [324, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[325, 1, 1, "", "IterativeScheduler"], [325, 1, 1, "", "OneshotScheduler"], [325, 1, 1, "", "Scheduler"], [325, 2, 1, "", "get_scheduler"], [325, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[325, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[326, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[327, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[328, 0, 0, "-", "auto_mixed_precision"], [329, 0, 0, "-", "basic"], [330, 0, 0, "-", "bayesian"], [331, 0, 0, "-", "exhaustive"], [333, 0, 0, "-", "mse"], [334, 0, 0, "-", "mse_v2"], [335, 0, 0, "-", "random"], [336, 0, 0, "-", "strategy"], [338, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[328, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[329, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[330, 1, 1, "", "BayesianOptimization"], [330, 1, 1, "", "BayesianTuneStrategy"], [330, 1, 1, "", "TargetSpace"], [330, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[331, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[333, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[334, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[335, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[336, 1, 1, "", "TuneStrategy"], [336, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[337, 0, 0, "-", "constant"], [339, 0, 0, "-", "tuning_sampler"], [340, 0, 0, "-", "tuning_space"], [341, 0, 0, "-", "tuning_structs"], [342, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[339, 1, 1, "", "FallbackTuningSampler"], [339, 1, 1, "", "ModelWiseTuningSampler"], [339, 1, 1, "", "OpTypeWiseTuningSampler"], [339, 1, 1, "", "OpWiseTuningSampler"], [339, 1, 1, "", "SmoothQuantSampler"], [339, 1, 1, "", "TuningOrder"], [339, 1, 1, "", "TuningSampler"], [339, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[340, 1, 1, "", "TuningItem"], [340, 1, 1, "", "TuningSpace"], [340, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [340, 2, 1, "", "pattern_to_internal"], [340, 2, 1, "", "pattern_to_path"], [340, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[341, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[342, 1, 1, "", "OrderedDefaultDict"], [342, 2, 1, "", "extract_data_type"], [342, 2, 1, "", "get_adaptor_name"], [342, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[344, 0, 0, "-", "bleu"], [345, 0, 0, "-", "bleu_util"], [346, 0, 0, "-", "coco_label_map"], [347, 0, 0, "-", "coco_tools"], [348, 0, 0, "-", "evaluate_squad"], [349, 0, 0, "-", "f1"], [351, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[344, 1, 1, "", "BLEU"], [344, 1, 1, "", "UnicodeRegex"], [344, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[344, 4, 1, "", "labels"], [344, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[344, 4, 1, "", "nondigit_punct_re"], [344, 4, 1, "", "punct_nondigit_re"], [344, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[345, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[347, 1, 1, "", "COCOEvalWrapper"], [347, 1, 1, "", "COCOWrapper"], [347, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [347, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [347, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[347, 4, 1, "", "dataset"], [347, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[348, 2, 1, "", "evaluate"], [348, 2, 1, "", "exact_match_score"], [348, 2, 1, "", "f1_score"], [348, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[349, 2, 1, "", "evaluate"], [349, 2, 1, "", "f1_score"], [349, 2, 1, "", "metric_max_over_ground_truths"], [349, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[351, 1, 1, "", "Accuracy"], [351, 1, 1, "", "BaseMetric"], [351, 1, 1, "", "COCOmAPv2"], [351, 1, 1, "", "F1"], [351, 1, 1, "", "GeneralTopK"], [351, 1, 1, "", "Loss"], [351, 1, 1, "", "MAE"], [351, 1, 1, "", "METRICS"], [351, 1, 1, "", "MSE"], [351, 1, 1, "", "MXNetMetrics"], [351, 1, 1, "", "Metric"], [351, 1, 1, "", "ONNXRTGLUE"], [351, 1, 1, "", "ONNXRTITMetrics"], [351, 1, 1, "", "ONNXRTQLMetrics"], [351, 1, 1, "", "PyTorchLoss"], [351, 1, 1, "", "PyTorchMetrics"], [351, 1, 1, "", "RMSE"], [351, 1, 1, "", "ROC"], [351, 1, 1, "", "SquadF1"], [351, 1, 1, "", "TensorflowCOCOMAP"], [351, 1, 1, "", "TensorflowMAP"], [351, 1, 1, "", "TensorflowMetrics"], [351, 1, 1, "", "TensorflowTopK"], [351, 1, 1, "", "TensorflowVOCMAP"], [351, 1, 1, "", "WrapMXNetMetric"], [351, 1, 1, "", "WrapONNXRTMetric"], [351, 1, 1, "", "WrapPyTorchMetric"], [351, 1, 1, "", "mIOU"], [351, 2, 1, "", "metric_registry"], [351, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[351, 4, 1, "", "label_list"], [351, 4, 1, "", "pred_list"], [351, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[351, 4, 1, "", "k"], [351, 4, 1, "", "num_correct"], [351, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[351, 4, 1, "", "sample"], [351, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[351, 4, 1, "", "compare_label"], [351, 4, 1, "", "label_list"], [351, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[351, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[351, 4, 1, "", "compare_label"], [351, 4, 1, "", "label_list"], [351, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[351, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[351, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[351, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[351, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[351, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[351, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[351, 4, 1, "", "k"], [351, 4, 1, "", "num_correct"], [351, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[352, 2, 1, "", "fit"]], "neural_compressor.model": [[353, 0, 0, "-", "base_model"], [355, 0, 0, "-", "keras_model"], [356, 0, 0, "-", "model"], [357, 0, 0, "-", "mxnet_model"], [358, 0, 0, "-", "nets_factory"], [359, 0, 0, "-", "onnx_model"], [360, 0, 0, "-", "tensorflow_model"], [361, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[353, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[355, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[356, 1, 1, "", "Model"], [356, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[357, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[358, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[359, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[360, 1, 1, "", "TensorflowBaseModel"], [360, 1, 1, "", "TensorflowCheckpointModel"], [360, 1, 1, "", "TensorflowModel"], [360, 1, 1, "", "TensorflowQATModel"], [360, 1, 1, "", "TensorflowSavedModelModel"], [360, 2, 1, "", "checkpoint_session"], [360, 2, 1, "", "estimator_session"], [360, 2, 1, "", "frozen_pb_session"], [360, 2, 1, "", "get_model_type"], [360, 2, 1, "", "graph_def_session"], [360, 2, 1, "", "graph_session"], [360, 2, 1, "", "keras_session"], [360, 2, 1, "", "load_saved_model"], [360, 2, 1, "", "saved_model_session"], [360, 2, 1, "", "slim_session"], [360, 2, 1, "", "validate_and_inference_input_output"], [360, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[361, 1, 1, "", "IPEXModel"], [361, 1, 1, "", "PyTorchBaseModel"], [361, 1, 1, "", "PyTorchFXModel"], [361, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[362, 1, 1, "", "Accuracy"], [362, 1, 1, "", "Footprint"], [362, 1, 1, "", "ModelSize"], [362, 1, 1, "", "MultiObjective"], [362, 1, 1, "", "Objective"], [362, 1, 1, "", "Performance"], [362, 2, 1, "", "objective_custom_registry"], [362, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[365, 0, 0, "-", "parser"], [375, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[364, 0, 0, "-", "factory"], [367, 0, 0, "-", "onnx_parser"], [369, 0, 0, "-", "parser"], [370, 0, 0, "-", "result"], [372, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[364, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[366, 0, 0, "-", "factory"], [368, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[366, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[368, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[369, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[370, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[371, 0, 0, "-", "factory"], [373, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[371, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[373, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[374, 0, 0, "-", "factory"], [377, 0, 0, "-", "onnxrt_profiler"], [380, 0, 0, "-", "profiler"], [382, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[374, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[376, 0, 0, "-", "factory"], [378, 0, 0, "-", "profiler"], [379, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[376, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[378, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[379, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[380, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[381, 0, 0, "-", "factory"], [383, 0, 0, "-", "profiler"], [384, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[381, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[383, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[384, 2, 1, "", "create_tf_config"], [384, 2, 1, "", "delete_assign"], [384, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[385, 2, 1, "", "fit"]], "neural_compressor.strategy": [[386, 0, 0, "-", "auto"], [387, 0, 0, "-", "auto_mixed_precision"], [388, 0, 0, "-", "basic"], [389, 0, 0, "-", "bayesian"], [390, 0, 0, "-", "conservative"], [391, 0, 0, "-", "exhaustive"], [392, 0, 0, "-", "hawq_v2"], [394, 0, 0, "-", "mse"], [395, 0, 0, "-", "mse_v2"], [396, 0, 0, "-", "random"], [397, 0, 0, "-", "strategy"], [399, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[386, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[387, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[388, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[389, 1, 1, "", "BayesianOptimization"], [389, 1, 1, "", "BayesianTuneStrategy"], [389, 1, 1, "", "TargetSpace"], [389, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[390, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[391, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[392, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[394, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[395, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[396, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[397, 1, 1, "", "TuneStrategy"], [397, 1, 1, "", "TuneStrategyMeta"], [397, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[398, 0, 0, "-", "constant"], [400, 0, 0, "-", "tuning_sampler"], [401, 0, 0, "-", "tuning_space"], [402, 0, 0, "-", "tuning_structs"], [403, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[400, 1, 1, "", "BlockFallbackTuningSampler"], [400, 1, 1, "", "FallbackTuningSampler"], [400, 1, 1, "", "LowerBitsSampler"], [400, 1, 1, "", "ModelWiseTuningSampler"], [400, 1, 1, "", "OpTypeWiseTuningSampler"], [400, 1, 1, "", "OpWiseTuningSampler"], [400, 1, 1, "", "SmoothQuantSampler"], [400, 1, 1, "", "TuningOrder"], [400, 1, 1, "", "TuningSampler"]], "neural_compressor.strategy.utils.tuning_space": [[401, 1, 1, "", "TuningItem"], [401, 1, 1, "", "TuningSpace"], [401, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [401, 2, 1, "", "pattern_to_internal"], [401, 2, 1, "", "pattern_to_path"], [401, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[402, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[403, 1, 1, "", "ClassRegister"], [403, 1, 1, "", "OrderedDefaultDict"], [403, 1, 1, "", "QuantOptions"], [403, 1, 1, "", "QuantType"], [403, 2, 1, "", "build_slave_faker_model"], [403, 2, 1, "", "extract_data_type"], [403, 2, 1, "", "get_adaptor_name"], [403, 2, 1, "", "preprocess_user_cfg"], [403, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[404, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[404, 1, 1, "", "ExampleClass"], [404, 4, 1, "", "attribute1"], [404, 2, 1, "", "function1"], [404, 2, 1, "", "function2"], [404, 2, 1, "", "function3"], [404, 2, 1, "", "generator1"], [404, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[404, 4, 1, "", "attr1"], [404, 4, 1, "", "attr2"], [404, 4, 1, "", "attr5"]], "neural_compressor.training": [[406, 1, 1, "", "CallBacks"], [406, 1, 1, "", "CompressionManager"], [406, 2, 1, "", "fit"], [406, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[407, 0, 0, "-", "collect_layer_histogram"], [408, 0, 0, "-", "constant"], [409, 0, 0, "-", "create_obj_from_config"], [411, 0, 0, "-", "kl_divergence"], [412, 0, 0, "-", "load_huggingface"], [413, 0, 0, "-", "logger"], [414, 0, 0, "-", "neural_insights_utils"], [415, 0, 0, "-", "options"], [416, 0, 0, "-", "pytorch"], [417, 0, 0, "-", "utility"], [418, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[407, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[409, 2, 1, "", "create_dataloader"], [409, 2, 1, "", "create_dataset"], [409, 2, 1, "", "create_eval_func"], [409, 2, 1, "", "create_train_func"], [409, 2, 1, "", "get_algorithm"], [409, 2, 1, "", "get_func_from_config"], [409, 2, 1, "", "get_metrics"], [409, 2, 1, "", "get_postprocess"], [409, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[411, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[412, 1, 1, "", "OptimizedModel"], [412, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[413, 1, 1, "", "Logger"], [413, 2, 1, "", "debug"], [413, 2, 1, "", "error"], [413, 2, 1, "", "fatal"], [413, 2, 1, "", "info"], [413, 2, 1, "", "log"], [413, 2, 1, "", "warn"], [413, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[414, 2, 1, "", "get_model_path"], [414, 2, 1, "", "register_neural_insights_workload"], [414, 2, 1, "", "update_neural_insights_workload"], [414, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[415, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[416, 2, 1, "", "is_int8_model"], [416, 2, 1, "", "load"], [416, 2, 1, "", "load_weight_only"]], "neural_compressor.utils.utility": [[417, 1, 1, "", "CaptureOutputToFile"], [417, 1, 1, "", "CpuInfo"], [417, 2, 1, "", "Dequantize"], [417, 1, 1, "", "DotDict"], [417, 1, 1, "", "GLOBAL_STATE"], [417, 1, 1, "", "LazyImport"], [417, 1, 1, "", "MODE"], [417, 1, 1, "", "OpEntry"], [417, 1, 1, "", "Statistics"], [417, 2, 1, "", "alias_param"], [417, 2, 1, "", "calculate_mse"], [417, 2, 1, "", "combine_histogram"], [417, 2, 1, "", "compare_objects"], [417, 2, 1, "", "compute_sparsity"], [417, 2, 1, "", "dequantize_weight"], [417, 2, 1, "", "dump_class_attrs"], [417, 2, 1, "", "dump_data_to_local"], [417, 2, 1, "", "dump_elapsed_time"], [417, 2, 1, "", "dump_table"], [417, 2, 1, "", "dump_table_to_csv"], [417, 2, 1, "", "equal_dicts"], [417, 2, 1, "", "fault_tolerant_file"], [417, 2, 1, "", "get_all_fp32_data"], [417, 2, 1, "", "get_number_of_sockets"], [417, 2, 1, "", "get_op_list"], [417, 2, 1, "", "get_size"], [417, 2, 1, "", "get_tensor_histogram"], [417, 2, 1, "", "get_tensors_info"], [417, 2, 1, "", "get_tuning_history"], [417, 2, 1, "", "get_weights_details"], [417, 2, 1, "", "load_data_from_pkl"], [417, 2, 1, "", "mse_metric_gap"], [417, 2, 1, "", "print_op_list"], [417, 2, 1, "", "print_table"], [417, 2, 1, "", "recover"], [417, 2, 1, "", "set_random_seed"], [417, 2, 1, "", "set_resume_from"], [417, 2, 1, "", "set_tensorboard"], [417, 2, 1, "", "set_workspace"], [417, 2, 1, "", "show_memory_info"], [417, 2, 1, "", "singleton"], [417, 2, 1, "", "str2array"], [417, 2, 1, "", "time_limit"], [417, 2, 1, "", "version1_eq_version2"], [417, 2, 1, "", "version1_gt_version2"], [417, 2, 1, "", "version1_gte_version2"], [417, 2, 1, "", "version1_lt_version2"], [417, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[418, 1, 1, "", "WeightsDetails"], [418, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 194], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 427, 428, 430], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 178, 179, 181, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 280, 282, 283, 284, 286, 287, 288, 289, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 339, 340, 341, 342, 344, 345, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 368, 369, 370, 371, 373, 374, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 400, 401, 402, 403, 404, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 368, 369, 370, 371, 373, 374, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 426, 492], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 156, 160, 161, 162, 164, 167, 168, 169, 170, 171, 173, 174, 178, 179, 181, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 289, 290, 291, 294, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 339, 340, 341, 342, 344, 347, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 368, 369, 370, 371, 373, 374, 376, 378, 380, 381, 383, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 400, 401, 402, 403, 404, 406, 407, 410, 411, 412, 413, 415, 417, 418, 427, 492], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 150, 151, 152, 157, 158, 159, 162, 163, 165, 166, 167, 169, 172, 174, 178, 179, 181, 182, 183, 185, 187, 188, 192, 195, 201, 202, 203, 204, 205, 207, 216, 217, 225, 227, 231, 234, 235, 236, 239, 241, 242, 243, 244, 246, 248, 249, 251, 260, 268, 270, 274, 277, 278, 279, 281, 282, 283, 286, 287, 288, 291, 292, 294, 295, 296, 297, 298, 305, 312, 316, 321, 322, 323, 325, 330, 336, 340, 342, 344, 345, 347, 348, 349, 350, 351, 352, 356, 360, 362, 379, 384, 385, 389, 397, 401, 403, 404, 406, 409, 410, 412, 413, 414, 416, 417, 452], "subpackag": [2, 17, 87, 111, 112, 114, 153, 180, 182, 211, 236, 254, 279, 290, 314, 332, 343, 393], "submodul": [2, 12, 17, 29, 51, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 153, 154, 169, 175, 176, 180, 182, 184, 188, 195, 208, 212, 219, 231, 235, 239, 246, 255, 262, 274, 278, 281, 285, 290, 297, 303, 309, 315, 319, 332, 338, 343, 350, 354, 365, 367, 372, 375, 377, 382, 393, 399, 405, 410], "packag": [2, 29, 169, 182, 188, 195, 219, 231, 235, 236, 239, 246, 262, 274, 278, 279, 281, 290, 297, 309, 314, 315, 332, 350, 354, 393, 410, 476, 478, 480, 481], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 156, 326, 385, 423, 426, 428, 429, 441, 445, 449, 451, 454, 457, 460, 463, 464, 472, 483, 485, 486, 487, 495, 496, 497, 503, 504, 505, 506, 509, 515], "separable_conv2d": 10, "mxnet": [11, 447, 462, 504, 511], "mxnet_util": [12, 13], "util": [13, 43, 148, 158, 165, 205, 337, 338, 339, 340, 341, 342, 379, 384, 398, 399, 400, 401, 402, 403, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 432], "onnxrt": [14, 447, 462, 511], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 428, 445], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 428, 429], "activ": [18, 486], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 509], "maxpool": 32, "norm": 33, "op": [34, 454], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 488], "unary_op": 40, "smooth_quant": [42, 162, 170], "weight_onli": [44, 166], "pytorch": [45, 416, 447, 452, 454, 462, 504, 505, 510, 511, 515], "queri": [46, 427, 490, 495, 496, 497], "tensorflow": [47, 447, 452, 454, 462, 504, 505, 510, 511, 515], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": 48, "graph_converter_without_calib": 49, "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "bf16": [50, 51, 464], "bf16_convert": [50, 150], "gener": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 428], "convert_add_to_biasadd": 52, "convert_layout": 53, "convert_leakyrelu": 54, "convert_nan_to_random": 55, "convert_placeholder_to_const": 56, "dequantize_cast_optim": 57, "dilated_contract": 58, "dummy_biasadd": 59, "expanddims_optim": 60, "fetch_weight_from_reshap": 61, "fold_batch_norm": 62, "fold_const": 63, "fuse_biasadd_add": 64, "fuse_column_wise_mul": 65, "fuse_conv_with_math": 66, "fuse_decomposed_bn": 67, "fuse_decomposed_in": 68, "fuse_gelu": 69, "fuse_layer_norm": 70, "fuse_pad_with_conv": 71, "fuse_pad_with_fp32_conv": 72, "fuse_reshape_transpos": 73, "graph_cse_optim": 74, "grappler_pass": 75, "insert_print_nod": 77, "move_squeeze_after_relu": 78, "pre_optim": 79, "remove_training_nod": 80, "rename_batch_norm": 81, "split_shared_input": 82, "strip_equivalent_nod": 83, "strip_unused_nod": 84, "switch_optim": 85, "graph_bas": 86, "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 454, 515], "freeze_fake_qu": 88, "freeze_valu": 89, "freeze_value_without_calib": 90, "fuse_conv_redundant_dequant": 91, "fuse_conv_requant": 92, "fuse_matmul_redundant_dequant": 93, "fuse_matmul_requant": 94, "meta_op_optim": 96, "post_hostconst_convert": 97, "post_quantized_op_cs": 98, "rnn_convert": 99, "scale_propag": 100, "onnx": [101, 102, 103, 104, 105, 431, 460, 504, 515], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 515], "insert_qdq_pattern": 107, "merge_duplicated_qdq": 108, "share_qdq_y_pattern": 109, "graph_util": 110, "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 515], "fake_quant": 113, "quantize_config": 115, "quantize_help": 116, "quantize_lay": [117, 118, 119, 120, 121], "optimize_lay": 118, "quantize_layer_add": 119, "quantize_layer_bas": 120, "quantize_layer_bn": 121, "quantize_wrapp": 122, "fuse_qdq_bn": 123, "fuse_qdq_concatv2": 124, "fuse_qdq_conv": 125, "fuse_qdq_deconv": 126, "fuse_qdq_in": 127, "fuse_qdq_matmul": 128, "fuse_qdq_pool": 129, "optimize_qdq": 131, "quantize_graph_bas": 132, "quantize_graph_bn": 133, "quantize_graph_concatv2": 134, "quantize_graph_conv": 135, "quantize_graph_for_intel_cpu": 136, "quantize_graph_matmul": 137, "quantize_graph_pool": 138, "quantize_graph_common": 139, "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147], "bias_correct": 143, "graph_transform_bas": 144, "insert_log": 146, "rerange_quantized_concat": 147, "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 251], "awq": 149, "gptq": 151, "hawq_metr": 152, "layer_wise_qu": [154, 155, 156, 157, 158], "modified_pickl": 155, "torch_load": 157, "mixed_precis": [159, 299], "model_wrapp": 160, "pattern_detector": 161, "symbolic_trac": 163, "teq": 164, "algorithm": [167, 168, 169, 170, 171, 445, 509, 512], "fast_bias_correct": 168, "weight_correct": 171, "benchmark": [172, 243, 435, 444, 449, 463, 503], "compress": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 253, 436, 506], "callback": 173, "distil": [174, 175, 284, 450, 451, 463, 503, 515], "criterion": [174, 244], "hpo": [176, 177, 178, 179], "sa_optim": 177, "search_algorithm": [178, 306], "search_spac": 179, "pruner": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 312, 323], "criteria": [181, 501, 512], "model_slim": [183, 184, 185, 186], "auto_slim": 183, "pattern_analyz": 185, "weight_slim": 186, "pattern": [187, 188, 189, 190, 191, 315, 316, 317, 321, 501], "base": [187, 192, 460, 491, 513], "mha": [189, 196], "ninm": 190, "nxm": 191, "basic": [193, 329, 388, 424, 512], "pattern_lock": [197, 311], "progress": [198, 488], "retrain_fre": 199, "sparse_gpt": 200, "prune": [201, 313, 324, 463, 501, 503, 515], "reg": 202, "schedul": [203, 325, 327, 501], "tf_criteria": 204, "conf": [206, 207, 208, 209], "config": [206, 210, 437, 447, 499], "dotdict": 207, "pythonic_config": 209, "contrib": [211, 212, 213, 214, 254, 255, 256, 257], "strategi": [212, 213, 214, 255, 256, 257, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 442, 508, 512], "sigopt": [213, 256, 508, 512], "tpe": [214, 257, 512], "data": [215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 428, 429, 449, 453], "dataload": [215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 245, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 446, 447], "base_dataload": [215, 258], "default_dataload": [217, 260], "fetcher": [218, 261], "attribut": [219, 227, 236, 270, 279, 290, 314, 354, 404, 410, 421], "mxnet_dataload": [220, 263], "onnxrt_dataload": [221, 264], "pytorch_dataload": [222, 265], "sampler": [223, 266], "tensorflow_dataload": [224, 267], "dataset": [225, 226, 227, 228, 229, 230, 231, 232, 268, 269, 270, 271, 272, 273, 274, 275, 447, 449, 458, 487], "bert_dataset": [225, 268], "coco_dataset": [226, 269], "dummy_dataset": [228, 271], "dummy_dataset_v2": [229, 272], "imagenet_dataset": [230, 273], "style_transfer_dataset": [232, 275], "filter": [233, 234, 235, 276, 277, 278], "coco_filt": [233, 276], "transform": [237, 238, 239, 240, 241, 242, 280, 281, 282, 283, 458, 511], "coco_transform": 237, "imagenet_transform": [238, 280], "postprocess": [240, 250], "token": [241, 282], "experiment": [243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "common": [244, 245, 246, 247, 248, 249, 250, 251, 423, 455], "metric": [247, 291, 292, 293, 294, 295, 296, 297, 298, 344, 345, 346, 347, 348, 349, 350, 351, 458, 462], "model": [248, 353, 354, 355, 356, 357, 358, 359, 360, 361, 428, 439, 454, 457, 460, 463, 465, 472, 486, 487, 495, 496, 497, 501, 506, 509, 515], "optim": [249, 473, 483, 492, 495, 496, 497, 500, 501, 513], "compon": 252, "export": [285, 286, 287, 288, 454, 506], "qlinear2qdq": 286, "tf2onnx": 287, "torch2onnx": 288, "graph_optim": 289, "bleu": [291, 344], "bleu_util": [292, 345], "coco_label_map": [293, 346], "coco_tool": [294, 347], "evaluate_squad": [295, 348], "f1": [296, 349], "model_convers": 300, "na": [301, 302, 303, 304, 305, 306, 424, 503], "basic_na": 301, "dyna": 302, "nas_util": 305, "pruner_legaci": [307, 308, 309, 310, 311, 312], "gradient_sensit": 307, "group_lasso": 308, "magnitud": 310, "pruning_recip": [314, 315, 316, 317], "tile_pattern": 317, "pruning_v2": 318, "pytorch_prun": [319, 320, 321, 322, 323, 324, 325], "logger": [320, 413], "prune_util": 322, "auto_mixed_precis": [328, 387], "bayesian": [330, 389, 512], "exhaust": [331, 391, 512], "mse": [333, 394, 512], "mse_v2": [334, 395, 512], "random": [335, 396, 512], "constant": [337, 398, 408], "tuning_sampl": [339, 400], "tuning_spac": [340, 401], "tuning_struct": [341, 402], "mix_precis": 352, "base_model": 353, "keras_model": 355, "mxnet_model": 357, "nets_factori": 358, "onnx_model": 359, "tensorflow_model": 360, "torch_model": 361, "object": [362, 440, 495, 496, 497, 499], "profil": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 449], "parser": [364, 365, 366, 367, 368, 369, 370, 371, 372, 373], "factori": [364, 366, 371, 374, 376, 381], "onnx_pars": [366, 367, 368], "result": [370, 486, 487, 495, 496, 497], "tensorflow_pars": [371, 372, 373], "onnxrt_profil": [376, 377, 378, 379], "tensorflow_profil": [381, 382, 383, 384], "auto": [386, 477, 483, 505, 509, 512], "conserv": [390, 512], "hawq_v2": [392, 512], "templat": [404, 405, 422], "api_doc_exampl": 404, "train": [406, 423, 443, 452, 463, 501, 504], "collect_layer_histogram": 407, "create_obj_from_config": 409, "kl_diverg": 411, "load_huggingfac": 412, "neural_insights_util": 414, "option": [415, 452, 471], "weights_detail": 418, "version": 419, "intel": [420, 426, 446, 449, 459, 460, 462, 463, 469, 477, 483, 515, 516], "neural": [420, 423, 424, 426, 446, 449, 459, 460, 462, 463, 466, 470, 472, 477, 483, 485, 486, 487, 489, 490, 491, 495, 496, 497, 501, 508, 513, 516], "compressor": [420, 423, 426, 446, 449, 459, 460, 462, 463, 477, 483, 508, 516], "document": [420, 426, 433, 516], "section": [420, 516], "contributor": [421, 422], "coven": [421, 422], "code": [421, 422, 424, 463, 484, 488, 506, 513], "conduct": [421, 422], "our": [421, 509], "pledg": 421, "standard": 421, "respons": [421, 491], "scope": [421, 501], "enforc": 421, "contribut": [422, 476, 480], "guidelin": 422, "pull": 422, "request": [422, 464, 493], "checklist": 422, "support": [422, 423, 424, 427, 429, 444, 445, 446, 447, 449, 450, 451, 452, 454, 456, 459, 460, 462, 464, 465, 467, 468, 472, 473, 499, 500, 501, 503, 504, 506, 509, 510, 511, 514], "fx": 423, "introduct": [423, 424, 427, 428, 429, 444, 445, 446, 447, 449, 450, 451, 452, 454, 456, 459, 462, 464, 465, 483, 486, 487, 499, 500, 501, 503, 504, 506, 508, 509, 510, 511, 512, 514], "mode": [423, 515], "matrix": [423, 424, 427, 444, 445, 446, 447, 449, 450, 451, 452, 454, 456, 459, 462, 464, 465, 468, 499, 500, 501, 503, 504, 506, 509, 510, 514], "get": [423, 424, 426, 427, 444, 446, 447, 449, 450, 451, 452, 456, 457, 462, 464, 466, 477, 484, 485, 488, 489, 490, 491, 499, 500, 501, 503, 504, 510, 514], "start": [423, 424, 426, 427, 444, 446, 447, 449, 450, 451, 452, 456, 457, 462, 464, 466, 467, 471, 477, 485, 488, 489, 490, 495, 496, 497, 499, 500, 501, 503, 504, 510, 514], "post": [423, 463, 491, 504], "static": [423, 504], "dynam": [423, 424, 504], "awar": [423, 463, 501, 504], "exampl": [423, 424, 427, 433, 444, 446, 447, 449, 450, 451, 452, 453, 454, 462, 463, 464, 465, 468, 472, 485, 486, 487, 489, 494, 495, 496, 497, 499, 500, 501, 504, 506, 509, 510, 515], "note": [423, 507], "detail": 423, "problem": 423, "architectur": [424, 448, 459, 460], "search": [424, 483], "api": [424, 426, 427, 428, 433, 434, 444, 446, 447, 450, 451, 452, 457, 458, 462, 464, 466, 470, 484, 485, 491, 497, 499, 500, 501, 503, 513], "usag": [424, 472, 483, 491, 510, 512], "1": [424, 452, 455, 458, 463, 483, 489, 490, 515], "python": [424, 426, 446, 457, 462, 466, 470, 471, 478, 481, 485, 503, 513], "yaml": [424, 428, 447, 452, 456, 514], "2": [424, 452, 455, 458, 463, 483, 489, 490, 515], "onli": [424, 506], "advanc": [424, 488, 513], "custom": [424, 446, 462, 495, 512], "secur": [425, 452], "polici": [425, 512], "report": 425, "vulner": 425, "instal": [426, 449, 460, 467, 469, 476, 477, 480, 485, 489, 490], "from": [426, 428, 460, 463, 485, 489, 490], "pypi": [426, 472, 485], "select": [426, 477], "public": [426, 502], "event": [426, 502], "addit": 426, "commun": 426, "work": [427, 489, 504], "flow": [427, 504], "background": [427, 483], "ad": 427, "new": [427, 429, 478, 481, 512], "backend": [427, 504], "capabl": [427, 506], "implement": [427, 428], "onnxrtadaptor": 427, "how": [428, 429, 449, 486, 487, 489], "add": [428, 490], "an": [428, 495, 496, 497], "list": [428, 453, 494, 511], "need": 428, "design": [428, 448, 492, 512], "framework": [428, 446, 447, 454, 456, 465, 503, 506, 509], "query_fw_cap": 428, "accord": [428, 429], "tune_cfg": 428, "prepar": [428, 449, 486, 487, 508], "fp32": [428, 454], "graph": 428, "run": [428, 449, 484, 486, 487, 488], "sampl": [428, 457], "iter": 428, "calcul": 428, "rang": 428, "type": [429, 501], "like": 429, "int4": 429, "few": 429, "line": 429, "chang": [429, 458, 482, 484, 507], "defin": [429, 452], "abil": 429, "specif": [429, 447], "invok": 429, "kernel": 429, "tune": [429, 504, 509, 512], "configur": [429, 452, 456, 488, 503, 508, 514], "us": [429, 446, 462, 489, 490], "summari": [429, 486], "runtim": [431, 460, 504, 515], "torch": [432, 515], "mix": [438, 463, 464, 505], "precis": [438, 463, 464, 505], "refer": [445, 501, 504, 506, 509], "build": [446, 455, 462, 488, 489, 490], "file": [447, 456, 514], "user": [447, 452, 458, 503, 506, 513, 514], "workflow": [448, 492], "diagnosi": [449, 485], "featur": [449, 452, 456, 459, 472, 473, 477, 503, 504, 510, 514], "modifi": 449, "script": [449, 488], "see": 449, "do": [449, 466], "paramet": [449, 491], "descript": [449, 491, 493], "suggest": 449, "fallback": 449, "set": [449, 469, 483], "knowledg": [450, 515], "intermedi": 450, "layer": [450, 509], "self": 450, "distribut": [452, 472, 512], "infer": 452, "evalu": 452, "pure": 452, "horovodrun": 452, "execut": 452, "releas": [453, 478, 481, 507], "appendix": 454, "frequent": 455, "ask": 455, "question": 455, "issu": [455, 507], "3": [455, 467, 483], "4": [455, 474, 483, 502], "quick": [457, 471], "valid": [457, 460, 509, 515], "incompat": [458, 507], "between": 458, "v1": 458, "face": [458, 496, 497], "built": [458, 460, 462], "infrastructur": 459, "linux": 460, "prerequisit": [460, 489, 490], "binari": 460, "sourc": [460, 485, 487, 489, 490], "ai": 460, "kit": 460, "window": 460, "system": 460, "requir": [460, 476, 480, 486, 487, 495], "hardwar": [460, 464, 515], "environ": [460, 469], "cpu": [460, 469, 515], "64": 460, "compat": 460, "processor": 460, "gpu": 460, "": [460, 484, 489], "xe": 460, "multipl": [460, 499, 515], "vendor": 460, "through": [460, 515], "softwar": [460, 464], "legal": 461, "inform": 461, "licens": 461, "citat": 461, "trademark": 461, "migrat": 463, "x": 463, "orchestr": [463, 500], "fp16": 464, "dure": [464, 505], "accuraci": [464, 486, 487, 504, 512], "driven": 464, "coder": [466, 470, 472, 483, 513], "what": [466, 484, 489], "we": 466, "offer": 466, "jupyt": [466, 467, 478, 481], "lab": [466, 467], "extens": [466, 476, 477, 480, 483, 484, 492, 515], "launcher": [466, 471], "contact": [466, 489], "aw": 467, "amazon": 467, "sagemak": 467, "For": 467, "studio": 467, "notebook": 467, "instanc": 467, "guid": [467, 513], "bigdl": 468, "nano": 468, "platform": [469, 508], "best": [469, 477], "perform": [469, 508], "mkl": 469, "openmp": 469, "jemalloc": 469, "numa": 469, "control": 469, "variabl": 469, "frequenc": 469, "govern": 469, "enabl": [470, 477, 483], "bench": 470, "superbench": 470, "argument": 471, "v0": 474, "highlight": 474, "other": 474, "changelog": [475, 479], "neural_compressor_ext_lab": [476, 478], "uninstal": [476, 480], "develop": [476, 480], "jupyterlab": 477, "Or": 477, "let": 477, "u": 477, "help": 477, "you": 477, "pre": 477, "requisit": 477, "make": [478, 481, 484, 488], "manual": [478, 481], "npm": [478, 481, 488], "autom": [478, 481], "publish": [478, 481], "conda": [478, 481], "forg": [478, 481], "neural_compressor_ext_lab_alibaba": [480, 481], "log": [482, 490, 491], "unreleas": 482, "vscode": 483, "open": [483, 487], "icon": 483, "5": 483, "welcom": 484, "your": 484, "v": 484, "folder": 484, "setup": 484, "up": 484, "straight": 484, "awai": 484, "explor": 484, "test": [484, 488], "go": 484, "further": 484, "insight": [485, 486, 487], "step": [485, 486, 487], "research": 485, "collabor": 485, "debug": [486, 487], "analyz": [486, 487, 488], "weight": [486, 487, 506], "histogram": 487, "creat": 488, "react": 488, "app": 488, "avail": 488, "eject": 488, "learn": [488, 489], "more": [488, 489], "bundl": 488, "size": 488, "web": 488, "deploy": [488, 501], "fail": 488, "minifi": 488, "solut": [489, 490, 491, 495, 496, 497], "why": 489, "doe": 489, "method": [489, 490], "pip": [489, 490], "end": [489, 495, 496, 497], "servic": [490, 492, 495, 496, 497], "submit": [490, 491, 495, 496, 497], "task": [490, 491, 493, 495, 496, 497], "statu": [490, 491], "stop": [490, 495, 496, 497], "inspect": 490, "manag": [490, 495, 496], "resourc": [490, 495, 496], "node": 490, "state": 490, "cluster": [490, 491], "remov": 490, "url": 491, "endpoint": 491, "task_id": 491, "websocket": 491, "screen": 491, "ping": 491, "download": [491, 495, 496], "doc": 492, "wip": 492, "overview": [492, 513], "oaa": 492, "definit": 492, "diagram": 492, "hug": [496, 497], "grpc": 497, "client": 498, "singl": 499, "One": 500, "shot": 500, "network": 501, "sparsiti": 501, "decai": 501, "regular": 501, "larg": 501, "languag": 501, "retrain": 501, "free": 501, "spars": 501, "hyperparamet": 501, "full": 502, "75": 502, "2023": 502, "21": 502, "2022": 502, "35": 502, "2021": 502, "15": [502, 515], "2018": 502, "2020": 502, "style": 503, "access": 503, "fundament": [504, 509], "scheme": 504, "ipex": 504, "approach": 504, "With": 504, "without": 504, "specifi": 504, "rule": 504, "recip": 504, "devic": 504, "turn": 505, "off": 505, "woq": [506, 515], "known": 507, "benefit": 508, "comparison": 508, "differ": 508, "smooth": 509, "quant": 509, "per": 509, "tensor": 509, "channel": 509, "limit": 509, "smoothquant": 509, "enhanc": 509, "wise": 509, "alpha": 509, "engin": 509, "tensorboard": 510, "space": 512, "exit": 512, "process": 512, "zero": 513, "topic": 513, "innov": 513, "product": 513, "12": 515, "0": 515, "ptq": 515}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [178, "module-contents"], [179, "module-contents"], [181, "module-contents"], [183, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [209, "module-contents"], [210, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [237, "module-contents"], [238, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [260, "module-contents"], [261, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [280, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [291, "module-contents"], [292, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [344, "module-contents"], [345, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [364, "module-contents"], [366, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [373, "module-contents"], [374, "module-contents"], [376, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [406, "module-contents"], [407, "module-contents"], [409, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [156, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [164, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [173, "classes"], [174, "classes"], [178, "classes"], [179, "classes"], [181, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [206, "classes"], [207, "classes"], [209, "classes"], [210, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [252, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [260, "classes"], [261, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [294, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [304, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [321, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [344, "classes"], [347, "classes"], [350, "classes"], [351, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [364, "classes"], [366, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [373, "classes"], [374, "classes"], [376, "classes"], [378, "classes"], [380, "classes"], [381, "classes"], [383, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [406, "classes"], [407, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [415, "classes"], [417, "classes"], [418, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [150, "functions"], [151, "functions"], [152, "functions"], [157, "functions"], [158, "functions"], [159, "functions"], [162, "functions"], [163, "functions"], [165, "functions"], [166, "functions"], [167, "functions"], [169, "functions"], [172, "functions"], [174, "functions"], [178, "functions"], [179, "functions"], [181, "functions"], [182, "functions"], [183, "functions"], [185, "functions"], [187, "functions"], [188, "functions"], [192, "functions"], [195, "functions"], [201, "functions"], [202, "functions"], [203, "functions"], [204, "functions"], [205, "functions"], [207, "functions"], [216, "functions"], [217, "functions"], [225, "functions"], [227, "functions"], [231, "functions"], [234, "functions"], [235, "functions"], [236, "functions"], [239, "functions"], [241, "functions"], [242, "functions"], [243, "functions"], [244, "functions"], [246, "functions"], [248, "functions"], [249, "functions"], [251, "functions"], [260, "functions"], [268, "functions"], [270, "functions"], [274, "functions"], [277, "functions"], [278, "functions"], [279, "functions"], [281, "functions"], [282, "functions"], [283, "functions"], [286, "functions"], [287, "functions"], [288, "functions"], [291, "functions"], [292, "functions"], [294, "functions"], [295, "functions"], [296, "functions"], [297, "functions"], [298, "functions"], [305, "functions"], [312, "functions"], [316, "functions"], [321, "functions"], [322, "functions"], [323, "functions"], [325, "functions"], [330, "functions"], [336, "functions"], [340, "functions"], [342, "functions"], [344, "functions"], [345, "functions"], [347, "functions"], [348, "functions"], [349, "functions"], [350, "functions"], [351, "functions"], [352, "functions"], [356, "functions"], [360, "functions"], [362, "functions"], [379, "functions"], [384, "functions"], [385, "functions"], [389, "functions"], [397, "functions"], [401, "functions"], [403, "functions"], [404, "functions"], [406, "functions"], [409, "functions"], [410, "functions"], [412, "functions"], [413, "functions"], [414, "functions"], [416, "functions"], [417, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [153, "subpackages"], [180, "subpackages"], [182, "subpackages"], [211, "subpackages"], [236, "subpackages"], [254, "subpackages"], [279, "subpackages"], [290, "subpackages"], [314, "subpackages"], [332, "subpackages"], [343, "subpackages"], [393, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [51, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [153, "submodules"], [154, "submodules"], [169, "submodules"], [175, "submodules"], [176, "submodules"], [180, "submodules"], [182, "submodules"], [184, "submodules"], [188, "submodules"], [195, "submodules"], [208, "submodules"], [212, "submodules"], [219, "submodules"], [231, "submodules"], [235, "submodules"], [239, "submodules"], [246, "submodules"], [255, "submodules"], [262, "submodules"], [274, "submodules"], [278, "submodules"], [281, "submodules"], [285, "submodules"], [290, "submodules"], [297, "submodules"], [303, "submodules"], [309, "submodules"], [315, "submodules"], [319, "submodules"], [332, "submodules"], [338, "submodules"], [343, "submodules"], [350, "submodules"], [354, "submodules"], [365, "submodules"], [367, "submodules"], [372, "submodules"], [375, "submodules"], [377, "submodules"], [382, "submodules"], [393, "submodules"], [399, "submodules"], [405, "submodules"], [410, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [169, "package-contents"], [182, "package-contents"], [188, "package-contents"], [195, "package-contents"], [219, "package-contents"], [231, "package-contents"], [235, "package-contents"], [236, "package-contents"], [239, "package-contents"], [246, "package-contents"], [262, "package-contents"], [274, "package-contents"], [278, "package-contents"], [279, "package-contents"], [281, "package-contents"], [290, "package-contents"], [297, "package-contents"], [309, "package-contents"], [314, "package-contents"], [315, "package-contents"], [332, "package-contents"], [350, "package-contents"], [354, "package-contents"], [393, "package-contents"], [410, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.awq": [[149, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[150, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[151, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[152, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[153, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[159, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[160, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[161, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[162, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[164, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[165, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[165, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[166, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[167, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[168, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[169, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[170, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[171, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[172, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[173, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[174, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[175, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.hpo": [[176, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[177, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[178, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[179, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[180, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[181, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[182, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[183, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[184, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[185, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[186, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[187, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[188, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[189, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[190, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[191, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[192, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[193, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[194, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[195, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[196, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[197, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[198, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[199, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[200, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[201, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[202, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[203, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[204, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[205, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[206, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[207, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[208, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[209, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[210, "module-neural_compressor.config"]], "neural_compressor.contrib": [[211, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[212, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[213, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[214, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[215, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[216, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[217, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[218, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[219, "module-neural_compressor.data.dataloaders"]], "Attributes": [[219, "attributes"], [227, "attributes"], [236, "attributes"], [270, "attributes"], [279, "attributes"], [290, "attributes"], [314, "attributes"], [354, "attributes"], [404, "attributes"], [410, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[220, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[221, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[222, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[223, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[224, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[225, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[226, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[227, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[228, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[229, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[230, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[231, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[232, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[233, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[234, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[235, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[236, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[237, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[238, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[239, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[240, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[241, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[242, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[243, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[244, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[245, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[246, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[247, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[248, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[249, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[250, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[251, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[252, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[253, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[254, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[255, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[256, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[257, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[258, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[259, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[260, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[261, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[262, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[263, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[264, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[265, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[266, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[267, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[268, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[269, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[270, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[271, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[272, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[273, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[274, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[275, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[276, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[277, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[278, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[279, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[280, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[281, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[282, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[283, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[284, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[285, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[286, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[287, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[288, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[289, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[290, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[291, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[292, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[293, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[294, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[295, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[296, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[297, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[298, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[299, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[300, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[301, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[302, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[303, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[304, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[305, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[306, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[307, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[308, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[309, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[310, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[311, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[312, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[313, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[314, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[315, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[316, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[317, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[318, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[319, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[320, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[321, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[322, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[323, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[324, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[325, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[326, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[327, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[328, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[329, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[330, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[331, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[332, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[333, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[334, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[335, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[336, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[337, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[338, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[339, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[340, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[341, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[342, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[343, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[344, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[345, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[346, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[347, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[348, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[349, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[350, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[351, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[352, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[353, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[354, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[355, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[356, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[357, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[358, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[359, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[360, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[361, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[362, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[363, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[364, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[365, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[366, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[367, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[368, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[369, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[370, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[371, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[372, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[373, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[374, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[375, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[376, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[377, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[378, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[379, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[380, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[381, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[382, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[383, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[384, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[385, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[386, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[387, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[388, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[389, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[390, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[391, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[392, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[393, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[394, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[395, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[396, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[397, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[398, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[399, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[400, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[401, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[402, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[403, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[404, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[405, "module-neural_compressor.template"]], "neural_compressor.training": [[406, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[407, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[408, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[409, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[410, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[411, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[412, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[413, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[414, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[415, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[416, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[417, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[418, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[419, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[420, "intel-neural-compressor-documentation"], [516, "intel-neural-compressor-documentation"]], "Sections": [[420, "sections"], [516, "sections"]], "Contributor Covenant Code of Conduct": [[421, "contributor-covenant-code-of-conduct"], [422, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[421, "our-pledge"]], "Our Standards": [[421, "our-standards"]], "Our Responsibilities": [[421, "our-responsibilities"]], "Scope": [[421, "scope"]], "Enforcement": [[421, "enforcement"]], "Attribution": [[421, "attribution"]], "Contribution Guidelines": [[422, "contribution-guidelines"]], "Pull Request Checklist": [[422, "pull-request-checklist"]], "Pull Request Template": [[422, "pull-request-template"]], "Support": [[422, "support"]], "FX": [[423, "fx"]], "Introduction": [[423, "introduction"], [424, "introduction"], [427, "introduction"], [428, "introduction"], [429, "introduction"], [444, "introduction"], [445, "introduction"], [446, "introduction"], [447, "introduction"], [450, "introduction"], [451, "introduction"], [452, "introduction"], [454, "introduction"], [456, "introduction"], [459, "introduction"], [462, "introduction"], [464, "introduction"], [465, "introduction"], [486, "introduction"], [487, "introduction"], [499, "introduction"], [500, "introduction"], [501, "introduction"], [503, "introduction"], [506, "introduction"], [508, "introduction"], [509, "introduction"], [510, "introduction"], [511, "introduction"], [512, "introduction"], [514, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[423, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[423, "get-started"], [449, "get-started"], [489, "get-started"], [504, "get-started"]], "Post Training Static Quantization": [[423, "post-training-static-quantization"], [504, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[423, "post-training-dynamic-quantization"], [504, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[423, "quantization-aware-training"]], "Examples": [[423, "examples"], [424, "examples"], [444, "examples"], [446, "examples"], [447, "examples"], [450, "examples"], [451, "examples"], [452, "examples"], [453, "examples"], [454, "examples"], [463, "examples"], [464, "examples"], [465, "examples"], [500, "examples"], [501, "examples"], [504, "examples"], [506, "examples"], [510, "examples"]], "Note": [[423, "note"]], "Details": [[423, "details"]], "Common Problem": [[423, "common-problem"]], "Dynamic Quantization": [[423, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[423, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[424, "neural-architecture-search"]], "Basic NAS": [[424, "basic-nas"]], "Dynamic NAS": [[424, "dynamic-nas"]], "NAS Support Matrix": [[424, "nas-support-matrix"]], "Get Started with NAS API": [[424, "get-started-with-nas-api"]], "Basic Usage": [[424, "basic-usage"]], "1. Python code + YAML": [[424, "python-code-yaml"]], "2. Python code only": [[424, "python-code-only"]], "Advanced Usage (Custom NAS)": [[424, "advanced-usage-custom-nas"]], "Security Policy": [[425, "security-policy"]], "Report a Vulnerability": [[425, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[426, "intel-neural-compressor"], [483, "intel-neural-compressor"]], "Installation": [[426, "installation"], [460, "installation"], [477, "installation"], [485, "installation"], [489, "installation"]], "Install from pypi": [[426, "install-from-pypi"], [485, "install-from-pypi"]], "Getting Started": [[426, "getting-started"], [457, "getting-started"], [485, "getting-started"]], "Quantization with Python API": [[426, "quantization-with-python-api"], [457, "quantization-with-python-api"], [485, "quantization-with-python-api"]], "Documentation": [[426, "documentation"]], "Selected Publications/Events": [[426, "selected-publications-events"]], "Additional Content": [[426, "additional-content"]], "Communication": [[426, "communication"]], "Adaptor": [[427, "adaptor"], [430, "adaptor"]], "Adaptor Support Matrix": [[427, "adaptor-support-matrix"]], "Working Flow": [[427, "working-flow"], [504, "working-flow"]], "Get Started with Adaptor API": [[427, "get-started-with-adaptor-api"]], "Query API": [[427, "query-api"]], "Background": [[427, "background"]], "Query API Introduction": [[427, "query-api-introduction"]], "Example of Adding a New Backend Support": [[427, "example-of-adding-a-new-backend-support"]], "Capability": [[427, "capability"]], "Implement ONNXRTAdaptor Class": [[427, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[428, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[428, "api-list-that-need-to-implement"]], "Design the framework YAML": [[428, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[428, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[428, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[428, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[428, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[428, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[429, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[429, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[429, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[429, "use-the-new-data-type"]], "Summary": [[429, "summary"]], "ONNX Runtime": [[431, "onnx-runtime"]], "Torch Utils": [[432, "torch-utils"]], "API Document Example": [[433, "api-document-example"]], "APIs": [[434, "apis"]], "Benchmark": [[435, "benchmark"], [463, "benchmark"], [503, "benchmark"]], "Compression": [[436, "compression"]], "Config": [[437, "config"]], "Mix Precision": [[438, "mix-precision"], [463, "mix-precision"]], "Model": [[439, "model"], [465, "model"], [486, "model"], [487, "model"]], "Objective": [[440, "objective"], [495, "objective"], [496, "objective"], [497, "objective"], [499, "objective"]], "Quantization": [[441, "quantization"], [503, "quantization"], [504, "quantization"]], "Strategy": [[442, "strategy"]], "Training": [[443, "training"]], "Benchmarking": [[444, "benchmarking"]], "Benchmark Support Matrix": [[444, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[444, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[445, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[445, "calibration-algorithms"]], "Support Matrix": [[445, "support-matrix"], [468, "support-matrix"]], "Reference": [[445, "reference"], [501, "reference"], [504, "reference"], [506, "reference"], [509, "reference"]], "DataLoader": [[446, "dataloader"]], "Supported Framework Dataloader Matrix": [[446, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[446, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[446, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[446, "build-custom-dataloader-with-python-api"]], "Dataset": [[447, "dataset"]], "Supported Framework Dataset Matrix": [[447, "supported-framework-dataset-matrix"]], "TensorFlow": [[447, "tensorflow"], [462, "tensorflow"], [511, "tensorflow"]], "PyTorch": [[447, "pytorch"], [462, "pytorch"], [505, "pytorch"]], "MXNet": [[447, "mxnet"], [462, "mxnet"], [511, "mxnet"]], "ONNXRT": [[447, "onnxrt"], [462, "onnxrt"], [511, "onnxrt"]], "Get start with Dataset API": [[447, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[447, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[447, "user-specific-dataset"]], "Design": [[448, "design"], [512, "design"], [512, "id1"], [512, "id3"], [512, "id5"], [512, "id7"], [512, "id9"], [512, "id11"], [512, "id13"], [512, "id15"], [512, "id17"], [512, "id19"], [512, "id21"]], "Architecture": [[448, "architecture"], [459, "architecture"]], "Workflow": [[448, "workflow"]], "Diagnosis": [[449, "diagnosis"]], "Diagnosis Introduction": [[449, "diagnosis-introduction"]], "Supported Feature Matrix": [[449, "supported-feature-matrix"], [452, "supported-feature-matrix"], [456, "supported-feature-matrix"], [459, "supported-feature-matrix"], [503, "supported-feature-matrix"], [504, "supported-feature-matrix"], [510, "supported-feature-matrix"], [514, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[449, "install-intel-neural-compressor"]], "Modify script": [[449, "modify-script"]], "Quantization diagnosis": [[449, "quantization-diagnosis"]], "Benchmark diagnosis": [[449, "benchmark-diagnosis"]], "Example": [[449, "example"], [462, "example"], [468, "example"], [472, "example"], [499, "example"], [509, "example"]], "Prepare dataset": [[449, "prepare-dataset"]], "Run quantization script": [[449, "run-quantization-script"]], "Run benchmark script": [[449, "run-benchmark-script"]], "See quantization data": [[449, "see-quantization-data"]], "How to do diagnosis": [[449, "how-to-do-diagnosis"]], "Parameter description": [[449, "parameter-description"]], "Diagnosis suggestions": [[449, "diagnosis-suggestions"]], "Fallback setting example": [[449, "fallback-setting-example"]], "See profiling data": [[449, "see-profiling-data"]], "Distillation": [[450, "distillation"], [463, "distillation"], [503, "distillation"]], "Knowledge Distillation": [[450, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[450, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[450, "self-distillation"]], "Distillation Support Matrix": [[450, "distillation-support-matrix"]], "Get Started with Distillation API": [[450, "get-started-with-distillation-api"]], "Distillation for Quantization": [[451, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[451, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[451, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[452, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[452, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[452, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[452, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[452, "horovodrun-execution"]], "Security": [[452, "security"]], "PyTorch Examples:": [[452, "pytorch-examples"]], "TensorFlow Examples:": [[452, "tensorflow-examples"]], "Example List": [[453, "example-list"]], "Release Data": [[453, "release-data"]], "Export": [[454, "export"]], "Supported Framework Model Matrix": [[454, "supported-framework-model-matrix"], [465, "supported-framework-model-matrix"], [506, "supported-framework-model-matrix"]], "PyTorch Model": [[454, "pytorch-model"]], "FP32 Model Export": [[454, "fp32-model-export"], [454, "id1"]], "INT8 Model Export": [[454, "int8-model-export"], [454, "id2"]], "Tensorflow Model": [[454, "tensorflow-model"]], "Appendix": [[454, "appendix"]], "Supported quantized ops": [[454, "supported-quantized-ops"]], "Frequently Asked Questions": [[455, "frequently-asked-questions"]], "Common Build Issues": [[455, "common-build-issues"]], "Issue 1:": [[455, "issue-1"]], "Issue 2:": [[455, "issue-2"]], "Issue 3:": [[455, "issue-3"]], "Issue 4:": [[455, "issue-4"]], "Framework YAML Configuration Files": [[456, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[456, "get-started-with-framework-yaml-files"]], "Quick Samples": [[457, "quick-samples"]], "Validated Models": [[457, "validated-models"], [509, "validated-models"], [515, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[458, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[458, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[458, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[459, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[460, "linux-installation"]], "Prerequisites": [[460, "prerequisites"], [460, "id1"], [489, "prerequisites"], [490, "prerequisites"]], "Install from Binary": [[460, "install-from-binary"], [460, "id2"]], "Install from Source": [[460, "install-from-source"], [460, "id3"], [485, "install-from-source"]], "Install from AI Kit": [[460, "install-from-ai-kit"]], "Windows Installation": [[460, "windows-installation"]], "System Requirements": [[460, "system-requirements"]], "Validated Hardware Environment": [[460, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[460, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[460, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[460, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[460, "validated-software-environment"]], "Legal Information": [[461, "legal-information"]], "License": [[461, "license"]], "Citation": [[461, "citation"]], "Trademarks": [[461, "trademarks"]], "Metrics": [[462, "metrics"]], "Supported Built-in Metric Matrix": [[462, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[462, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[462, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[462, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[463, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[463, "model-quantization"]], "Post-training Quantization": [[463, "post-training-quantization"]], "Quantization Aware Training": [[463, "quantization-aware-training"], [504, "quantization-aware-training"], [504, "id1"]], "Pruning": [[463, "pruning"], [501, "pruning"], [503, "pruning"]], "Orchestration": [[463, "orchestration"]], "Mixed Precision": [[464, "mixed-precision"]], "Mixed Precision Support Matrix": [[464, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[464, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[464, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[464, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[464, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[464, "get-started-with-mixed-precision-api"]], "Neural Coder": [[466, "neural-coder"], [483, "neural-coder"], [483, "id1"]], "What do we offer?": [[466, "what-do-we-offer"]], "Getting Started!": [[466, "getting-started"], [477, "getting-started"]], "Jupyter Lab Extension": [[466, "jupyter-lab-extension"]], "Python Launcher": [[466, "python-launcher"], [471, "python-launcher"]], "Python API": [[466, "python-api"]], "Contact": [[466, "contact"], [489, "contact"]], "AWS Amazon SageMaker Support": [[467, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[467, "start-jupyter-lab-3"]], "For SageMaker Studio": [[467, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[467, "for-sagemaker-notebook-instance"]], "Installation Guide": [[467, "installation-guide"]], "BigDL Nano Support": [[468, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[469, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[469, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[469, "install-numa-controller"]], "Environment Variables": [[469, "environment-variables"]], "Frequency Governers": [[469, "frequency-governers"]], "Neural Coder as Python API": [[470, "neural-coder-as-python-api"]], "Enable": [[470, "enable"]], "Bench": [[470, "bench"]], "SuperBench": [[470, "superbench"]], "Quick-Start": [[471, "quick-start"]], "Launcher Arguments (Optional)": [[471, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[472, "neural-coder-for-quantization"]], "Features Supported": [[472, "features-supported"]], "Models Supported": [[472, "models-supported"]], "Usage": [[472, "usage"], [491, "usage"], [491, "id2"], [491, "id6"], [491, "id9"], [491, "id16"], [491, "id19"], [491, "id22"], [491, "id25"], [510, "usage"], [510, "id1"], [512, "usage"], [512, "id2"], [512, "id4"], [512, "id6"], [512, "id8"], [512, "id10"], [512, "id12"], [512, "id14"], [512, "id16"], [512, "id18"], [512, "id20"], [512, "id22"]], "PyPI distribution:": [[472, "pypi-distribution"]], "Supported Optimization Features": [[473, "supported-optimization-features"]], "v0.4": [[474, "v0-4"]], "Highlights": [[474, "highlights"]], "Others": [[474, "others"]], "Changelog": [[475, "changelog"], [479, "changelog"]], "neural_compressor_ext_lab": [[476, "neural-compressor-ext-lab"]], "Requirements": [[476, "requirements"], [480, "requirements"], [486, "requirements"], [487, "requirements"], [495, "requirements"]], "Install": [[476, "install"], [480, "install"]], "Uninstall": [[476, "uninstall"], [480, "uninstall"]], "Contributing": [[476, "contributing"], [480, "contributing"]], "Development install": [[476, "development-install"], [480, "development-install"]], "Development uninstall": [[476, "development-uninstall"], [480, "development-uninstall"]], "Packaging the extension": [[476, "packaging-the-extension"], [480, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[477, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[477, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[477, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[477, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[478, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[478, "manual-release"], [481, "manual-release"]], "Python package": [[478, "python-package"], [481, "python-package"]], "NPM package": [[478, "npm-package"], [481, "npm-package"]], "Automated releases with the Jupyter Releaser": [[478, "automated-releases-with-the-jupyter-releaser"], [481, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[478, "publishing-to-conda-forge"], [481, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[480, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[481, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[482, "change-log"]], "[Unreleased]": [[482, "unreleased"]], "Background Introduction": [[483, "background-introduction"]], "Neural Coder Extension in VSCode": [[483, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[483, "neural-coder-extension-usage"]], "1. Open": [[483, "open"]], "2. Search": [[483, "search"]], "3. Setting": [[483, "setting"]], "4. Icon": [[483, "icon"]], "5. optimization (quantization)": [[483, "optimization-quantization"]], "5.1 Enable": [[483, "enable"]], "5.2 Auto": [[483, "auto"]], "Welcome to your VS Code Extension": [[484, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[484, "what-s-in-the-folder"]], "Setup": [[484, "setup"]], "Get up and running straight away": [[484, "get-up-and-running-straight-away"]], "Make changes": [[484, "make-changes"]], "Explore the API": [[484, "explore-the-api"]], "Run tests": [[484, "run-tests"]], "Go further": [[484, "go-further"]], "Neural Insights": [[485, "neural-insights"]], "Start the Neural Insights": [[485, "start-the-neural-insights"]], "Step by Step Diagnosis Example": [[485, "step-by-step-diagnosis-example"]], "Research Collaborations": [[485, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[486, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [487, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[486, "preparation"], [487, "preparation"], [508, "preparation"]], "Running the quantization": [[486, "running-the-quantization"], [487, "running-the-quantization"]], "Analyzing the result of quantization": [[486, "analyzing-the-result-of-quantization"], [487, "analyzing-the-result-of-quantization"]], "Weights summary": [[486, "weights-summary"]], "Activations summary": [[486, "activations-summary"]], "Source": [[487, "source"]], "Prepare the dataset": [[487, "prepare-the-dataset"]], "Analyzing weight histograms": [[487, "analyzing-weight-histograms"]], "Open Neural Insights": [[487, "open-neural-insights"]], "Getting Started with Create React App": [[488, "getting-started-with-create-react-app"]], "Available Scripts": [[488, "available-scripts"]], "npm start": [[488, "npm-start"]], "npm test": [[488, "npm-test"]], "npm run build": [[488, "npm-run-build"]], "npm run eject": [[488, "npm-run-eject"]], "Learn More": [[488, "learn-more"], [489, "learn-more"]], "Code Splitting": [[488, "code-splitting"]], "Analyzing the Bundle Size": [[488, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[488, "making-a-progressive-web-app"]], "Advanced Configuration": [[488, "advanced-configuration"]], "Deployment": [[488, "deployment"]], "npm run build fails to minify": [[488, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[489, "what-s-neural-solution"]], "Why Neural Solution?": [[489, "why-neural-solution"]], "How does Neural Solution Work?": [[489, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[489, "method-1-using-pip"]], "Method 2. Building from source:": [[489, "method-2-building-from-source"]], "End-to-end examples": [[489, "end-to-end-examples"]], "Get started": [[490, "get-started"]], "Install Neural Solution": [[490, "install-neural-solution"]], "Method 1. Using pip": [[490, "method-1-using-pip"]], "Method 2. Building from source": [[490, "method-2-building-from-source"]], "Start service": [[490, "start-service"]], "Submit task": [[490, "submit-task"]], "Query task status": [[490, "query-task-status"]], "Stop service": [[490, "stop-service"]], "Inspect logs": [[490, "inspect-logs"]], "Manage resource": [[490, "manage-resource"], [495, "manage-resource"], [496, "manage-resource"]], "Node States": [[490, "node-states"]], "Query cluster": [[490, "query-cluster"]], "Add node": [[490, "add-node"]], "Remove node": [[490, "remove-node"]], "Neural Solution API": [[491, "neural-solution-api"]], "Base URL": [[491, "base-url"]], "Endpoints": [[491, "endpoints"]], "GET /": [[491, "get"]], "Description": [[491, "description"], [491, "id1"], [491, "id4"], [491, "id8"], [491, "id12"], [491, "id15"], [491, "id18"], [491, "id21"], [491, "id24"]], "Responses": [[491, "responses"], [491, "id3"], [491, "id7"], [491, "id11"], [491, "id14"], [491, "id17"], [491, "id20"], [491, "id23"], [491, "id26"]], "POST /task/submit": [[491, "post-task-submit"]], "Parameters": [[491, "parameters"], [491, "id5"], [491, "id10"], [491, "id13"]], "GET /task/status/{task_id}": [[491, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[491, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[491, "websocket-task-screen-task-id"]], "GET /ping": [[491, "get-ping"]], "GET /cluster": [[491, "get-cluster"]], "GET /download/{task_id}": [[491, "get-download-task-id"]], "GET /description": [[491, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[492, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[492, "contents"]], "Overview": [[492, "overview"], [513, "overview"]], "Workflow of OaaS": [[492, "workflow-of-oaas"]], "Class definition diagram": [[492, "class-definition-diagram"]], "Extensibility": [[492, "extensibility"]], "Task request description": [[493, "task-request-description"]], "Examples List": [[494, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[495, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[495, "start-the-neural-solution-service"], [496, "start-the-neural-solution-service"], [497, "start-the-neural-solution-service"]], "Submit optimization task": [[495, "submit-optimization-task"], [496, "submit-optimization-task"], [497, "submit-optimization-task"]], "Query optimization result": [[495, "query-optimization-result"], [496, "query-optimization-result"], [497, "query-optimization-result"]], "Download optimized model": [[495, "download-optimized-model"], [496, "download-optimized-model"]], "Stop the service": [[495, "stop-the-service"], [496, "stop-the-service"], [497, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[496, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[497, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[498, "client"]], "Single Objective": [[499, "single-objective"]], "Multiple Objectives": [[499, "multiple-objectives"]], "Objective Support Matrix": [[499, "objective-support-matrix"]], "Get Started with Objective API": [[499, "get-started-with-objective-api"]], "Config Single Objective": [[499, "config-single-objective"]], "Config Multiple Objectives": [[499, "config-multiple-objectives"]], "Optimization Orchestration": [[500, "optimization-orchestration"]], "One-shot": [[500, "one-shot"]], "Orchestration Support Matrix": [[500, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[500, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[501, "neural-network-pruning"]], "Pruning Patterns": [[501, "pruning-patterns"]], "Pruning Criteria": [[501, "pruning-criteria"]], "Pruning Types": [[501, "pruning-types"]], "Pruning Schedules": [[501, "pruning-schedules"]], "Pruning Scope": [[501, "pruning-scope"]], "Sparsity Decay Types": [[501, "sparsity-decay-types"]], "Regularization": [[501, "regularization"]], "Large Language Model Pruning": [[501, "large-language-model-pruning"]], "Pruning Support Matrix": [[501, "pruning-support-matrix"]], "Get Started with Pruning API": [[501, "get-started-with-pruning-api"]], "Training-aware pruning API": [[501, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[501, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[501, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[501, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (75)": [[502, "full-publications-events-75"]], "2023 (21)": [[502, "id1"]], "2022 (35)": [[502, "id2"]], "2021 (15)": [[502, "id3"]], "2018 - 2020 (4)": [[502, "id4"]], "Pythonic Style Access for Configurations": [[503, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[503, "pythonic-api-for-user-configurations"], [503, "id1"]], "Pythonic API for Framework Configurations": [[503, "pythonic-api-for-framework-configurations"], [503, "id2"]], "Get Started with Pythonic API for Configurations": [[503, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[503, "nas"]], "Quantization Introduction": [[504, "quantization-introduction"]], "Quantization Fundamentals": [[504, "quantization-fundamentals"], [509, "quantization-fundamentals"]], "Quantization Support Matrix": [[504, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[504, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[504, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[504, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[504, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[504, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[504, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[504, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[504, "post-training-quantization"]], "Specify Quantization Rules": [[504, "specify-quantization-rules"]], "Specify Quantization Recipes": [[504, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[504, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[505, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[505, "tensorflow"]], "Weight Only Quantization (WOQ)": [[506, "weight-only-quantization-woq"]], "Quantization Capability:": [[506, "quantization-capability"]], "Export Compressed Model": [[506, "export-compressed-model"]], "User code:": [[506, "user-code"]], "Release": [[507, "release"]], "Release Notes": [[507, "release-notes"]], "Known Issues": [[507, "known-issues"]], "Incompatible Changes": [[507, "incompatible-changes"]], "SigOpt Strategy": [[508, "sigopt-strategy"]], "SigOpt Platform": [[508, "sigopt-platform"]], "Neural Compressor Configuration": [[508, "neural-compressor-configuration"]], "Performance": [[508, "performance"]], "Benefit of SigOpt Strategy": [[508, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[508, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[509, "smooth-quant"]], "Per-tensor & Per-channel": [[509, "per-tensor-per-channel"]], "Per-tensor example": [[509, "per-tensor-example"]], "Per-channel example": [[509, "per-channel-example"]], "Matmul quantization example": [[509, "matmul-quantization-example"]], "Per-channel limitation": [[509, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[509, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[509, "smoothquant"]], "Our enhancement:": [[509, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[509, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[509, "engineering"]], "Supported Framework Matrix": [[509, "supported-framework-matrix"]], "TensorBoard": [[510, "tensorboard"]], "Get Started with TensorBoard": [[510, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[510, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[510, "tensorflow-tensorboard"]], "PyTorch Examples": [[510, "pytorch-examples"]], "TensorFlow Examples": [[510, "tensorflow-examples"]], "Transform": [[511, "transform"]], "Transform Support List": [[511, "transform-support-list"]], "Pytorch": [[511, "pytorch"]], "Tuning Strategies": [[512, "tuning-strategies"]], "Strategy Design": [[512, "strategy-design"]], "Tuning Space": [[512, "tuning-space"]], "Exit Policy": [[512, "exit-policy"]], "Accuracy Criteria": [[512, "accuracy-criteria"]], "Tuning Process": [[512, "tuning-process"]], "Tuning Algorithms": [[512, "tuning-algorithms"]], "Auto": [[512, "auto"]], "Conservative Tuning": [[512, "conservative-tuning"]], "Basic": [[512, "basic"]], "MSE": [[512, "mse"]], "MSE_V2": [[512, "mse-v2"]], "HAWQ_V2": [[512, "hawq-v2"]], "Bayesian": [[512, "bayesian"]], "Exhaustive": [[512, "exhaustive"]], "Random": [[512, "random"]], "SigOpt": [[512, "sigopt"]], "TPE": [[512, "tpe"]], "Distributed Tuning": [[512, "distributed-tuning"]], "Customize a New Tuning Strategy": [[512, "customize-a-new-tuning-strategy"]], "User Guide": [[513, "user-guide"]], "Python-based APIs": [[513, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[513, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[513, "advanced-topics"]], "Innovations for Productivity": [[513, "innovations-for-productivity"]], "User YAML Configuration Files": [[514, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[514, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[515, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.12.0": [[515, "tensorflow-models-with-intel-tensorflow-2-12-0"]], "TensorFlow Models with Intel\u00ae Extension for TensorFlow* 1.2.0": [[515, "tensorflow-models-with-intel-extension-for-tensorflow-1-2-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[515, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[515, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[515, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[515, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.0": [[515, "onnx-models-with-onnx-runtime-1-15-0"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[515, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[515, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[515, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[515, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.awq"], [150, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [151, "module-neural_compressor.adaptor.torch_utils.gptq"], [152, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [153, "module-neural_compressor.adaptor.torch_utils"], [154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [159, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [160, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [161, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [162, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [164, "module-neural_compressor.adaptor.torch_utils.teq"], [165, "module-neural_compressor.adaptor.torch_utils.util"], [166, "module-neural_compressor.adaptor.torch_utils.weight_only"], [167, "module-neural_compressor.algorithm.algorithm"], [168, "module-neural_compressor.algorithm.fast_bias_correction"], [169, "module-neural_compressor.algorithm"], [170, "module-neural_compressor.algorithm.smooth_quant"], [171, "module-neural_compressor.algorithm.weight_correction"], [172, "module-neural_compressor.benchmark"], [173, "module-neural_compressor.compression.callbacks"], [174, "module-neural_compressor.compression.distillation.criterions"], [175, "module-neural_compressor.compression.distillation"], [176, "module-neural_compressor.compression.hpo"], [177, "module-neural_compressor.compression.hpo.sa_optimizer"], [178, "module-neural_compressor.compression.hpo.search_algorithms"], [179, "module-neural_compressor.compression.hpo.search_space"], [180, "module-neural_compressor.compression"], [181, "module-neural_compressor.compression.pruner.criteria"], [182, "module-neural_compressor.compression.pruner"], [183, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [184, "module-neural_compressor.compression.pruner.model_slim"], [185, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [186, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [187, "module-neural_compressor.compression.pruner.patterns.base"], [188, "module-neural_compressor.compression.pruner.patterns"], [189, "module-neural_compressor.compression.pruner.patterns.mha"], [190, "module-neural_compressor.compression.pruner.patterns.ninm"], [191, "module-neural_compressor.compression.pruner.patterns.nxm"], [192, "module-neural_compressor.compression.pruner.pruners.base"], [193, "module-neural_compressor.compression.pruner.pruners.basic"], [194, "module-neural_compressor.compression.pruner.pruners.block_mask"], [195, "module-neural_compressor.compression.pruner.pruners"], [196, "module-neural_compressor.compression.pruner.pruners.mha"], [197, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [198, "module-neural_compressor.compression.pruner.pruners.progressive"], [199, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [200, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [201, "module-neural_compressor.compression.pruner.pruning"], [202, "module-neural_compressor.compression.pruner.regs"], [203, "module-neural_compressor.compression.pruner.schedulers"], [204, "module-neural_compressor.compression.pruner.tf_criteria"], [205, "module-neural_compressor.compression.pruner.utils"], [206, "module-neural_compressor.conf.config"], [207, "module-neural_compressor.conf.dotdict"], [208, "module-neural_compressor.conf"], [209, "module-neural_compressor.conf.pythonic_config"], [210, "module-neural_compressor.config"], [211, "module-neural_compressor.contrib"], [212, "module-neural_compressor.contrib.strategy"], [213, "module-neural_compressor.contrib.strategy.sigopt"], [214, "module-neural_compressor.contrib.strategy.tpe"], [215, "module-neural_compressor.data.dataloaders.base_dataloader"], [216, "module-neural_compressor.data.dataloaders.dataloader"], [217, "module-neural_compressor.data.dataloaders.default_dataloader"], [218, "module-neural_compressor.data.dataloaders.fetcher"], [219, "module-neural_compressor.data.dataloaders"], [220, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [221, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [222, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [223, "module-neural_compressor.data.dataloaders.sampler"], [224, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [225, "module-neural_compressor.data.datasets.bert_dataset"], [226, "module-neural_compressor.data.datasets.coco_dataset"], [227, "module-neural_compressor.data.datasets.dataset"], [228, "module-neural_compressor.data.datasets.dummy_dataset"], [229, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [230, "module-neural_compressor.data.datasets.imagenet_dataset"], [231, "module-neural_compressor.data.datasets"], [232, "module-neural_compressor.data.datasets.style_transfer_dataset"], [233, "module-neural_compressor.data.filters.coco_filter"], [234, "module-neural_compressor.data.filters.filter"], [235, "module-neural_compressor.data.filters"], [236, "module-neural_compressor.data"], [237, "module-neural_compressor.data.transforms.coco_transform"], [238, "module-neural_compressor.data.transforms.imagenet_transform"], [239, "module-neural_compressor.data.transforms"], [240, "module-neural_compressor.data.transforms.postprocess"], [241, "module-neural_compressor.data.transforms.tokenization"], [242, "module-neural_compressor.data.transforms.transform"], [243, "module-neural_compressor.experimental.benchmark"], [244, "module-neural_compressor.experimental.common.criterion"], [245, "module-neural_compressor.experimental.common.dataloader"], [246, "module-neural_compressor.experimental.common"], [247, "module-neural_compressor.experimental.common.metric"], [248, "module-neural_compressor.experimental.common.model"], [249, "module-neural_compressor.experimental.common.optimizer"], [250, "module-neural_compressor.experimental.common.postprocess"], [251, "module-neural_compressor.experimental.common.torch_utils"], [252, "module-neural_compressor.experimental.component"], [253, "module-neural_compressor.experimental.compression"], [254, "module-neural_compressor.experimental.contrib"], [255, "module-neural_compressor.experimental.contrib.strategy"], [256, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [257, "module-neural_compressor.experimental.contrib.strategy.tpe"], [258, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [259, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [260, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [261, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [262, "module-neural_compressor.experimental.data.dataloaders"], [263, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [264, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [265, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [266, "module-neural_compressor.experimental.data.dataloaders.sampler"], [267, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [268, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [269, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [270, "module-neural_compressor.experimental.data.datasets.dataset"], [271, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [272, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [273, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [274, "module-neural_compressor.experimental.data.datasets"], [275, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [276, "module-neural_compressor.experimental.data.filters.coco_filter"], [277, "module-neural_compressor.experimental.data.filters.filter"], [278, "module-neural_compressor.experimental.data.filters"], [279, "module-neural_compressor.experimental.data"], [280, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [281, "module-neural_compressor.experimental.data.transforms"], [282, "module-neural_compressor.experimental.data.transforms.tokenization"], [283, "module-neural_compressor.experimental.data.transforms.transform"], [284, "module-neural_compressor.experimental.distillation"], [285, "module-neural_compressor.experimental.export"], [286, "module-neural_compressor.experimental.export.qlinear2qdq"], [287, "module-neural_compressor.experimental.export.tf2onnx"], [288, "module-neural_compressor.experimental.export.torch2onnx"], [289, "module-neural_compressor.experimental.graph_optimization"], [290, "module-neural_compressor.experimental"], [291, "module-neural_compressor.experimental.metric.bleu"], [292, "module-neural_compressor.experimental.metric.bleu_util"], [293, "module-neural_compressor.experimental.metric.coco_label_map"], [294, "module-neural_compressor.experimental.metric.coco_tools"], [295, "module-neural_compressor.experimental.metric.evaluate_squad"], [296, "module-neural_compressor.experimental.metric.f1"], [297, "module-neural_compressor.experimental.metric"], [298, "module-neural_compressor.experimental.metric.metric"], [299, "module-neural_compressor.experimental.mixed_precision"], [300, "module-neural_compressor.experimental.model_conversion"], [301, "module-neural_compressor.experimental.nas.basic_nas"], [302, "module-neural_compressor.experimental.nas.dynas"], [303, "module-neural_compressor.experimental.nas"], [304, "module-neural_compressor.experimental.nas.nas"], [305, "module-neural_compressor.experimental.nas.nas_utils"], [306, "module-neural_compressor.experimental.nas.search_algorithms"], [307, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [308, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [309, "module-neural_compressor.experimental.pruner_legacy"], [310, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [311, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [312, "module-neural_compressor.experimental.pruner_legacy.pruner"], [313, "module-neural_compressor.experimental.pruning"], [314, "module-neural_compressor.experimental.pruning_recipes"], [315, "module-neural_compressor.experimental.pruning_recipes.patterns"], [316, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [317, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [318, "module-neural_compressor.experimental.pruning_v2"], [319, "module-neural_compressor.experimental.pytorch_pruner"], [320, "module-neural_compressor.experimental.pytorch_pruner.logger"], [321, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [322, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [323, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [324, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [325, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [326, "module-neural_compressor.experimental.quantization"], [327, "module-neural_compressor.experimental.scheduler"], [328, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [329, "module-neural_compressor.experimental.strategy.basic"], [330, "module-neural_compressor.experimental.strategy.bayesian"], [331, "module-neural_compressor.experimental.strategy.exhaustive"], [332, "module-neural_compressor.experimental.strategy"], [333, "module-neural_compressor.experimental.strategy.mse"], [334, "module-neural_compressor.experimental.strategy.mse_v2"], [335, "module-neural_compressor.experimental.strategy.random"], [336, "module-neural_compressor.experimental.strategy.strategy"], [337, "module-neural_compressor.experimental.strategy.utils.constant"], [338, "module-neural_compressor.experimental.strategy.utils"], [339, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [340, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [341, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [342, "module-neural_compressor.experimental.strategy.utils.utility"], [343, "module-neural_compressor"], [344, "module-neural_compressor.metric.bleu"], [345, "module-neural_compressor.metric.bleu_util"], [346, "module-neural_compressor.metric.coco_label_map"], [347, "module-neural_compressor.metric.coco_tools"], [348, "module-neural_compressor.metric.evaluate_squad"], [349, "module-neural_compressor.metric.f1"], [350, "module-neural_compressor.metric"], [351, "module-neural_compressor.metric.metric"], [352, "module-neural_compressor.mix_precision"], [353, "module-neural_compressor.model.base_model"], [354, "module-neural_compressor.model"], [355, "module-neural_compressor.model.keras_model"], [356, "module-neural_compressor.model.model"], [357, "module-neural_compressor.model.mxnet_model"], [358, "module-neural_compressor.model.nets_factory"], [359, "module-neural_compressor.model.onnx_model"], [360, "module-neural_compressor.model.tensorflow_model"], [361, "module-neural_compressor.model.torch_model"], [362, "module-neural_compressor.objective"], [363, "module-neural_compressor.profiling"], [364, "module-neural_compressor.profiling.parser.factory"], [365, "module-neural_compressor.profiling.parser"], [366, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [367, "module-neural_compressor.profiling.parser.onnx_parser"], [368, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [369, "module-neural_compressor.profiling.parser.parser"], [370, "module-neural_compressor.profiling.parser.result"], [371, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [372, "module-neural_compressor.profiling.parser.tensorflow_parser"], [373, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [374, "module-neural_compressor.profiling.profiler.factory"], [375, "module-neural_compressor.profiling.profiler"], [376, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [377, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [378, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [379, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [380, "module-neural_compressor.profiling.profiler.profiler"], [381, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [382, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [383, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [384, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [385, "module-neural_compressor.quantization"], [386, "module-neural_compressor.strategy.auto"], [387, "module-neural_compressor.strategy.auto_mixed_precision"], [388, "module-neural_compressor.strategy.basic"], [389, "module-neural_compressor.strategy.bayesian"], [390, "module-neural_compressor.strategy.conservative"], [391, "module-neural_compressor.strategy.exhaustive"], [392, "module-neural_compressor.strategy.hawq_v2"], [393, "module-neural_compressor.strategy"], [394, "module-neural_compressor.strategy.mse"], [395, "module-neural_compressor.strategy.mse_v2"], [396, "module-neural_compressor.strategy.random"], [397, "module-neural_compressor.strategy.strategy"], [398, "module-neural_compressor.strategy.utils.constant"], [399, "module-neural_compressor.strategy.utils"], [400, "module-neural_compressor.strategy.utils.tuning_sampler"], [401, "module-neural_compressor.strategy.utils.tuning_space"], [402, "module-neural_compressor.strategy.utils.tuning_structs"], [403, "module-neural_compressor.strategy.utils.utility"], [404, "module-neural_compressor.template.api_doc_example"], [405, "module-neural_compressor.template"], [406, "module-neural_compressor.training"], [407, "module-neural_compressor.utils.collect_layer_histogram"], [408, "module-neural_compressor.utils.constant"], [409, "module-neural_compressor.utils.create_obj_from_config"], [410, "module-neural_compressor.utils"], [411, "module-neural_compressor.utils.kl_divergence"], [412, "module-neural_compressor.utils.load_huggingface"], [413, "module-neural_compressor.utils.logger"], [414, "module-neural_compressor.utils.neural_insights_utils"], [415, "module-neural_compressor.utils.options"], [416, "module-neural_compressor.utils.pytorch"], [417, "module-neural_compressor.utils.utility"], [418, "module-neural_compressor.utils.weights_details"], [419, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "check_op_support_status() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.check_op_support_status"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[149, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[149, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[150, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[150, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[150, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[150, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[151, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[152, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[153, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"]], "picklingerror": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"]], "unpicklingerror": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_shell() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_shell"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[159, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[159, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[160, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[160, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[160, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[160, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[161, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[161, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[162, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.update_sq_scale"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[163, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[163, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[164, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[164, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[165, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[166, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[167, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[168, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[168, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[169, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[170, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[170, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[171, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[171, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[172, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[173, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[173, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[173, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[173, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[173, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[173, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[173, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[173, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[173, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[174, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[175, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.hpo": [[176, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[177, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[178, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[178, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[178, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[178, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[178, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[178, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[178, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[179, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[179, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[179, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[179, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[179, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[179, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[180, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[181, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[181, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[181, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[181, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[181, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[181, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[181, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[181, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[181, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[181, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[181, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[181, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[181, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[181, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[181, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[181, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[181, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[182, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[182, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[182, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[183, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[183, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[183, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[183, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[183, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[183, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[183, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[184, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[185, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[185, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[186, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[186, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[186, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[186, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[186, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[186, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[186, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[186, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[187, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[187, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[187, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[187, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[187, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[187, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[188, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[188, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[189, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[189, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[189, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[189, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[190, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[190, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[190, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[190, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[191, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[191, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[191, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[191, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[191, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[192, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[192, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[193, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[193, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[193, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[194, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[194, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[195, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[195, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[195, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[196, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[196, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[196, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[196, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[196, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[196, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[197, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[197, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[198, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[198, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[199, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[199, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[200, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[200, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[200, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[200, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[200, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[200, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[201, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[201, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[201, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[201, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[201, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[201, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[201, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[201, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[201, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[201, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[201, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[201, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[201, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[201, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[201, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[201, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[201, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[201, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[202, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[202, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[202, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[202, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[202, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[202, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[202, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[202, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[203, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[203, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[203, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[203, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[203, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[203, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[203, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[204, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[204, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[204, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[204, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[204, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[204, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[204, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[205, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[205, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[206, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[206, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[206, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[206, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[206, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[206, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[206, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[206, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[206, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[206, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[206, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[207, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[207, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[207, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[207, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[208, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[209, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[209, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[209, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[209, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[209, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[209, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[209, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[209, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[210, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[210, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[210, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[210, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[210, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[210, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[210, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[210, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[210, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[210, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[210, "module-neural_compressor.config"]], "neural_compressor.contrib": [[211, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[212, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[213, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[213, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[214, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[214, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[215, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[215, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[216, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[216, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[216, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[217, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[217, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[217, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[218, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[218, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[218, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[218, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[219, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[220, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[220, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[221, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[221, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[221, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[222, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[222, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[223, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[223, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[223, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[223, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[223, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[224, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[224, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[224, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[224, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[224, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[225, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[225, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[225, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[225, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[225, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[225, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[225, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[225, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[225, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[226, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[226, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[226, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[226, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[226, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[227, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[227, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[228, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[228, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[229, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[229, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[229, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[230, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[230, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[230, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[230, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[230, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[230, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[230, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[231, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[232, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[232, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[233, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[233, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[233, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[234, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[234, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[234, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[234, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[234, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[234, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[234, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[234, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[234, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[235, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[236, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[237, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[237, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[238, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[238, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[238, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[238, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[238, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[238, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[238, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[238, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[238, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[238, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[238, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[238, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[239, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[240, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[240, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[241, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[241, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[241, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[241, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[241, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[241, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[241, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[241, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.TRANSFORMS"], [242, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[242, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[242, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[243, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[243, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[243, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[243, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[243, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[243, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[243, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[243, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[243, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[243, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[244, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[244, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[245, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[245, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[246, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[247, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[247, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[248, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[248, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[248, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[249, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[249, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[249, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[249, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[249, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[249, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[249, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[249, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[249, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[250, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[250, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[251, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[251, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[251, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[252, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[252, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[253, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[254, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[255, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[256, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[256, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[257, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[257, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[258, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[258, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[259, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[260, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[260, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[260, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[261, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[261, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[261, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[261, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[262, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[263, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[263, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[264, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[264, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[264, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[265, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[265, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[266, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[266, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[266, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[266, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[266, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[267, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[267, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[267, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[267, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[267, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[268, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[268, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[268, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[268, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[268, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[268, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[268, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[268, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[268, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[269, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[269, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[269, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[269, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[269, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[270, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[270, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[271, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[271, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[272, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[272, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[272, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[273, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[273, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[273, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[273, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[273, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[273, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[273, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[274, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[275, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[275, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[276, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[276, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[276, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[277, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[277, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[277, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[277, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[277, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[277, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[277, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[277, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[277, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[278, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[279, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[280, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[280, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[280, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[280, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[280, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[280, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[280, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[280, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[280, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[280, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[281, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[282, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[282, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[282, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[282, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[282, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[282, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[282, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[282, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [283, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[283, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[283, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[284, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[284, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[284, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[284, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[284, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[284, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[285, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[286, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[286, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[286, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[287, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[287, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[287, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[288, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[288, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[288, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[288, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[288, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[288, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[288, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[289, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[289, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[290, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[291, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[291, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[291, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[291, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[291, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[291, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[291, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[291, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[291, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[292, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[292, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[293, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[294, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[294, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[294, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[294, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[294, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[294, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[294, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[294, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[295, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[295, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[295, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[295, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[295, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[296, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[296, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[296, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[296, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[296, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[297, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[298, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[298, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[298, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[298, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[298, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[298, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[298, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[298, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[298, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[298, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[298, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[298, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[298, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[298, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[298, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[298, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[298, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[298, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[298, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[298, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[298, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[298, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[298, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[298, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[298, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[298, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[299, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[299, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[300, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[300, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[301, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[301, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[302, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[302, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[303, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[304, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[304, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[304, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[305, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[305, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[305, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[305, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[306, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[306, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[306, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[306, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[306, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[307, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[307, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[308, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[308, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[309, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[310, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[310, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[311, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[311, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[312, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[312, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[312, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[313, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[313, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[313, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[313, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[313, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[314, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[315, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[316, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[316, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[316, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[316, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[316, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[317, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[317, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[317, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[317, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[317, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[317, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[317, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[318, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[318, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[318, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[318, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[318, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[319, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[320, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[321, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[321, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[321, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[321, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[321, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[321, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[322, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[322, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[322, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[322, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[322, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[322, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[322, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[323, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[324, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[324, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[324, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[324, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[324, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[324, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[325, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[325, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[325, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[325, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[325, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[325, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[326, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[326, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[327, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[327, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[328, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[328, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[329, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[329, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[330, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[330, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[330, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[330, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[330, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[331, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[331, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[332, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[333, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[333, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[334, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[334, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[335, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[335, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[336, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[336, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[336, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[337, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[338, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[339, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[339, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[339, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[339, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[339, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[339, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[339, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[339, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[339, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[340, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[340, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[340, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[340, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[340, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[340, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[340, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[341, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[341, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[342, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[342, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[342, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[342, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[342, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[343, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[344, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[344, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[344, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[344, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[344, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[344, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[344, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[344, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[344, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[345, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[345, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[346, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[347, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[347, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[347, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[347, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[347, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[347, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[347, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[347, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[348, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[348, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[348, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[348, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[348, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[349, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[349, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[349, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[349, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[349, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[350, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[351, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[351, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[351, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[351, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[351, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[351, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[351, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[351, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[351, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[351, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[351, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[351, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[351, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[351, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[351, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[351, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[351, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[351, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[351, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[351, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[351, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[351, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[351, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[351, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[351, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[351, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[352, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[352, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[353, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[353, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[354, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[355, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[355, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[356, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[356, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[356, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[357, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[357, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[358, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[358, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[359, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[359, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[360, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[360, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[361, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[361, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[361, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[361, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[361, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[362, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[362, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[362, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[362, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[362, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[362, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[362, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[362, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[362, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[363, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[364, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[364, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[365, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[366, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[366, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[367, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[368, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[368, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[369, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[369, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[370, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[370, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[371, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[371, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[372, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[373, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[373, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[374, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[374, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[375, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[376, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[376, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[377, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[378, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[378, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[379, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[379, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[380, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[380, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[381, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[381, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[382, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[383, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[383, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[384, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[384, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[384, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[384, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[385, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[385, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[386, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[386, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[387, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[387, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[388, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[388, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[389, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[389, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[389, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[389, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[389, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[390, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[390, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[391, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[391, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[392, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[392, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[393, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[394, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[394, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[395, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[395, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[396, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[396, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[397, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[397, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[397, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[397, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[398, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[399, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[400, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[400, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[400, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[400, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[400, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[400, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[400, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[400, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[400, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[400, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[401, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[401, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[401, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[401, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[401, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[401, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[401, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[402, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[402, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[403, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[403, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[403, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[403, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[403, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[403, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[403, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[403, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[403, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[403, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[404, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[404, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[404, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[404, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[404, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[404, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[404, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[404, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[404, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[404, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[404, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[405, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[406, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[406, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[406, "neural_compressor.training.fit"]], "neural_compressor.training": [[406, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[406, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[407, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[407, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[408, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[409, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[409, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[409, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[409, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[409, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[409, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[409, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[409, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[409, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[409, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[410, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[411, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[411, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[412, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[412, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[412, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[413, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[413, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[413, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[413, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[413, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[413, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[413, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[413, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[413, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[414, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[414, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[414, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[414, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[414, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[415, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[415, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[416, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[416, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[416, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[416, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[417, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[417, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[418, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[418, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[418, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[419, "module-neural_compressor.version"]]}})