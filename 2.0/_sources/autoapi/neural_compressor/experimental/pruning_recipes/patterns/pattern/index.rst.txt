:py:mod:`neural_compressor.experimental.pruning_recipes.patterns.pattern`
=========================================================================

.. py:module:: neural_compressor.experimental.pruning_recipes.patterns.pattern

.. autoapi-nested-parse::

   pattern classes.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS
   neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase



Functions
~~~~~~~~~

.. autoapisummary::

   neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry



.. py:function:: pattern_registry(pattern_type)

   Class decorator used to register all Pruning Pattern subclasses.

   :param cls: The class of register.
   :type cls: class
   :param pattern_type: The pattern registration name
   :type pattern_type: str

   :returns: The class of register.
   :rtype: cls


.. py:class:: PATTERNS

   Bases: :py:obj:`object`

   Class that contain all registered pattern types.

   .. attribute:: patterns

      A dict which stores registered Pruning Pattern subclasses.

   .. py:method:: support_pattern()
      :classmethod:

      Support patterns.



.. py:class:: PatternBase(mask_shape, is_contiguous=True)

   Base class of pruning pattern.

   .. py:method:: compute_sparsity(tensor)
      :abstractmethod:

      To be implemented in subclasses.


   .. py:method:: reduce(tensor, method='abs_sum')

      Reshaped tensor, support 'abs_max', 'abs_sum'.


   .. py:method:: reshape(tensor)

      Reshape tensor into dims+2.



