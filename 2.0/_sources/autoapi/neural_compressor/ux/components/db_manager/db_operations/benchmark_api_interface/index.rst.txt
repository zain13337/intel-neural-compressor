:py:mod:`neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface`
==========================================================================================

.. py:module:: neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface

.. autoapi-nested-parse::

   INC Bench Benchmark API interface.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface



Functions
~~~~~~~~~

.. autoapisummary::

   neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry



.. py:class:: BenchmarkAPIInterface

   Interface for queries connected with benchmark.

   .. py:method:: delete_benchmark(data: dict) -> dict
      :staticmethod:

      Delete benchmark from database and clean workspace.


   .. py:method:: get_benchmark_details(data: dict) -> dict
      :staticmethod:

      Parse input data and get benchmark details.


   .. py:method:: list_benchmarks(data: dict) -> dict
      :staticmethod:

      List benchmarks assigned to project.


   .. py:method:: update_benchmark_accuracy(data: dict) -> dict
      :staticmethod:

      Update benchmark accuracy.


   .. py:method:: update_benchmark_performance(data: dict) -> dict
      :staticmethod:

      Update benchmark performance.


   .. py:method:: update_benchmark_status(data: dict) -> dict
      :staticmethod:

      Update benchmark status.


   .. py:method:: update_benchmark_duration(data: dict) -> dict
      :staticmethod:

      Update duration of benchmark.


   .. py:method:: update_paths(data: dict) -> dict
      :staticmethod:

      Update config path and output log path.


   .. py:method:: update_execution_command(data: dict) -> dict
      :staticmethod:

      Update benchmark execution command.


   .. py:method:: add_benchmark(data: dict) -> dict
      :staticmethod:

      Add benchmark to database.


   .. py:method:: add_result(data: dict) -> None
      :staticmethod:

      Add benchmark result to database.


   .. py:method:: edit_benchmark(data: dict) -> dict
      :staticmethod:

      Edit existing benchmark.


   .. py:method:: parse_benchmark_data(data: dict) -> neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface
      :staticmethod:

      Parse input data for benchmark.


   .. py:method:: parse_benchmark_edit_data(data: dict) -> neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface
      :staticmethod:

      Parse data for editing benchmark.


   .. py:method:: clean_status(status_to_clean: neural_compressor.ux.utils.consts.ExecutionStatus) -> dict
      :staticmethod:

      Clean specified optimization status.



.. py:function:: before_delete_benchmark_entry(mapper: sqlalchemy.orm.Mapper, connection: sqlite3.Connection, benchmark: neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark) -> None

   Clean up benchmark data before remove.


