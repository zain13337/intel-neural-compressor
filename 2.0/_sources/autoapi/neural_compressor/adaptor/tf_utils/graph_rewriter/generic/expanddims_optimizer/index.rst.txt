:py:mod:`neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer`
========================================================================================

.. py:module:: neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer

.. autoapi-nested-parse::

   ExpandDims Graph Rewriter.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer




.. py:class:: ExpandDimsOptimizer(model)

   Bases: :py:obj:`neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase`

   Calculate ExpandDims and remove it if its input is weight and next node is Conv2D.

   .. py:method:: do_transformation()

      Handle all ExpandDims ops whose input is weight and output is Conv2D.

      :param input_graph_def: graphdef object
      :type input_graph_def: graphdef

      :returns: optimized graph
      :rtype: [graphdef]



