:py:mod:`neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn`
======================================================================================

.. py:module:: neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn

.. autoapi-nested-parse::

   Fuse Decomposed BatchNorm Graph Rewriter.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer



Functions
~~~~~~~~~

.. autoapisummary::

   neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input
   neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map
   neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const
   neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs
   neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape
   neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count



.. py:class:: FuseDecomposedBNOptimizer(input_graph_def)

   Fuse decomposed small ops to BatchNormalization.

   .. py:method:: do_transformation()

      Fuse individual ops in batch normalization to FusedBatchNorm.

      In some models, the batch normalizatin is performed via a group of individual
      ops instead of using single FusedBatchNorm op. This function identifies a
      pattern of batch normalization subgraph which is made of multiple ops and
      transforms the graph by replacing those individual ops with FusedBatchNorm op.
      This will provide the opportunity to further fold the FusedBatchNorm with
      convolution ops to reduce the computation steps during inference.
      This function currently recognizes batch normalization patterns described
      below, this could be extended if newer patterns are seen. Also, the fusion
      is only attempted if the input graph is in NHWC format or has no format set.
      Computation function:
          (X * multiplier) + (Beta - Mean * multiplier)
          where multiplier = rsqrt (Variance + Epsilon) * Gamma
                          OR = rsqrt (Variance + Epsilon) when Gamma is 1
      Subgraph:
      {"Add"
          {{"Mul"  // mul_0
              {{"*"},  // input to apply batchnorm
              {"Mul"  // mul_1, same op is used inside the Sub block
                  {{"Rsqrt"
                      {"Add"
                          {{"Const" | "Reshape(Const)"},  // Variance
                          {"Const"}  // Epsilon
                          }
                      }
                      },  // end - Rsqrt
                      {"Const" | "Reshape(Const)"}  // Gamma
                  }
                  }  // end - mul_1
              }
          },  // end - mul_0
          {"Sub"
              {{"Const" | "Reshape(Const)"},  // Beta
              {"Mul"  // mul_3
                  {{"Const" | "Reshape(Const)"},  // Mean
                  {"Mul"  // same mul_1 op as in previous block
                      {{"Rsqrt"
                          {"Add"
                              {{"Const" | "Reshape(Const)"},  // Variance
                              {"Const"}  // Epsilon
                              }
                          }
                      },  // end - Rsqrt
                      {"Const" | "Reshape(Const)"}  // Gamma
                      }
                      }  // end - mul_1
                  }
                  }  // end - mul_3
              }
              }  // end - Sub
          }
      }  // end - Add
      Subgraph pattern when gamma value is 1 and the gamma scaling Mul is skipped
      {"Add"
          {{"Mul"  // mul_0
              {{"*"},  // input to apply batchnorma
              {"Rsqrt"  // same Rsqrt op used in Sub block
                  {"Add"
                      {{"Const" | "Reshape(Const)"},  // Variance
                      {"Const"}  // Epsilon
                      }
                  }
                  }  // end - Rsqrt
              }
              },  // end - mul_0
              {"Sub"
              {{"Const" | "Reshape(Const)"},  // Beta
              {"Mul"  // mul_1
                  {{"Const" | "Reshape(Const)"},  // Mean
                  {"Rsqrt"  // same Rsqrt op as in previous mul_0 block
                      {"Add"
                          {{"Const" | "Reshape(Const)"},  // Variance
                          {"Const"}  // Epsilon
                          }
                      }
                      }  // end - Rsqrt
                  }
              }  // end - mul_1
              }
              }  // end - Sub
          }
      }  // end - Add
      :param input_graph_def: A GraphDef containing a model.

      :returns: Modified graph with individual ops that made up of batch normalization
                fused to FusedBatchNorm.

      :raises ValueError: If the graph is badly formed with duplicate node names.



.. py:function:: node_name_from_input(node_name)

   Strips off ports and other decorations to get the underlying node name.


.. py:function:: node_from_map(node_map, name)

   Pulls a node def from a dictionary for a given name.

   :param node_map: Dictionary containing an entry indexed by name for every node.
   :param name: Identifies the node we want to find.

   :returns: NodeDef of the node with the given name.

   :raises ValueError: If the node isn't present in the dictionary.


.. py:function:: values_from_const(node_def)

   Extracts the values from a const NodeDef as a numpy ndarray.

   :param node_def: Const NodeDef that has the values we want to access.

   :returns: Numpy ndarray containing the values.

   :raises ValueError: If the node isn't a Const.


.. py:function:: valid_reshape_inputs(reshape_in0_ndef, reshape_in1_ndef)

   Check if the inputs of the Reshape are valid.


.. py:function:: bypass_reshape(input_node_map, input_name)

   Get Reshape input nodes.


.. py:function:: get_const_dim_count(node_def)

   Get the number of dimensions for a Const node.

   :param node_def: Const NodeDef.

   :returns: Number of dimensions for the Const node.


