:py:mod:`neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv`
===============================================================================

.. py:module:: neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv

.. autoapi-nested-parse::

   Quantize Conv2DBackpropInput and Conv3DBackpropInputV2.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d




.. py:class:: FuseNodeStartWithDeconv2d(**kwargs)

   Bases: :py:obj:`neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase`

   Quantize Conv2DBackpropInput and Conv3DBackpropInputV2 and apply the fusion.

   .. py:method:: apply_single_deconv2d_fusion(match_node_name)

      Apply single Conv2DBackpropInput fusion.

      Dequantize + Conv2DBackpropInput + QuantizeV2


   .. py:method:: apply_deconv2d_biasadd_fusion(match_node_name)

      Apply Conv2DBackpropInput BiasAdd fusion.

      Dequantize + Conv2DBackpropInput + Biasadd + QuantizeV2


   .. py:method:: apply_single_deconv3d_fusion(match_node_name)

      Apply single Conv3DBackpropInputV2 fusion.

      Dequantize + Conv3DBackpropInputV2 + QuantizeV2


   .. py:method:: apply_deconv3d_biasadd_fusion(match_node_name)

      Apply the Conv3DBackpropInputV2 BiasAdd fusion.

      Dequantize + Conv3DBackpropInputV2 + Biasadd + QuantizeV2


   .. py:method:: get_longest_fuse()

      Get the longest fusion pattern.


   .. py:method:: apply_the_transform()

      Quantize Conv2DBackpropInput and Conv3DBackpropInputV2 and apply the fusion.



