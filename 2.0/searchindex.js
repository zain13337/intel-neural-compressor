Search.setIndex({"docnames": ["CODE_OF_CONDUCT", "CONTRIBUTING", "FX", "NAS", "SECURITY", "Welcome", "adaptor", "api-documentation/adaptor", "api-documentation/adaptor/onnxrt", "api-documentation/adaptor/torch_utils", "api-documentation/adaptor/torch_utils/bf16_convert", "api-documentation/adaptor/torch_utils/hawq_metric", "api-documentation/adaptor/torch_utils/onnx", "api-documentation/adaptor/torch_utils/symbolic_trace", "api-documentation/adaptor/torch_utils/util", "api-documentation/algorithm", "api-documentation/apis", "api-documentation/basic_api", "api-documentation/basic_api/benchmark", "api-documentation/basic_api/config", "api-documentation/basic_api/mix_precision", "api-documentation/basic_api/objective", "api-documentation/basic_api/quantization", "api-documentation/basic_api/training", "api-documentation/common", "api-documentation/common/benchmark", "api-documentation/common/bleu", "api-documentation/common/criterion", "api-documentation/common/data", "api-documentation/common/data/dataloader", "api-documentation/common/data/datasets", "api-documentation/common/data/transforms", "api-documentation/common/metric", "api-documentation/common/model", "api-documentation/common/optimizer", "api-documentation/component", "api-documentation/component/Distillation", "api-documentation/component/MixedPrecision", "api-documentation/component/ModelConversion", "api-documentation/component/Nas", "api-documentation/component/Pruning", "api-documentation/component/Quantization", "api-documentation/component/Scheduler", "api-documentation/contrib", "api-documentation/model", "api-documentation/pythonic", "api-documentation/strategy", "api-documentation/strategy/strategy", "api-documentation/utils", "autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruner/criteria/index", "autoapi/neural_compressor/pruner/index", "autoapi/neural_compressor/pruner/logger/index", "autoapi/neural_compressor/pruner/patterns/index", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/pruner/pruner_legacy/index", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index", "autoapi/neural_compressor/pruner/pruners/index", "autoapi/neural_compressor/pruner/pruning/index", "autoapi/neural_compressor/pruner/regs/index", "autoapi/neural_compressor/pruner/schedulers/index", "autoapi/neural_compressor/pruner/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "bench", "benchmark", "dataloader", "dataset", "design", "distillation", "distillation_quantization", "distributed", "examples_readme", "export", "faq", "framework_yaml", "incompatible_changes", "index", "infrastructure", "installation_guide", "legal_information", "metric", "mixed_precision", "model", "neural_coder/README", "neural_coder/docs/AWSSageMakerSupport", "neural_coder/docs/BigDLNanoSupport", "neural_coder/docs/IntelCPU_PerformanceSetting", "neural_coder/docs/PythonAPI", "neural_coder/docs/PythonLauncher", "neural_coder/docs/Quantization", "neural_coder/docs/SupportMatrix", "neural_coder/docs/release_notes/v0.4", "neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "neural_coder/extensions/neural_compressor_ext_lab/README", "neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "neural_coder/extensions/neural_compressor_ext_vscode/README", "neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "objective", "orchestration", "platform_configuration", "pruning", "pruning_details", "publication_list", "pythonic_style", "quantization", "quantization_mixed_precision", "releases_info", "sigopt_strategy", "tensorboard", "transform", "tuning_strategies", "user_yaml", "validated_model_list"], "filenames": ["CODE_OF_CONDUCT.md", "CONTRIBUTING.md", "FX.md", "NAS.md", "SECURITY.md", "Welcome.md", "adaptor.md", "api-documentation/adaptor.rst", "api-documentation/adaptor/onnxrt.rst", "api-documentation/adaptor/torch_utils.rst", "api-documentation/adaptor/torch_utils/bf16_convert.rst", "api-documentation/adaptor/torch_utils/hawq_metric.rst", "api-documentation/adaptor/torch_utils/onnx.rst", "api-documentation/adaptor/torch_utils/symbolic_trace.rst", "api-documentation/adaptor/torch_utils/util.rst", "api-documentation/algorithm.rst", "api-documentation/apis.rst", "api-documentation/basic_api.rst", "api-documentation/basic_api/benchmark.rst", "api-documentation/basic_api/config.rst", "api-documentation/basic_api/mix_precision.rst", "api-documentation/basic_api/objective.rst", "api-documentation/basic_api/quantization.rst", "api-documentation/basic_api/training.rst", "api-documentation/common.rst", "api-documentation/common/benchmark.rst", "api-documentation/common/bleu.rst", "api-documentation/common/criterion.rst", "api-documentation/common/data.rst", "api-documentation/common/data/dataloader.rst", "api-documentation/common/data/datasets.rst", "api-documentation/common/data/transforms.rst", "api-documentation/common/metric.rst", "api-documentation/common/model.rst", "api-documentation/common/optimizer.rst", "api-documentation/component.rst", "api-documentation/component/Distillation.rst", "api-documentation/component/MixedPrecision.rst", "api-documentation/component/ModelConversion.rst", "api-documentation/component/Nas.rst", "api-documentation/component/Pruning.rst", "api-documentation/component/Quantization.rst", "api-documentation/component/Scheduler.rst", "api-documentation/contrib.rst", "api-documentation/model.rst", "api-documentation/pythonic.rst", "api-documentation/strategy.rst", "api-documentation/strategy/strategy.rst", "api-documentation/utils.rst", "autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruner/criteria/index.rst", "autoapi/neural_compressor/pruner/index.rst", "autoapi/neural_compressor/pruner/logger/index.rst", "autoapi/neural_compressor/pruner/patterns/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/pruner/pruners/index.rst", "autoapi/neural_compressor/pruner/pruning/index.rst", "autoapi/neural_compressor/pruner/regs/index.rst", "autoapi/neural_compressor/pruner/schedulers/index.rst", "autoapi/neural_compressor/pruner/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "bench.md", "benchmark.md", "dataloader.md", "dataset.md", "design.md", "distillation.md", "distillation_quantization.md", "distributed.md", "examples_readme.md", "export.md", "faq.md", "framework_yaml.md", "incompatible_changes.md", "index.rst", "infrastructure.md", "installation_guide.md", "legal_information.md", "metric.md", "mixed_precision.md", "model.md", "neural_coder/README.md", "neural_coder/docs/AWSSageMakerSupport.md", "neural_coder/docs/BigDLNanoSupport.md", "neural_coder/docs/IntelCPU_PerformanceSetting.md", "neural_coder/docs/PythonAPI.md", "neural_coder/docs/PythonLauncher.md", "neural_coder/docs/Quantization.md", "neural_coder/docs/SupportMatrix.md", "neural_coder/docs/release_notes/v0.4.md", "neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "neural_coder/extensions/neural_compressor_ext_lab/README.md", "neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "neural_coder/extensions/neural_compressor_ext_vscode/README.md", "neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "objective.md", "orchestration.md", "platform_configuration.md", "pruning.md", "pruning_details.md", "publication_list.md", "pythonic_style.md", "quantization.md", "quantization_mixed_precision.md", "releases_info.md", "sigopt_strategy.md", "tensorboard.md", "transform.md", "tuning_strategies.md", "user_yaml.md", "validated_model_list.md"], "titles": ["Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "Bf16 Convert", "Hawq Metric", "Onnx", "Symbolic Trace", "Util", "Algorithm", "APIs", "User facing APIs", "Benchmark", "Config", "Mix Precision", "Objective", "Quantization", "Training", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Contrib", "Model", "Pythonic", "Strategy", "Strategies", "Utils", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Incompatible changes between v1.2 and v1.1", "Intel\u00ae Neural Compressor Documentation", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Pruning details", "Full Publications/Events (52)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models"], "terms": {"In": [0, 2, 3, 6, 54, 99, 110, 111, 154, 214, 242, 252, 275, 279, 297, 310, 312, 321, 340, 347, 349, 361, 561, 563, 564, 566, 568, 578, 588, 591, 592, 595, 600, 601, 603, 604, 607, 608, 610, 611, 612, 613], "interest": [0, 5, 611], "foster": 0, "an": [0, 2, 3, 5, 6, 26, 54, 62, 86, 105, 110, 111, 113, 154, 178, 179, 186, 190, 194, 195, 208, 213, 217, 221, 226, 232, 236, 241, 242, 246, 251, 255, 259, 264, 268, 275, 276, 279, 280, 281, 288, 295, 298, 299, 300, 316, 317, 318, 321, 322, 323, 326, 333, 340, 347, 350, 355, 442, 447, 523, 560, 563, 564, 565, 570, 578, 579, 581, 585, 586, 589, 598, 600, 604, 605, 610, 611, 612, 613], "open": [0, 5, 236, 275, 317, 526, 560, 561, 570, 571, 593, 596, 599, 605], "welcom": [0, 1, 574], "environ": [0, 233, 317, 481, 513, 514, 522, 546, 561, 562, 576, 591, 595, 598, 613], "we": [0, 2, 5, 6, 26, 54, 87, 110, 111, 113, 117, 130, 149, 178, 179, 194, 214, 233, 235, 236, 252, 276, 279, 286, 297, 298, 318, 321, 358, 374, 563, 568, 570, 572, 578, 585, 589, 593, 596, 598, 599, 600, 601, 603, 604, 606, 607, 610, 611, 613], "maintain": [0, 1, 5, 283, 325, 580, 581, 593, 596, 603, 609], "make": [0, 1, 6, 87, 111, 178, 179, 194, 213, 251, 310, 312, 314, 340, 347, 350, 378, 397, 430, 462, 561, 562, 563, 572, 578, 586, 591, 595, 598, 607, 608, 610, 613], "particip": 0, "project": [0, 1, 232, 268, 297, 398, 401, 406, 408, 409, 412, 419, 420, 424, 425, 426, 427, 428, 429, 430, 454, 574, 605, 610, 613], "commun": [0, 317, 514, 548, 549, 550, 561], "harass": 0, "free": [0, 203, 204, 352, 578, 587, 592, 600, 610], "experi": [0, 203, 581, 610, 613], "everyon": 0, "regardless": [0, 279, 321], "ag": [0, 290], "bodi": 0, "size": [0, 142, 149, 205, 207, 208, 214, 217, 221, 223, 226, 228, 232, 243, 245, 246, 252, 255, 259, 261, 264, 265, 268, 279, 288, 291, 297, 310, 321, 333, 336, 340, 378, 398, 408, 409, 531, 533, 534, 561, 563, 564, 568, 571, 598, 599, 600, 603, 604, 612, 614, 615], "disabl": [0, 184, 521, 550, 598], "ethnic": 0, "sex": [0, 197], "characterist": 0, "gender": 0, "ident": [0, 117, 122, 123, 149, 178, 310, 340, 566], "express": [0, 90, 276, 318], "level": [0, 60, 63, 356, 363, 372, 375, 524, 546, 613], "educ": 0, "socio": 0, "econom": 0, "statu": [0, 149, 398, 409, 412, 417, 419, 425, 427, 428, 516, 529, 545, 558, 563, 600], "nation": [0, 217, 255], "person": [0, 197, 605], "appear": [0, 561, 592, 598], "race": 0, "religion": 0, "sexual": 0, "orient": 0, "exampl": [0, 1, 5, 62, 154, 186, 190, 215, 216, 217, 228, 231, 232, 253, 254, 255, 265, 267, 268, 279, 280, 281, 283, 289, 313, 321, 322, 323, 325, 335, 348, 368, 406, 424, 430, 454, 478, 479, 480, 481, 526, 533, 561, 573, 574, 575, 581, 584, 585, 586, 589, 608, 609, 612, 613], "behavior": [0, 1, 6, 279, 321, 572, 580, 611, 614], "contribut": [0, 5], "creat": [0, 3, 6, 49, 50, 51, 52, 54, 62, 90, 149, 161, 178, 205, 215, 217, 235, 236, 243, 253, 255, 269, 275, 279, 287, 288, 298, 299, 300, 316, 321, 355, 363, 364, 367, 371, 397, 414, 424, 425, 429, 430, 511, 532, 545, 558, 564, 580, 591, 593, 595, 596, 599, 607, 610, 611, 613], "posit": [0, 122, 149, 232, 268, 297, 340, 561, 578, 581], "includ": [0, 1, 5, 6, 60, 91, 92, 215, 217, 221, 224, 225, 226, 229, 232, 234, 253, 255, 259, 262, 263, 264, 266, 268, 274, 275, 279, 284, 297, 310, 314, 315, 321, 337, 340, 349, 350, 363, 364, 367, 561, 564, 576, 577, 578, 581, 584, 587, 592, 603, 604, 607, 608, 611, 613], "us": [0, 1, 2, 3, 5, 6, 26, 55, 57, 60, 62, 63, 81, 87, 88, 90, 91, 92, 110, 111, 113, 152, 154, 155, 161, 186, 190, 195, 196, 197, 203, 204, 213, 214, 215, 216, 217, 218, 219, 222, 226, 229, 231, 232, 233, 234, 239, 251, 252, 253, 254, 255, 256, 257, 260, 264, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 279, 283, 284, 285, 286, 289, 291, 297, 298, 300, 302, 305, 307, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 325, 336, 337, 340, 346, 347, 350, 355, 357, 358, 360, 361, 362, 363, 369, 370, 371, 372, 373, 374, 378, 425, 430, 435, 436, 440, 442, 454, 461, 463, 488, 492, 516, 533, 535, 545, 546, 561, 562, 563, 564, 566, 567, 568, 570, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 589, 591, 593, 595, 596, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615], "inclus": 0, "languag": [0, 26, 276, 297, 318, 605], "Being": 0, "respect": [0, 567, 572, 603, 604, 614], "differ": [0, 2, 3, 5, 26, 179, 191, 193, 194, 208, 217, 232, 234, 246, 255, 268, 274, 275, 276, 282, 283, 290, 298, 299, 301, 304, 310, 315, 316, 318, 324, 325, 340, 373, 561, 563, 564, 566, 568, 569, 570, 573, 575, 578, 580, 591, 595, 600, 603, 607, 611, 612, 613], "viewpoint": 0, "gracefulli": 0, "accept": [0, 54, 336, 561, 562], "construct": [0, 215, 218, 219, 222, 226, 229, 230, 235, 236, 237, 238, 240, 253, 256, 257, 260, 324, 325, 328, 330, 334, 371, 564, 568, 604, 613], "critic": [0, 5], "focus": [0, 6], "what": [0, 190, 195, 213, 251, 317, 347, 368, 561], "i": [0, 1, 2, 3, 5, 6, 7, 9, 15, 16, 17, 24, 26, 28, 35, 43, 44, 45, 46, 48, 54, 55, 57, 60, 62, 63, 64, 87, 88, 90, 91, 92, 96, 97, 100, 103, 105, 107, 110, 111, 113, 124, 125, 128, 129, 135, 136, 137, 146, 148, 149, 154, 161, 171, 178, 179, 180, 184, 186, 189, 190, 194, 195, 200, 203, 204, 205, 206, 209, 213, 214, 215, 216, 217, 218, 219, 222, 224, 225, 226, 228, 232, 233, 235, 236, 239, 241, 242, 243, 251, 252, 253, 254, 255, 256, 257, 260, 262, 263, 264, 265, 268, 275, 276, 279, 281, 282, 283, 285, 288, 291, 295, 297, 300, 302, 307, 311, 312, 313, 316, 318, 321, 323, 324, 325, 326, 333, 336, 337, 340, 341, 347, 348, 349, 351, 352, 355, 356, 361, 362, 363, 368, 377, 378, 397, 430, 442, 462, 465, 467, 468, 470, 472, 473, 474, 475, 481, 519, 521, 523, 525, 526, 531, 533, 535, 541, 546, 548, 561, 562, 563, 564, 566, 568, 570, 572, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 589, 591, 592, 593, 595, 596, 598, 599, 600, 601, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614], "best": [0, 3, 5, 88, 204, 232, 268, 269, 274, 275, 286, 287, 298, 299, 315, 336, 360, 363, 576, 581, 587, 598, 600, 607, 612, 613], "show": [0, 347, 561, 566, 568, 584, 599, 603, 613], "empathi": 0, "toward": [0, 566], "other": [0, 1, 2, 88, 110, 111, 113, 178, 214, 252, 281, 316, 323, 334, 374, 523, 527, 550, 561, 572, 575, 576, 577, 580, 600, 602, 603, 607, 612, 613, 615], "member": [0, 6, 275, 284], "unaccept": 0, "The": [0, 2, 3, 6, 7, 9, 15, 16, 17, 24, 26, 28, 35, 43, 44, 45, 46, 48, 55, 57, 60, 63, 81, 88, 90, 96, 111, 113, 117, 122, 135, 136, 137, 149, 152, 154, 158, 160, 184, 186, 190, 191, 193, 195, 196, 197, 203, 204, 205, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 229, 232, 234, 236, 237, 239, 242, 243, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 266, 268, 269, 274, 275, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 297, 298, 299, 300, 301, 302, 305, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 334, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 367, 368, 369, 371, 372, 373, 374, 377, 378, 398, 399, 401, 404, 408, 409, 412, 413, 415, 417, 418, 425, 430, 433, 435, 436, 437, 438, 439, 440, 441, 454, 461, 462, 514, 561, 562, 563, 564, 566, 567, 568, 570, 572, 573, 575, 576, 578, 579, 580, 583, 584, 586, 589, 591, 592, 593, 595, 596, 598, 599, 600, 601, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614], "imageri": 0, "unwelcom": 0, "attent": [0, 56, 65, 77, 215, 253, 295, 297, 566], "advanc": [0, 5, 186, 542, 607, 614], "troll": 0, "insult": 0, "derogatori": 0, "comment": [0, 564, 578, 612], "polit": 0, "attack": 0, "public": [0, 149, 593, 596], "privat": [0, 275, 284], "publish": [0, 577, 579, 599], "inform": [0, 1, 4, 5, 6, 7, 9, 15, 16, 17, 24, 28, 35, 43, 44, 45, 46, 48, 62, 90, 152, 186, 203, 204, 235, 236, 237, 238, 279, 310, 312, 313, 314, 316, 321, 324, 325, 333, 337, 340, 347, 348, 349, 350, 363, 395, 433, 462, 520, 521, 526, 527, 566, 570, 572, 574, 580, 593, 596, 599, 603, 604, 608, 609, 611, 614, 615], "physic": [0, 233, 562], "electron": 0, "address": [0, 217, 255, 550, 561, 579, 605], "without": [0, 91, 92, 134, 149, 184, 232, 268, 279, 312, 321, 347, 533, 561, 563, 566, 568, 578, 589, 603, 605, 606, 607, 613], "explicit": [0, 178], "permiss": 0, "which": [0, 2, 3, 5, 6, 26, 57, 62, 63, 88, 90, 98, 110, 111, 123, 126, 148, 149, 154, 178, 186, 195, 203, 215, 216, 217, 228, 233, 253, 254, 255, 265, 275, 276, 279, 281, 289, 291, 299, 300, 302, 303, 304, 305, 310, 311, 312, 313, 314, 317, 318, 321, 323, 330, 333, 336, 337, 340, 341, 342, 344, 345, 346, 347, 350, 353, 355, 363, 374, 378, 531, 561, 563, 564, 566, 568, 572, 575, 578, 579, 580, 582, 586, 589, 592, 598, 599, 601, 603, 604, 606, 607, 608, 609, 611, 612, 613, 614], "could": [0, 2, 90, 110, 111, 203, 204, 217, 255, 316, 326, 340, 348, 352, 363, 567, 601, 603, 604, 607], "reason": [0, 124, 235, 236, 563, 611, 613], "consid": [0, 184, 283, 325, 566, 599, 613], "inappropri": 0, "profession": 0, "set": [0, 3, 5, 55, 57, 60, 62, 63, 64, 88, 89, 100, 110, 111, 140, 149, 154, 178, 184, 190, 191, 193, 195, 197, 203, 204, 205, 207, 215, 217, 220, 232, 233, 239, 243, 245, 253, 255, 258, 268, 269, 272, 274, 275, 279, 284, 285, 286, 288, 295, 297, 298, 302, 307, 311, 316, 317, 321, 326, 334, 336, 340, 347, 351, 352, 363, 378, 380, 420, 421, 422, 425, 442, 488, 492, 500, 521, 525, 531, 532, 534, 535, 536, 541, 545, 546, 550, 561, 562, 564, 568, 572, 573, 575, 578, 579, 581, 583, 585, 599, 603, 606, 607, 610, 613, 614], "ar": [0, 1, 2, 3, 5, 6, 26, 55, 57, 64, 88, 105, 110, 111, 117, 161, 171, 200, 215, 232, 242, 253, 268, 275, 276, 279, 283, 289, 291, 295, 297, 300, 302, 307, 310, 311, 312, 313, 316, 317, 318, 321, 325, 340, 347, 348, 353, 355, 371, 377, 378, 462, 465, 467, 474, 518, 527, 561, 563, 564, 566, 567, 568, 569, 570, 572, 573, 575, 577, 578, 579, 581, 584, 586, 589, 592, 598, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614], "clarifi": 0, "expect": [0, 1, 90, 161, 217, 255, 355, 381, 503, 526, 571, 598, 607, 613], "take": [0, 2, 3, 55, 57, 90, 195, 203, 204, 208, 232, 236, 237, 246, 268, 310, 317, 324, 325, 326, 340, 352, 355, 563, 566, 572, 598, 603, 607, 608, 612, 613, 614], "appropri": 0, "fair": 0, "correct": [0, 179, 194, 279, 280, 281, 283, 311, 321, 322, 323, 325, 351, 483, 561, 581], "action": [0, 593, 596], "ani": [0, 1, 111, 113, 161, 178, 186, 269, 275, 279, 281, 297, 321, 323, 374, 380, 381, 383, 385, 387, 388, 389, 390, 391, 392, 393, 395, 396, 398, 399, 401, 408, 409, 410, 411, 412, 413, 415, 418, 420, 421, 431, 433, 438, 439, 442, 444, 450, 459, 462, 465, 469, 472, 473, 474, 476, 479, 481, 484, 488, 492, 494, 497, 500, 503, 506, 511, 512, 518, 519, 521, 523, 525, 526, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 549, 550, 557, 558, 561, 563, 568, 581, 586, 599, 610], "instanc": [0, 2, 6, 111, 152, 154, 155, 161, 203, 204, 215, 233, 253, 275, 280, 281, 283, 286, 298, 299, 322, 323, 325, 326, 341, 342, 344, 345, 346, 352, 355, 363, 368, 398, 437, 441, 465, 474, 541, 561, 562, 583, 589, 614, 615], "have": [0, 1, 26, 117, 126, 149, 184, 195, 213, 231, 235, 236, 251, 267, 276, 279, 283, 290, 310, 312, 317, 318, 321, 325, 340, 347, 561, 563, 564, 568, 572, 577, 578, 579, 581, 598, 600, 603, 604, 607, 613], "right": [0, 2, 228, 265, 279, 321, 531, 561, 598, 612], "remov": [0, 1, 66, 86, 87, 90, 99, 100, 103, 105, 117, 122, 123, 126, 127, 128, 140, 142, 149, 154, 171, 178, 186, 234, 272, 281, 323, 333, 335, 398, 401, 408, 409, 412, 414, 415, 417, 419, 465, 526, 527, 534, 591, 595, 603, 604, 611], "edit": [0, 419, 425, 427, 428, 431], "reject": 0, "commit": [0, 1, 374], "wiki": 0, "issu": [0, 1, 4, 561, 576, 607, 611], "align": [0, 232, 268, 313, 612], "thi": [0, 1, 2, 3, 5, 6, 26, 54, 57, 86, 88, 90, 99, 105, 110, 111, 124, 129, 130, 146, 149, 154, 161, 171, 178, 179, 183, 186, 190, 194, 195, 203, 204, 214, 215, 216, 217, 218, 219, 220, 222, 231, 232, 235, 236, 241, 242, 252, 253, 254, 255, 256, 257, 258, 260, 267, 268, 275, 276, 279, 280, 281, 283, 288, 293, 294, 301, 302, 307, 310, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 325, 326, 336, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 352, 355, 360, 377, 378, 561, 563, 564, 566, 568, 572, 575, 577, 578, 579, 580, 581, 583, 584, 586, 587, 589, 591, 593, 595, 596, 597, 598, 599, 603, 604, 607, 608, 609, 610, 611, 612, 613], "ban": 0, "temporarili": 0, "perman": 0, "thei": [0, 161, 195, 233, 275, 297, 317, 340, 374, 566, 572, 578, 586, 600, 603, 604], "deem": 0, "threaten": 0, "offens": 0, "harm": 0, "appli": [0, 110, 118, 133, 134, 138, 140, 142, 143, 144, 152, 162, 163, 164, 165, 166, 167, 170, 172, 173, 174, 175, 176, 179, 183, 242, 275, 277, 310, 312, 319, 335, 340, 344, 347, 561, 581, 583, 589, 598, 601, 603, 604, 607, 608, 610, 613, 614], "both": [0, 3, 6, 64, 184, 186, 297, 299, 301, 567, 576, 582, 606, 607, 613], "within": [0, 2, 274, 275, 279, 315, 321, 334, 347, 355, 579, 591, 595, 598, 605], "space": [0, 1, 3, 6, 195, 203, 204, 274, 275, 281, 286, 288, 290, 298, 299, 300, 301, 315, 317, 323, 326, 336, 347, 352, 353, 355, 356, 357, 358, 360, 362, 363, 366, 533, 603, 607, 614], "when": [0, 3, 26, 87, 96, 107, 110, 113, 161, 184, 195, 200, 215, 216, 224, 225, 226, 232, 253, 254, 262, 263, 264, 268, 276, 277, 289, 297, 310, 311, 312, 317, 318, 319, 340, 341, 347, 351, 352, 531, 533, 546, 550, 561, 563, 564, 589, 591, 592, 595, 599, 603, 604, 607, 612, 613], "individu": [0, 110, 111, 113, 287, 288, 298, 310, 340], "repres": [0, 87, 217, 222, 255, 260, 279, 281, 283, 321, 323, 325, 340, 347, 348, 349, 350, 351, 400, 402, 403, 405, 407, 410, 411, 414, 416, 531, 564, 570, 607, 613], "its": [0, 87, 90, 103, 140, 149, 152, 161, 186, 211, 217, 231, 232, 249, 255, 267, 268, 270, 271, 277, 278, 282, 283, 312, 316, 319, 320, 324, 325, 340, 347, 355, 356, 360, 561, 564, 566, 577, 578, 579, 589, 591, 595, 598, 599, 602, 603, 604, 610, 612, 613], "offici": [0, 184, 276, 280, 281, 318, 322, 323, 561, 578], "e": [0, 5, 60, 63, 89, 113, 288, 290, 316, 340, 523, 525, 550, 566, 581, 586, 587, 591, 595, 603, 613], "mail": 0, "post": [0, 6, 55, 60, 63, 141, 142, 200, 203, 204, 232, 242, 268, 272, 275, 316, 317, 352, 545, 567, 568, 570, 575, 576, 581, 587, 598, 611, 613], "via": [0, 110, 111, 161, 274, 275, 302, 307, 315, 550, 568, 575, 581, 598], "social": 0, "media": 0, "account": [0, 288, 610, 613], "act": [0, 213, 251], "appoint": 0, "onlin": [0, 5, 54, 610], "offlin": [0, 54, 378, 607], "event": [0, 611], "represent": [0, 2, 87, 99, 288, 398, 399, 401, 404, 408, 409, 412, 413, 415, 417, 418, 544, 567, 604, 607], "mai": [0, 1, 149, 178, 184, 336, 341, 342, 344, 345, 346, 563, 571, 577, 579, 591, 595, 602, 605, 607, 613], "further": [0, 110, 111, 113, 579, 580, 581, 583, 592, 598], "defin": [0, 3, 6, 57, 60, 63, 88, 89, 90, 130, 136, 149, 178, 186, 195, 203, 204, 234, 275, 286, 287, 290, 298, 299, 300, 301, 302, 307, 310, 311, 312, 313, 314, 317, 326, 334, 340, 347, 348, 349, 350, 352, 355, 368, 377, 456, 457, 458, 545, 561, 563, 564, 566, 572, 575, 578, 599, 601, 603, 604, 607, 610, 611, 613, 614], "abus": 0, "otherwis": [0, 204, 217, 232, 255, 268, 363, 564, 593, 596, 606, 612], "report": [0, 1, 561, 610], "contact": [0, 609, 610], "inc": [0, 5, 88, 232, 268, 374, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 541, 581, 588, 598, 605, 606, 609], "intel": [0, 1, 3, 4, 6, 88, 236, 239, 270, 275, 282, 283, 310, 313, 317, 324, 325, 340, 348, 359, 364, 374, 513, 526, 560, 563, 564, 565, 566, 567, 569, 570, 572, 576, 577, 579, 580, 581, 586, 588, 589, 600, 601, 602, 603, 605, 607, 608, 609, 611, 613, 614], "com": [0, 5, 186, 215, 253, 276, 277, 280, 281, 310, 313, 318, 319, 322, 323, 340, 348, 526, 561, 564, 576, 577, 581, 587, 609, 610, 615], "all": [0, 5, 6, 55, 57, 62, 63, 64, 81, 88, 90, 103, 106, 128, 129, 141, 161, 170, 175, 191, 193, 205, 206, 209, 213, 217, 221, 224, 225, 226, 229, 232, 233, 234, 239, 242, 243, 251, 255, 259, 262, 263, 264, 266, 268, 272, 275, 276, 279, 281, 282, 283, 293, 294, 295, 297, 300, 302, 303, 304, 305, 306, 307, 310, 313, 316, 318, 321, 323, 324, 325, 327, 328, 333, 336, 340, 346, 347, 348, 353, 355, 356, 357, 363, 378, 382, 394, 397, 406, 423, 425, 430, 435, 436, 449, 451, 454, 455, 461, 462, 465, 467, 474, 480, 487, 489, 493, 494, 496, 499, 505, 510, 514, 523, 527, 550, 561, 563, 564, 568, 572, 576, 581, 589, 592, 593, 596, 597, 598, 599, 601, 602, 603, 604, 605, 607, 608, 612, 613], "complaint": 0, "review": [0, 1], "investig": 0, "result": [0, 3, 5, 26, 55, 57, 60, 63, 87, 88, 90, 184, 186, 190, 203, 228, 232, 233, 234, 265, 268, 275, 276, 279, 280, 281, 282, 283, 288, 290, 299, 318, 321, 322, 323, 324, 325, 336, 358, 363, 379, 381, 398, 399, 412, 413, 415, 419, 425, 428, 431, 508, 549, 552, 561, 563, 566, 568, 575, 577, 578, 586, 587, 598, 599, 600, 603, 605, 607, 610, 611, 612, 613, 615], "necessari": [0, 3, 87, 269, 275, 580, 599, 610, 613], "circumst": [0, 606], "team": [0, 281, 323, 608], "oblig": 0, "confidenti": [0, 561], "regard": [0, 608], "incid": 0, "detail": [0, 1, 5, 57, 90, 232, 268, 295, 398, 401, 408, 409, 412, 414, 415, 417, 419, 420, 422, 425, 426, 427, 428, 429, 433, 438, 501, 506, 520, 533, 572, 573, 578, 579, 581, 589, 598, 603, 609, 610, 611, 613, 615], "specif": [0, 3, 6, 57, 60, 63, 88, 89, 154, 155, 195, 206, 209, 215, 216, 217, 218, 222, 224, 225, 226, 233, 239, 253, 254, 255, 256, 260, 262, 263, 264, 275, 276, 279, 285, 286, 297, 298, 299, 317, 318, 321, 335, 341, 342, 344, 345, 346, 351, 374, 409, 420, 421, 422, 425, 433, 448, 561, 566, 572, 573, 578, 579, 580, 581, 585, 586, 588, 592, 598, 600, 603, 606, 613, 614], "polici": [0, 5, 360, 602, 614], "separ": [0, 231, 267, 549, 561, 573, 577, 601, 606], "who": [0, 356, 613], "do": [0, 26, 55, 57, 60, 63, 66, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 88, 91, 92, 120, 122, 146, 214, 215, 252, 253, 269, 270, 272, 275, 276, 279, 313, 316, 318, 321, 336, 348, 356, 377, 561, 564, 568, 572, 575, 576, 578, 593, 596, 603, 608, 609, 613], "follow": [0, 1, 2, 3, 6, 16, 64, 111, 113, 122, 129, 132, 135, 136, 137, 138, 149, 217, 255, 275, 276, 279, 297, 302, 307, 318, 321, 353, 561, 563, 564, 566, 568, 570, 572, 576, 577, 578, 579, 580, 581, 582, 583, 591, 595, 601, 603, 604, 606, 607, 611, 613], "good": [0, 607, 613], "faith": 0, "face": [0, 5, 16, 374, 581, 585, 605, 609], "temporari": [0, 378], "repercuss": 0, "determin": [0, 2, 337, 340, 347, 373, 546, 604], "": [0, 3, 60, 87, 89, 90, 99, 105, 113, 122, 149, 161, 178, 179, 180, 184, 194, 196, 197, 200, 205, 214, 217, 231, 232, 233, 235, 236, 237, 243, 252, 255, 267, 268, 275, 281, 289, 291, 297, 310, 312, 313, 317, 323, 324, 325, 326, 330, 340, 347, 352, 356, 363, 378, 431, 462, 518, 519, 566, 568, 572, 575, 576, 579, 586, 589, 591, 595, 598, 601, 602, 603, 604, 605, 606, 607, 609, 610, 614], "leadership": 0, "adapt": [0, 5, 57, 60, 63, 88, 89, 564, 589], "from": [0, 2, 3, 5, 6, 26, 55, 57, 60, 62, 64, 87, 88, 90, 104, 110, 111, 112, 113, 149, 152, 154, 161, 171, 178, 180, 184, 190, 203, 204, 205, 208, 212, 215, 216, 217, 218, 219, 220, 222, 227, 228, 234, 235, 236, 242, 243, 246, 250, 253, 254, 255, 256, 257, 258, 260, 265, 269, 271, 272, 273, 275, 276, 279, 280, 281, 285, 288, 289, 290, 291, 295, 297, 300, 302, 307, 310, 311, 312, 313, 314, 316, 318, 321, 322, 323, 332, 333, 334, 336, 337, 340, 347, 348, 349, 350, 351, 355, 362, 363, 364, 367, 371, 374, 377, 378, 396, 398, 401, 402, 403, 405, 408, 409, 410, 411, 412, 414, 415, 417, 419, 420, 422, 425, 426, 427, 428, 429, 431, 442, 447, 465, 468, 477, 478, 479, 481, 506, 511, 525, 526, 531, 533, 534, 535, 541, 550, 552, 557, 558, 562, 563, 564, 566, 567, 568, 569, 570, 571, 575, 578, 579, 580, 581, 585, 586, 587, 589, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], "version": [0, 2, 5, 6, 57, 60, 62, 63, 86, 89, 90, 96, 190, 203, 270, 272, 297, 317, 335, 355, 374, 481, 516, 521, 533, 561, 572, 576, 577, 591, 593, 595, 596, 602, 605, 613], "1": [0, 2, 5, 6, 55, 57, 60, 63, 86, 87, 88, 90, 91, 97, 110, 117, 122, 133, 148, 152, 154, 182, 184, 190, 192, 194, 195, 200, 205, 207, 210, 211, 212, 214, 215, 216, 218, 219, 222, 223, 228, 232, 233, 234, 235, 236, 243, 245, 248, 249, 250, 252, 253, 254, 256, 257, 260, 261, 265, 268, 274, 275, 279, 280, 281, 283, 288, 291, 295, 297, 302, 307, 310, 312, 315, 316, 317, 321, 322, 323, 325, 335, 340, 347, 352, 353, 361, 371, 381, 503, 511, 563, 564, 566, 570, 572, 578, 579, 582, 584, 600, 601, 602, 603, 604, 606, 607, 609, 610, 611, 612, 613, 614], "4": [0, 5, 6, 26, 90, 96, 122, 224, 225, 226, 227, 228, 229, 232, 262, 263, 264, 265, 266, 268, 276, 277, 279, 318, 319, 321, 340, 356, 523, 561, 562, 568, 571, 572, 575, 576, 578, 602, 603, 612, 613, 615], "For": [0, 2, 4, 6, 154, 217, 231, 232, 242, 255, 267, 268, 275, 279, 280, 281, 283, 288, 310, 313, 321, 322, 323, 325, 326, 340, 348, 352, 356, 523, 561, 567, 568, 570, 572, 575, 581, 583, 584, 586, 589, 603, 608, 611, 613, 614, 615], "answer": [0, 232, 268, 280, 281, 322, 323, 612, 615], "common": [0, 122, 178, 230, 275, 285, 291, 299, 300, 301, 310, 316, 317, 340, 371, 526, 527, 533, 564, 568, 570, 573, 576, 607], "question": [0, 1, 6, 232, 268, 280, 281, 322, 323, 576, 581, 612, 615], "about": [0, 333, 337, 433, 462, 518, 520, 521, 526, 527, 561, 563, 608, 615], "see": [0, 2, 4, 232, 268, 276, 279, 295, 318, 321, 561, 577, 591, 592, 595, 598, 599, 611, 613, 615], "faq": [0, 5], "page": [0, 1], "If": [1, 2, 105, 110, 111, 113, 117, 124, 149, 203, 204, 217, 232, 255, 268, 279, 291, 310, 311, 312, 321, 326, 352, 353, 561, 562, 564, 568, 570, 576, 577, 578, 579, 584, 592, 593, 596, 598, 600, 607, 610, 611, 612, 613], "you": [1, 2, 5, 213, 215, 251, 253, 279, 295, 297, 312, 321, 561, 564, 568, 570, 576, 577, 578, 581, 583, 584, 586, 591, 595, 598, 599, 603, 609, 610, 611], "improv": [1, 347, 355, 581, 598, 599, 603, 604, 607, 608, 613, 615], "neural": [1, 6, 35, 62, 88, 186, 195, 200, 227, 228, 229, 232, 233, 236, 239, 242, 265, 266, 268, 270, 275, 282, 283, 285, 302, 307, 310, 313, 315, 316, 317, 324, 325, 326, 328, 330, 340, 348, 352, 358, 359, 364, 374, 437, 441, 465, 474, 513, 520, 533, 560, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 576, 577, 578, 579, 580, 582, 583, 586, 588, 589, 591, 593, 595, 596, 597, 600, 601, 605, 607, 609, 611, 612, 613, 614], "compressor": [1, 3, 6, 62, 88, 195, 200, 227, 228, 229, 232, 233, 236, 239, 242, 265, 266, 268, 270, 275, 282, 283, 285, 310, 313, 315, 316, 317, 324, 325, 326, 328, 330, 340, 348, 352, 359, 364, 374, 437, 441, 465, 474, 513, 520, 533, 560, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 576, 577, 578, 579, 580, 581, 582, 586, 588, 589, 591, 593, 595, 596, 597, 600, 601, 603, 605, 607, 609, 611, 612, 613, 614], "send": [1, 5, 502, 545, 550], "your": [1, 5, 213, 215, 251, 253, 279, 321, 561, 564, 568, 570, 576, 577, 581, 584, 585, 586, 591, 592, 593, 595, 596, 598, 603, 610, 611, 613], "new": [1, 62, 99, 146, 149, 171, 184, 205, 217, 226, 229, 232, 233, 243, 255, 264, 266, 268, 297, 310, 311, 314, 316, 336, 340, 350, 424, 425, 429, 545, 568, 579, 592, 598, 599, 605, 607, 609, 610, 612, 614], "github": [1, 5, 186, 215, 253, 276, 277, 280, 281, 310, 313, 318, 319, 322, 323, 340, 348, 477, 479, 520, 561, 564, 569, 576, 577, 587, 593, 596, 609], "view": [1, 5, 561, 569, 589, 598, 609], "how": [1, 2, 4, 6, 232, 268, 269, 275, 290, 291, 310, 337, 340, 347, 561, 563, 564, 566, 568, 573, 592, 593, 596, 597, 598, 603, 604, 607, 612, 613, 614], "To": [1, 87, 279, 305, 310, 314, 321, 336, 340, 350, 523, 561, 564, 568, 570, 579, 582, 585, 591, 593, 595, 596, 606, 608, 609, 613, 614], "befor": [1, 146, 148, 161, 215, 242, 253, 269, 270, 272, 275, 302, 307, 310, 312, 313, 314, 337, 340, 346, 347, 348, 349, 350, 360, 368, 419, 561, 564, 566, 568, 571, 572, 593, 596, 603, 607, 610, 611, 613], "below": [1, 2, 6, 97, 109, 110, 111, 117, 122, 316, 354, 356, 361, 563, 566, 568, 573, 578, 581, 583, 591, 592, 595, 598, 600, 601, 603, 606, 607, 610, 611, 613], "chang": [1, 124, 140, 179, 194, 312, 314, 347, 350, 355, 358, 378, 393, 399, 502, 524, 531, 563, 568, 571, 577, 578, 581, 591, 592, 595, 598, 604, 611, 612, 613], "consist": [1, 2, 98, 106, 297, 561, 570, 613], "python": [1, 2, 118, 161, 184, 217, 236, 255, 275, 279, 317, 321, 378, 481, 560, 561, 564, 568, 576, 583, 589, 592, 598, 605, 608, 612], "style": [1, 105, 208, 222, 246, 260, 564, 573], "pylint": 1, "check": [1, 5, 62, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 105, 106, 110, 111, 122, 149, 154, 161, 184, 190, 200, 204, 217, 255, 271, 275, 285, 311, 316, 340, 347, 351, 355, 356, 363, 378, 420, 425, 462, 465, 467, 468, 470, 472, 473, 474, 475, 481, 484, 502, 518, 519, 521, 526, 533, 535, 561, 568, 576, 582, 584, 586, 593, 596, 597, 609], "flake8": 1, "autopep8": 1, "clean": [1, 231, 234, 267, 398, 409, 412, 419, 420, 425, 427, 428, 429, 516, 532], "add": [1, 2, 26, 64, 86, 87, 95, 102, 107, 110, 111, 148, 149, 154, 158, 164, 167, 184, 215, 217, 239, 253, 255, 275, 276, 283, 297, 302, 307, 311, 313, 316, 318, 325, 333, 348, 351, 356, 391, 398, 399, 401, 408, 409, 410, 411, 412, 413, 415, 417, 418, 419, 420, 424, 425, 426, 427, 428, 429, 431, 447, 533, 558, 561, 563, 564, 568, 570, 572, 578, 593, 596, 610, 611, 613], "unit": [1, 310, 340, 525, 533], "test": [1, 5, 64, 232, 268, 288, 561, 576, 615], "cover": [1, 573, 605], "would": [1, 149, 340, 579, 603, 604, 607], "like": [1, 2, 3, 6, 55, 57, 60, 63, 88, 117, 122, 140, 142, 149, 178, 184, 203, 204, 205, 217, 221, 226, 243, 255, 259, 264, 274, 275, 283, 289, 312, 315, 316, 325, 334, 340, 352, 368, 561, 566, 575, 586, 601, 603, 607, 609, 613], "run": [1, 5, 6, 54, 55, 57, 60, 62, 64, 88, 149, 184, 203, 204, 214, 231, 233, 252, 267, 275, 288, 291, 311, 312, 326, 347, 351, 352, 355, 356, 480, 526, 548, 549, 550, 561, 562, 568, 571, 572, 579, 581, 583, 585, 586, 587, 589, 591, 592, 593, 595, 596, 598, 603, 605, 607, 609, 610, 611, 613, 614], "ha": [1, 3, 6, 26, 55, 57, 60, 63, 88, 105, 106, 110, 111, 113, 117, 122, 123, 136, 149, 161, 178, 195, 233, 275, 276, 290, 310, 312, 317, 318, 340, 347, 561, 563, 570, 575, 579, 584, 598, 604, 606, 607, 608, 610, 613], "adopt": [1, 581], "develop": [1, 2, 186, 336, 533, 576, 579, 581, 587, 598, 605, 607, 608, 610], "certif": [1, 561], "origin": [1, 87, 88, 180, 190, 191, 193, 215, 232, 233, 253, 268, 275, 288, 297, 302, 307, 310, 311, 312, 313, 340, 341, 342, 344, 345, 346, 347, 348, 351, 356, 360, 378, 381, 564, 586, 603, 604, 607, 612, 613, 614], "must": [1, 2, 232, 268, 279, 283, 321, 325, 562, 563, 576, 612], "agre": 1, "term": [1, 269, 275, 347, 349, 566, 577, 578, 600, 601, 613], "sign": [1, 561, 607, 610], "off": [1, 110, 111, 113, 608], "each": [1, 6, 57, 60, 63, 64, 88, 89, 90, 130, 149, 154, 180, 186, 213, 217, 220, 228, 232, 251, 255, 258, 265, 268, 277, 279, 280, 281, 290, 291, 297, 312, 319, 321, 322, 323, 334, 335, 336, 340, 347, 360, 561, 564, 566, 572, 583, 589, 592, 598, 600, 603, 604, 610, 611, 612, 613], "random": [1, 3, 98, 178, 184, 200, 228, 232, 265, 268, 288, 301, 317, 355, 359, 378, 543, 606, 612, 614], "j": [1, 550], "org": [1, 2, 5, 279, 297, 312, 321, 337, 561, 576, 593, 596], "type": [1, 6, 26, 55, 57, 60, 62, 63, 64, 87, 88, 89, 90, 100, 103, 104, 105, 106, 111, 113, 117, 122, 128, 129, 135, 136, 137, 138, 140, 149, 152, 154, 155, 161, 171, 178, 184, 185, 186, 190, 191, 193, 197, 200, 204, 205, 213, 215, 217, 221, 224, 225, 226, 229, 232, 234, 239, 243, 251, 253, 255, 259, 262, 263, 264, 266, 268, 270, 272, 273, 275, 276, 277, 279, 282, 283, 285, 288, 290, 297, 300, 303, 304, 305, 310, 312, 314, 316, 318, 319, 321, 324, 325, 327, 328, 334, 335, 336, 340, 346, 347, 349, 350, 351, 353, 354, 355, 356, 360, 363, 364, 367, 368, 374, 377, 391, 396, 410, 411, 420, 421, 423, 425, 463, 518, 521, 523, 525, 528, 529, 561, 564, 568, 572, 575, 579, 599, 603, 607, 610, 612, 613, 614], "featur": [1, 149, 186, 200, 215, 216, 228, 232, 234, 253, 254, 265, 268, 297, 317, 562, 563, 565, 566, 579, 580, 581, 585, 586, 589, 598, 604, 605, 609, 612], "bug": 1, "fix": [1, 184, 215, 253, 312, 347, 564, 585, 604, 613], "document": [1, 232, 268, 568, 579, 583, 593, 596, 597, 609, 612], "valid": [1, 3, 6, 55, 57, 60, 88, 89, 90, 97, 102, 110, 111, 149, 178, 217, 255, 279, 291, 311, 312, 321, 334, 340, 347, 351, 481, 550, 564, 566, 572, 575, 577, 589, 603, 604, 607, 609], "api": [1, 2, 7, 9, 15, 24, 28, 43, 44, 45, 46, 48, 62, 63, 88, 90, 113, 118, 146, 149, 161, 171, 195, 274, 275, 279, 313, 315, 317, 321, 352, 378, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 549, 550, 570, 574, 575, 583, 587, 588, 589, 609, 610, 613], "descript": [1, 2, 62, 149, 171, 178, 272, 273, 279, 299, 321, 335], "jira": 1, "ticket": 1, "xxx": [1, 217, 255, 564], "potenti": [1, 3], "risk": 1, "trigger": [1, 233, 275, 312, 347], "pr": [1, 578, 593, 596, 609], "been": [1, 3, 26, 106, 231, 267, 276, 290, 310, 312, 318, 340, 347, 561, 566, 579, 598], "reproduc": 1, "hardwar": [1, 6, 60, 89, 521, 566, 575, 579, 598, 602, 603, 604, 605, 606], "depend": [1, 55, 57, 62, 90, 105, 122, 203, 204, 233, 275, 286, 298, 299, 326, 352, 571, 572, 606, 613], "librari": [1, 5, 236, 275, 317, 560, 576, 583, 592, 598, 605, 607], "introduc": [1, 6, 117, 570, 572, 603, 604, 607, 609, 613], "submit": 1, "also": [1, 3, 5, 6, 26, 110, 111, 214, 217, 221, 226, 232, 252, 255, 259, 264, 268, 276, 318, 340, 352, 361, 561, 563, 575, 578, 581, 586, 591, 592, 595, 598, 599, 600, 603, 607, 608, 613], "reach": [1, 204, 310, 314, 336, 340, 350, 363, 563, 603, 604, 613], "out": [1, 2, 5, 178, 186, 215, 216, 217, 253, 254, 255, 274, 275, 297, 310, 315, 333, 340, 564, 581, 586, 591, 592, 593, 595, 596, 598, 604, 606, 607], "intend": 1, "safe": [1, 161, 373], "collabor": [1, 583, 589], "adher": 1, "3": [2, 3, 5, 89, 113, 122, 154, 184, 217, 221, 226, 229, 232, 255, 259, 264, 266, 268, 279, 291, 321, 523, 561, 563, 564, 566, 568, 570, 572, 578, 579, 581, 585, 589, 591, 595, 600, 603, 606, 607, 610, 612, 613, 615], "2": [2, 5, 6, 62, 87, 89, 90, 91, 96, 117, 122, 148, 192, 216, 233, 254, 279, 281, 283, 291, 305, 306, 312, 321, 323, 325, 340, 347, 353, 355, 361, 564, 566, 572, 575, 577, 578, 579, 600, 602, 603, 607, 609, 610, 612, 613], "pytorch": [2, 3, 5, 6, 214, 215, 217, 220, 221, 224, 225, 226, 229, 232, 234, 239, 241, 252, 253, 255, 258, 259, 262, 263, 264, 266, 268, 270, 272, 273, 274, 275, 282, 283, 284, 308, 310, 313, 315, 317, 324, 325, 326, 335, 340, 348, 352, 361, 372, 374, 378, 381, 454, 461, 484, 494, 514, 563, 566, 569, 570, 572, 575, 576, 579, 580, 581, 583, 586, 587, 588, 589, 598, 603, 605, 606, 609, 613, 614], "toolkit": [2, 5, 576, 581, 589, 605], "transform": [2, 3, 5, 28, 50, 63, 87, 93, 105, 110, 111, 133, 134, 136, 170, 171, 175, 179, 180, 181, 182, 183, 195, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 275, 294, 296, 297, 317, 391, 395, 401, 406, 420, 423, 425, 430, 432, 454, 533, 534, 535, 536, 541, 563, 564, 566, 567, 568, 581, 586, 587, 588, 589, 605, 608, 611, 614], "nn": [2, 185, 186, 190, 234, 270, 272, 291, 295, 297, 326, 335, 352, 374, 566, 570, 580, 611], "modul": [2, 187, 270, 275, 292, 293, 294, 298, 308, 309, 339, 343, 522, 530, 538, 561, 563, 566, 570, 575, 578, 580, 603, 606, 608, 611], "three": [2, 6, 117, 215, 253, 275, 302, 307, 313, 348, 561, 563, 570, 576, 579, 592, 601, 607, 608, 610, 611, 613], "main": [2, 5, 203, 239, 313, 348, 363, 513, 550, 568, 585, 587, 599, 604, 607], "compon": [2, 5, 269, 275, 286, 298, 302, 307, 315, 316, 317, 368, 514, 549, 552, 568, 576, 577, 581, 598, 601, 602], "symbol": [2, 9, 62, 185, 189, 190, 276, 318, 326, 352, 580], "tracer": 2, "intermedi": [2, 64, 87, 186, 200, 234, 575, 603, 607], "code": [2, 5, 6, 203, 204, 233, 275, 285, 293, 294, 297, 313, 316, 352, 420, 425, 443, 461, 526, 527, 558, 559, 563, 564, 566, 568, 573, 575, 577, 578, 581, 583, 585, 586, 587, 589, 592, 598, 600, 601, 603, 605, 606, 607, 610, 611, 612], "gener": [2, 5, 6, 55, 56, 57, 62, 90, 91, 92, 131, 133, 134, 146, 149, 150, 161, 178, 180, 184, 190, 203, 204, 205, 214, 217, 218, 219, 220, 226, 229, 232, 233, 243, 252, 255, 256, 257, 258, 264, 266, 268, 272, 273, 275, 276, 284, 288, 295, 302, 310, 313, 316, 318, 326, 335, 340, 348, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 396, 420, 425, 431, 486, 491, 495, 498, 500, 501, 506, 507, 508, 517, 526, 558, 561, 563, 566, 578, 579, 581, 586, 591, 593, 595, 596, 598, 600, 602, 603, 604, 605, 607, 608, 611, 612, 613], "With": [2, 6, 140, 195, 317, 563, 586, 591, 595, 599, 600, 603, 605, 607, 610, 613, 615], "convert": [2, 9, 55, 57, 62, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 109, 117, 124, 130, 141, 143, 144, 170, 175, 185, 190, 215, 228, 231, 232, 253, 265, 267, 268, 275, 279, 283, 285, 299, 301, 311, 321, 325, 327, 328, 353, 368, 400, 407, 416, 511, 523, 579, 583, 607, 608, 612], "torch": [2, 7, 88, 185, 186, 187, 188, 189, 190, 196, 200, 234, 270, 272, 283, 291, 295, 297, 317, 325, 326, 335, 340, 352, 374, 566, 568, 570, 579, 580, 581, 589, 607, 611], "graphmodul": [2, 88, 190, 608], "can": [2, 3, 5, 6, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 99, 179, 186, 194, 195, 203, 204, 214, 217, 232, 233, 235, 236, 252, 255, 268, 275, 279, 281, 283, 295, 297, 302, 307, 310, 312, 313, 314, 317, 321, 323, 325, 326, 336, 340, 347, 348, 350, 352, 374, 484, 516, 523, 533, 561, 562, 563, 564, 566, 568, 572, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 589, 591, 592, 593, 595, 596, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614], "resolv": [2, 4], "automat": [2, 5, 217, 220, 227, 228, 255, 258, 265, 274, 275, 284, 291, 315, 561, 562, 564, 575, 579, 581, 583, 586, 587, 589, 591, 592, 593, 595, 596, 598, 601, 604, 612, 613], "insert": [2, 86, 90, 91, 120, 146, 148, 149, 152, 171, 182, 270, 272, 575, 581, 603, 604, 607, 608, 611], "quant": [2, 90, 190, 607], "dequant": [2, 86, 87, 100, 132, 135, 136, 137, 138, 140, 164, 165, 167, 186, 190, 378, 433, 611], "oper": [2, 56, 65, 87, 149, 184, 228, 265, 297, 310, 340, 356, 545, 549, 561, 562, 563, 570, 598, 607, 612, 613], "floatfunct": 2, "wrap": [2, 62, 155, 161, 234, 279, 321, 391, 568, 593, 596], "tensor": [2, 55, 57, 60, 62, 63, 64, 86, 87, 88, 90, 113, 149, 161, 171, 178, 184, 186, 190, 232, 234, 268, 270, 271, 272, 297, 305, 306, 310, 312, 314, 332, 333, 334, 335, 337, 340, 341, 347, 349, 350, 360, 378, 422, 425, 433, 462, 564, 603, 604, 607, 609, 611, 612, 613], "requir": [2, 6, 152, 161, 242, 275, 279, 291, 316, 321, 334, 353, 356, 380, 382, 391, 394, 449, 455, 462, 465, 467, 474, 480, 487, 488, 489, 490, 492, 493, 494, 496, 499, 500, 505, 510, 514, 561, 562, 563, 567, 568, 572, 576, 579, 580, 582, 592, 598, 602, 603, 604, 607, 609, 610, 611, 613, 614], "special": [2, 155, 563, 578, 600], "handl": [2, 4, 86, 103, 104, 105, 184, 186, 275, 288, 289, 290, 315, 375, 523, 549, 550, 563], "cat": [2, 584], "output": [2, 6, 26, 54, 64, 86, 87, 88, 90, 96, 100, 102, 103, 111, 113, 117, 128, 129, 135, 137, 142, 148, 149, 152, 161, 178, 184, 190, 195, 197, 200, 203, 204, 231, 234, 236, 237, 241, 267, 269, 270, 272, 274, 275, 276, 279, 283, 288, 289, 297, 310, 317, 318, 321, 324, 325, 326, 333, 334, 335, 340, 347, 352, 368, 369, 372, 374, 375, 398, 409, 412, 419, 425, 427, 428, 462, 472, 473, 474, 488, 492, 495, 518, 526, 534, 540, 561, 566, 568, 570, 572, 573, 578, 580, 589, 598, 599, 601, 603, 606, 607, 611, 612, 613, 614], "paramet": [2, 26, 55, 57, 60, 62, 63, 64, 86, 87, 88, 90, 99, 100, 103, 104, 105, 106, 110, 111, 113, 117, 122, 128, 129, 130, 133, 134, 149, 152, 154, 155, 161, 171, 178, 180, 184, 185, 186, 189, 190, 191, 193, 195, 196, 197, 200, 203, 204, 205, 214, 215, 217, 221, 224, 225, 226, 228, 229, 231, 232, 233, 234, 239, 243, 252, 253, 255, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 297, 298, 299, 300, 301, 302, 305, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 330, 332, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 360, 363, 364, 367, 368, 371, 372, 374, 375, 377, 378, 391, 395, 400, 401, 420, 421, 422, 425, 431, 433, 442, 468, 486, 491, 495, 498, 501, 513, 518, 523, 525, 526, 532, 533, 535, 545, 546, 561, 563, 564, 566, 568, 575, 578, 592, 598, 599, 603, 604, 607, 610, 612, 613, 614], "fuse": [2, 55, 62, 88, 90, 91, 92, 97, 101, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 135, 136, 137, 138, 140, 170, 174, 175, 186, 189, 190, 611], "combin": [2, 6, 60, 62, 89, 190, 203, 204, 228, 242, 265, 275, 316, 326, 352, 378, 575, 601, 605, 608, 612, 613], "singl": [2, 110, 111, 164, 165, 171, 173, 174, 208, 215, 231, 232, 246, 253, 267, 268, 279, 288, 290, 312, 314, 321, 337, 350, 355, 414, 431, 450, 518, 552, 564, 576, 603, 604], "obtain": [2, 310, 311, 314, 340, 348, 349, 350, 351, 570, 604, 610, 613], "higher": [2, 203, 204, 300, 326, 352, 353, 566, 570, 578, 603, 604, 607, 610, 613], "accuraci": [2, 5, 88, 195, 200, 203, 204, 233, 269, 274, 275, 283, 287, 288, 289, 291, 298, 302, 307, 315, 317, 325, 326, 336, 352, 353, 356, 361, 363, 383, 399, 409, 419, 425, 427, 501, 525, 531, 534, 536, 552, 561, 563, 564, 567, 568, 570, 578, 579, 589, 598, 600, 601, 603, 604, 605, 606, 609, 610, 611, 614, 615], "perform": [2, 3, 5, 6, 105, 110, 111, 140, 195, 200, 215, 227, 228, 231, 233, 253, 265, 267, 274, 275, 286, 287, 289, 291, 298, 299, 302, 307, 315, 317, 336, 347, 349, 356, 360, 383, 399, 409, 419, 425, 427, 516, 525, 534, 536, 543, 552, 561, 562, 563, 564, 565, 567, 570, 575, 576, 578, 579, 580, 581, 583, 587, 589, 592, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 613, 614, 615], "done": [2, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 566, 582, 598, 603, 607], "_": [2, 3, 6, 62, 203, 204, 352, 566, 568, 572, 578, 579, 580, 581, 587, 591, 593, 595, 596, 600, 603, 604, 607, 608, 609, 610, 611, 613, 614], "list": [2, 5, 6, 26, 55, 57, 60, 62, 63, 87, 88, 90, 96, 99, 122, 149, 154, 161, 178, 184, 185, 186, 190, 203, 204, 208, 215, 228, 231, 232, 233, 234, 246, 253, 265, 267, 268, 270, 272, 275, 276, 277, 279, 280, 281, 283, 288, 290, 291, 300, 302, 307, 310, 313, 318, 319, 321, 322, 323, 325, 326, 334, 335, 336, 340, 348, 352, 356, 360, 363, 368, 369, 372, 391, 393, 395, 396, 398, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 442, 445, 447, 448, 450, 462, 465, 468, 469, 472, 473, 474, 476, 481, 484, 486, 488, 491, 492, 495, 498, 501, 511, 518, 523, 525, 526, 527, 531, 533, 534, 535, 536, 537, 539, 540, 541, 543, 545, 552, 564, 572, 581, 586, 588, 591, 592, 595, 600, 603, 606, 608, 611, 613], "current": [2, 3, 6, 57, 60, 62, 63, 86, 89, 90, 105, 110, 111, 113, 117, 149, 154, 275, 285, 291, 302, 307, 310, 312, 313, 314, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 355, 356, 360, 361, 363, 561, 568, 572, 576, 578, 581, 585, 598, 600, 603, 604, 607, 613], "fusion": [2, 6, 60, 89, 101, 102, 104, 107, 110, 111, 112, 113, 116, 121, 138, 140, 148, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 572], "conv": [2, 55, 56, 64, 65, 77, 86, 91, 92, 101, 105, 109, 114, 115, 116, 136, 148, 149, 164, 174, 200, 317, 340, 603, 606], "relu": [2, 55, 117, 121, 122, 148, 162, 164, 166, 167, 172, 174, 176, 572, 611], "batchnorm": [2, 105, 110, 160], "linear": [2, 87, 200, 270, 272, 310, 317, 340, 566, 570, 603, 604], "pleas": [2, 3, 4, 5, 6, 149, 186, 215, 216, 217, 220, 253, 254, 255, 258, 275, 302, 307, 310, 312, 313, 337, 340, 348, 561, 562, 564, 567, 568, 576, 578, 579, 581, 582, 586, 589, 603, 604, 608, 609, 610], "refer": [2, 5, 6, 26, 186, 215, 253, 275, 276, 277, 282, 283, 302, 307, 310, 312, 313, 318, 319, 324, 325, 337, 340, 348, 562, 563, 564, 567, 568, 573, 577, 578, 579, 581, 586, 589, 600, 603, 606, 609, 612, 613], "graph": [2, 6, 63, 64, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 156, 169, 171, 175, 178, 179, 181, 182, 183, 184, 214, 252, 272, 274, 317, 327, 328, 329, 333, 334, 335, 385, 387, 389, 454, 462, 465, 473, 474, 476, 486, 487, 488, 493, 494, 498, 511, 512, 514, 534, 537, 549, 564, 566, 568, 573, 578, 580, 581, 607, 608, 611], "10004": [2, 3, 6, 563, 566, 570, 572, 575, 579, 601, 606, 614], "backend": [2, 57, 60, 63, 64, 88, 89, 90, 200, 201, 202, 206, 207, 211, 215, 216, 218, 219, 220, 221, 222, 226, 229, 232, 239, 244, 245, 247, 249, 253, 254, 256, 257, 258, 259, 260, 264, 266, 268, 284, 317, 326, 327, 328, 330, 333, 361, 568, 573, 575, 587, 606, 607, 612, 614], "field": [2, 6, 149, 178, 217, 255, 279, 316, 321, 561, 568, 610, 613, 614], "indic": [2, 86, 208, 213, 215, 246, 251, 253, 269, 275, 279, 295, 297, 300, 301, 321, 340, 561, 571, 611], "user": [2, 3, 5, 6, 16, 60, 89, 149, 195, 203, 204, 206, 209, 217, 220, 224, 225, 226, 232, 233, 239, 242, 255, 258, 262, 263, 264, 268, 274, 275, 288, 290, 302, 307, 313, 315, 316, 317, 326, 347, 348, 351, 352, 356, 363, 368, 378, 517, 562, 566, 572, 575, 578, 579, 580, 581, 582, 583, 585, 586, 587, 589, 592, 598, 600, 601, 603, 605, 607, 608, 609, 611, 612, 613], "configur": [2, 3, 6, 54, 55, 57, 60, 62, 63, 88, 89, 90, 149, 157, 185, 190, 195, 196, 200, 203, 204, 206, 209, 217, 220, 226, 233, 255, 258, 269, 270, 272, 274, 275, 279, 285, 286, 287, 288, 290, 298, 299, 302, 307, 311, 313, 315, 316, 317, 321, 326, 335, 336, 340, 348, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 376, 377, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 409, 420, 422, 425, 484, 486, 491, 495, 498, 501, 514, 516, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 548, 550, 561, 564, 567, 578, 585, 599, 600, 603, 609, 612, 613, 615], "And": [2, 113, 242, 275, 562, 584], "default": [2, 5, 6, 26, 55, 57, 64, 88, 90, 141, 149, 178, 184, 195, 197, 200, 203, 204, 205, 207, 215, 216, 217, 228, 232, 234, 242, 243, 245, 253, 254, 255, 265, 268, 270, 272, 275, 276, 279, 282, 283, 285, 297, 311, 317, 318, 321, 324, 325, 334, 335, 351, 374, 378, 400, 402, 403, 405, 407, 410, 411, 416, 438, 439, 442, 459, 469, 521, 523, 533, 535, 536, 540, 541, 561, 564, 570, 572, 575, 578, 586, 589, 591, 595, 600, 603, 604, 606, 608, 610, 612, 613, 614], "valu": [2, 55, 57, 60, 63, 64, 87, 88, 90, 98, 99, 105, 110, 111, 113, 133, 134, 149, 154, 178, 179, 180, 184, 190, 194, 196, 197, 200, 203, 204, 215, 218, 219, 228, 232, 233, 234, 253, 256, 257, 265, 268, 275, 279, 283, 289, 290, 295, 302, 307, 310, 311, 313, 321, 325, 326, 335, 336, 337, 340, 341, 344, 348, 351, 352, 355, 360, 363, 369, 371, 372, 378, 391, 393, 395, 400, 402, 403, 405, 407, 410, 411, 416, 420, 421, 442, 444, 483, 515, 518, 519, 523, 525, 531, 533, 536, 541, 543, 544, 546, 557, 561, 564, 572, 578, 584, 600, 603, 604, 606, 607, 612, 613, 614], "mean": [2, 105, 110, 111, 113, 205, 228, 232, 243, 265, 268, 279, 281, 283, 289, 291, 297, 310, 321, 323, 325, 336, 340, 360, 563, 568, 572, 578, 584, 603, 604, 607, 612, 613, 614], "model": [2, 3, 6, 16, 24, 55, 57, 60, 62, 63, 64, 77, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 155, 157, 178, 184, 185, 186, 189, 190, 191, 193, 195, 200, 203, 204, 211, 214, 215, 217, 232, 233, 234, 236, 237, 242, 249, 252, 253, 255, 268, 269, 270, 271, 272, 273, 274, 275, 283, 284, 285, 286, 287, 289, 291, 296, 297, 298, 299, 301, 302, 307, 310, 311, 312, 313, 314, 315, 316, 317, 324, 325, 326, 336, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 368, 374, 377, 378, 380, 381, 382, 384, 395, 398, 406, 409, 412, 414, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 437, 441, 442, 447, 448, 449, 452, 453, 454, 478, 479, 481, 484, 487, 488, 489, 490, 492, 493, 494, 495, 499, 500, 505, 507, 510, 511, 514, 515, 522, 531, 533, 538, 548, 549, 553, 560, 562, 563, 564, 566, 567, 568, 573, 575, 577, 578, 579, 581, 586, 588, 589, 592, 598, 600, 601, 602, 603, 604, 605, 607, 609, 610, 611, 612, 613, 614], "neural_compressor": [2, 3, 5, 26, 562, 563, 564, 566, 568, 570, 573, 578, 579, 580, 600, 601, 603, 606, 607, 608, 609, 610, 612, 613, 614], "import": [2, 3, 5, 184, 275, 285, 288, 341, 368, 378, 562, 563, 564, 566, 568, 570, 578, 579, 580, 581, 585, 587, 600, 601, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613], "posttrainingquantconfig": [2, 5, 200, 317, 563, 580, 607, 610, 613], "conf": [2, 3, 5, 191, 193, 203, 204, 233, 275, 284, 285, 302, 307, 316, 327, 328, 333, 335, 341, 342, 344, 345, 346, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 368, 541, 544, 562, 566, 573, 579, 580, 601, 607, 610, 613], "eval": [2, 63, 242, 275, 279, 285, 321, 563, 581, 611], "q_model": [2, 88, 186, 191, 193, 275, 285, 374, 563, 564, 568, 570, 573, 578, 580, 607], "fit": [2, 5, 195, 326, 340, 352, 355, 562, 563, 564, 568, 573, 578, 579, 580, 603, 604, 607], "calib_dataload": [2, 5, 235, 236, 275, 315, 316, 335, 352, 563, 564, 573, 578, 607], "dataload": [2, 5, 6, 28, 50, 55, 57, 60, 62, 63, 64, 88, 90, 186, 188, 190, 191, 193, 195, 203, 204, 215, 226, 233, 236, 242, 253, 264, 269, 275, 285, 302, 307, 312, 315, 316, 317, 335, 346, 352, 368, 371, 379, 384, 391, 395, 406, 420, 423, 425, 430, 432, 454, 495, 508, 511, 514, 522, 533, 534, 538, 561, 566, 568, 573, 578, 579, 601, 607, 611, 612, 614], "eval_func": [2, 203, 204, 242, 274, 275, 285, 316, 326, 336, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 563, 564, 566, 568, 613, 614], "save": [2, 6, 55, 57, 60, 63, 88, 90, 149, 217, 221, 226, 255, 259, 264, 270, 272, 289, 299, 316, 327, 328, 329, 331, 333, 334, 335, 336, 356, 363, 368, 369, 372, 374, 378, 563, 573, 579, 580, 582, 586, 591, 595, 601, 603, 604, 607], "path": [2, 3, 6, 55, 57, 60, 63, 88, 90, 149, 178, 184, 195, 196, 215, 216, 217, 232, 253, 254, 255, 268, 269, 270, 272, 274, 275, 285, 286, 287, 288, 291, 298, 299, 302, 307, 311, 313, 315, 316, 317, 326, 333, 334, 335, 348, 351, 352, 368, 374, 378, 379, 384, 398, 401, 408, 409, 412, 419, 420, 425, 427, 428, 442, 448, 459, 462, 465, 467, 468, 470, 472, 473, 474, 475, 479, 486, 491, 495, 498, 501, 502, 508, 518, 526, 531, 533, 534, 543, 558, 561, 563, 564, 568, 573, 578, 579, 580, 584, 587, 598, 601, 612, 614], "approach": [2, 3, 88, 196, 200, 275, 286, 287, 288, 297, 298, 299, 317, 363, 395, 534, 541, 563, 564, 566, 575, 586, 598, 605, 606, 613, 614], "quantizationawaretrainingconfig": [2, 200, 317, 607, 613], "prepare_compress": [2, 368, 566, 601, 603, 607], "compression_manag": [2, 368, 566, 601, 603, 607], "callback": [2, 90, 302, 307, 368, 369, 371, 372, 549, 601, 603, 607], "on_train_begin": [2, 242, 275, 302, 307, 312, 313, 346, 347, 348, 368, 566, 601, 603, 607], "loop": [2, 3, 336, 368, 572, 610, 613], "now": [2, 3, 232, 268, 531, 564, 568, 589, 606, 612, 613], "auto": [2, 353, 378, 581, 584, 586, 588, 589], "method": [2, 3, 5, 88, 149, 161, 178, 179, 190, 208, 213, 214, 215, 217, 221, 224, 225, 226, 229, 232, 235, 236, 246, 251, 252, 253, 255, 259, 262, 263, 264, 266, 268, 275, 282, 283, 288, 291, 297, 299, 300, 301, 305, 315, 324, 325, 327, 328, 349, 371, 372, 374, 375, 518, 523, 527, 545, 564, 566, 567, 578, 601, 603, 604, 607, 608, 612, 613], "avoid": [2, 215, 253, 611], "log": [2, 149, 182, 302, 307, 372, 375, 381, 398, 409, 412, 419, 425, 427, 428, 484, 518, 524, 525, 526, 527, 532, 546, 561, 589, 610, 611, 613], "fail": [2, 149, 527], "trace": [2, 9, 88, 185, 186, 189, 190, 270, 272, 352, 358, 588, 613], "info": [2, 55, 57, 60, 63, 87, 88, 91, 149, 190, 226, 229, 230, 235, 236, 240, 272, 310, 316, 329, 330, 333, 334, 335, 340, 351, 372, 375, 378, 398, 399, 401, 408, 409, 412, 413, 415, 418, 518, 521, 526, 533, 549, 561, 570, 580], "entir": [2, 352, 603, 604], "conduct": [2, 586, 598], "imper": 2, "control": [2, 55, 57, 60, 90, 123, 129, 191, 193, 291, 425, 430, 561, 603, 613], "flow": [2, 3, 275, 280, 281, 302, 307, 322, 323], "therefor": [2, 604, 607, 609], "int8": [2, 6, 55, 56, 57, 60, 63, 66, 67, 87, 88, 89, 90, 91, 92, 131, 150, 162, 163, 164, 170, 172, 173, 174, 175, 179, 184, 186, 194, 200, 228, 265, 270, 271, 272, 335, 356, 433, 561, 562, 564, 567, 572, 583, 586, 588, 589, 592, 598, 606, 607, 608, 609, 610, 611, 612, 614], "lot": 2, "9": [2, 5, 200, 290, 317, 576, 603, 604, 606, 613, 614, 615], "between": [2, 6, 90, 179, 186, 194, 232, 234, 268, 280, 282, 283, 288, 290, 291, 322, 324, 325, 347, 433, 545, 549, 566, 570, 575, 578, 589, 604, 607, 609, 610, 612, 613], "don": [2, 54, 179, 194, 340, 523, 561, 613], "t": [2, 6, 54, 110, 111, 113, 149, 178, 179, 194, 232, 235, 236, 268, 281, 290, 291, 295, 316, 323, 340, 523, 532, 561, 566, 568, 579, 599, 613, 614], "need": [2, 6, 54, 55, 57, 60, 62, 63, 88, 105, 124, 130, 148, 149, 171, 178, 195, 203, 204, 205, 213, 214, 217, 224, 225, 226, 232, 235, 236, 237, 238, 243, 251, 252, 255, 262, 263, 264, 268, 269, 275, 282, 283, 288, 295, 297, 302, 307, 316, 324, 325, 326, 332, 333, 336, 340, 352, 356, 360, 363, 377, 378, 552, 561, 563, 564, 566, 568, 575, 579, 581, 583, 584, 587, 591, 592, 593, 595, 596, 598, 599, 603, 606, 607, 608, 609, 612, 613, 614], "becaus": [2, 232, 268, 279, 310, 321, 340, 603, 607, 612, 613], "modifi": [2, 99, 105, 110, 111, 113, 124, 217, 255, 275, 302, 307, 313, 348, 512, 561, 568, 572, 614], "sourc": [2, 5, 55, 57, 64, 90, 236, 275, 277, 285, 297, 317, 319, 371, 446, 560, 577, 591, 593, 595, 596, 598, 605], "8": [2, 5, 152, 231, 267, 523, 572, 576, 603, 605, 613, 615], "As": [2, 124, 279, 321, 561, 563, 566, 592, 603, 604, 613], "cannot": [2, 279, 321, 521, 570, 571, 611], "iter": [2, 3, 6, 55, 57, 60, 62, 63, 64, 88, 90, 184, 191, 193, 200, 203, 204, 208, 213, 217, 218, 221, 226, 235, 236, 246, 251, 255, 256, 259, 264, 299, 312, 314, 326, 334, 347, 350, 352, 371, 398, 526, 534, 562, 564, 603, 604, 606, 611, 613, 614], "so": [2, 6, 91, 92, 161, 232, 268, 312, 368, 374, 571, 575, 578, 584, 586, 607, 608, 611, 612], "might": [2, 561, 613], "meet": [2, 316, 353, 356, 361, 570, 600, 605, 606, 607, 611, 613], "failur": [2, 545], "sometim": [2, 149, 178, 603, 607], "order": [2, 26, 190, 276, 277, 297, 316, 318, 319, 335, 354, 355, 356, 360, 361, 462, 465, 474, 535, 578, 603, 606, 611, 613], "successfulli": [2, 568, 605], "suggest": [2, 297, 301, 355, 610], "two": [2, 3, 136, 149, 186, 217, 221, 222, 226, 233, 255, 259, 260, 264, 279, 310, 314, 316, 321, 340, 347, 350, 378, 561, 564, 566, 568, 572, 578, 579, 603, 607, 608, 610, 613, 614], "first": [2, 3, 6, 64, 90, 136, 146, 179, 194, 197, 215, 231, 253, 267, 269, 275, 279, 321, 353, 356, 442, 561, 564, 570, 576, 579, 583, 592, 593, 596, 599, 606, 607, 608, 610, 611, 613, 614], "pass": [2, 6, 120, 122, 124, 184, 195, 231, 267, 275, 295, 297, 302, 307, 313, 316, 348, 378, 476, 532, 545, 546, 562, 564, 566, 568, 570, 573, 578, 599, 603, 606, 607, 608, 614], "non": [2, 122, 161, 239, 311, 378, 602, 603, 613], "traceabl": [2, 88], "class": [2, 3, 155, 190, 300, 326, 352, 456, 457, 563, 564, 566, 578, 589, 600, 601, 609, 611, 613, 614], "name": [2, 55, 57, 62, 63, 86, 87, 88, 90, 96, 105, 106, 110, 111, 113, 122, 149, 154, 155, 171, 178, 180, 184, 185, 186, 189, 190, 191, 193, 195, 197, 200, 215, 216, 217, 220, 221, 224, 225, 226, 229, 230, 232, 233, 234, 236, 237, 239, 240, 241, 253, 254, 255, 258, 259, 262, 263, 264, 266, 268, 270, 271, 272, 278, 279, 282, 283, 288, 289, 291, 297, 302, 305, 307, 310, 312, 314, 316, 317, 320, 321, 324, 325, 330, 332, 333, 334, 335, 336, 337, 340, 341, 347, 349, 350, 369, 372, 374, 378, 398, 402, 403, 405, 408, 409, 410, 411, 412, 414, 433, 442, 444, 462, 465, 467, 468, 474, 481, 482, 483, 484, 495, 511, 518, 521, 533, 535, 536, 557, 561, 564, 568, 572, 577, 578, 580, 584, 591, 595, 599, 602, 609, 610, 611, 613, 614, 615], "select": [2, 3, 215, 253, 287, 291, 298, 349, 361, 561, 575, 576, 598, 604, 607, 611, 613], "proxi": 2, "object": [2, 3, 17, 26, 55, 57, 60, 62, 63, 81, 87, 88, 90, 100, 103, 104, 105, 106, 117, 122, 128, 129, 130, 135, 136, 137, 138, 149, 152, 155, 171, 178, 180, 185, 186, 189, 190, 191, 193, 195, 196, 197, 200, 203, 204, 205, 206, 208, 209, 213, 215, 216, 217, 221, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 246, 251, 253, 254, 255, 259, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 279, 282, 283, 284, 287, 288, 290, 298, 299, 301, 302, 303, 304, 305, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 324, 325, 326, 328, 330, 332, 333, 334, 335, 337, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 363, 369, 371, 372, 373, 375, 377, 378, 395, 410, 411, 414, 417, 458, 523, 526, 533, 543, 545, 546, 550, 561, 562, 563, 564, 571, 578, 580, 601, 603, 604, 606, 607, 612, 613], "them": [2, 102, 105, 149, 215, 253, 563, 572, 573, 601, 603, 613], "prepar": [2, 5, 62, 88, 190, 242, 269, 275, 302, 307, 313, 315, 420, 425, 513, 564, 568, 607], "dict": [2, 55, 57, 60, 62, 63, 64, 88, 90, 152, 154, 155, 161, 180, 184, 185, 186, 190, 191, 193, 196, 197, 203, 204, 214, 217, 233, 234, 239, 252, 255, 270, 271, 272, 275, 278, 279, 280, 281, 283, 286, 288, 291, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 310, 311, 312, 313, 314, 320, 321, 322, 323, 325, 326, 327, 328, 334, 335, 337, 340, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 367, 369, 371, 372, 377, 378, 379, 381, 384, 391, 392, 393, 395, 396, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 438, 439, 442, 450, 459, 462, 469, 477, 478, 479, 481, 483, 484, 485, 486, 491, 495, 498, 501, 502, 503, 504, 506, 508, 509, 511, 518, 519, 521, 523, 525, 526, 529, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 549, 550, 552, 554, 556, 557, 559, 578, 603, 606, 611, 613], "http": [2, 5, 186, 215, 217, 253, 255, 276, 277, 279, 280, 281, 297, 310, 312, 313, 318, 319, 321, 322, 323, 337, 340, 348, 558, 561, 564, 576, 577, 587, 593, 596, 609], "tutori": [2, 589, 605], "prototyp": 2, "guid": [2, 5, 215, 253, 564, 566, 576, 581, 589, 598], "html": [2, 593, 596], "highlight": [2, 447, 450, 561], "decor": [2, 3, 6, 55, 81, 110, 111, 113, 184, 191, 193, 226, 229, 232, 239, 264, 266, 268, 282, 283, 300, 305, 310, 312, 314, 324, 325, 336, 340, 346, 347, 350, 363, 378, 528, 613], "untrac": 2, "part": [2, 64, 269, 275, 279, 310, 312, 321, 347, 576, 579, 593, 596], "global": [2, 154, 200, 310, 317, 340, 341, 342, 344, 345, 346, 347, 378, 546, 603, 604, 606, 613], "function": [2, 3, 6, 57, 60, 63, 86, 90, 105, 149, 178, 203, 204, 216, 242, 254, 274, 275, 286, 297, 298, 299, 302, 307, 313, 316, 333, 348, 369, 561, 562, 563, 566, 573, 575, 576, 578, 579, 589, 599, 603, 604, 607, 610, 611, 613], "call": [2, 3, 6, 54, 62, 161, 242, 275, 279, 290, 291, 302, 307, 310, 312, 313, 321, 341, 345, 346, 347, 368, 397, 430, 518, 526, 527, 561, 563, 573, 587, 589, 599, 603, 607, 611, 612], "want": [2, 6, 110, 111, 113, 149, 213, 215, 251, 253, 312, 356, 368, 561, 564, 568, 576, 578, 586, 598, 599, 600, 610, 611, 613], "move": [2, 90, 121, 606, 609], "keep": [2, 6, 310, 311, 351, 356, 597, 598, 609, 613], "should": [2, 3, 6, 57, 60, 63, 64, 86, 88, 89, 90, 97, 117, 122, 154, 155, 180, 195, 203, 204, 213, 215, 217, 221, 226, 231, 232, 236, 237, 251, 253, 255, 259, 264, 267, 268, 272, 277, 282, 283, 312, 316, 317, 319, 324, 325, 326, 340, 347, 352, 363, 374, 378, 442, 523, 561, 564, 568, 578, 584, 593, 596, 598, 600, 604, 607, 612, 613, 614], "try": [2, 213, 251, 462, 465, 474, 546, 570, 607], "detect": [2, 88, 186, 190, 279, 283, 321, 325, 330, 462, 465, 474, 533, 561, 581, 588, 589], "ssd": [2, 615], "resnet34": [2, 615], "ptq": [2, 568, 575, 607, 611, 613], "r34": 2, "py": [2, 6, 149, 184, 186, 277, 279, 280, 281, 312, 319, 321, 322, 323, 347, 549, 561, 568, 576, 583, 585, 586, 587, 593, 596, 607, 609, 611], "def": [2, 6, 110, 111, 113, 171, 203, 204, 352, 563, 564, 566, 568, 578, 607, 611, 613], "bboxes_labels_scor": 2, "bbox": [2, 279, 321, 578], "prob": 2, "criteria": [2, 274, 275, 302, 307, 310, 312, 315, 317, 338, 361, 598], "0": [2, 5, 55, 57, 60, 62, 86, 87, 88, 89, 96, 134, 149, 178, 184, 192, 195, 200, 205, 207, 210, 211, 212, 214, 215, 218, 219, 222, 228, 232, 234, 235, 236, 243, 245, 248, 249, 250, 252, 253, 256, 257, 260, 265, 268, 270, 272, 274, 275, 283, 288, 290, 291, 295, 297, 300, 302, 307, 310, 315, 317, 325, 335, 340, 350, 356, 518, 526, 561, 564, 566, 568, 570, 572, 577, 578, 579, 584, 591, 595, 602, 603, 604, 606, 607, 609, 610, 611, 612, 613, 614], "45": [2, 290, 615], "max_output": 2, "200": [2, 231, 267, 613, 615], "box": [2, 232, 268, 279, 283, 321, 325, 355, 561, 578, 581, 592, 598, 611, 612, 613], "label": [2, 26, 55, 57, 90, 195, 203, 204, 215, 217, 218, 219, 220, 223, 228, 232, 234, 236, 237, 253, 255, 256, 257, 258, 261, 265, 268, 276, 278, 282, 283, 288, 289, 317, 318, 320, 324, 325, 326, 352, 450, 563, 564, 578, 612], "score": [2, 26, 276, 277, 279, 280, 281, 283, 296, 310, 312, 318, 319, 321, 322, 323, 325, 337, 340, 347, 349, 358, 361, 371, 578, 600, 603, 604, 610, 613], "zip": 2, "split": [2, 56, 65, 77, 87, 122, 125, 178, 231, 232, 267, 268, 288, 612], "squeez": [2, 121], "dbox": 2, "dlabel": 2, "dscore": 2, "decode_singl": 2, "append": [2, 186, 190, 316, 355, 601], "return": [2, 3, 26, 55, 57, 60, 62, 63, 64, 88, 90, 91, 92, 93, 96, 99, 100, 103, 104, 105, 106, 110, 111, 113, 117, 122, 124, 128, 129, 133, 134, 135, 136, 137, 138, 149, 152, 154, 155, 161, 171, 178, 180, 182, 184, 185, 186, 189, 190, 191, 193, 197, 203, 204, 205, 207, 214, 217, 221, 224, 225, 226, 228, 229, 231, 232, 233, 234, 239, 243, 245, 252, 255, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 291, 297, 298, 299, 300, 301, 302, 305, 307, 310, 311, 312, 313, 314, 316, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 340, 346, 347, 348, 349, 350, 351, 352, 355, 356, 360, 363, 364, 367, 368, 371, 374, 377, 378, 398, 399, 401, 408, 409, 410, 411, 412, 414, 415, 417, 418, 442, 445, 446, 447, 448, 479, 518, 521, 523, 525, 526, 527, 533, 536, 545, 546, 549, 564, 568, 578, 580, 600, 607, 611, 613], "process": [3, 6, 55, 57, 60, 63, 88, 90, 155, 186, 203, 204, 215, 216, 217, 226, 228, 229, 232, 233, 242, 253, 254, 255, 264, 265, 266, 268, 269, 270, 272, 275, 286, 287, 290, 296, 298, 299, 302, 307, 310, 312, 313, 314, 316, 317, 326, 340, 346, 347, 348, 350, 351, 352, 355, 377, 394, 477, 478, 481, 514, 518, 522, 525, 526, 534, 561, 563, 564, 566, 567, 568, 570, 582, 601, 603, 604, 607, 611, 612, 613, 614], "autom": [3, 581, 598, 599], "design": [3, 161, 214, 236, 237, 242, 252, 275, 290, 315, 324, 325, 356, 586, 589, 603, 604, 607], "artifici": 3, "network": [3, 5, 186, 288, 291, 312, 337, 340, 358, 561, 566, 567, 570, 602, 605, 607, 613], "ann": 3, "par": 3, "outperform": 3, "hand": [3, 279, 321, 561], "our": [3, 5, 179, 570, 599, 610], "leverag": [3, 118, 566, 581, 598, 601, 607], "algorithm": [3, 5, 6, 26, 62, 190, 196, 231, 267, 276, 283, 286, 290, 298, 299, 301, 317, 318, 325, 355, 371, 373, 566, 572, 575, 587, 592, 603, 604, 607, 611, 613, 614], "built": [3, 6, 118, 161, 195, 201, 202, 206, 211, 215, 216, 221, 223, 225, 226, 228, 229, 232, 236, 237, 239, 244, 247, 249, 253, 254, 259, 261, 263, 264, 265, 266, 268, 316, 317, 324, 325, 328, 332, 564, 568, 591, 595, 600, 612, 613, 614], "grid": [3, 301], "bayesian": [3, 301, 317, 359, 606], "optim": [3, 5, 24, 63, 88, 90, 91, 92, 96, 100, 103, 104, 106, 117, 118, 122, 123, 128, 129, 132, 135, 136, 137, 138, 142, 155, 157, 178, 196, 200, 236, 242, 269, 274, 275, 289, 301, 312, 313, 315, 317, 335, 337, 346, 347, 348, 349, 355, 368, 369, 372, 379, 381, 385, 387, 389, 406, 410, 411, 417, 419, 420, 421, 422, 423, 424, 425, 427, 428, 430, 431, 433, 434, 435, 436, 437, 440, 441, 454, 508, 514, 515, 525, 531, 534, 537, 541, 548, 553, 562, 566, 568, 572, 575, 576, 580, 581, 583, 585, 586, 589, 592, 602, 603, 605, 606, 607, 608, 610, 611, 613, 614], "propos": [3, 6, 299, 340, 566, 579, 603], "base": [3, 6, 26, 55, 57, 60, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 152, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 275, 276, 279, 282, 283, 284, 286, 287, 288, 290, 291, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 310, 312, 314, 315, 316, 317, 318, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 349, 350, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 369, 372, 373, 374, 375, 378, 383, 384, 385, 387, 388, 389, 390, 393, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 437, 438, 439, 441, 444, 446, 447, 450, 460, 462, 465, 467, 469, 470, 472, 473, 474, 475, 483, 486, 491, 495, 498, 501, 511, 515, 517, 519, 521, 525, 526, 527, 528, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 546, 547, 549, 551, 555, 556, 564, 567, 568, 572, 586, 587, 589, 598, 602, 604, 610, 611, 613, 615], "given": [3, 54, 62, 63, 64, 86, 90, 110, 111, 113, 154, 155, 184, 190, 200, 231, 232, 267, 268, 279, 321, 333, 334, 335, 340, 347, 352, 363, 374, 442, 448, 462, 465, 467, 468, 470, 472, 473, 475, 519, 533, 546, 603, 604, 612], "train": [3, 6, 17, 55, 57, 60, 63, 88, 90, 99, 105, 122, 123, 161, 200, 203, 204, 215, 217, 232, 242, 253, 255, 268, 269, 275, 285, 286, 288, 289, 296, 298, 302, 307, 312, 313, 315, 316, 317, 346, 347, 348, 352, 363, 371, 541, 564, 566, 567, 570, 575, 579, 581, 587, 598, 601, 603, 604, 605, 610, 613, 614, 615], "evalu": [3, 6, 26, 55, 57, 60, 63, 88, 90, 195, 203, 204, 215, 233, 242, 253, 269, 274, 275, 276, 279, 280, 281, 282, 283, 285, 286, 287, 290, 291, 298, 299, 302, 307, 312, 313, 316, 317, 318, 321, 322, 323, 324, 325, 326, 336, 340, 347, 348, 352, 363, 371, 383, 385, 387, 389, 390, 391, 514, 522, 534, 538, 563, 564, 566, 573, 575, 578, 579, 581, 587, 589, 592, 598, 600, 603, 607, 610, 611, 613, 614], "after": [3, 62, 64, 88, 100, 121, 190, 215, 228, 232, 235, 236, 242, 253, 265, 268, 269, 270, 272, 275, 288, 310, 312, 313, 314, 337, 340, 347, 348, 349, 350, 356, 368, 519, 561, 563, 564, 566, 570, 575, 578, 591, 592, 595, 599, 600, 601, 603, 604, 607, 608, 610, 611, 612, 613], "sever": [3, 178, 232, 268, 314, 350, 561, 566, 575, 579, 591, 595, 603, 604, 606, 612, 613, 614], "procedur": [3, 196, 340, 356], "lie": [3, 299], "pareto": [3, 299, 300], "front": [3, 299, 300], "dyna": [3, 275, 288, 289, 290, 291, 292, 298, 317, 575, 606], "super": [3, 281, 288, 291, 323], "metric": [3, 6, 9, 24, 26, 55, 57, 60, 63, 88, 90, 195, 203, 204, 233, 236, 269, 274, 275, 285, 286, 287, 289, 291, 298, 299, 300, 301, 302, 307, 315, 316, 317, 326, 336, 352, 371, 391, 395, 401, 406, 420, 423, 425, 430, 454, 514, 522, 525, 530, 533, 534, 536, 552, 561, 563, 564, 568, 579, 610, 611, 613, 614, 615], "predictor": [3, 287, 288, 289, 291, 298], "predict": [3, 26, 184, 195, 232, 236, 237, 268, 276, 280, 281, 282, 283, 289, 291, 317, 318, 322, 323, 324, 325, 566, 578, 589, 611, 612], "4x": [3, 607], "more": [3, 4, 5, 105, 178, 184, 203, 232, 268, 279, 295, 297, 310, 321, 340, 363, 561, 564, 566, 568, 575, 576, 578, 579, 581, 589, 593, 596, 600, 601, 603, 604, 608, 613, 615], "sampl": [3, 5, 120, 149, 186, 205, 208, 213, 215, 216, 217, 221, 226, 228, 232, 243, 246, 251, 253, 254, 255, 259, 264, 265, 268, 282, 283, 300, 324, 325, 355, 409, 465, 534, 564, 575, 599, 607, 612, 613, 614, 615], "effici": [3, 5, 563, 566, 581, 601, 605], "than": [3, 97, 105, 184, 215, 232, 253, 268, 279, 321, 336, 378, 562, 564, 573, 578, 600, 601, 603, 604, 607, 610, 612, 613], "typic": [3, 5, 105, 154, 161, 275, 285, 316, 567, 603, 604], "one": [3, 5, 6, 26, 90, 148, 149, 154, 171, 190, 206, 209, 226, 232, 242, 268, 275, 276, 279, 282, 283, 285, 288, 310, 313, 314, 318, 321, 324, 325, 340, 348, 350, 368, 527, 561, 566, 567, 568, 572, 575, 576, 578, 579, 581, 582, 586, 587, 589, 591, 592, 595, 598, 599, 600, 601, 603, 604, 606, 607, 609, 612, 613], "shot": [3, 242, 275, 312, 314, 337, 350, 575, 603, 604, 605], "shown": [3, 442, 561, 563, 566, 578, 592, 600, 601, 613], "figur": [3, 591, 592, 595, 603], "phase": [3, 191, 193, 316, 347, 348, 603, 604, 607, 608, 613], "small": [3, 97, 110, 111, 112, 279, 321, 358, 561, 613], "popul": [3, 290], "sub": [3, 88, 109, 110, 111, 130, 149, 233, 272, 275, 291, 363, 613], "randomli": [3, 232, 268, 301, 355, 362, 612, 613], "measur": [3, 6, 55, 57, 60, 63, 88, 90, 184, 233, 290, 291, 296, 326, 336, 373, 552, 562, 566, 578, 611, 613], "provid": [3, 6, 110, 111, 149, 161, 203, 204, 226, 229, 232, 242, 264, 266, 268, 274, 275, 279, 288, 297, 302, 307, 315, 316, 321, 326, 352, 372, 374, 442, 462, 468, 518, 527, 552, 561, 562, 563, 567, 568, 569, 570, 575, 576, 579, 580, 581, 585, 589, 592, 598, 599, 603, 606, 607, 611, 613, 614, 615], "initi": [3, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 155, 184, 195, 203, 204, 212, 215, 234, 242, 250, 253, 269, 275, 286, 287, 298, 299, 311, 312, 316, 317, 333, 347, 352, 363, 397, 420, 421, 430, 479, 511, 513, 521, 534, 541, 563, 564, 578, 597, 603, 604, 613], "inner": 3, "multi": [3, 117, 122, 233, 275, 279, 290, 295, 297, 321, 336, 361, 391, 563, 564, 575, 600, 613], "evolutionari": 3, "extens": [3, 6, 88, 316, 468, 533, 572, 575, 579, 580, 582, 587, 588, 589, 593, 596, 597, 605, 613, 614], "next": [3, 103, 188, 208, 246, 273, 299, 314, 350, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 561, 606, 613], "cycl": 3, "continu": [3, 279, 310, 321, 340, 356, 599, 603], "until": [3, 361, 613], "conclud": 3, "count": [3, 62, 299, 340, 356, 564], "met": [3, 204, 363, 572, 579, 607, 611], "tensorflow": [3, 5, 6, 56, 94, 96, 118, 119, 120, 124, 131, 139, 145, 149, 150, 151, 153, 156, 161, 169, 181, 184, 214, 215, 216, 217, 220, 221, 222, 224, 225, 226, 229, 232, 234, 239, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 266, 268, 272, 273, 274, 275, 277, 279, 282, 283, 284, 285, 315, 319, 321, 324, 325, 326, 334, 352, 361, 378, 440, 441, 453, 454, 461, 510, 511, 512, 514, 561, 563, 566, 569, 570, 572, 575, 576, 579, 580, 588, 589, 603, 605, 606, 610, 613, 614], "Not": [3, 233, 242, 275, 302, 307, 378, 517], "yet": [3, 60, 63, 90, 340, 561, 593, 596, 599], "simplest": [3, 584], "launcher": [3, 5, 566, 589, 603], "experiment": [3, 26, 227, 317, 511, 564, 568, 570, 606, 608, 609, 612], "agent": 3, "nasconfig": [3, 196, 275, 287, 298, 299], "argument": [3, 275, 295, 297, 302, 307, 313, 316, 348, 380, 488, 492, 497, 500, 506, 518, 526, 546], "config": [3, 5, 17, 60, 62, 63, 64, 88, 89, 90, 152, 154, 155, 157, 161, 190, 195, 203, 204, 215, 233, 242, 253, 274, 275, 288, 296, 299, 302, 307, 310, 311, 312, 313, 314, 317, 326, 337, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 367, 368, 371, 377, 378, 379, 380, 383, 384, 385, 387, 389, 390, 393, 419, 425, 427, 428, 432, 433, 477, 479, 486, 488, 491, 492, 495, 497, 498, 500, 501, 508, 511, 514, 522, 533, 536, 537, 538, 539, 541, 543, 544, 546, 554, 556, 559, 561, 562, 566, 568, 570, 575, 579, 580, 601, 603, 606, 607, 608, 610, 611, 613], "search_algorithm": [3, 196, 275, 298, 299, 317], "nsga2": [3, 290], "supernet": [3, 290, 291, 293, 294], "ofa_mbv3_d234_e346_k357_w1": 3, "acc": [3, 60, 63, 283, 291, 325, 336, 611, 615], "mac": [3, 287, 289, 291, 296, 298, 599], "50": [3, 279, 281, 290, 321, 323, 615], "num_ev": [3, 290], "250": 3, "results_csv_path": 3, "search_result": 3, "csv": [3, 288, 291, 533, 561], "batch_siz": [3, 195, 205, 207, 210, 211, 212, 213, 214, 215, 216, 235, 236, 243, 245, 248, 249, 250, 251, 252, 253, 254, 270, 272, 291, 296, 317, 335, 384, 398, 409, 511, 534, 563, 564, 568, 570, 573, 581, 607], "64": [3, 232, 268, 612, 615], "dataset_path": [3, 291, 296, 534], "dataset": [3, 5, 6, 28, 55, 57, 60, 63, 88, 90, 190, 195, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 226, 235, 236, 243, 245, 246, 248, 249, 250, 251, 252, 264, 274, 275, 279, 280, 281, 283, 285, 291, 315, 316, 317, 321, 322, 323, 325, 326, 352, 371, 398, 406, 409, 412, 420, 425, 429, 430, 431, 442, 454, 531, 533, 534, 535, 563, 568, 578, 603, 604, 607, 609, 613, 614, 615], "imagenet": [3, 217, 220, 228, 255, 258, 265, 291, 587, 611, 612, 614, 615], "ilsvrc2012": [3, 291], "under": [3, 149, 161, 217, 255, 377, 561, 564, 577, 578, 581, 586, 587, 598, 601, 603, 604, 607, 611, 613], "file": [3, 6, 88, 149, 178, 184, 193, 195, 196, 203, 204, 215, 216, 217, 220, 231, 232, 241, 253, 254, 255, 258, 267, 268, 269, 272, 274, 275, 279, 285, 286, 287, 288, 289, 291, 298, 299, 302, 307, 311, 313, 315, 316, 317, 321, 326, 335, 336, 348, 351, 352, 374, 377, 378, 383, 384, 385, 386, 387, 388, 389, 390, 442, 479, 488, 492, 502, 518, 525, 526, 532, 533, 534, 546, 550, 554, 556, 558, 559, 561, 568, 571, 573, 577, 578, 580, 584, 593, 596, 597, 598, 599, 600, 603, 606, 611, 612], "input": [3, 6, 55, 57, 62, 64, 86, 87, 88, 90, 96, 103, 105, 106, 107, 110, 111, 113, 114, 115, 117, 122, 123, 125, 126, 128, 130, 148, 149, 154, 155, 161, 171, 178, 180, 184, 185, 186, 189, 190, 195, 200, 203, 204, 215, 216, 217, 219, 228, 231, 232, 234, 236, 237, 242, 253, 254, 255, 257, 265, 267, 268, 269, 270, 271, 272, 274, 275, 279, 284, 291, 295, 297, 302, 307, 316, 317, 321, 324, 325, 326, 330, 332, 333, 334, 335, 340, 347, 352, 368, 378, 380, 391, 414, 419, 420, 422, 425, 426, 427, 428, 429, 462, 465, 472, 473, 474, 476, 488, 492, 497, 500, 506, 531, 534, 540, 561, 562, 563, 564, 566, 568, 570, 572, 573, 578, 580, 581, 586, 603, 606, 607, 611, 612, 614], "aim": [3, 581, 604, 613], "accord": [3, 6, 62, 90, 161, 203, 215, 216, 217, 226, 229, 232, 253, 254, 255, 264, 266, 268, 275, 297, 314, 315, 335, 340, 341, 344, 345, 346, 350, 353, 355, 356, 358, 360, 363, 371, 532, 564, 568, 603, 604, 608, 612, 613], "note": [3, 5, 55, 57, 60, 63, 88, 97, 275, 279, 302, 307, 313, 321, 340, 348, 361, 414, 425, 429, 561, 568, 572, 576, 583, 586, 591, 595, 598, 603, 607, 611, 613, 614], "regist": [3, 6, 55, 81, 171, 191, 193, 217, 221, 224, 225, 226, 229, 232, 234, 239, 242, 255, 259, 262, 263, 264, 266, 268, 269, 275, 282, 283, 300, 301, 302, 303, 304, 305, 307, 310, 312, 314, 324, 325, 332, 335, 336, 337, 340, 346, 347, 349, 350, 355, 363, 564, 568, 578, 599, 600, 613], "inherit": [3, 6, 57, 60, 63, 88, 89, 212, 232, 234, 242, 250, 268, 275, 312, 314, 347, 350, 564], "nasbas": [3, 286, 287, 298, 299], "own": [3, 57, 60, 63, 88, 89, 117, 213, 232, 251, 268, 561, 563, 564, 575, 578, 600, 610], "just": [3, 54, 141, 205, 226, 229, 230, 232, 235, 236, 237, 238, 240, 243, 268, 336, 588, 592, 598, 601, 607, 612, 613], "registri": [3, 310, 312, 314, 337, 340, 347, 349, 350], "well": [3, 54, 203, 204, 326, 352, 564, 607, 609, 614], "wai": [3, 216, 217, 220, 254, 255, 258, 561, 563, 564, 578, 581, 584, 599, 601, 603, 604, 607, 613, 614], "mobilenetv3": [3, 290, 291], "lt": [3, 294, 564, 602], "wmt": 3, "en": 3, "de": 3, "center": [4, 5, 232, 268, 612, 613], "work": [4, 274, 275, 302, 307, 315, 563, 566, 593, 596, 603, 604, 608, 609, 611], "guidelin": [4, 5], "popular": [5, 6, 275, 317, 560, 566, 570, 603, 607, 613], "compress": [5, 242, 275, 302, 307, 317, 368, 560, 566, 575, 598, 600, 601, 603, 604, 605, 607], "techniqu": [5, 275, 317, 560, 575, 581, 601, 603, 604, 606, 607, 614], "mainstream": 5, "deep": [5, 6, 197, 563, 575, 576, 579, 581, 583, 586, 587, 589, 592, 598, 605, 607, 613], "learn": [5, 6, 297, 563, 564, 570, 573, 575, 576, 579, 581, 583, 586, 587, 589, 592, 593, 596, 598, 604, 605, 607, 611, 613], "framework": [5, 6, 55, 57, 60, 62, 63, 88, 195, 201, 202, 206, 207, 209, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 229, 232, 234, 235, 236, 239, 244, 245, 247, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 268, 274, 275, 282, 283, 284, 291, 315, 316, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 361, 363, 371, 380, 395, 406, 423, 425, 430, 432, 434, 454, 462, 465, 467, 468, 474, 481, 483, 488, 492, 497, 500, 504, 515, 521, 533, 534, 561, 568, 569, 573, 575, 576, 578, 579, 603, 605, 607, 611, 612, 613, 614], "mxnet": [5, 6, 61, 62, 210, 214, 217, 220, 221, 224, 225, 226, 229, 232, 248, 252, 255, 258, 259, 262, 263, 264, 266, 268, 274, 275, 282, 283, 315, 324, 325, 326, 331, 352, 563, 569, 572, 575, 579, 580, 606, 613, 614], "formerli": 5, "known": [5, 235, 236, 355, 570, 603, 611, 613], "low": [5, 6, 60, 87, 89, 90, 203, 204, 218, 219, 256, 257, 274, 275, 284, 315, 326, 562, 564, 568, 579, 605, 607, 613], "precis": [5, 6, 17, 55, 57, 60, 63, 88, 89, 90, 91, 92, 122, 185, 203, 204, 274, 275, 279, 281, 283, 284, 315, 321, 323, 325, 326, 336, 353, 356, 363, 395, 406, 409, 410, 420, 421, 422, 423, 424, 425, 430, 454, 483, 488, 490, 491, 492, 515, 534, 537, 539, 561, 562, 567, 568, 572, 575, 581, 587, 588, 589, 605, 606, 607, 613], "tool": [5, 6, 184, 378, 591, 595, 605, 607], "deliv": [5, 605], "unifi": [5, 6, 206, 209, 226, 274, 275, 315, 525, 563, 573, 575, 580], "interfac": [5, 57, 60, 63, 88, 89, 130, 149, 152, 171, 180, 196, 200, 206, 209, 226, 274, 275, 290, 291, 302, 307, 315, 316, 317, 336, 363, 371, 373, 379, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 495, 501, 508, 520, 575, 589, 602, 607, 609], "across": [5, 64, 274, 275, 284, 315, 326, 565, 603, 604], "technologi": [5, 217, 255, 602], "prune": [5, 35, 178, 242, 275, 303, 304, 305, 307, 308, 310, 311, 312, 314, 316, 317, 335, 337, 338, 340, 341, 342, 344, 345, 346, 347, 349, 350, 351, 368, 378, 389, 396, 409, 415, 425, 427, 454, 462, 474, 489, 514, 522, 533, 538, 568, 572, 575, 601, 605, 607, 614], "knowledg": [5, 200, 234, 269, 275, 567, 575, 580, 614], "distil": [5, 35, 200, 234, 241, 242, 275, 317, 368, 575, 601, 614], "driven": [5, 336, 579, 598, 600, 611], "tune": [5, 6, 55, 57, 60, 62, 63, 88, 90, 195, 200, 203, 204, 215, 217, 253, 255, 274, 275, 315, 317, 326, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 378, 390, 409, 417, 418, 425, 427, 431, 454, 484, 489, 502, 514, 522, 534, 538, 561, 563, 564, 568, 575, 577, 579, 598, 600, 605, 608, 609, 610, 611, 614], "strategi": [5, 6, 16, 55, 57, 60, 62, 63, 88, 190, 200, 201, 217, 255, 275, 315, 317, 395, 417, 515, 533, 543, 568, 575, 586, 598, 605, 606, 607, 608, 609, 614], "help": [5, 99, 241, 285, 333, 395, 533, 580, 581, 587, 598, 613], "quickli": [5, 613], "find": [5, 6, 87, 110, 111, 113, 184, 204, 283, 299, 300, 325, 333, 355, 378, 479, 549, 561, 584, 591, 595, 598, 599, 603, 610, 611, 613], "It": [5, 6, 88, 96, 105, 122, 203, 204, 241, 275, 281, 283, 288, 289, 300, 310, 315, 316, 323, 325, 326, 340, 352, 355, 356, 357, 360, 363, 374, 561, 566, 584, 587, 592, 598, 599, 603, 604, 607, 610, 613, 614], "implement": [5, 26, 57, 60, 63, 88, 89, 90, 130, 149, 171, 179, 180, 183, 203, 204, 210, 213, 214, 215, 217, 221, 226, 248, 251, 252, 253, 255, 259, 264, 276, 282, 283, 305, 310, 314, 318, 324, 325, 326, 336, 340, 347, 348, 349, 350, 352, 358, 363, 563, 564, 589, 599, 604, 609, 611, 613, 614], "weight": [5, 6, 55, 57, 64, 86, 87, 88, 90, 103, 104, 105, 122, 149, 161, 178, 179, 186, 194, 270, 272, 282, 283, 297, 306, 310, 312, 314, 324, 325, 334, 335, 337, 340, 341, 342, 344, 345, 347, 349, 350, 358, 378, 438, 543, 561, 567, 570, 572, 573, 578, 600, 603, 604, 606, 607, 611, 613, 614], "predefin": [5, 384, 420, 424, 425, 533], "sparsiti": [5, 275, 302, 306, 307, 310, 312, 313, 314, 334, 335, 340, 344, 345, 346, 347, 348, 350, 378, 564, 575, 603, 615], "goal": [5, 195, 204, 269, 274, 275, 302, 307, 315, 317, 326, 336, 346, 352, 363, 534, 563, 601, 607, 613], "teacher": [5, 200, 234, 269, 275, 297, 317, 566, 567, 615], "student": [5, 215, 234, 241, 253, 269, 275, 564, 566, 567, 615], "ai": [5, 581, 605, 608], "oneapi": [5, 576, 605], "analyt": [5, 576, 605], "visit": [5, 615], "websit": [5, 576], "io": [5, 62], "7": [5, 122, 178, 562, 571, 572, 576, 607, 609, 613], "10": [5, 217, 255, 279, 321, 355, 511, 561, 562, 564, 576, 603, 606, 612, 613], "releas": [5, 520, 533, 574, 576, 587, 589, 591, 595, 597], "binari": [5, 69, 184, 283, 295, 297, 325, 571, 578, 593, 596], "stabl": [5, 561, 576, 605], "basic": [5, 200, 231, 267, 286, 298, 310, 317, 340, 359, 363, 368, 575, 576, 606, 610], "pypi": [5, 561, 576, 593, 596], "pip": [5, 561, 568, 571, 576, 583, 591, 593, 595, 596, 609], "full": [5, 87, 90, 215, 216, 217, 233, 253, 254, 255, 275, 561, 564, 571, 576, 577, 599], "nightli": [5, 561, 576], "git": [5, 374, 561, 576], "clone": [5, 561, 576, 591, 595], "cd": [5, 561, 568, 576], "r": [5, 87, 113, 179, 194, 291, 561, 576, 599, 602, 607, 615], "txt": [5, 220, 258, 526, 561, 564, 576], "simpl": [5, 232, 268, 561, 576, 610, 613], "found": [5, 269, 275, 286, 287, 298, 299, 355, 361, 517, 533, 550, 561, 579, 586, 613], "A": [5, 57, 63, 88, 90, 97, 99, 110, 111, 113, 117, 118, 149, 152, 154, 155, 161, 178, 184, 190, 191, 193, 217, 221, 226, 231, 232, 235, 236, 237, 238, 255, 259, 264, 267, 268, 269, 275, 276, 279, 280, 281, 283, 286, 298, 299, 300, 301, 302, 303, 304, 305, 307, 310, 311, 312, 313, 314, 318, 321, 322, 323, 324, 325, 326, 328, 330, 334, 337, 340, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 360, 361, 362, 364, 367, 564, 569, 572, 578, 580, 591, 592, 595, 598, 603, 605, 612, 613, 614], "fp32": [5, 6, 55, 57, 60, 86, 88, 89, 90, 91, 92, 122, 135, 137, 170, 175, 179, 186, 190, 194, 203, 204, 270, 272, 283, 325, 335, 336, 356, 360, 371, 377, 378, 433, 561, 572, 578, 579, 588, 606, 607, 608, 609, 610, 611, 613, 614, 615], "wget": 5, "storag": [5, 279, 321, 578], "googleapi": 5, "v1_6": 5, "mobilenet_v1_1": 5, "0_224_frozen": 5, "pb": [5, 90, 326, 334, 352, 470, 473, 484, 562, 568, 580, 611, 615], "data": [5, 6, 24, 55, 57, 60, 62, 63, 64, 87, 88, 90, 98, 122, 149, 178, 184, 186, 188, 190, 195, 203, 204, 233, 234, 235, 236, 270, 272, 273, 275, 291, 296, 310, 316, 317, 326, 333, 340, 352, 355, 361, 371, 378, 379, 381, 384, 391, 392, 393, 395, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 442, 458, 459, 462, 465, 469, 474, 477, 478, 479, 481, 484, 486, 491, 495, 498, 501, 503, 508, 511, 518, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 549, 554, 556, 557, 559, 561, 563, 564, 568, 572, 576, 578, 579, 607, 608, 609, 610, 611, 612, 613], "dummi": [5, 102, 218, 219, 256, 257, 273, 283, 325, 425, 429, 535, 561, 564, 578], "shape": [5, 149, 161, 178, 184, 218, 219, 228, 232, 256, 257, 265, 268, 279, 295, 297, 310, 321, 332, 340, 454, 461, 462, 465, 474, 476, 514, 561, 564, 572, 612], "224": [5, 228, 265, 291, 563, 564, 568, 570, 581, 612, 614], "eval_dataload": [5, 203, 204, 242, 274, 275, 285, 316, 326, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 562, 573, 613], "search": [5, 26, 35, 111, 113, 122, 196, 203, 204, 274, 275, 276, 286, 287, 288, 290, 291, 298, 299, 300, 301, 315, 318, 355, 357, 358, 362, 420, 421, 448, 575, 578, 581, 582, 592, 605, 611, 613], "jupyt": [5, 589, 591, 592, 595], "lab": [5, 591, 592, 593, 595, 596], "manag": [5, 288, 289, 290, 291, 397, 430, 432, 455, 516, 532, 581, 582, 592], "click": [5, 561, 575, 581, 582, 589, 592, 598, 605, 611], "12": [5, 49, 561], "onnxruntim": [5, 6, 63, 211, 249, 275, 284, 437, 441, 575, 606], "raw": [5, 216, 220, 223, 254, 258, 261, 360, 578, 613], "vision": [5, 585], "classif": [5, 215, 232, 253, 268, 283, 313, 325, 348, 566, 578, 587, 605], "resnet": [5, 568, 615], "resnet50": [5, 291, 568, 581, 585, 607, 610, 615], "v1": [5, 50, 51, 52, 90, 184, 227, 228, 265, 280, 281, 283, 322, 323, 325, 334, 568, 578, 580, 609, 610, 615], "inc_bench": [5, 317, 514, 561], "xeon": [5, 577, 579, 602, 605, 607, 608, 615], "scalabl": [5, 579, 602, 605, 607, 608, 615], "skylak": 5, "cascad": 5, "lake": [5, 579, 605], "cooper": [5, 579, 605], "ic": [5, 603, 605], "sapphir": 5, "rapid": 5, "max": [5, 62, 63, 64, 87, 90, 149, 179, 194, 232, 268, 280, 281, 322, 323, 355, 378, 543, 561, 607, 612, 613], "seri": [5, 228, 265, 612], "hbm": 5, "flex": 5, "arctic": 5, "sound": 5, "m": [5, 62, 87, 113, 186, 310, 340, 566, 581, 583, 586, 589, 593, 596, 615], "pont": 5, "vecchio": 5, "amd": [5, 575, 615], "arm": [5, 575, 615], "nvidia": [5, 575, 603, 607, 615], "o": [5, 62, 113, 442, 583, 602], "cento": [5, 526], "ubuntu": [5, 602], "20": [5, 232, 268, 290, 291, 602, 612, 614, 615], "04": [5, 523, 602, 615], "inteltensorflow": [5, 220, 222, 258, 260], "fortensorflow": 5, "forpytorch": 5, "11": [5, 52, 523, 561, 578, 579], "13": [5, 51, 52, 352, 561, 615], "variabl": [5, 161, 217, 233, 255, 275, 284, 290, 334, 349, 355, 521, 546, 561, 604, 613], "tf_enable_onednn_opt": [5, 561], "enabl": [5, 88, 90, 148, 186, 297, 312, 347, 521, 561, 568, 579, 581, 583, 586, 587, 589, 602, 603, 604, 605, 608, 613], "onednn": [5, 607], "v2": [5, 186, 358, 568, 587, 609, 613, 615], "6": [5, 60, 122, 561, 572, 607, 613, 615], "10k": 5, "hub": [5, 374, 526, 589], "g": [5, 60, 63, 89, 288, 290, 316, 340, 525, 566, 581, 586, 603, 604, 609, 613], "huggingfac": [5, 215, 253, 374, 564, 586, 587, 588, 589], "torchvis": [5, 232, 268, 291, 581, 587], "zoo": [5, 214, 232, 252, 268, 615], "speedup": [5, 575, 607], "up": [5, 62, 110, 111, 113, 144, 232, 268, 275, 291, 302, 307, 311, 336, 419, 561, 568, 572, 575, 589, 593, 596, 598, 605, 606, 607, 610, 612, 614], "2x": [5, 575, 602], "vnni": [5, 378, 575, 606, 607], "while": [5, 6, 57, 90, 180, 297, 312, 347, 355, 561, 564, 575, 579, 581, 586, 598, 606, 607], "minim": [5, 179, 194, 355, 566, 578, 591, 595, 603, 604, 607, 613], "loss": [5, 88, 161, 200, 204, 234, 242, 274, 275, 283, 302, 307, 315, 317, 325, 336, 368, 566, 567, 568, 578, 579, 589, 601, 603, 604, 607, 613, 614], "over": [5, 217, 221, 226, 255, 259, 264, 279, 283, 321, 325, 355, 575, 578, 589, 598, 606, 613], "30": [5, 232, 268, 575, 612, 615], "avail": [5, 7, 9, 15, 16, 17, 24, 28, 35, 43, 44, 45, 46, 48, 54, 330, 395, 400, 402, 403, 407, 410, 411, 416, 481, 561, 575, 591, 595, 602, 604, 613], "here": [5, 54, 111, 113, 161, 279, 286, 297, 298, 321, 561, 564, 568, 570, 572, 578, 586, 593, 596, 598, 603, 607, 609, 610], "overview": 5, "workflow": [5, 566, 576, 579, 593, 596, 611], "notebook": 5, "mix": [5, 6, 17, 62, 90, 91, 92, 185, 326, 353, 490, 491, 492, 539, 575, 581, 587, 588, 589], "orchestr": [5, 368, 575], "benchmark": [5, 17, 24, 55, 57, 60, 90, 200, 235, 236, 275, 316, 317, 336, 378, 399, 406, 409, 419, 425, 427, 430, 431, 454, 514, 515, 525, 531, 548, 553, 580, 581, 585, 589, 592, 598, 613, 614, 615], "distribut": [5, 62, 179, 194, 195, 205, 207, 208, 210, 211, 212, 213, 214, 235, 236, 243, 245, 246, 248, 249, 250, 251, 252, 269, 275, 302, 307, 317, 355, 373, 521, 566, 576, 593, 596, 607, 609, 613, 615], "export": [5, 200, 275, 279, 317, 321, 327, 328, 333, 335, 368, 533, 584, 599, 611], "coder": [5, 575, 582, 583, 586, 589, 592, 605], "zero": [5, 64, 86, 87, 232, 268, 275, 283, 302, 307, 310, 312, 313, 325, 340, 347, 348, 378, 603, 604, 607, 612, 613], "visual": [5, 589, 598, 610, 611, 613], "studio": [5, 589, 598], "matrix": [5, 306, 589, 604], "topic": 5, "adaptor": [5, 16, 191, 193, 242, 275, 371, 575, 608, 609, 611], "smoothquant": 5, "come": [5, 355, 613], "soon": 5, "neurip": 5, "2022": [5, 49, 50, 51, 52, 577, 615], "fast": [5, 605], "distilbert": [5, 215, 253, 564, 605, 615], "dec": [5, 605], "quala": 5, "minilm": 5, "length": [5, 26, 215, 232, 253, 268, 276, 279, 297, 318, 321, 564, 578, 607, 612], "blog": 5, "medium": [5, 279, 321], "mleffici": [5, 605], "One": [5, 354, 561, 564, 568, 575, 603, 604, 605, 613], "acceler": [5, 566, 581, 589, 598, 603, 604, 605, 608, 613], "hug": [5, 374, 605], "diffus": [5, 605], "legal": [5, 574], "secur": [5, 602, 605], "activ": [5, 6, 55, 56, 57, 60, 63, 64, 65, 77, 88, 90, 149, 167, 186, 190, 241, 270, 272, 335, 438, 561, 567, 572, 599, 602, 606, 607, 611, 614], "resum": [5, 203, 204, 353, 354, 357, 358, 361, 362, 363, 368, 374], "5": [6, 122, 200, 219, 228, 234, 257, 265, 279, 283, 321, 325, 356, 561, 564, 572, 578, 602, 603, 606, 612, 613, 614, 615], "build": [6, 62, 154, 161, 171, 191, 192, 193, 194, 272, 273, 286, 288, 298, 299, 329, 331, 333, 334, 335, 398, 399, 401, 412, 413, 415, 418, 442, 502, 511, 533, 550, 561, 576, 580, 591, 593, 595, 596, 599, 605, 610, 613], "infer": [6, 62, 64, 110, 111, 171, 178, 274, 275, 315, 334, 352, 566, 579, 598, 600, 603, 604, 605, 607, 611, 613], "solut": [6, 179, 194, 288, 571, 583, 587, 592, 605, 613], "onnx": [6, 7, 9, 56, 63, 64, 77, 86, 87, 187, 211, 249, 270, 271, 272, 273, 327, 328, 333, 335, 368, 376, 381, 484, 563, 569, 570, 572, 575, 579, 580, 583, 588, 589, 605, 606, 613], "runtim": [6, 7, 526, 563, 569, 572, 575, 583, 588, 589, 606], "layer": [6, 55, 57, 60, 63, 88, 89, 90, 111, 113, 154, 155, 156, 157, 158, 160, 161, 200, 234, 241, 275, 297, 302, 307, 310, 311, 313, 340, 348, 351, 369, 371, 372, 378, 545, 567, 575, 603, 604, 609], "bridg": [6, 575], "vanilla": [6, 575], "quantiz": [6, 17, 35, 55, 56, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 132, 136, 138, 140, 143, 146, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 183, 185, 186, 188, 190, 191, 193, 195, 200, 203, 204, 228, 235, 236, 242, 265, 270, 272, 273, 274, 275, 285, 316, 317, 326, 335, 354, 355, 356, 357, 358, 360, 361, 362, 363, 368, 369, 372, 373, 374, 377, 378, 390, 395, 425, 427, 433, 514, 522, 534, 538, 561, 563, 564, 568, 570, 572, 573, 575, 578, 579, 580, 581, 586, 588, 589, 592, 601, 605, 609, 611, 612, 613, 614], "onli": [6, 57, 60, 63, 64, 88, 90, 91, 92, 96, 105, 106, 110, 111, 113, 117, 130, 148, 154, 173, 177, 179, 194, 215, 233, 235, 236, 239, 253, 275, 285, 297, 310, 312, 340, 341, 347, 361, 533, 543, 545, 546, 562, 563, 568, 570, 572, 579, 586, 599, 603, 604, 606, 611, 613, 614], "complet": [6, 106, 561, 613, 614, 615], "subclass": [6, 55, 81, 191, 193, 210, 214, 217, 221, 224, 225, 226, 229, 232, 239, 248, 252, 255, 259, 262, 263, 264, 266, 268, 282, 283, 300, 303, 304, 305, 310, 312, 314, 324, 325, 336, 340, 346, 347, 350, 363], "packag": [6, 355, 386, 394, 400, 402, 403, 405, 406, 407, 410, 411, 414, 416, 435, 436, 440, 443, 449, 451, 454, 455, 461, 480, 482, 487, 490, 493, 494, 496, 499, 505, 510, 514, 548, 561, 571, 576, 598, 599, 605, 609, 613], "adaptor_registri": [6, 55], "abc": [6, 152, 281, 323, 462, 525, 611, 613], "abcadaptor": 6, "__init__": [6, 563, 564, 578, 613], "self": [6, 91, 106, 136, 200, 275, 279, 302, 312, 321, 355, 546, 561, 563, 564, 575, 578, 610, 611, 613], "framework_specific_info": [6, 55, 57, 60, 63, 88, 90], "tune_cfg": [6, 55, 57, 60, 62, 63, 88, 90, 184, 185, 190, 204, 356, 613], "q_func": [6, 55, 57, 60, 63, 88, 90, 203, 204, 275, 315, 316, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 613], "none": [6, 26, 55, 57, 60, 62, 63, 64, 86, 87, 88, 90, 91, 92, 106, 133, 149, 155, 161, 178, 184, 186, 190, 195, 196, 197, 200, 203, 204, 205, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 228, 232, 233, 234, 235, 236, 242, 243, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 265, 268, 269, 270, 272, 274, 275, 276, 279, 282, 283, 284, 285, 286, 288, 290, 291, 295, 297, 298, 299, 302, 306, 307, 311, 312, 315, 316, 317, 318, 321, 324, 325, 326, 331, 333, 334, 335, 336, 346, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 368, 369, 371, 372, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 428, 430, 431, 432, 433, 447, 462, 465, 467, 469, 472, 473, 474, 479, 481, 486, 488, 491, 492, 495, 497, 498, 500, 501, 502, 503, 504, 507, 508, 509, 511, 513, 516, 518, 519, 521, 524, 526, 527, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 545, 546, 550, 552, 558, 564, 578, 607, 611, 612, 613], "postprocess": [6, 55, 57, 60, 63, 88, 90, 195, 226, 229, 232, 233, 236, 264, 266, 268, 274, 275, 285, 297, 315, 316, 317, 371, 536, 541, 611, 612], "tensorboard": [6, 55, 57, 60, 63, 88, 90, 200, 317, 368, 371, 378], "fals": [6, 55, 57, 60, 62, 63, 64, 86, 88, 90, 91, 92, 106, 114, 115, 122, 133, 136, 143, 149, 152, 163, 170, 175, 179, 182, 183, 184, 189, 190, 195, 200, 204, 205, 207, 210, 211, 212, 214, 215, 217, 228, 232, 233, 234, 235, 236, 241, 243, 245, 248, 249, 250, 252, 253, 255, 265, 268, 279, 282, 283, 288, 289, 290, 291, 295, 296, 297, 310, 317, 321, 324, 325, 333, 336, 340, 363, 371, 374, 450, 469, 518, 521, 526, 527, 533, 552, 558, 564, 572, 578, 591, 595, 606, 607, 611, 612, 614], "query_fw_cap": [6, 55, 57, 60, 63, 88, 90], "query_fused_pattern": [6, 55], "awar": [6, 55, 57, 60, 63, 88, 90, 186, 200, 206, 209, 226, 242, 275, 285, 310, 315, 316, 317, 358, 363, 567, 568, 570, 575, 579, 598, 601, 613, 615], "calibr": [6, 55, 56, 57, 60, 62, 63, 65, 88, 91, 92, 120, 133, 134, 190, 191, 193, 195, 203, 204, 274, 275, 315, 316, 317, 326, 335, 352, 373, 542, 563, 564, 573, 575, 607, 613, 614], "convers": [6, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 97, 124, 275, 285, 579, 607, 608], "he": 6, "intersect": [6, 283, 325, 578], "yaml": [6, 88, 89, 90, 195, 196, 197, 203, 204, 215, 217, 233, 242, 253, 255, 269, 274, 275, 285, 286, 287, 298, 299, 302, 307, 315, 316, 317, 326, 351, 352, 377, 378, 379, 383, 384, 385, 386, 387, 389, 390, 392, 393, 477, 479, 486, 491, 495, 498, 501, 533, 544, 573, 578, 600, 603, 606, 611, 612], "decid": [6, 90, 154, 155, 277, 312, 319, 442, 609, 613], "besid": [6, 566], "describ": [6, 57, 63, 88, 90, 110, 111, 291, 561, 572, 611], "easili": [6, 582, 586, 598, 600, 603, 604], "op": [6, 55, 56, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 88, 89, 90, 95, 97, 99, 100, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 117, 121, 122, 124, 128, 129, 132, 135, 136, 137, 138, 140, 146, 148, 149, 162, 163, 164, 170, 172, 173, 174, 175, 177, 178, 179, 182, 184, 185, 186, 189, 190, 270, 272, 334, 353, 354, 356, 358, 360, 361, 364, 367, 373, 422, 425, 433, 438, 439, 447, 549, 561, 572, 579, 603, 607, 608, 609, 611, 613, 614], "sequenc": [6, 26, 90, 106, 122, 215, 231, 232, 253, 267, 268, 276, 277, 281, 310, 318, 319, 323, 340, 564, 572, 604, 612], "past": 6, "abov": [6, 96, 279, 321, 603], "wa": [6, 178, 204, 502, 561, 605, 613], "hidden": [6, 310, 340, 533, 603], "everi": [6, 60, 89, 110, 111, 113, 310, 312, 313, 340, 347, 348, 586, 591, 595, 603, 604, 613], "corner": [6, 232, 268, 612], "made": [6, 110, 111, 113, 289, 291, 358, 607, 609, 613], "effect": [6, 603, 604], "mainten": 6, "difficult": 6, "correspond": [6, 26, 90, 161, 186, 215, 253, 276, 279, 283, 310, 312, 316, 318, 321, 325, 347, 355, 363, 371, 572, 603, 604, 606, 607, 610, 613], "abil": [6, 564, 572], "recommend": [6, 236, 237, 324, 325, 564, 570, 572, 589, 592, 597, 599, 603, 606, 613], "end": [6, 110, 149, 184, 215, 231, 232, 242, 253, 267, 268, 275, 288, 312, 313, 336, 341, 345, 346, 347, 348, 368, 566, 572, 576, 592, 600, 603, 604, 611, 612, 613], "modif": [6, 502, 563, 572, 586], "clear": [6, 26, 154, 213, 251, 276, 282, 283, 291, 318, 324, 325, 572, 578], "fragment": 6, "enumer": [6, 300, 368, 382, 483, 489, 515, 566, 568, 601, 603, 611], "scenario": [6, 54, 395, 561, 562, 566, 603, 604], "doesn": [6, 149, 232, 268, 316, 532, 568, 599, 614], "bf16": [6, 9, 56, 60, 89, 90, 91, 92, 100, 124, 131, 135, 137, 150, 185, 335, 356, 378, 572, 579, 583, 588, 592, 598, 608, 613], "granular": [6, 60, 89, 572, 575, 584, 603, 614], "scheme": [6, 60, 64, 86, 87, 89, 190, 550, 563, 572, 589, 613, 614], "assum": [6, 231, 267, 279, 300, 321, 572, 598], "same": [6, 90, 99, 110, 126, 184, 215, 232, 253, 268, 279, 302, 307, 321, 340, 356, 360, 378, 562, 563, 564, 566, 568, 572, 582, 586, 591, 595, 602, 606, 607, 611, 612, 613], "semant": [6, 572], "pattern": [6, 55, 60, 89, 90, 101, 102, 104, 105, 107, 110, 111, 113, 121, 122, 136, 140, 146, 147, 148, 149, 162, 163, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 196, 200, 217, 255, 275, 303, 308, 312, 317, 338, 345, 346, 347, 349, 422, 425, 438, 447, 448, 525, 549, 564, 572, 575, 599, 601, 606, 615], "abstract": [6, 55, 60, 62, 89, 130, 152, 161, 232, 234, 268, 269, 274, 275, 282, 283, 299, 301, 305, 310, 314, 315, 324, 325, 327, 328, 329, 336, 340, 346, 350, 363, 384, 396, 462, 473, 474, 495, 507, 525, 549, 573], "querybackendcap": [6, 57, 60, 63, 88, 89, 90], "tensorflowqueri": [6, 90], "look": [6, 572, 578, 614], "microsoft": 6, "mla": [6, 607], "kernel": [6, 521, 602, 603, 613], "alreadi": [6, 217, 231, 233, 255, 267, 519, 546, 561, 564, 575, 593, 596, 613], "becom": [6, 105, 570, 604], "integr": [6, 184, 234, 561, 599], "explor": 6, "attribut": [6, 87, 105, 126, 149, 161, 178, 190, 196, 197, 242, 315, 449, 450, 454, 514, 531, 563, 572, 573, 606, 614], "whether": [6, 62, 63, 64, 88, 90, 154, 155, 184, 205, 213, 215, 228, 232, 243, 251, 253, 265, 268, 269, 275, 277, 279, 283, 297, 302, 307, 310, 312, 319, 321, 325, 340, 356, 371, 374, 378, 484, 564, 578, 612], "per": [6, 57, 60, 63, 86, 87, 88, 89, 90, 205, 214, 233, 243, 252, 279, 291, 321, 340, 373, 378, 398, 561, 602, 608, 615], "channel": [6, 86, 87, 149, 179, 194, 228, 232, 265, 268, 291, 295, 310, 340, 462, 465, 474, 575, 576, 581, 583, 588, 603, 604, 612, 615], "reduc": [6, 105, 110, 111, 305, 340, 567, 579, 598, 599, 604, 605, 607, 608, 613, 614], "rang": [6, 149, 218, 219, 232, 256, 257, 268, 279, 288, 321, 368, 564, 566, 568, 601, 603, 604, 607, 612], "qlinear": [6, 217, 224, 255, 262, 283, 325, 333, 570, 588, 615], "mode": [6, 54, 55, 57, 60, 63, 68, 86, 87, 88, 90, 149, 224, 233, 262, 275, 279, 321, 334, 347, 363, 378, 398, 525, 561, 575, 576, 591, 595, 607, 608, 613], "qdq": [6, 56, 66, 68, 69, 70, 71, 73, 75, 76, 79, 81, 83, 85, 86, 91, 131, 150, 151, 152, 190, 200, 270, 271, 272, 333, 335, 570, 575, 588, 589, 607], "integ": [6, 161, 269, 275, 279, 283, 300, 310, 312, 314, 321, 325, 340, 347, 350, 607, 613], "seen": [6, 110, 111, 378], "static": [6, 86, 88, 149, 178, 188, 200, 273, 288, 316, 317, 333, 352, 391, 395, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 462, 465, 467, 468, 470, 472, 473, 474, 475, 485, 502, 504, 509, 511, 516, 518, 523, 525, 531, 532, 534, 536, 541, 546, 550, 557, 558, 570, 575, 581, 586, 587, 588, 589, 592, 598, 613, 615], "dynam": [6, 105, 149, 205, 243, 270, 272, 316, 335, 386, 563, 566, 570, 575, 581, 586, 587, 588, 589, 592, 598, 605, 613, 615], "qtype": [6, 64, 87], "choic": [6, 215, 253, 561, 564, 578], "float32": [6, 218, 219, 232, 256, 257, 268, 279, 321, 531, 562, 564, 607, 612], "uint8": [6, 87, 228, 265, 279, 321, 564, 572, 606, 607, 612, 614], "param": [6, 64, 88, 89, 90, 110, 186, 203, 205, 233, 239, 243, 279, 282, 283, 297, 321, 324, 325, 355, 400, 432, 533, 536, 580, 613], "node": [6, 62, 64, 70, 72, 81, 85, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 103, 105, 106, 107, 110, 111, 113, 117, 120, 122, 123, 125, 126, 127, 129, 142, 148, 149, 171, 178, 180, 184, 270, 271, 272, 327, 328, 333, 334, 335, 431, 444, 445, 446, 447, 448, 449, 454, 462, 465, 472, 473, 474, 511, 512, 514, 561, 568, 611], "exclud": [6, 122, 129, 295, 297], "onnxrt": [6, 87, 215, 217, 224, 225, 226, 229, 232, 253, 255, 262, 263, 264, 266, 268, 282, 283, 324, 325, 376, 436, 437, 452, 454, 461, 514], "onnxrt_qlinearopsadaptor": [6, 63], "dump_elapsed_tim": [6, 378], "data_load": [6, 63, 90, 91, 92], "recov": [6, 60, 63, 90, 378, 567], "q_config": [6, 60, 63, 64, 86, 89, 90, 270, 272, 329, 333, 334], "inspect_tensor": [6, 55, 57, 60, 63, 88, 90], "op_list": [6, 55, 57, 60, 63, 88, 90, 186, 360, 611], "iteration_list": [6, 55, 57, 60, 63, 88, 90], "inspect_typ": [6, 55, 57, 60, 63, 88, 90, 433], "save_to_disk": [6, 55, 57, 60, 63, 88, 90], "save_path": [6, 60, 63, 90, 184, 270, 272, 327, 328, 333, 335, 368, 580], "quantization_cfg": [6, 60, 63, 90], "set_tensor": [6, 55, 57, 60, 63, 88, 90], "tensor_dict": [6, 55, 57, 60, 63, 88, 90], "input_graph": [6, 63, 170, 171, 175, 178, 179, 380, 488, 492, 497, 500, 507], "fp32_baselin": [6, 57, 60, 63, 88, 90, 371], "diagnosis_help": [6, 90], "fp32_model": [6, 88, 90, 184, 186, 190, 270, 272, 335, 360, 378], "int8_model": [6, 270, 272], "util": [7, 56, 61, 65, 149, 150, 178, 185, 186, 187, 188, 189, 241, 270, 275, 277, 311, 317, 319, 338, 359, 361, 383, 384, 385, 387, 389, 390, 393, 398, 409, 412, 415, 419, 420, 425, 427, 428, 430, 438, 439, 444, 446, 447, 450, 454, 460, 461, 469, 471, 495, 501, 505, 510, 514, 547, 568, 581, 607, 613], "hawq": [9, 186, 358, 613], "criterion": [24, 88, 90, 186, 200, 236, 239, 269, 275, 317, 337, 340, 347, 501, 541, 566, 570, 603, 604, 607, 613, 614], "comput": [26, 87, 90, 105, 110, 111, 161, 186, 190, 242, 269, 275, 276, 277, 279, 280, 281, 283, 289, 318, 319, 321, 322, 323, 325, 341, 344, 345, 368, 378, 567, 578, 579, 581, 592, 603, 604, 607, 613], "bilingu": [26, 276, 318], "understudi": [26, 276, 318], "qualiti": [26, 276, 318], "text": [26, 231, 232, 267, 268, 276, 281, 313, 318, 323, 348, 577, 587, 605, 612, 615], "machin": [26, 276, 294, 318, 393, 561, 570, 576, 584, 598, 605, 611], "translat": [26, 90, 276, 277, 288, 291, 294, 296, 318, 319], "natur": [26, 276, 318], "anoth": [26, 55, 57, 90, 148, 149, 232, 268, 275, 276, 285, 318, 368, 378, 566, 591, 595, 612, 613], "approxim": [26, 276, 277, 318, 319, 578], "sinc": [26, 274, 275, 276, 302, 307, 315, 318, 374, 502, 566, 570, 578, 592, 598, 601], "glue": [26, 276, 283, 318, 325, 564, 578, 587], "word": [26, 231, 267, 276, 318, 578, 615], "piec": [26, 231, 267, 276, 318, 570, 578], "decod": [26, 227, 228, 265, 276, 297, 318, 578, 612], "id": [26, 49, 50, 51, 52, 231, 233, 267, 276, 278, 279, 280, 281, 318, 320, 321, 322, 323, 374, 398, 399, 401, 402, 403, 405, 408, 409, 410, 411, 412, 414, 415, 417, 418, 446, 447, 450, 518, 578, 610, 613], "token": [26, 215, 226, 229, 232, 253, 264, 266, 268, 275, 276, 277, 297, 317, 318, 319, 374, 546, 550, 561, 564, 578, 610, 612, 613], "By": [26, 54, 276, 318, 578, 580, 591, 592, 595, 613], "ngram": [26, 276, 318, 578], "breviti": [26, 276, 277, 318, 319, 578], "penalti": [26, 276, 277, 318, 319, 578], "doe": [26, 276, 279, 288, 318, 321, 353, 564, 578, 609, 612], "beam": [26, 276, 318, 578], "reset": [26, 186, 276, 282, 283, 318, 324, 325, 336, 546, 578], "cach": [26, 215, 253, 276, 318, 374, 463, 550, 571, 607], "updat": [26, 50, 91, 105, 117, 129, 149, 154, 161, 195, 272, 276, 282, 283, 291, 310, 312, 317, 318, 324, 325, 333, 334, 335, 337, 340, 341, 342, 344, 345, 346, 347, 350, 351, 363, 381, 398, 399, 400, 401, 409, 412, 414, 415, 417, 419, 425, 427, 428, 429, 432, 502, 525, 529, 534, 537, 539, 543, 561, 570, 578, 584, 589, 592, 602, 603, 604, 613], "str": [26, 55, 57, 62, 63, 64, 88, 149, 178, 185, 186, 189, 190, 191, 193, 195, 205, 215, 216, 217, 221, 224, 225, 226, 228, 229, 232, 234, 239, 243, 253, 254, 255, 259, 262, 263, 264, 265, 266, 268, 270, 272, 273, 276, 277, 279, 281, 282, 283, 288, 290, 291, 300, 305, 317, 318, 319, 321, 323, 324, 325, 327, 328, 332, 334, 335, 340, 352, 360, 368, 371, 374, 378, 379, 380, 381, 384, 391, 392, 393, 395, 397, 398, 401, 402, 403, 405, 408, 409, 410, 411, 412, 413, 414, 417, 420, 421, 422, 424, 425, 430, 431, 432, 433, 438, 439, 442, 444, 445, 446, 447, 448, 450, 459, 460, 462, 463, 465, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 481, 483, 484, 486, 488, 491, 492, 495, 497, 498, 500, 501, 502, 503, 506, 507, 508, 511, 518, 520, 521, 523, 525, 526, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 549, 550, 557, 558, 564, 578, 606, 611, 612], "rais": [26, 105, 110, 111, 113, 124, 149, 234, 276, 279, 282, 283, 310, 311, 312, 318, 321, 324, 325, 326, 340, 347, 351, 355, 533, 546, 603, 604], "valueerror": [26, 105, 110, 111, 113, 124, 149, 276, 279, 283, 318, 321, 325, 571], "error": [26, 88, 186, 276, 283, 289, 316, 318, 325, 360, 372, 375, 517, 545, 578, 582, 613], "occur": [26, 276, 318], "float": [26, 55, 57, 60, 63, 87, 88, 90, 149, 178, 186, 215, 228, 253, 265, 275, 276, 277, 279, 280, 281, 288, 290, 291, 302, 307, 310, 312, 313, 314, 318, 319, 321, 322, 323, 334, 335, 340, 346, 347, 348, 349, 350, 355, 381, 399, 408, 417, 418, 433, 439, 494, 502, 518, 519, 523, 525, 531, 533, 534, 541, 543, 544, 552, 564, 578, 606, 607, 612], "bleu_scor": [26, 276, 277, 318, 319], "schedul": [35, 275, 308, 312, 317, 338, 344, 347, 349, 368, 601], "mixedprecis": [35, 200, 275, 284, 326, 387, 491, 539], "modelconvers": [35, 275, 285], "architectur": [35, 233, 286, 287, 297, 298, 299, 301, 562, 566, 576, 603, 604, 605], "na": [35, 196, 275, 317, 330, 575], "pruning_support": 49, "revis": [49, 50, 51, 52, 374], "644ec953a7dc": 49, "6ece06672ed3": [49, 50], "date": [49, 50, 51, 52, 353, 502], "09": [49, 615], "17": [49, 615], "22": [49, 52, 523, 526, 615], "310141": 49, "14": [50, 51, 200, 270, 272, 335, 570, 615], "6f0d0f71d92e": [50, 51], "08": [50, 232, 268, 612, 615], "31": [50, 615], "07": [50, 51, 614, 615], "16": [50, 563, 564, 603, 615], "24": [50, 613, 615], "229939": 50, "update_dataload": 50, "db_session": [50, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 424, 425, 427, 429, 432], "sqlalchemi": [50, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 424, 425, 427, 429, 430, 432, 571, 576], "orm": [50, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 424, 425, 427, 429, 432], "session": [50, 184, 214, 252, 334, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 424, 425, 427, 429, 430, 432, 611, 613], "exist": [50, 96, 178, 197, 233, 234, 279, 299, 321, 334, 374, 399, 419, 425, 427, 428, 465, 516, 532, 533, 578, 585, 603, 613], "databas": [50, 217, 255, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 502, 516, 532], "update_transform": 50, "9e89549a08c8": [51, 52], "29": [51, 615], "41": [51, 615], "291905": 51, "03": [52, 523, 615], "34": [52, 615], "52": [52, 615], "916541": 52, "block": [53, 110, 275, 288, 297, 302, 307, 310, 313, 340, 348, 550, 575, 600, 603, 604], "mask": [53, 215, 253, 279, 295, 297, 306, 310, 312, 314, 321, 335, 340, 341, 344, 345, 347, 350, 603, 604, 615], "run_migrations_offlin": 54, "migrat": [54, 516], "context": [54, 62, 378, 606], "url": [54, 217, 255, 479, 546, 577], "engin": [54, 290, 397, 409, 430], "though": [54, 297], "skip": [54, 110, 336, 611, 613], "creation": [54, 394], "even": [54, 105, 561, 603], "dbapi": 54, "execut": [54, 57, 60, 63, 88, 90, 93, 95, 96, 98, 112, 116, 122, 125, 127, 132, 147, 182, 242, 269, 275, 286, 287, 298, 302, 307, 312, 315, 316, 347, 352, 371, 377, 378, 379, 380, 381, 398, 409, 412, 419, 425, 427, 428, 484, 486, 488, 491, 492, 495, 496, 497, 498, 500, 501, 503, 508, 511, 515, 518, 526, 527, 549, 561, 566, 579, 583, 584, 591, 592, 595, 598, 599, 601, 603, 604, 607, 610, 613, 615], "emit": 54, "string": [54, 55, 57, 60, 63, 86, 87, 88, 89, 90, 99, 106, 122, 149, 154, 155, 178, 180, 184, 195, 196, 215, 217, 234, 239, 253, 255, 269, 272, 274, 275, 276, 279, 285, 286, 287, 290, 298, 299, 300, 302, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 326, 330, 334, 335, 340, 347, 348, 349, 350, 351, 352, 371, 378, 391, 511, 533, 557, 578, 612], "script": [54, 276, 277, 280, 281, 318, 319, 322, 323, 380, 381, 467, 484, 486, 488, 491, 492, 494, 495, 497, 498, 500, 501, 506, 568, 575, 581, 585, 588, 589, 592, 605], "run_migrations_onlin": 54, "associ": [54, 279, 321, 420, 421], "connect": [54, 312, 337, 409, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 561, 598, 602, 603, 604, 610], "cl": [55, 88, 191, 193, 195, 217, 221, 224, 225, 226, 229, 232, 234, 239, 255, 259, 262, 263, 264, 266, 268, 300, 305, 310, 312, 314, 317, 336, 340, 346, 347, 349, 350, 363, 378], "quanit": [55, 60, 63], "chosen": [55, 57, 561], "load": [55, 57, 215, 217, 231, 232, 253, 255, 267, 268, 279, 289, 291, 299, 321, 326, 334, 335, 352, 377, 378, 425, 427, 506, 533, 534, 563, 591, 595, 599, 606, 607], "option": [55, 57, 60, 63, 64, 88, 90, 149, 178, 195, 200, 203, 204, 205, 215, 232, 234, 243, 253, 268, 270, 272, 275, 279, 285, 290, 291, 297, 310, 316, 317, 321, 326, 334, 335, 340, 352, 368, 372, 374, 378, 523, 564, 572, 592, 610, 612, 613, 614], "categori": [55, 57, 90, 217, 255, 278, 279, 320, 321, 562, 564, 588], "int": [55, 57, 60, 62, 63, 87, 88, 90, 149, 178, 184, 186, 190, 205, 214, 215, 216, 228, 232, 243, 252, 253, 254, 265, 268, 270, 272, 277, 279, 283, 288, 290, 291, 300, 317, 319, 321, 325, 335, 336, 340, 346, 356, 378, 384, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 422, 424, 425, 426, 427, 428, 429, 430, 432, 476, 511, 518, 519, 521, 523, 524, 525, 526, 527, 533, 534, 536, 541, 543, 546, 558, 564, 578, 606, 612], "step": [55, 57, 60, 90, 91, 110, 111, 136, 146, 242, 275, 310, 312, 313, 314, 336, 337, 340, 345, 346, 347, 348, 349, 350, 368, 561, 566, 567, 568, 593, 596, 598, 601, 603, 604, 606, 608, 610, 611, 613], "mini": [55, 57, 60, 90, 615], "batch": [55, 57, 60, 62, 90, 105, 110, 154, 190, 205, 207, 208, 213, 214, 235, 236, 242, 243, 245, 246, 251, 252, 275, 291, 295, 297, 302, 307, 361, 368, 398, 409, 531, 561, 563, 566, 601, 603, 612, 613, 615], "boolean": [55, 57, 60, 62, 90, 99, 290, 347, 533], "inspect": [55, 57, 60, 63, 88, 90, 561, 609, 611], "capabl": [55, 57, 60, 62, 63, 88, 89, 90, 363, 562, 572, 579, 589, 606, 607, 613, 614], "queri": [55, 57, 60, 62, 63, 88, 90, 149, 154, 161, 184, 295, 297, 356, 400, 407, 416, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 607], "bn": [55, 105, 122, 124, 162, 615], "dump": [55, 57, 60, 63, 64, 88, 90, 149, 270, 272, 378, 388, 502, 523, 534, 546, 607, 611], "feed": [55, 57, 88, 184, 214, 252, 395, 566], "contain": [55, 57, 60, 62, 63, 88, 99, 110, 111, 113, 117, 122, 149, 152, 178, 184, 186, 195, 203, 204, 215, 216, 217, 253, 254, 255, 269, 270, 272, 274, 275, 279, 280, 281, 285, 288, 293, 294, 302, 303, 304, 305, 307, 310, 311, 312, 313, 314, 315, 317, 321, 322, 323, 326, 340, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 377, 382, 386, 394, 400, 402, 403, 405, 406, 407, 410, 411, 414, 416, 420, 425, 430, 435, 436, 440, 443, 449, 454, 455, 461, 480, 487, 489, 490, 493, 494, 496, 499, 505, 510, 514, 518, 526, 564, 566, 575, 578, 599, 603, 604, 611, 613], "bool": [55, 57, 62, 63, 64, 88, 105, 106, 122, 149, 154, 178, 184, 186, 189, 190, 204, 215, 217, 228, 232, 253, 255, 265, 268, 270, 272, 277, 279, 283, 288, 290, 291, 297, 310, 317, 319, 321, 325, 335, 340, 356, 363, 374, 378, 408, 442, 447, 450, 462, 465, 467, 468, 469, 470, 472, 473, 474, 475, 479, 481, 484, 502, 518, 519, 521, 526, 527, 533, 535, 536, 546, 552, 558, 564, 578, 606, 612], "disk": [55, 57, 88, 90], "memori": [55, 57, 88, 117, 274, 275, 302, 307, 315, 563, 567, 579, 581, 600, 603, 604, 607, 613], "numpi": [55, 57, 60, 63, 87, 88, 90, 110, 111, 113, 149, 184, 232, 268, 273, 279, 283, 288, 290, 300, 321, 325, 571, 612], "arrai": [55, 57, 60, 63, 86, 87, 88, 90, 149, 178, 184, 232, 268, 279, 283, 288, 290, 300, 321, 325, 333, 335, 355, 378, 612], "node0_nam": [55, 57, 88, 90], "weight0_nam": [55, 57, 60, 63, 88, 90], "bias0_nam": [55, 57, 60, 63, 88, 90], "node1_nam": [55, 57, 88, 90], "weight1_nam": [55, 57, 88, 90], "bias1_nam": [55, 57, 88, 90], "output0_nam": [55, 57, 88, 90], "output1_nam": [55, 57, 88, 90], "back": [55, 57, 60, 63, 88, 90, 161, 190, 232, 268, 288, 342, 598], "usual": [55, 57, 60, 63, 88, 215, 253, 275, 302, 307, 566, 601, 607], "respons": [55, 57, 60, 63, 88, 521, 525, 532, 545, 549, 550, 554, 556, 558, 559, 607], "int32": [55, 57, 60, 63, 88, 149, 270, 272, 564], "format": [55, 57, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 96, 110, 111, 184, 215, 216, 217, 221, 226, 253, 254, 255, 259, 264, 270, 272, 275, 279, 285, 288, 299, 321, 335, 360, 484, 523, 541, 564, 568, 570, 578, 579, 580, 581, 607], "someth": [55, 57, 60, 63, 88, 203, 204, 217, 255, 352], "quantize_input": [55, 57, 86, 90], "abl": [55, 57, 90, 124, 203, 204, 231, 267, 326, 352, 589, 598, 603, 607], "scale": [55, 57, 64, 86, 87, 90, 105, 110, 144, 179, 194, 228, 232, 265, 268, 272, 333, 570, 607, 610, 612], "where": [55, 57, 60, 64, 87, 88, 110, 161, 279, 283, 295, 297, 299, 301, 310, 321, 325, 340, 566, 591, 595, 599, 603, 611], "destinatin": [55, 57], "destin": [55, 57, 64, 90, 270, 271, 275, 285], "mxnet_util": 56, "ox_util": 56, "argmax": [56, 65, 77], "binary_op": [56, 65, 77], "concat": [56, 65, 77, 183, 518], "direct_q8": [56, 65, 77], "embed_layernorm": [56, 65, 77], "gather": [56, 62, 64, 65, 77, 310, 340, 521], "gavgpool": [56, 65, 77], "gemm": [56, 65, 77, 603], "lstm": [56, 65, 77], "matmul": [56, 64, 65, 77, 89, 95, 102, 108, 116, 122, 128, 129, 138, 148, 149, 167, 176, 272, 310, 340, 570, 572], "maxpool": [56, 65, 77, 168, 177, 572], "pad": [56, 65, 77, 114, 115, 215, 232, 253, 268, 295, 297, 564, 612], "pool": [56, 65, 77, 177], "resiz": [56, 65, 77, 215, 216, 228, 232, 253, 254, 265, 268, 563, 564, 612], "tf_util": 56, "graph_rewrit": [56, 150], "graph_bas": [56, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 150], "quantize_graph": [56, 150], "qat": [56, 88, 150, 151, 189, 272, 275, 285, 334, 567, 568, 570, 575, 607], "quantize_graph_bas": [56, 150, 151, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177], "quantize_graph_bn": [56, 150, 151], "quantize_graph_concatv2": [56, 150, 151], "quantize_graph_conv": [56, 150, 151], "quantize_graph_for_intel_cpu": [56, 150, 151], "quantize_graph_matmul": [56, 150, 151], "quantize_graph_pool": [56, 150, 151], "transform_graph": [56, 150], "bias_correct": [56, 150, 181], "graph_transform_bas": [56, 150, 179, 181, 182, 183], "insert_log": [56, 150, 181], "rerange_quantized_concat": [56, 150, 181], "graph_convert": [56, 150], "graph_converter_without_calib": [56, 150], "graph_util": [56, 150], "quantize_graph_common": [56, 150], "torch_util": [56, 236, 275, 317], "bf16_convert": [56, 91, 92, 94, 131, 150, 187], "hawq_metr": [56, 187], "symbolic_trac": [56, 187], "kerasadaptor": 57, "specifi": [57, 60, 63, 64, 88, 89, 90, 122, 149, 178, 203, 204, 232, 233, 268, 274, 275, 279, 282, 283, 286, 289, 291, 298, 299, 302, 307, 315, 316, 321, 324, 325, 326, 335, 341, 352, 377, 378, 395, 398, 401, 408, 409, 410, 412, 413, 414, 419, 420, 422, 423, 425, 427, 428, 432, 433, 434, 447, 479, 483, 484, 485, 504, 509, 525, 529, 533, 546, 550, 561, 567, 568, 572, 578, 586, 600, 606, 607, 612, 613, 614], "boolen": [57, 63, 88, 90], "compare_label": [57, 60, 63, 88, 90, 283, 325, 578], "pipelin": [57, 60, 63, 88, 90, 269, 275, 286, 287, 298, 313, 316, 567, 601], "get_optype_wise_": [57, 90], "quantizable_op_detail": 57, "get": [57, 60, 62, 63, 64, 88, 89, 90, 110, 111, 113, 122, 149, 154, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 174, 176, 178, 180, 184, 186, 188, 190, 191, 193, 195, 197, 200, 203, 205, 208, 226, 229, 232, 233, 239, 241, 242, 243, 246, 264, 266, 268, 272, 273, 274, 275, 284, 291, 295, 301, 302, 307, 310, 312, 314, 315, 316, 317, 333, 334, 335, 336, 337, 340, 347, 349, 350, 355, 360, 371, 373, 375, 378, 379, 384, 391, 392, 393, 395, 398, 401, 402, 403, 405, 408, 409, 410, 411, 412, 413, 414, 419, 420, 422, 424, 425, 426, 427, 428, 429, 432, 433, 434, 437, 441, 442, 447, 459, 462, 463, 465, 467, 468, 472, 473, 474, 476, 479, 481, 483, 484, 485, 486, 491, 495, 498, 501, 502, 504, 508, 509, 511, 513, 520, 521, 525, 529, 531, 533, 534, 536, 540, 543, 545, 546, 549, 550, 554, 556, 557, 558, 559, 561, 575, 576, 584, 613], "wise": [57, 64, 90, 179, 194, 310, 340, 354, 355, 356, 360, 422, 425, 533, 561, 575, 603, 604, 611, 613, 614], "union": [57, 90, 283, 325, 368, 523, 578], "kei": [57, 63, 88, 90, 149, 154, 178, 180, 184, 186, 197, 275, 279, 295, 297, 300, 302, 307, 311, 313, 321, 334, 340, 348, 351, 355, 363, 369, 371, 372, 378, 525, 541, 561, 570, 611], "kerasqueri": 57, "local_config_fil": [57, 60, 63, 88, 90], "get_vers": [57, 60, 63, 89, 90], "infom": [57, 63, 90, 235, 236, 272], "get_precis": [57, 60, 63, 89, 90, 395], "support": [57, 60, 62, 63, 87, 88, 89, 90, 117, 124, 141, 200, 203, 204, 205, 214, 215, 217, 221, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 239, 242, 243, 252, 253, 255, 259, 262, 263, 264, 265, 266, 268, 275, 282, 283, 285, 290, 291, 297, 300, 302, 303, 304, 305, 307, 310, 312, 316, 317, 324, 325, 326, 330, 336, 340, 347, 352, 361, 371, 373, 395, 462, 465, 467, 468, 470, 472, 473, 474, 475, 481, 515, 523, 533, 560, 561, 581, 586, 589, 592, 598, 604, 605, 608, 610, 613], "get_op_typ": [57, 60, 63, 88, 89, 90], "compos": [57, 63, 88, 90, 178, 232, 268, 371, 612], "dictionari": [57, 63, 64, 88, 90, 110, 111, 113, 161, 185, 186, 190, 196, 197, 200, 231, 267, 279, 286, 288, 291, 297, 298, 299, 301, 317, 321, 400, 402, 403, 405, 407, 410, 411, 416, 420, 421, 423], "get_quantization_cap": [57, 60, 63, 88, 89, 90], "get_op_types_by_precis": [57, 63, 88, 90], "mxnetadaptor": 60, "nc_model": [60, 62, 302, 307], "unimpl": [60, 63], "mxnetmodel": [60, 331], "data_x": [60, 62], "loader": [60, 62, 203, 204, 316, 326, 352, 374], "modelwis": 60, "opwis": 60, "recover_tuned_model": [60, 90], "mxnetqueri": 60, "conv2d": [60, 89, 102, 103, 104, 108, 109, 114, 115, 122, 164, 174, 179, 572, 611, 613], "fully_connect": 60, "get_fuse_pattern": [60, 89, 90], "etc": [60, 89, 195, 231, 242, 267, 269, 274, 275, 281, 289, 290, 302, 307, 315, 317, 323, 326, 352, 377, 566, 575, 610, 613], "get_mixed_precision_combin": [60, 89, 90], "init": [61, 65, 193, 234, 338, 363, 564, 578], "optyp": [62, 271], "enum": [62, 87, 378, 483, 515], "isiter": 62, "obj": [62, 195, 214, 252, 269, 274, 275, 285, 286, 287, 298, 299, 302, 307, 311, 315, 316, 317, 326, 351, 352, 371, 378], "true": [62, 64, 86, 88, 90, 105, 106, 122, 128, 149, 152, 154, 182, 184, 186, 200, 204, 205, 213, 215, 217, 218, 231, 232, 233, 243, 251, 253, 255, 256, 267, 268, 270, 272, 277, 279, 283, 288, 295, 297, 305, 310, 319, 321, 325, 335, 336, 340, 341, 363, 371, 479, 518, 521, 526, 527, 533, 564, 568, 572, 578, 581, 584, 585, 606, 607, 608, 611, 612, 613, 614], "els": [62, 105, 106, 184, 213, 251, 356, 518, 533, 586, 611], "ensure_list": 62, "x": [62, 97, 110, 111, 113, 117, 185, 214, 232, 252, 268, 291, 295, 297, 355, 568, 580, 603, 607, 611, 612], "ensur": [62, 64, 232, 268, 313, 348, 355, 397, 430, 462, 465, 467, 474, 516, 561, 568, 570, 607, 612], "check_mx_vers": 62, "mx": 62, "__version__": 62, "combine_cap": 62, "make_nc_model": 62, "target": [62, 87, 88, 133, 134, 149, 178, 203, 234, 288, 311, 314, 336, 340, 344, 346, 350, 351, 353, 355, 446, 447, 564, 568, 603, 604, 611, 612, 613, 614], "sym_model": 62, "ctx": 62, "input_desc": 62, "tupl": [62, 88, 90, 149, 161, 190, 203, 204, 228, 232, 234, 265, 268, 270, 272, 279, 288, 291, 297, 321, 326, 336, 340, 352, 360, 448, 479, 533, 552, 564, 578, 612], "symnet": 62, "arg": [62, 88, 96, 195, 215, 216, 217, 253, 254, 255, 274, 275, 285, 297, 307, 310, 315, 316, 317, 327, 328, 329, 332, 335, 348, 355, 372, 374, 375, 383, 385, 387, 388, 389, 390, 400, 402, 403, 405, 407, 410, 411, 416, 518, 526, 546, 563, 564, 568, 587, 607, 611, 612], "aux": 62, "ncmodel": 62, "suppli": [62, 295], "get_framework_nam": [62, 462, 465, 467, 474], "prepare_model_data": 62, "dataloaderwrap": 62, "prepare_model": 62, "create_data_exampl": 62, "prepare_dataload": 62, "ndarray_to_devic": 62, "ndarrai": [62, 110, 111, 113, 149, 232, 268, 288, 290, 335, 355, 369, 372, 571, 612], "devic": [62, 122, 133, 134, 135, 136, 137, 138, 141, 146, 149, 170, 175, 178, 183, 186, 200, 234, 291, 317, 566, 581, 584, 589, 598, 603, 606], "is_model_quant": 62, "query_quantizable_nod": 62, "map": [62, 87, 90, 171, 180, 186, 232, 268, 270, 271, 272, 274, 275, 278, 279, 280, 281, 283, 288, 302, 307, 310, 312, 315, 320, 321, 322, 323, 325, 340, 349, 483, 564, 568, 578, 591, 595, 603, 604, 607], "quantize_sym_model": 62, "qconfig": [62, 611], "run_forward": 62, "b_filter": 62, "collector": [62, 186, 369, 372], "pre_batch": 62, "post_batch": 62, "forward": [62, 185, 234, 295, 297, 335, 606, 607, 611], "propag": [62, 144, 161, 342], "filter": [62, 215, 216, 217, 218, 219, 220, 222, 226, 253, 254, 255, 256, 257, 258, 260, 264, 275, 317, 378, 401, 442, 465, 535, 563, 564, 575, 603, 604, 611], "collect": [62, 87, 90, 226, 229, 230, 232, 235, 236, 237, 238, 240, 264, 266, 268, 276, 281, 282, 283, 318, 323, 324, 325, 369, 372, 378, 379, 484, 508, 519, 521, 533, 534, 570, 607, 611, 613], "dure": [62, 90, 105, 110, 111, 161, 288, 291, 297, 310, 314, 316, 340, 350, 527, 579, 580, 600, 601, 603, 604, 607, 611, 614], "prior": [62, 132, 355, 613], "make_symbol_block": 62, "gluon": [62, 326, 352, 580], "symbolblock": 62, "make_modul": 62, "parse_tune_config": 62, "quantizable_nod": 62, "distribute_calib_tensor": 62, "calib_tensor": 62, "calib_cfg": 62, "tensor_to_nod": 62, "kl": [62, 369, 372, 373, 572, 613, 614], "minmax": [62, 572, 614], "calib_model": 62, "qsym_model": 62, "calib_data": 62, "calibdata": 62, "threshold": [62, 64, 192, 279, 310, 321, 340, 369, 372, 373, 578], "amp_convert": 62, "amp_cfg": 62, "amp": [62, 581, 588, 602], "dataiterload": 62, "data_it": 62, "collectorbas": 62, "collect_gluon": 62, "arr": [62, 87, 378], "collect_modul": 62, "b": [62, 87, 113, 117, 215, 253, 272, 564, 578, 604, 613], "calibcollector": 62, "include_tensors_kl": 62, "include_tensors_minmax": 62, "num_bin": [62, 369, 372, 373], "8001": [62, 369, 372], "calc_kl_th_dict": 62, "quantized_dtyp": 62, "calcul": [62, 64, 87, 88, 90, 103, 186, 204, 218, 219, 234, 256, 257, 275, 280, 281, 291, 296, 297, 302, 306, 307, 310, 312, 313, 322, 323, 336, 337, 340, 348, 349, 360, 369, 372, 433, 525, 531, 564, 578, 589, 600, 603, 604, 607, 610, 613, 614], "tensorcollector": 62, "include_nod": 62, "qtensor_to_tensor": 62, "preprocess": [62, 215, 226, 229, 232, 253, 264, 266, 268, 269, 275, 297, 371, 568, 612], "namecollector": 62, "cache_kl": 62, "cache_minmax": 62, "tensors_kl": 62, "tensors_minmax": 62, "properti": [62, 149, 161, 191, 193, 200, 205, 207, 215, 217, 233, 234, 242, 243, 245, 253, 255, 269, 274, 275, 282, 283, 284, 285, 299, 302, 307, 315, 316, 317, 324, 325, 327, 328, 329, 331, 333, 334, 335, 336, 348, 355, 363, 378, 379, 397, 430, 437, 441, 446, 447, 450, 462, 465, 470, 474, 483, 486, 491, 495, 498, 501, 508, 518, 525, 526, 527, 531, 536, 540, 543, 545, 546, 577, 602], "min_max_dict": 62, "post_collect": 62, "onnxruntimeadaptor": 63, "rt": 63, "todo": [63, 215, 218, 253, 256, 279, 321, 531], "replac": [63, 110, 111, 128, 129, 149, 281, 323, 333, 356, 533, 568, 589, 609], "func": [63, 234, 316, 335, 533, 550, 614], "onnxdataload": 63, "evalut": 63, "onnxtransform": 63, "onnxmetr": 63, "evaluaton": 63, "visualizaton": 63, "f1": [63, 275, 280, 282, 283, 317, 322, 324, 325, 568, 578, 610, 615], "modelproto": [63, 270, 271, 272, 580], "onnxrt_integeropsadaptor": 63, "onnxrt_qdqadaptor": 63, "onnxrtqueri": 63, "get_graph_optim": 63, "onnxrtaug": 64, "model_wrapp": 64, "dump_op_typ": 64, "black_nod": 64, "white_nod": 64, "cpuexecutionprovid": 64, "reduce_rang": [64, 86, 200, 317, 606], "augment": 64, "augment_graph": 64, "activation_onli": 64, "weight_onli": 64, "quantization_candid": 64, "store": [64, 217, 255, 279, 297, 303, 304, 305, 310, 312, 321, 337, 340, 347, 349, 350, 355, 374, 573], "get_intermediate_output": 64, "calib_mod": 64, "dump_minmax": 64, "naiv": 64, "min": [64, 90, 149, 179, 194, 378, 561, 607, 612, 613], "dump_calibr": 64, "give": [64, 598, 613], "pair": [64, 86, 91, 146, 154, 563, 579], "element": [64, 213, 251, 275, 279, 295, 297, 302, 307, 310, 313, 321, 340, 348, 378, 396, 564, 575, 578, 603], "minimum": [64, 340, 355, 589, 603, 613], "second": [64, 107, 215, 253, 356, 378, 442, 525, 561, 591, 595, 599, 613, 614], "maximum": [64, 97, 215, 232, 253, 268, 277, 297, 310, 312, 319, 340, 347, 355, 564, 603, 607, 612], "calculate_quantization_param": 64, "quantization_threshold": 64, "param_nam": [64, 391], "dump_tensor": 64, "calculate_scale_zeropoint": 64, "last_nod": 64, "next_nod": 64, "rmin": [64, 87, 607], "rmax": [64, 87, 607], "quantize_rang": [64, 87], "point": [64, 86, 87, 228, 265, 280, 281, 300, 322, 323, 336, 355, 578, 598, 607, 612, 613], "activationoper": 66, "onnx_quant": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85], "onnx_nod": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85], "quantize_check": [66, 69, 70, 72, 74, 76, 80, 81, 82, 83, 84], "quantizaion": [66, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85], "convert_check": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85], "convert_format": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85], "qoper": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86], "removableactivationoper": 66, "qactivationoper": 66, "children": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 333], "argmaxoper": 67, "qargmaxoper": 67, "attentionoper": 68, "qattentionoper": 68, "qattent": 68, "binaryoper": 69, "qbinaryoper": 69, "qbinari": 69, "concatoper": 70, "cast": [70, 72, 81, 85, 86, 87, 100, 570, 608, 612], "qconcatoper": 70, "qconcat": 70, "convoper": 71, "qconvoper": 71, "qlinearconv": 71, "direct8bit": 72, "direct8bitoper": 72, "directcastoper": 72, "qdirectoper": 72, "qdirect": 72, "embedlayernorm": 73, "embedlayernormalizationoper": 73, "qembedlayernormalizationoper": 73, "qembedlayernorm": 73, "gatheroper": 74, "qgatheroper": 74, "qgather": 74, "globalaveragepool": 75, "globalaveragepooloper": 75, "qglobalaveragepooloper": 75, "qlinearglobalaveragepool": 75, "gemmoper": 76, "qgemmoper": 76, "qgemm": 76, "lstmoper": 78, "matmuloper": 79, "qmatmuloper": 79, "qlinearmatmul": 79, "maxpooloper": 80, "qmaxpooloper": 80, "qmaxpool": 80, "op_registri": 81, "op_typ": [81, 88, 356, 360, 363, 364, 367], "qop_registri": 81, "padoper": 82, "qpadoper": 82, "qpad": 82, "averagepool": 83, "pooloper": 83, "qpooloper": 83, "qlinearaveragepool": 83, "resizeoper": 84, "qresizeoper": 84, "qresiz": 84, "splitoper": 85, "qsplitoper": 85, "qsplit": 85, "quantization_param": 86, "op_types_to_quant": 86, "fallback_list": 86, "check_opset_vers": 86, "opset": [86, 270, 272, 335], "should_quant": 86, "quantize_model": 86, "merge_dedicated_qdq_pair": 86, "merg": [86, 147, 207, 245, 593, 596, 611, 613], "dedic": 86, "q": [86, 87, 91, 146, 148, 170], "dq": [86, 91, 146, 148, 170], "should_cast": 86, "insert_qdq": 86, "should_convert": 86, "convert_qdq_to_operator_ori": 86, "remove_redundant_pair": 86, "redud": 86, "dtype_cast": 86, "cfg": [86, 90, 114, 115, 190, 196, 371], "keep_io_typ": 86, "dtype": [86, 87, 91, 92, 149, 178, 185, 200, 218, 219, 228, 232, 256, 257, 265, 268, 270, 272, 273, 335, 564, 570, 572, 581, 606, 611, 612, 614], "quantize_output": 86, "initializer_use_weight_qtyp": 86, "direct_int8": 86, "quantize_bias_tensor": 86, "bia": [86, 90, 149, 178, 179, 270, 272, 295, 611], "quantize_bia": 86, "bias_nam": [86, 272], "input_nam": [86, 110, 111, 200, 270, 272, 335, 570], "weight_nam": [86, 341], "beta": [86, 110, 111, 113, 337], "input_scal": 86, "weight_scal": 86, "quantize_weights_per_channel": 86, "weight_qtyp": 86, "axi": [86, 87, 340], "quantize_weight_per_channel": 86, "channel_axi": [86, 152, 192, 194], "tensor_proto_to_arrai": 86, "tensorproto": [86, 87], "get_bias_add_nod": 86, "last_output": 86, "quantized_bias_nam": 86, "ad": [86, 161, 215, 253, 276, 318, 340, 347, 355, 398, 399, 401, 408, 409, 410, 411, 412, 415, 417, 418, 561, 579, 581, 586, 589, 593, 596, 611], "reshap": [86, 104, 110, 111, 113, 116, 121, 305, 340], "nodeproto": [86, 272], "_type_": [86, 272, 332], "previou": [86, 90, 110, 122, 297, 299, 336, 340, 361, 561, 609, 611, 613], "is_valid_quantize_weight": 86, "dequantize_tensor": [86, 186, 433], "value_nam": 86, "helper": [87, 88, 90, 149, 155, 184, 186, 190, 215, 216, 217, 231, 253, 254, 255, 267, 271, 272, 295, 334, 376, 527], "dtype_to_nam": 87, "dtype_map": 87, "quanttyp": 87, "make_quant_nod": 87, "quantizelinear": [87, 570], "make_dquant_nod": 87, "dequantizelinear": [87, 570], "is_b_transpos": 87, "wheter": 87, "inuput": 87, "transpos": [87, 116, 232, 268, 310, 340, 612], "split_shared_bia": 87, "share": [87, 122, 125, 142, 148, 178, 571, 572, 613], "cast_tensor": 87, "remove_init_from_model_input": 87, "collate_pr": 87, "quantize_data_with_scale_zero": 87, "zero_point": [87, 272, 333, 340], "pack": [87, 104], "ab": [87, 297, 312, 337, 607], "np": [87, 149, 178, 232, 268, 355, 568, 612], "sym": [87, 572, 614], "asym": [87, 572, 614], "calculate_scale_zp": 87, "quantize_data": 87, "trasnform": 87, "equat": [87, 281, 283, 323, 325, 607], "z": [87, 566], "real": [87, 88, 218, 235, 236, 256, 568, 605, 607], "quantize_data_per_channel": 87, "tensor_valu": 87, "scale_valu": 87, "zo_valu": 87, "dequantize_data_with_scale_zero": 87, "sacal": 87, "dequantize_data": 87, "valueinfo": 87, "tensor_nam": [87, 184, 334, 335], "new_dtyp": 87, "quantizedvalu": 87, "new_quantized_nam": 87, "scale_nam": 87, "zero_point_nam": 87, "quantized_value_typ": 87, "quint8": 87, "linearli": 87, "intial": 87, "quantizediniti": 87, "quantized_data": 87, "quantizationmod": 87, "quantizedvaluetyp": 87, "quantformat": [87, 272], "quantize_nparrai": 87, "high": [87, 218, 219, 256, 257, 564, 576, 605, 613], "attribute_to_kwarg": 87, "kwarg": [87, 88, 90, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 176, 177, 195, 200, 217, 226, 229, 230, 232, 236, 237, 240, 255, 268, 274, 275, 285, 291, 297, 302, 307, 313, 315, 316, 317, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 348, 352, 364, 367, 368, 372, 374, 375, 377, 378, 383, 385, 387, 388, 389, 390, 400, 402, 403, 405, 407, 410, 411, 416, 563], "make_nod": 87, "find_by_nam": 87, "item_list": 87, "item": [87, 197, 231, 267, 311, 351, 363, 431, 519, 552, 568, 613], "get_ops_recurs": 88, "prefix": [88, 184, 185, 189, 233, 275, 276, 318, 546, 581, 586, 611], "graph_info": [88, 90, 327, 328, 329, 333, 334, 335], "templateadaptor": 88, "tampl": 88, "is_fused_modul": [88, 186, 190], "_propagate_qconfig_help": [88, 186, 190], "calculate_hessian_trac": 88, "enable_act": [88, 186], "hessian": [88, 186, 358, 613], "gradient": [88, 161, 312, 335, 337, 341, 342, 575, 603, 604, 615], "amap": 88, "op_nam": [88, 190, 196, 200, 317, 356, 360, 363, 364, 367, 433, 438, 439, 447, 448, 603, 611], "hessian_trac": [88, 186], "pytorchadaptor": 88, "objext": 88, "number": [88, 110, 111, 186, 190, 191, 193, 205, 213, 216, 228, 232, 243, 251, 254, 265, 268, 280, 281, 283, 290, 299, 310, 322, 323, 325, 340, 341, 346, 347, 350, 355, 371, 378, 465, 521, 531, 534, 561, 562, 564, 568, 578, 603, 607, 610, 612, 613], "summari": [88, 233, 275, 344, 368, 561, 593, 596, 602, 611], "optimizer_tupl": [88, 90], "criterion_tupl": [88, 90], "hook": [88, 90, 186, 203, 234, 241, 242, 269, 275, 302, 307, 335, 363, 371, 566, 603, 611], "is_fused_child": 88, "_post_eval_hook": [88, 611], "is_fused_op": 88, "is_last_fused_child": 88, "last": [88, 90, 136, 190, 203, 205, 243, 297, 310, 336, 337, 340, 363, 502, 561, 579, 581, 583, 588, 592, 607], "q_capabl": 88, "get_non_quant_modul": 88, "model_kwarg": 88, "non_quant_modul": 88, "custom": [88, 154, 195, 288, 316, 336, 377, 420, 425, 562, 566, 581, 603, 610], "keyword": 88, "custom_non_quant_dict": 88, "pytorch_ipexadaptor": 88, "ipex": [88, 190, 335, 575, 583, 587, 588, 615], "unspport": 88, "No": [88, 571, 602, 605], "pytorch_fxadaptor": 88, "fx": [88, 190, 352, 361, 575, 587, 588, 605, 607, 608, 615], "prepare_sub_graph": 88, "sub_module_list": 88, "fx_op_cfg": 88, "is_qat": [88, 189], "example_input": [88, 190, 200, 270, 272, 335, 570], "recurs": [88, 378], "qconfigmap": 88, "prepare_fx": 88, "dir": [88, 190, 215, 253, 377, 564, 571, 573], "convert_sub_graph": 88, "fuse_fx_model": 88, "fused_model": 88, "calculate_op_sensit": [88, 90], "output_op_nam": [88, 90], "confidence_batch": [88, 90, 190, 613], "fallback": [88, 90, 190, 353, 354, 358, 360, 361, 579, 608, 613], "requantize_cfg": [88, 90, 190], "switch": [88, 128, 581, 611], "stage": [88, 90, 136, 353, 361, 526, 566, 611, 613], "re": [88, 90, 355, 374, 576, 598], "sort": [88, 90, 178, 333, 360, 442, 613], "sensit": [88, 90, 312, 337, 341, 575, 603, 604], "ops_lst": 88, "pytorchqueri": 88, "set_quantization_config": 89, "organ": [89, 561, 614], "unsupported_precis": 89, "tensorflowadaptor": 90, "stock": [90, 587], "spr": 90, "graphdef": [90, 99, 100, 103, 104, 106, 110, 111, 113, 117, 122, 128, 129, 135, 136, 137, 138, 149, 171, 178, 184, 334, 511, 580], "graph_def": [90, 96, 149, 184, 326, 334, 352, 476, 511, 512], "frozen": [90, 99, 326, 334, 352, 470, 473, 561, 580], "ckpt": [90, 184, 326, 334, 352, 615], "savedmodel": [90, 326, 334, 352, 615], "folder": [90, 184, 217, 222, 255, 260, 326, 352, 377, 564, 586, 591, 595, 611], "on_epoch_begin": [90, 242, 275, 302, 307, 312, 313, 341, 344, 345, 346, 347, 348, 368, 371, 566, 601, 603], "on_epoch_end": [90, 242, 275, 302, 307, 312, 313, 341, 344, 345, 346, 347, 348, 368, 371, 566, 601, 603], "larger": [90, 340], "better": [90, 140, 203, 204, 300, 326, 336, 352, 567, 578, 579, 603, 604, 605, 607, 610, 613], "tf": [90, 155, 161, 184, 214, 215, 216, 217, 232, 252, 253, 254, 255, 268, 332, 334, 381, 561, 568, 580, 605, 608, 612], "compat": [90, 124, 184, 279, 288, 321, 334, 568, 580, 593, 596, 598, 609], "definit": [90, 149, 208, 213, 246, 251, 447, 460, 469, 518, 549], "inspect_weight_and_bia": 90, "node_list": 90, "graph_node_name_map": [90, 184], "bias": 90, "fused_node_map": 90, "pattern_map": 90, "val": [90, 184, 217, 220, 255, 258, 311, 351], "seq": 90, "fused_mapping_revers": 90, "fused_map": 90, "inspect_activ": 90, "local": [90, 310, 340, 347, 363, 374, 378, 393, 425, 430, 443, 463, 561, 591, 595, 604, 610], "actual": [90, 283, 325, 336, 568], "tensorflowbasemodel": [90, 334, 474], "start": [90, 232, 268, 276, 279, 290, 318, 321, 333, 336, 347, 353, 356, 526, 546, 576, 612, 613], "quantizedv2": 90, "quantizedconv2d": 90, "qat_convert": 90, "quantize_recip": [90, 154, 155], "kera": [90, 113, 155, 161, 239, 329, 334, 454, 461, 471, 568, 580, 588, 589], "sequenti": [90, 213, 251, 316, 357, 613], "fake": [90, 152, 607], "converted_model": [90, 579], "quan_model": [90, 184], "diagnosi": [90, 184, 317, 422, 425, 431, 454, 514, 543, 549], "get_output_op_nam": 90, "qmodel": [90, 186], "oupur": 90, "mse": [90, 190, 283, 317, 325, 359, 433, 439, 561, 578, 606, 609], "backup": 90, "fallen": 90, "denot": 90, "tensorflow_itexadaptor": 90, "itex": [90, 148], "performance_onli": [90, 91, 92, 146, 170, 175, 183, 543], "get_grappler_optimization_cfg": 90, "grappler": [90, 118, 572], "get_bf16_pattern": 90, "patter": [90, 164], "get_eightbit_pattern": 90, "qdq_enabl": [90, 91], "eightbit": [90, 611], "generate_internal_pattern": 90, "intern": [90, 149, 186, 295, 517, 563, 564, 604], "graphconvert": 91, "qt_config": 91, "recip": [91, 154, 200, 270, 272, 274, 275, 315, 570, 613], "int8_sequ": 91, "fp32_op": [91, 93, 146, 149], "bf16_op": [91, 93, 146, 149, 608], "fake_qu": [91, 132, 146, 170, 175], "itex_mod": [91, 122, 133, 146, 170, 175], "new_api": [91, 92, 114, 115, 120, 122, 136, 143, 170, 175, 179], "use_bf16": [91, 92, 606, 608], "fp32_frozen_graph": 91, "requantizeop": [91, 92], "empti": [91, 154, 279, 321, 355, 584], "bf16_node": [91, 92], "quantize_with_qdq_pattern": 91, "newapi": [91, 138], "graphconverterwithoutcalib": 92, "recover_config": 92, "convert_without_calib": 92, "quantize_without_calib": 92, "rewrit": [93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "bf16convert": [93, 608], "graphrewriterbas": [93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148], "do_transform": [93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 163, 170, 171, 175, 179, 180, 182, 183], "biasadd": [95, 102, 107, 109, 122, 148, 164, 165, 167, 174, 176, 572], "convertaddtobiasaddoptim": 95, "addv2": [95, 111, 112, 113, 164, 167, 572], "layout": 96, "convertlayoutoptim": 96, "nchw": 96, "nhwc": [96, 110, 111], "leakyrelu": [97, 162, 164, 166, 167, 172], "convertleakyreluoptim": 97, "subgraph": [97, 105, 109, 110, 111, 113, 189, 570], "mul": [97, 108, 109, 110, 112, 113, 122, 164, 167, 570], "coeffici": [97, 289, 604], "less": [97, 122, 184, 378, 562, 566, 603], "nan": 98, "convertnantorandom": 98, "const": [98, 99, 106, 107, 110, 111, 113, 125, 128, 129, 141, 142, 149, 317, 398, 409, 412, 419, 425, 427, 428, 432, 514, 522, 532], "placehold": [99, 213, 251], "convertplaceholdertoconst": 99, "renam": [99, 124, 297, 609], "placeholderwithdefault": 99, "constant": [99, 105, 122, 149, 178, 270, 272, 317, 333, 335, 355, 372, 515, 563, 572, 612], "simplifi": [99, 581, 592, 598], "input_graph_def": [99, 100, 103, 104, 106, 110, 111, 113, 117, 128, 129, 149, 178], "nodes_to_convert": 99, "strtobool": 99, "val_str": 99, "equival": [99, 126, 288], "rerewrit": 100, "dequantizecastoptim": 100, "b16": 100, "redund": [100, 135, 137, 171], "dilat": 101, "contract": 101, "dilatedcontract": 101, "spacetobatchnd": 101, "batchtospacend": 101, "inject": 102, "injectdummybiasaddoptim": 102, "miss": [102, 391, 603, 607], "behind": 102, "expanddim": 103, "expanddimsoptim": 103, "whose": [103, 128, 129, 311, 340, 573, 603, 613], "featch": 104, "fetchweightfromreshapeoptim": 104, "fetch": [104, 190, 193, 208, 246, 279, 321, 564], "fold": [105, 106, 110, 111, 122, 270, 272, 335, 572], "foldbatchnormnodesoptim": 105, "scale_after_norm": 105, "batchnormwithglobalnorm": 105, "nodedef": [105, 110, 111, 113, 149, 178, 180, 511], "normal": [105, 110, 111, 113, 232, 268, 281, 323, 533, 600, 612], "convolut": [105, 110, 111, 566, 603, 605], "multipl": [105, 110, 111, 154, 201, 202, 206, 207, 215, 216, 218, 219, 220, 221, 222, 226, 229, 232, 239, 244, 245, 247, 253, 254, 256, 257, 258, 259, 260, 264, 266, 268, 284, 312, 326, 327, 328, 330, 336, 341, 347, 354, 518, 562, 564, 570, 601, 603, 610, 613], "onc": [105, 149, 184, 239, 314, 350, 561, 563, 598, 603, 604, 605, 613, 615], "final": [105, 312, 340, 347, 525, 584, 600, 603, 604, 607, 609, 613], "That": [105, 561], "opportun": [105, 110, 111], "down": [105, 592], "addit": [105, 111, 113, 190, 203, 368, 518, 561, 566, 592, 609], "rather": [105, 573], "expens": [105, 566, 613], "bake": 105, "identifi": [105, 110, 111, 113, 279, 321, 334, 374], "simpler": 105, "form": [105, 110, 111, 113, 124, 279, 281, 321, 323, 425, 427, 526, 561, 566, 598], "spot": 105, "fusedbatchnorm": [105, 110, 124], "fusedbatchnormv3": [105, 162, 172], "_fusedbatchnormex": 105, "extend": [105, 110, 111], "futur": [105, 203, 204, 235, 236, 575, 579, 589], "newer": [105, 110, 111], "badli": [105, 110, 111, 113, 124], "duplic": [105, 110, 111, 113, 142, 147, 355], "graphfoldconstantoptim": 106, "supported_op_typ": 106, "check_all_fold": 106, "check_const_input": 106, "node_nam": [106, 110, 111, 113, 122, 149, 171, 178, 180, 184, 272, 333, 334, 413, 511], "fusebiasaddandaddoptim": 107, "columnwis": 108, "fusecolumnwisemuloptim": 108, "depthwiseconv2dn": [108, 114, 115, 164, 174, 572], "math": [109, 607], "fuseconvwithmathoptim": 109, "elimin": 109, "realdiv": [109, 112], "decompos": [110, 111], "fusedecomposedbnoptim": 110, "some": [110, 111, 154, 203, 215, 242, 253, 275, 311, 363, 533, 561, 564, 576, 578, 600, 603, 604, 607, 608, 611, 613], "normalizatin": [110, 111], "group": [110, 111, 342, 349, 450, 575, 603, 604, 611, 612, 613, 615], "instead": [110, 111, 196, 197, 214, 252, 378, 584, 586, 589], "those": [110, 111, 117, 360, 378, 566, 573, 601, 603, 604, 607, 613], "recogn": [110, 111, 276, 318], "attempt": [110, 111, 374], "multipli": 110, "rsqrt": [110, 111], "varianc": [110, 179, 194], "epsilon": [110, 614], "gamma": [110, 111, 113], "OR": 110, "mul_0": 110, "mul_1": 110, "insid": [110, 279, 321, 566, 599, 603, 613], "mul_3": 110, "batchnorma": 110, "node_name_from_input": [110, 111, 113, 149, 178, 180], "strip": [110, 111, 113, 122, 126, 127, 184, 611], "port": [110, 111, 113, 178, 546, 550, 561], "underli": [110, 111, 113, 289], "node_from_map": [110, 111, 113], "node_map": [110, 111, 113], "pull": [110, 111, 113, 526], "entri": [110, 111, 113, 171, 186, 239, 274, 316, 396, 439, 442, 525, 533, 577], "index": [110, 111, 113, 154, 161, 208, 213, 217, 221, 226, 233, 246, 251, 255, 259, 264, 275, 300, 336, 378, 550, 564, 578, 599], "isn": [110, 111, 113, 149], "present": [110, 111, 113, 561, 605], "values_from_const": [110, 111, 113, 149], "node_def": [110, 111, 113, 149], "extract": [110, 111, 113, 149, 217, 255, 552, 564], "access": [110, 111, 113, 149, 161, 196, 197, 374, 378, 517, 533, 546, 550, 561, 593, 596], "valid_reshape_input": [110, 111], "reshape_in0_ndef": [110, 111], "reshape_in1_ndef": [110, 111], "bypass_reshap": [110, 111], "input_node_map": [110, 111], "get_const_dim_count": [110, 111], "dimens": [110, 111, 207, 232, 245, 268, 291, 306, 340, 355, 564, 566, 603, 612], "instancenorm": 111, "fusedecomposedinoptim": 111, "contraint": [111, 113], "clang": 111, "x____________": 111, "mean1": 111, "fusedop": [111, 113], "_mklfusedinstancenorm": 111, "_mkllayernorm": [111, 113], "squareddiff": 111, "mean0": 111, "mul1": 111, "constx": 111, "mul2": 111, "mul0": 111, "gelu": [112, 167], "fusegeluoptim": 112, "sqrt": 112, "erf": 112, "samll": 113, "layernorm": [113, 297], "fuselayernormoptim": 113, "remap": 113, "smaller": [113, 232, 268, 566, 603, 604, 612], "case": [113, 117, 214, 231, 232, 233, 252, 267, 268, 274, 275, 283, 302, 307, 315, 316, 325, 336, 523, 527, 533, 561, 563, 566, 568, 572, 573, 578, 582, 586, 598, 599, 600, 603, 605, 607, 609, 612, 614], "fusedbatcnormv3": 113, "restrict": [113, 603, 604, 610], "2d": 113, "3d": [113, 605], "fill": [113, 400, 402, 403, 405, 407, 410, 411, 416, 561, 598, 610, 612], "f": [113, 566, 568, 607], "u": [113, 179, 194, 581], "d": [113, 117, 288, 566, 573, 599, 604], "c": [113, 117, 217, 255, 561, 564, 571, 576, 604, 613], "h": [113, 232, 268, 568, 612], "n": [113, 216, 232, 254, 268, 277, 310, 319, 340, 521, 564, 566, 603, 604, 612], "v": [113, 589, 598, 614], "fusepadwithconv2doptim": 114, "excluded_op_nam": [114, 115, 196, 200, 317, 603], "itex_qdq_mod": [114, 115], "conv3d": [114, 115, 164], "fusepadwithfp32conv2doptim": 115, "fusetransposereshapeoptim": 116, "cse": [117, 142], "graphcseoptim": 117, "child": [117, 611], "b1": 117, "c1c2": 117, "d1": [117, 378], "c1": 117, "c2": 117, "bound": [117, 232, 233, 268, 275, 279, 288, 321, 355, 578, 612], "relu6": [117, 164, 167, 572], "elim": [117, 122], "grappleroptim": 118, "input_output_nam": 118, "opt_cfg": 118, "wrapper": [118, 161, 185, 214, 226, 229, 232, 234, 235, 236, 237, 238, 252, 264, 266, 268, 279, 283, 321, 324, 325, 328, 330, 334, 550, 558, 608], "convert_add_to_biasadd": [119, 131, 150], "convert_layout": [119, 131, 150], "convert_leakyrelu": [119, 131, 150], "convert_nan_to_random": [119, 131, 150], "convert_placeholder_to_const": [119, 131, 150], "dequantize_cast_optim": [119, 131, 150], "dilated_contract": [119, 131, 150], "dummy_biasadd": [119, 131, 150], "expanddims_optim": [119, 131, 150], "fetch_weight_from_reshap": [119, 131, 150], "fold_batch_norm": [119, 131, 150], "fold_const": [119, 131, 150], "fuse_biasadd_add": [119, 131, 150], "fuse_column_wise_mul": [119, 131, 150], "fuse_conv_with_math": [119, 131, 150], "fuse_decomposed_bn": [119, 131, 150], "fuse_decomposed_in": [119, 131, 150], "fuse_gelu": [119, 131, 150], "fuse_layer_norm": [119, 131, 150], "fuse_pad_with_conv": [119, 131, 150], "fuse_pad_with_fp32_conv": [119, 131, 150], "fuse_reshape_transpos": [119, 131, 150], "graph_cse_optim": [119, 131, 150], "grappler_pass": [119, 131, 150], "insert_print_nod": [119, 131, 150], "move_squeeze_after_relu": [119, 131, 150], "pre_optim": [119, 131, 150], "remove_training_nod": [119, 131, 150, 178], "rename_batch_norm": [119, 131, 150], "split_shared_input": [119, 131, 150, 178], "strip_equivalent_nod": [119, 131, 150, 184], "strip_unused_nod": [119, 131, 150, 184], "switch_optim": [119, 131, 150], "update_ent": [119, 131, 150], "print": [120, 186, 283, 325, 335, 378, 561, 568, 578, 603, 613], "insertprintminmaxnod": 120, "pre_node_nam": 120, "post_node_nam": 120, "movesqueezeafterreluoptim": 121, "match": [121, 122, 149, 161, 231, 267, 279, 280, 321, 322, 566, 599], "pre": [122, 155, 203, 204, 215, 253, 296, 326, 335, 352, 564, 566, 579, 603, 604, 605, 607, 611, 613], "entranc": [122, 206, 209, 226], "preoptim": 122, "get_excluded_node_nam": 122, "get_optimized_model": 122, "possibl": [122, 233, 275, 288, 353, 357, 395, 462, 561, 601, 608, 613], "useless": 122, "get_matched_nod": 122, "illustr": 122, "matched_node_a_nam": 122, "has_positive_input": [122, 149], "neg": [122, 149], "removetrainingnodesoptim": 123, "protected_nod": [123, 178], "types_to_splic": [123, 178], "checknumer": [123, 178], "stopgradi": 123, "tranin": 123, "edg": [123, 447, 449, 454, 514, 612], "fusedbatchnormv2": 124, "renamebatchnormoptim": 124, "due": [124, 603, 604, 607, 611], "histor": 124, "latter": [124, 154], "former": 124, "platform": [124, 378, 521, 575, 581, 589, 605, 607, 615], "vnni_bf16": 124, "amx": 124, "instruct": [124, 561, 566, 576, 579, 593, 596, 605, 606, 607], "splitsharedinputoptim": 125, "stripequivalentnodesoptim": 126, "output_node_nam": [126, 127, 170, 171, 175, 178, 184, 334], "unus": [127, 184, 288, 297, 333], "stripunusednodesoptim": 127, "input_node_nam": [127, 170, 175, 178, 184, 334], "switchoptim": 128, "condit": [128, 215, 216, 217, 232, 253, 254, 255, 268, 564, 577, 612, 613], "enter": [128, 129, 592, 598], "updateenteroptim": 129, "workaround": 129, "freeze_fake_qu": [131, 139, 150], "freeze_valu": [131, 139, 150], "freeze_value_without_calib": [131, 139, 150], "fuse_conv_redundant_dequant": [131, 139, 150], "fuse_conv_requant": [131, 139, 150], "fuse_matmul_redundant_dequant": [131, 139, 150], "fuse_matmul_requant": [131, 139, 150], "meta_op_optim": [131, 139, 150], "post_hostconst_convert": [131, 139, 150], "post_quantized_op_cs": [131, 139, 150], "rnn_convert": [131, 139, 150], "scale_propag": [131, 139, 150], "insert_qdq_pattern": [131, 145, 150], "merge_duplicated_qdq": [131, 145, 150], "share_qdq_y_pattern": [131, 145, 150], "freez": [132, 133, 134, 581, 603, 604], "fakequ": 132, "freezefakequantopoptim": 132, "freezevaluetransform": 133, "max_min_data": [133, 134], "postfix": [133, 134], "tensor_data": [133, 378], "th": [133, 134], "gpu": [133, 134, 141, 149, 178, 562, 575, 583, 589, 598, 606, 607], "generate_output_graph": [133, 134], "max_name_valu": [133, 134], "freeze_max": [133, 134], "freeze_min": [133, 134], "generate_output_graph_rang": [133, 134], "freezevaluewithoutcalibtransform": 134, "95": [134, 279, 283, 321, 325, 578, 615], "do_transformation_without_calib": 134, "quantizedconv": [135, 136], "quantizeddeconv": 135, "fuseconvredundantdequantizetransform": 135, "cpu": [135, 136, 137, 138, 149, 178, 200, 291, 317, 378, 562, 575, 579, 581, 583, 589, 598, 602, 605, 606, 608, 611], "_quantizedconv": 135, "_quantizeddeconv": 135, "successor": [135, 136, 137, 138], "requant": [136, 138, 611], "fuseconvrequantizetransform": 136, "fuse_pattern": 136, "sum_pattern": 136, "quantizedmatmul": [137, 138], "fusematmulredundantdequantizetransform": 137, "_quantizedmatmul": [137, 138], "fusematmulrequantizedequantizetransform": 138, "quantizedmatmulwithbiasanddequant": 138, "fusematmulrequantizetransform": 138, "fusematmulrequantizedequantizenewapitransform": 138, "fusematmulrequantizenewapitransform": 138, "meta": [140, 217, 255], "metainfochangingmemopoptim": 140, "metaop": 140, "quantizev2": [140, 142, 164, 165, 167, 171], "hostconst": 141, "posthostconstconvert": 141, "postcseoptim": 142, "decreas": 142, "rnn": [143, 149], "quantizedrnnconvert": 143, "calibration_data": [143, 146], "rnn_detail": 143, "scalepropagationtransform": 144, "direct": [144, 310, 340, 483], "algrothim": 144, "generategraphwithqdqpattern": 146, "op_wise_config": [146, 170, 175], "quantized_nod": 146, "quantizaiton": 146, "mergeduplicatedqdqoptim": 147, "y": [148, 232, 268, 355, 584, 612], "shareqdqforitexypatternoptim": 148, "break": [148, 568], "graphanalyz": 149, "extend_engin": 149, "analyz": [149, 178, 334, 603, 604, 610, 611], "singleton": [149, 317, 378, 514, 522], "getter": [149, 242, 269, 275, 299, 302, 307, 315, 316, 335, 463], "_graph": 149, "retrun": 149, "get_graph_input_output": 149, "know": [149, 235, 236, 269, 275, 302, 307, 519, 568, 609], "clearli": 149, "similar": [149, 297, 606, 613, 614], "summarize_graph": 149, "writtern": 149, "googl": [149, 579, 605], "query_fusion_pattern_nod": 149, "aggreg": [149, 527], "_search_pattern": 149, "remove_node_with_single_input_output": 149, "rebuild": [149, 582, 591, 595], "structur": [149, 312, 347, 367, 458, 575, 597, 599, 603, 604, 607, 611, 615], "except": [149, 317, 378, 514, 522, 523, 533, 548, 558], "remove_nod": [149, 333], "replace_const_nod": 149, "new_const_nod": 149, "target_nod": 149, "old_constant_node_nam": 149, "replace_al": 149, "outdat": 149, "replace_constant_graph_with_constant_nod": 149, "new_nod": 149, "old_end_node_nam": 149, "replace_single_nod": 149, "old_output_node_nam": 149, "old_output_nam": [149, 333], "old_input_node_nam": 149, "old_input_nam": [149, 333], "top": [149, 232, 268, 274, 275, 283, 302, 307, 315, 325, 578, 598, 612, 615], "bottom": [149, 561], "replace_nod": 149, "old_node_nam": 149, "output_nodes_nam": 149, "node_name_detail": 149, "parent": [149, 306, 312, 314, 333, 347, 350, 611], "add_nod": [149, 333, 447], "start_node_nam": 149, "end_node_nam": 149, "dump_graph": 149, "get_frame_info": 149, "frame": 149, "ordereddict": [149, 363, 420, 425, 534], "parent_frame_detail": 149, "parse_graph": 149, "outputnod": 149, "graphrewriterhelp": 149, "encapsul": [149, 203, 204, 326, 352, 580], "compare_node_attr": 149, "node_a": 149, "node_b": 149, "compar": [149, 186, 283, 325, 336, 561, 567, 578, 604, 607, 610, 611, 613], "create_nod": [149, 178], "create_constant_nod": [149, 178], "datatyp": [149, 178, 608, 613], "set_attr_dtyp": [149, 178], "set_attr_tensor": [149, 178], "set_attr_type_list": [149, 178], "attr": [149, 178, 184], "set_attr_string_list": [149, 178], "set_attr_str": [149, 178], "set_attr_int_list": 149, "set_attr_int": [149, 178], "set_attr_float": [149, 178], "set_attr_bool": [149, 178], "generate_int32_bias_for_conv": 149, "bias_tensor": 149, "channel_s": 149, "max_input": 149, "min_input": 149, "max_filter_tensor": [149, 378], "min_filter_tensor": [149, 378], "activation_rang": 149, "weights_rang": 149, "127": [149, 218, 219, 256, 257, 564, 607, 615], "int32_bia": 149, "generate_int32_bias_for_matmul": 149, "weights_tensor": 149, "input_rang": 149, "max_filter_valu": 149, "min_filter_valu": 149, "gen_valid_sampling_log": 149, "log_path": 149, "analysis_rnn_model": 149, "quantize_lay": [150, 151, 153], "fake_quant": [150, 151, 153], "quantize_config": [150, 151, 153], "quantize_help": [150, 151, 153], "quantize_wrapp": [150, 151, 153], "fuse_qdq_bn": [150, 151, 169], "fuse_qdq_concatv2": [150, 151, 169], "fuse_qdq_conv": [150, 151, 169], "fuse_qdq_deconv": [150, 151, 169], "fuse_qdq_in": [150, 151, 169], "fuse_qdq_matmul": [150, 151, 169], "fuse_qdq_pool": [150, 151, 169], "optimize_qdq": [150, 151, 169], "optimize_lay": [151, 153, 156], "quantize_layer_add": [151, 153, 156], "quantize_layer_bas": [151, 153, 156, 158, 160], "quantize_layer_bn": [151, 153, 156], "fakequantizebas": 152, "get_config": [152, 161, 559], "serial": [152, 215, 253, 431, 438, 439, 469, 521, 523, 535, 536, 540, 541], "fakequant": 152, "classmethod": [152, 161, 191, 193, 303, 304, 305, 364, 367, 374, 520, 554, 556, 559], "from_config": [152, 161], "instanti": [152, 374, 601], "per_channel": [152, 178, 572, 614], "num_bit": 152, "symmetr": [152, 607, 612, 613], "narrow_rang": 152, "quantizeconfig": [154, 155, 161], "There": [154, 283, 316, 325, 561, 566, 572, 575, 578, 579, 581, 613, 614], "add_quantize_recip": 154, "layer_nam": [154, 310, 340], "conv5_block3_3_conv": 154, "flase": 154, "conv5_block3_3_add": 154, "query_lay": 154, "layer_recip": 154, "remove_lay": 154, "get_quantize_recip": 154, "is_empti": 154, "clear_quantize_recip": 154, "init_quantize_config": 155, "begin": [155, 242, 275, 302, 307, 312, 313, 337, 341, 345, 346, 347, 348, 368, 566, 603, 613], "model_nam": [155, 291, 408, 414, 533], "qat_clone_funct": 155, "leav": [155, 592], "quantizewrapp": [155, 161], "wrapped_lay": 155, "config_quantizable_lay": 157, "quantizelayeradd": 158, "quantizelayerbas": [158, 159, 160], "quantizelay": 159, "quantizelayerbatchnorm": 160, "quantizewrapperbas": 161, "trainabl": 161, "sublay": 161, "trainable_weight": 161, "track": [161, 363, 598, 610], "descent": 161, "non_trainable_weight": 161, "manual": [161, 217, 255, 564, 581, 587, 589, 592], "add_loss": 161, "regular": [161, 276, 311, 318, 349, 603], "eager": [161, 313, 348, 380, 488, 492, 500, 568, 575, 607, 608, 611, 615], "gradienttap": 161, "input_shap": [161, 219, 257, 332, 462, 465, 474, 563, 564], "tensorshap": 161, "compute_output_shap": 161, "caus": [161, 582, 603, 604], "state": [161, 186, 282, 283, 295, 297, 324, 325, 335, 364, 367, 584, 603, 604], "happen": 161, "later": [161, 611], "output_shap": 161, "query_input_index": 161, "logic": [161, 203, 204, 363, 545, 614], "live": 161, "output_obj": 161, "fusenodestartwithfusedbatchnormv3": [162, 172], "quantizenodebas": [162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 176, 177], "_quantizedfusedbatchnorm": 162, "apply_newly_bn_relu_fus": [162, 172], "match_node_nam": [162, 164, 165, 166, 167, 172, 174, 176], "apply_newly_bn_leakyrelu_fus": [162, 172], "get_longest_fus": [162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 176, 177], "longest": [162, 163, 164, 165, 166, 167, 168, 172, 174, 176, 231, 232, 267, 268, 612], "apply_the_transform": [162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 176, 177], "concatv2": [163, 173, 183, 572], "fusenodestartwithconcatv2": [163, 173], "quantizedconcatv2": [163, 173], "fusenodestartwithconv2d": [164, 174], "apply_conv3d_add_addn_relu_fus": 164, "addn": [164, 174, 572], "apply_conv3d_add_addn_fus": 164, "apply_conv3d_add_relu_fus": 164, "apply_conv3d_add_fus": 164, "apply_conv3d_single_fus": 164, "apply_newly_conv_biasadd_relu_fus": 164, "elu": [164, 167], "sigmoid": [164, 167], "apply_newly_conv_biasadd_fus": 164, "apply_newly_conv_single_fus": 164, "apply_newly_conv_biasadd_addn_relu_fus": 164, "apply_conv_biasadd_hardswish_fus": 164, "hardswish": 164, "apply_newly_conv_biasadd_swishf32_fus": 164, "swishf32": 164, "swish_f32": 164, "apply_newly_conv_biasadd_addn_fus": 164, "conv2dbackpropinput": 165, "conv3dbackpropinputv2": 165, "fusenodestartwithdeconv2d": 165, "apply_single_deconv2d_fus": 165, "apply_deconv2d_biasadd_fus": 165, "apply_single_deconv3d_fus": 165, "apply_deconv3d_biasadd_fus": 165, "fusedinstancenorm": 166, "fusenodestartwithfusedinstancenorm": 166, "apply_newly_in_relu_fus": 166, "batchmatmul": 167, "batchmatmulv2": 167, "fusenodestartwithmatmul": [167, 176], "apply_matmul_biasadd_relu_fus": [167, 176], "tanh": 167, "apply_matmul_biasadd_fus": [167, 176], "apply_batchmatmulv2_fus": 167, "apply_batchmatmulv2_mul_add_fus": 167, "avgpool": [168, 177, 572], "fusenodestartwithpool": [168, 177], "optimizeqdqgraph": 170, "op_wise_sequ": [170, 175], "quantizegraphbas": [170, 171, 175], "get_quantized_nod": 170, "quantizegraph": 171, "register_transform": 171, "virtual": [171, 180, 605], "deriv": [171, 242, 269, 275, 310, 312, 314, 337, 340, 347, 349, 350], "remove_dead_nod": 171, "output_nam": [171, 200, 270, 272, 335, 570], "longer": [171, 215, 232, 253, 268, 564, 612], "eightbitize_single_input_tensor_nod": 171, "original_nod": 171, "add_op_funct": 171, "add_output_graph_nod": 171, "output_nod": [171, 408], "remove_redundant_quant": 171, "old_graph": 171, "create_nodes_map": 171, "apply_conv_single_fus": 174, "apply_conv_biasadd_relu_fus": 174, "apply_conv_biasadd_fus": 174, "apply_conv_biasadd_addn_relu_fus": 174, "quantizegraphforintel": 175, "itself": [177, 327, 328, 329, 331, 333, 334, 586], "herlper": 178, "quantizegraphhelp": 178, "staticmethod": 178, "get_sorted_graph": 178, "reorder": [178, 295, 297], "pars": [178, 180, 190, 215, 216, 228, 232, 253, 254, 265, 268, 297, 341, 380, 391, 396, 419, 420, 422, 425, 426, 427, 428, 431, 484, 488, 492, 497, 500, 506, 525, 533, 541, 552, 612], "easier": [178, 561, 591, 595, 598, 605], "in_graph": [178, 184], "ouput": 178, "aren": 178, "uncondition": 178, "copy_attr": 178, "attr_valu": 178, "copi": [178, 311, 378], "unique_node_name_from_input": 178, "ensure_tensor_name_has_port": 178, "sure": [178, 310, 312, 314, 340, 347, 350, 462, 561, 562], "generate_quantized_weight_nod": 178, "host_op_typ": 178, "input_nod": [178, 408], "weight_bit": 178, "enter_nod": 178, "biascorrect": 179, "fp32_graph": 179, "weight_empir": 179, "graphtransformbas": [179, 180, 182, 183], "Will": [179, 206, 209, 226, 546, 566, 575], "task": [179, 215, 222, 253, 260, 283, 297, 325, 564, 566, 575, 578, 603, 604], "close": [179, 194], "w_int8": [179, 194], "w_fp32": [179, 194], "ratio": [179, 194, 228, 232, 265, 268, 275, 302, 307, 310, 312, 313, 314, 340, 344, 347, 348, 350, 564, 603, 604, 612, 615], "equal": [179, 184, 194, 378, 578, 604], "round": [179, 194, 607], "scale_c": [179, 194], "shift": [179, 194, 228, 265, 599, 612], "notic": [179, 194, 233, 275, 577, 609], "empir": [179, 194], "graphtransform": 180, "input_pb": [180, 182, 183], "parse_input_pb": 180, "pbdef": 180, "generate_input_map": 180, "get_node_name_from_input": 180, "insertlog": 182, "node_name_list": 182, "show_nam": 182, "show_op": 182, "first_n": 182, "summar": [182, 566], "1024": [182, 217, 255, 584], "messag": [182, 533, 545, 550, 613], "dump_fp32": 182, "rerang": 183, "rerangequantizedconcat": 183, "rerange_quant": 183, "version1_lt_version2": [184, 378], "version1": [184, 378], "version2": [184, 378], "version1_gt_version2": [184, 378], "greater": [184, 378], "version1_eq_version2": [184, 378], "version1_gte_version2": [184, 378], "version1_lte_version2": [184, 378], "disable_random": 184, "seed": [184, 200, 288, 290, 301, 317, 378, 543, 614], "read_graph": 184, "in_graph_is_binari": 184, "read": [184, 217, 220, 232, 255, 258, 268, 275, 302, 307, 311, 313, 348, 448, 452, 453, 564, 608, 610], "write_graph": 184, "out_graph_def": 184, "out_graph_fil": 184, "write": [184, 224, 225, 226, 262, 263, 264, 279, 321, 378, 568, 573, 581, 611], "is_ckpt_format": 184, "model_path": [184, 333, 448, 463, 468, 533], "is_saved_model_format": 184, "saved_model": [184, 275, 285, 334, 454, 461, 471], "get_estimator_graph": 184, "estim": [184, 186, 283, 286, 287, 291, 298, 299, 325, 334, 613], "input_fn": [184, 334], "get_tensor_by_nam": 184, "try_cnt": 184, "scope": [184, 242, 275, 332, 603], "suffix": 184, "time": [184, 232, 268, 283, 295, 325, 336, 355, 378, 519, 525, 526, 531, 546, 568, 571, 586, 588, 591, 595, 598, 599, 600, 603, 604, 605, 607, 610, 611, 612, 613], "got": [184, 571, 611], "iterator_sess_run": 184, "sess": [184, 334], "iter_op": [184, 334], "feed_dict": [184, 214, 252], "output_tensor": [184, 334], "makeiter": 184, "pred": [184, 282, 283, 324, 325, 578], "collate_tf_pr": 184, "collat": [184, 190], "tbe": 184, "get_input_output_node_nam": 184, "fix_ref_type_of_graph_def": 184, "ref": 184, "strip_unused_lib": 184, "r1": 184, "15": [184, 290, 572, 615], "branch": [184, 374], "get_graph_def": 184, "auto_input_output": 184, "get_model_input_shap": 184, "inout": 184, "get_tensor_val_from_graph_nod": 184, "tensor_v": 184, "int8_node_name_revers": 184, "revers": [184, 561], "tf_diagnosis_help": 184, "generate_feed_dict": 184, "input_tensor": [184, 334, 335], "bf16modulewrapp": 185, "bf16modul": 185, "mixed_precision_model": 185, "bf16_symbolic_trac": 185, "fx_sub_module_list": 185, "_description_": 185, "node_collector": 186, "record": [186, 190, 215, 216, 217, 223, 234, 241, 253, 254, 255, 261, 336, 564, 610, 611, 613], "hook_fn_act": 186, "inp": 186, "outp": 186, "hessiantrac": 186, "yao": 186, "zhewei": 186, "et": [186, 297], "al": [186, 297], "pyhessian": 186, "through": [186, 195, 203, 204, 231, 267, 317, 326, 352, 356, 562, 572, 573, 575, 576, 578, 584, 600, 601, 603, 606], "len": [186, 232, 268, 355, 564, 568, 612], "2020": 186, "ieee": [186, 579], "confer": [186, 604], "big": 186, "dong": 186, "zhen": 186, "system": [186, 233, 374, 378, 521, 548, 549, 562, 584, 603], "33": [186, 288, 615], "18518": 186, "18529": 186, "openvinotoolkit": 186, "nncf": 186, "blob": [186, 276, 277, 280, 281, 310, 318, 319, 322, 323, 340, 587], "mse_metric_gap": [186, 433], "fp32_tensor": [186, 433], "euclidean": [186, 433, 566], "distanc": [186, 433, 566], "get_fused_map": 186, "weight_to_op": 186, "get_devic": 186, "register_act_grad_hook": 186, "reset_act_gradient_and_hook": 186, "get_param": [186, 232, 268], "get_vthv_weight": 186, "num_sampl": [186, 283, 325], "vthv": 186, "get_weight_trac": 186, "op_name_to_trac": 186, "get_act_trac": 186, "res_dict": 186, "get_act_gap": 186, "gap": [186, 570, 580], "get_avg_trac": 186, "32": [186, 279, 321, 568, 573, 602, 603, 615], "averag": [186, 279, 280, 281, 283, 321, 322, 323, 325, 578, 613], "compare_weight": 186, "float_dict": 186, "quantized_dict": 186, "being": [186, 279, 291, 316, 321, 335, 450], "usag": [186, 214, 252, 275, 279, 285, 316, 321, 336, 533, 561, 564, 568, 569, 578, 581, 589, 600, 606, 612], "wt_compare_dict": 186, "float_model": 186, "state_dict": [186, 297, 568, 611], "compute_error": 186, "weight_dict": 186, "hawq_top": 186, "dataread": [188, 273], "sample_s": 188, "100": [188, 200, 217, 255, 279, 288, 317, 321, 562, 564, 568, 573, 606, 607, 612, 613, 614, 615], "ortq": [188, 273], "get_next": [188, 273], "trace_and_fuse_sub_graph": 189, "traced_model": 189, "get_embedding_contigu": 190, "embed": [190, 297], "contigu": [190, 603], "collate_torch_pr": 190, "collate_result": 190, "input2tupl": 190, "append_attr": 190, "fx_model": 190, "generate_activation_observ": 190, "observ": [190, 610, 611, 613], "check_cfg_and_qconfig": 190, "op_infos_from_cfg": 190, "output_tensor_ids_op_nam": 190, "paser_cfg": 190, "ops_nam": 190, "get_quantizable_ops_from_cfg": 190, "input_tensor_ids_op_nam": 190, "auto_copi": 190, "fetch_modul": 190, "set_modul": 190, "new_modul": 190, "simple_infer": 190, "get_example_input": 190, "example_inp": 190, "get_fallback_ord": 190, "fall": 190, "confid": 190, "ordered_op": 190, "get_mse_order_per_fp32": 190, "influenc": 190, "fallback_ord": 190, "get_mse_order_per_int8": 190, "get_torch_vers": 190, "algorithm_registri": [191, 193], "algorithm_typ": [191, 193], "registr": [191, 193, 217, 221, 224, 225, 226, 229, 232, 239, 255, 259, 262, 263, 264, 266, 268, 305], "support_algorithm": [191, 193], "algorithmschedul": [191, 193], "origin_model": [191, 193], "calib_it": [191, 193], "fastbiascorrect": [192, 194], "fast_bias_correct": [193, 317], "weight_correct": [193, 317], "weightcorrect": 194, "ep": 194, "1e": [194, 614], "05": [194, 279, 283, 321, 325, 526, 578, 615], "conf_fname_or_obj": [195, 233, 242, 269, 274, 275, 284, 285, 286, 287, 298, 299, 302, 307, 315, 316, 317], "benchmark_conf": [195, 196, 317], "prefer": [195, 274, 275, 315, 317, 326, 352], "collate_fn": [195, 205, 207, 208, 210, 211, 212, 214, 235, 236, 243, 245, 246, 248, 249, 250, 252, 317, 564], "last_batch": [195, 205, 207, 210, 211, 212, 214, 235, 236, 243, 245, 248, 249, 250, 252, 317], "rollov": [195, 205, 207, 210, 211, 212, 214, 235, 236, 243, 245, 248, 249, 250, 252, 317], "sampler": [195, 205, 207, 209, 210, 211, 212, 214, 235, 236, 243, 245, 247, 248, 249, 250, 252, 264, 275, 317, 365, 568], "batch_sampl": [195, 205, 207, 210, 211, 212, 214, 235, 236, 243, 245, 248, 249, 250, 252, 317], "num_work": [195, 205, 207, 210, 211, 212, 214, 235, 236, 243, 245, 248, 249, 250, 252, 291, 317, 607], "pin_memori": [195, 205, 207, 210, 211, 212, 214, 235, 236, 243, 245, 248, 249, 250, 252, 317], "shuffl": [195, 205, 207, 210, 211, 212, 214, 235, 236, 243, 245, 248, 249, 250, 252, 317, 607], "metric_cl": [195, 236, 237, 282, 283, 317, 324, 325], "mani": [195, 290, 291, 317, 336, 353, 576, 613, 614], "alwai": [195, 236, 237, 279, 317, 321, 324, 325, 578], "user_metr": [195, 236, 237, 317, 324, 325], "sub_class": [195, 317], "basemetr": [195, 282, 283, 317, 324, 325], "postprocess_cl": [195, 226, 229, 230, 236, 240, 317], "b_dataload": [195, 233, 275, 562], "b_func": [195, 233, 275, 562], "benchmarkconfig": [195, 200, 562], "prunerv2": 196, "target_spars": [196, 200, 317, 340, 603, 606, 614], "pruning_typ": [196, 200, 317, 603], "start_step": [196, 200, 312, 317, 347, 603, 606], "end_step": [196, 200, 312, 317, 347, 603, 606], "pruning_scop": [196, 200, 317, 603], "pruning_frequ": [196, 200, 317, 347, 603], "min_sparsity_ratio_per_op": [196, 200, 317, 340, 603], "max_sparsity_ratio_per_op": [196, 200, 317, 340, 347, 603], "sparsity_decay_typ": [196, 200, 317, 603], "pruning_op_typ": [196, 200, 317, 603], "reg_typ": 196, "criterion_reduce_typ": 196, "resume_from_pruned_checkpoint": 196, "similiar": [196, 200, 317], "cfg_fname": 196, "parser": [196, 317, 391, 396, 514, 518, 522, 552], "quantization_conf": 196, "dotdict": 196, "pruning_conf": 196, "graph_optimization_conf": [196, 274, 275], "mixedprecision_conf": 196, "distillation_conf": [196, 269, 275], "search_spac": [196, 286, 298, 299, 300, 301], "defaultconf": 196, "notat": [196, 197], "deep_get": 197, "dot": [197, 533, 579, 607], "nest": 197, "eg": [197, 217, 221, 226, 255, 259, 264, 564, 606], "john": 197, "deep_set": 197, "male": 197, "check_valu": 200, "src": [200, 599], "supported_typ": 200, "supported_valu": 200, "random_se": [200, 355, 368, 417, 543, 614], "1978": 200, "workspac": [200, 317, 334, 335, 368, 377, 378, 419, 420, 425, 427, 428, 429, 459, 532, 534, 543, 580], "default_workspac": 200, "resume_from": [200, 378], "warmup": [200, 534, 562, 606], "cores_per_inst": [200, 398, 534, 562, 606], "num_of_inst": [200, 534, 562, 606], "inter_num_of_thread": [200, 606], "intra_num_of_thread": [200, 606], "accuracycriterion": [200, 501, 613], "higher_is_bett": [200, 578, 613, 614], "rel": [200, 606, 613, 614, 615], "tolerable_loss": [200, 613], "01": [200, 602, 606, 613, 614, 615], "absolut": [200, 283, 289, 325, 337, 341, 344, 526, 578, 602, 603, 604, 607, 613], "tuningcriterion": [200, 600, 610, 613], "strategy_kwarg": [200, 610, 613], "timeout": [200, 204, 363, 543, 606, 613, 614], "max_trial": [200, 543, 613], "quant_format": [200, 270, 272, 317, 335, 570], "calibration_sampling_s": [200, 317], "op_type_list": [200, 317, 606, 613], "op_name_list": [200, 317, 613], "excluded_precis": [200, 317], "quant_level": [200, 317, 613], "tuning_criterion": [200, 317, 600, 610, 613], "accuracy_criterion": [200, 317, 336, 600, 606, 613, 614], "_basequantizationconfig": [200, 317], "weightpruningconfig": [200, 317, 601, 603], "pruning_config": [200, 317, 603], "snip_momentum": [200, 317, 337, 603], "4x1": [200, 306, 317, 340, 603, 615], "98": [200, 317, 603, 606, 615], "exp": [200, 317, 603, 604], "weight_compress": [200, 317, 606, 614], "knowledgedistillationlossconfig": [200, 601], "temperatur": [200, 234, 614], "loss_typ": [200, 234, 614], "ce": [200, 234, 614], "loss_weight": [200, 234, 614], "intermediatelayersknowledgedistillationlossconfig": 200, "layer_map": [200, 234], "add_origin_loss": [200, 234], "selfknowledgedistillationlossconfig": [200, 566], "distillationconfig": [200, 317, 566, 601], "teacher_model": [200, 234, 269, 275, 317, 566], "sgd": [200, 239, 317, 566, 606, 614], "learning_r": [200, 317, 606, 614], "0001": [200, 317, 566, 606], "callabl": [200, 281, 317, 323, 368, 529, 533, 549, 550], "altern": [200, 317], "mixedprecisionconfig": [200, 579], "exportconfig": 200, "opset_vers": [200, 270, 272, 335, 570], "dynamic_ax": [200, 270, 272, 335, 570], "onnxqlinear2qdqconfig": 200, "onnxqlinear2qdq": 200, "torch2onnxconfig": [200, 570], "qdq_op_fp32_bia": [200, 270, 272, 570], "torch2onnx": [200, 270, 275, 317], "tf2onnxconfig": 200, "tf2onnx": 200, "sigopt": [201, 202, 317, 605], "tpe": [201, 202, 317], "sigopttunestrategi": 203, "q_dataload": [203, 204, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 573, 613], "q_hook": [203, 204, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363], "tunestrategi": [203, 204, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 613], "hpo": 203, "mandatori": [203, 204, 352, 614], "yield": [203, 204, 213, 235, 236, 251, 326, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 563, 607, 613], "taken": [203, 204, 326, 352], "reserv": [203, 204, 242, 275, 316, 341], "tuner": [203, 204, 274, 275, 315, 326, 352], "scalar": [203, 204, 326, 352, 578, 607], "pseudo": [203, 204, 352, 611], "params_to_tune_config": 203, "next_tune_cfg": [203, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 613], "travers": [203, 204, 353, 356, 357, 363], "concret": [203, 363, 613], "get_acc_target": 203, "base_acc": 203, "ceiterion": 203, "overrid": [203, 242, 275, 315, 363, 374, 378, 523], "constraint": [203, 274, 275, 315, 610, 613, 614], "create_exp": 203, "acc_target": 203, "fefin": 204, "tpetunestrategi": 204, "add_loss_to_tuned_history_and_find_best": 204, "tuning_history_list": 204, "histori": [204, 355, 363, 377, 378, 418, 425, 427, 431, 484, 502, 552, 598, 613], "object_evalu": 204, "alredi": 204, "calculate_loss": 204, "acc_diff": 204, "lat_diff": 204, "stop": [204, 333, 356, 363, 502, 526, 613, 614], "trials_count": [204, 356, 363], "either": [204, 279, 321, 363, 579, 582, 586, 601, 606, 607], "basedatalod": [205, 243], "basedataload": [205, 207, 210, 211, 212, 214, 243, 245, 248, 249, 250, 252], "_generate_dataload": [205, 243], "drop": [205, 243, 279, 311, 321, 579, 592, 603, 604, 615], "incomplet": [205, 243, 374], "discard": [205, 243], "dispatch": [206, 209, 226, 575], "default_col": [207, 245], "outer": [207, 245], "defaultdataload": [207, 211, 214, 245, 249, 252], "base_dataload": [207, 209, 210, 211, 212, 214, 245, 247, 248, 249, 250, 252, 264, 275], "drop_last": [208, 213, 246, 251], "iterablefetch": [208, 246], "indexfetch": [208, 246], "default_dataload": [209, 211, 214, 247, 249, 252, 264, 275], "fetcher": [209, 247, 264, 275], "mxnet_dataload": [209, 247, 264, 275], "onnxrt_dataload": [209, 247, 264, 275], "pytorch_dataload": [209, 247, 264, 275], "tensorflow_dataload": [209, 247, 264, 275, 511], "mxnetdataload": [210, 248], "onnxrtbertdataload": [211, 249], "bert": [211, 214, 215, 232, 249, 252, 253, 268, 564, 566, 578, 586, 612, 615], "varient": [211, 249], "onnxrtdataload": [211, 249], "pytorchdataload": [212, 250], "data_sourc": [213, 251, 371], "__iter__": [213, 217, 221, 226, 251, 255, 259, 264, 563, 564], "matter": [213, 251, 608], "iterablesampl": [213, 251], "squential": [213, 251], "iterabledataset": [213, 216, 217, 219, 220, 221, 226, 251, 254, 255, 257, 258, 259, 264], "indexdataset": [213, 251], "__getitem__": [213, 217, 221, 226, 229, 232, 251, 255, 259, 264, 266, 268, 564], "__len__": [213, 217, 221, 226, 251, 255, 259, 264, 564], "inter": [213, 217, 221, 226, 251, 255, 259, 264], "retriev": [213, 251, 527], "sequentialsampl": [213, 251], "batchsampl": [213, 251], "tfdatadataload": [214, 252], "tensorflow1": [214, 252], "coupl": [214, 252], "satisfi": [214, 252, 576], "tf1": [214, 252, 580], "although": [214, 252, 610], "tensorflowbertdataload": [214, 252], "tensorflowmodelzoobertdataload": [214, 252], "tensorflowdataload": [214, 252, 511], "directli": [214, 252, 279, 283, 311, 321, 325, 570, 578, 585, 606, 607, 611], "pytorchbertdataset": [215, 253], "model_typ": [215, 253, 334, 433, 463, 564], "tensordataset": [215, 253, 564], "repo": [215, 253, 564, 569, 591, 593, 595, 596], "link": [215, 253, 561, 564, 591, 595, 598], "easi": [215, 253, 275, 315, 561, 563, 570, 605, 607, 610], "classifi": [215, 253, 283, 325, 356, 564, 566, 603], "squad": [215, 232, 253, 268, 280, 281, 283, 322, 323, 325, 564, 578, 612, 615], "xlnet": [215, 253, 564], "xlm": [215, 253, 564, 615], "101": [215, 253, 283, 325, 578, 615], "2043": [215, 253], "2001": [215, 253], "onnxrtbertdataset": [215, 253], "data_dir": [215, 253, 564], "model_name_or_path": [215, 253, 374, 564, 586, 587], "max_seq_length": [215, 232, 253, 268, 564, 612], "128": [215, 218, 219, 232, 253, 256, 257, 268, 564, 607, 612, 615], "do_lower_cas": [215, 231, 232, 253, 267, 268, 564, 612], "mrpc": [215, 253, 283, 325, 564, 578, 586, 615], "dynamic_length": [215, 253, 564], "shortcut": [215, 253, 564], "truncat": [215, 232, 253, 268, 564, 612], "shorter": [215, 232, 253, 268, 564, 612], "lowercas": [215, 253, 564], "fine": [215, 253, 347, 564, 584, 605, 607], "qqp": [215, 253, 564, 578, 615], "qnli": [215, 253, 564, 578, 615], "rte": [215, 253, 564, 578, 615], "st": [215, 253, 564, 578], "cola": [215, 253, 564, 578, 615], "mnli": [215, 253, 564, 578, 615], "wnli": [215, 253, 564, 578, 615], "mobilebert": [215, 253, 564, 566, 615], "roberta": [215, 253, 564, 615], "uncas": [215, 232, 253, 268, 564, 612, 615], "load_and_cache_exampl": [215, 253], "convert_examples_to_featur": [215, 232, 253, 268], "max_length": [215, 253], "label_list": [215, 253, 283, 325], "output_mod": [215, 253], "pad_token": [215, 253], "pad_token_segment_id": [215, 253], "mask_padding_with_zero": [215, 253], "inputfeatur": [215, 232, 253, 268], "input_id": [215, 232, 253, 268], "vocabulari": [215, 231, 232, 253, 267, 268, 297, 612], "attention_mask": [215, 253], "NOT": [215, 253, 572, 576], "token_type_id": [215, 253], "segment": [215, 253, 277, 279, 319, 321], "portion": [215, 253], "problem": [215, 253, 283, 290, 325, 578, 579, 599], "regress": [215, 253], "seq_length": [215, 253], "to_json_str": [215, 253], "json": [215, 216, 232, 253, 254, 268, 388, 506, 508, 516, 523, 533, 564, 580, 599, 612], "tensorflowbertdataset": [215, 253], "root": [215, 216, 217, 220, 253, 254, 255, 258, 283, 289, 325, 327, 328, 329, 331, 333, 334, 335, 368, 550, 563, 564, 568, 578, 614], "label_fil": [215, 232, 253, 268, 564, 612], "tfrecord": [215, 216, 217, 221, 226, 253, 254, 255, 259, 264, 564], "parsedecodebert": [215, 253], "tensorflowmodelzoobertdataset": [215, 216, 253, 254], "num_cor": [215, 216, 220, 253, 254, 258, 564], "28": [215, 216, 220, 253, 254, 258, 564, 615], "coco": [216, 223, 227, 254, 261, 279, 283, 321, 325, 578], "parsedecodecoco": [216, 254], "cocorecorddataset": [216, 254], "directori": [216, 217, 254, 255, 334, 374, 377, 378, 442, 495, 516, 533, 546, 564, 568, 571, 591, 593, 595, 596, 611], "interleav": [216, 254, 564], "parallel": [216, 254, 564], "cocoraw": [216, 254, 563, 564], "img_dir": [216, 254, 564], "val2017": [216, 254, 564], "anno_dir": [216, 254, 564], "annot": [216, 254, 279, 321, 564, 578], "instances_val2017": [216, 254, 564], "arrang": [216, 217, 220, 254, 255, 258, 347, 564, 603], "jpg": [216, 220, 222, 254, 258, 260, 564], "imag": [216, 217, 220, 222, 228, 232, 254, 255, 258, 260, 265, 268, 279, 291, 321, 531, 561, 564, 568, 606, 611, 612, 615], "coconpi": [216, 254, 564], "npy_dir": [216, 254, 564], "npy": [216, 254, 564], "tensorflowdataset": [217, 255], "pytorchdataset": [217, 255], "mxnetdataset": [217, 255], "onnxrtqldataset": [217, 255], "onnxrtitdataset": [217, 255], "IT": [217, 224, 255, 262], "pytorchmxnetwrapdataset": [217, 255], "datafunc": [217, 255], "pytorchmxnetwrapfunct": [217, 232, 255, 268], "framework_dataset": [217, 255], "convent": [217, 255, 279, 321, 566], "imageclassifi": [217, 255], "choos": [217, 255, 362, 561, 575, 576, 586, 609, 613, 614], "tensorflow_itex": [217, 220, 221, 222, 224, 225, 226, 255, 258, 259, 260, 262, 263, 264, 606], "onnxrt_qdq": [217, 221, 224, 225, 226, 255, 259, 262, 263, 264, 606], "onnxrt_qlinearop": [217, 221, 224, 225, 226, 232, 255, 259, 262, 263, 264, 268, 606], "onnxrt_integerop": [217, 221, 224, 225, 226, 232, 255, 259, 262, 263, 264, 268, 606], "pytorch_ipex": [217, 221, 224, 225, 226, 255, 259, 262, 263, 264, 606, 614], "pytorch_fx": [217, 221, 224, 225, 226, 255, 259, 262, 263, 264, 606], "onnxrt_qoper": [217, 221, 224, 225, 226, 255, 259, 262, 263, 264, 606], "dataset_registri": [217, 221, 226, 255, 259, 264], "dataset_typ": [217, 221, 226, 255, 259, 264, 274, 275, 285, 315, 401], "dataset_format": [217, 221, 226, 255, 259, 264], "data_format": [217, 221, 226, 228, 255, 259, 264, 265], "raw_imag": [217, 221, 226, 255, 259, 264], "overwrit": [217, 221, 226, 255, 259, 264, 591, 595], "download_url": [217, 255], "filenam": [217, 255, 289, 378, 379, 479, 495, 502, 508, 518, 526, 564], "md5": [217, 255], "download": [217, 255, 374, 454, 477, 478, 480, 481, 514, 561, 564, 576, 609], "gen_bar_updat": [217, 255], "progress": [217, 255, 314, 340, 347, 350, 592, 598, 604], "bar": [217, 255, 561, 598], "check_integr": [217, 255], "fpath": [217, 255], "checksum": [217, 255], "calculate_md5": [217, 255], "chunk_siz": [217, 255], "cifar10": [217, 255, 564], "cifar100": [217, 255, 564], "www": [217, 255, 564, 615], "toronto": [217, 255, 564], "edu": [217, 255, 564], "kriz": [217, 255, 564], "cifar": [217, 255, 564, 615], "tar": [217, 255, 564, 593, 596], "gz": [217, 255, 564, 593, 596], "subset": [217, 220, 255, 258, 564], "internet": [217, 255, 561, 564], "put": [217, 255, 564, 566, 603], "again": [217, 255, 564, 608], "load_meta": [217, 255], "pytorchcifar10": [217, 255], "mxnetcifar10": [217, 255], "tensorflowcifar10": [217, 255], "pytorchcifar100": [217, 255], "mxnetcifar100": [217, 255], "tensorflowcifar100": [217, 255], "mnist": [217, 255, 564, 568], "institut": [217, 255], "standard": [217, 232, 255, 268, 374, 570, 578, 612, 613], "fashionmnist": [217, 255, 564], "npz": [217, 255, 564], "idx1": [217, 255, 564], "ubyt": [217, 255, 564], "idx3": [217, 255, 564], "t10k": [217, 255, 564], "class_to_idx": [217, 255], "read_data": [217, 255], "pytorchmnist": [217, 255], "mxnetmnist": [217, 255], "tensorflowmnist": [217, 255], "pytorchfashionmnist": [217, 255], "mxnetfashionmnist": [217, 255], "tensorflowfashionmnist": [217, 255], "imagefold": [217, 255, 564, 568], "subfold": [217, 255], "belong": [217, 255, 272, 330, 607], "class_1": [217, 255, 564], "png": [217, 255, 564], "xxy": [217, 255, 564], "xxz": [217, 255, 564], "class_n": [217, 255, 564], "123": [217, 255, 564, 612], "nsdf3": [217, 255, 564], "asd932_": [217, 255, 564], "mxnetimagefold": [217, 255], "tensorflowimagefold": [217, 255], "tensorflowtfrecorddataset": [217, 255], "tensorflowimagerecord": [217, 255], "000": [217, 255, 564], "001": [217, 255, 564, 568, 614], "099": [217, 255, 564], "tensorflowvocrecord": [217, 255], "pascal": [217, 255], "voc": [217, 255, 283, 325], "2012": [217, 255], "00000": [217, 255], "00004": [217, 255], "00001": [217, 255], "00003": [217, 255], "dummydataset": [218, 219, 256, 257], "stand_norm": [218, 219, 256, 257, 564], "dummy_v2": [219, 257, 563, 564], "sparse_dummy_v2": [219, 257, 564], "label_shap": [219, 257, 564], "sparsedummydataset": [219, 257], "dense_shap": [219, 257, 564], "sparse_ratio": [219, 257, 564], "imagenetraw": [220, 258, 564], "data_path": [220, 258, 564], "image_list": [220, 258, 564], "img1": [220, 258, 564], "img2": [220, 258, 564], "imgx": [220, 258, 564], "val_map": [220, 258, 564], "pytorchimagenetraw": [220, 258], "mxnetimagenetraw": [220, 258], "tensorflowimagenetraw": [220, 258], "tensorflowimagenetdataset": [220, 258], "onnxrtimagenetdataset": [220, 258], "bert_dataset": [221, 226, 259, 264, 275, 317], "coco_dataset": [221, 226, 259, 264, 275, 317], "dummy_dataset": [221, 226, 259, 264, 275, 317], "dummy_dataset_v2": [221, 226, 259, 264, 275, 317], "imagenet_dataset": [221, 226, 259, 264, 275, 317], "style_transfer_dataset": [221, 226, 259, 264, 275, 317], "transfer": [222, 260, 269, 275, 564, 566, 567], "styletransferdataset": [222, 260], "content_fold": [222, 260, 564], "style_fold": [222, 260, 564], "crop_ratio": [222, 260, 564], "resize_shap": [222, 260, 564], "256": [222, 228, 260, 265, 564, 568, 612, 615], "image_format": [222, 260, 564], "holder": [222, 260, 564], "labelbalancecocorecordfilt": [223, 261], "balanc": [223, 261, 602], "labelbalancecocorawfilt": [223, 261], "tensorflowfilt": [224, 262], "onnxrtqlfilt": [224, 262], "onnxrtitfilt": [224, 262], "pytorchfilt": [224, 262], "mxnetfilt": [224, 262], "filter_registri": [224, 225, 226, 262, 263, 264], "filter_typ": [224, 225, 226, 262, 263, 264], "__call__": [224, 225, 226, 262, 263, 264], "coco_filt": [225, 226, 263, 264, 275, 317], "imagenet_transform": [226, 229, 264, 266, 275, 317], "transform_cl": [226, 229, 232, 264, 266, 268], "basetransform": [226, 227, 228, 229, 232, 264, 265, 266, 268], "transform_registri": [226, 229, 232, 264, 266, 268], "transform_typ": [226, 229, 232, 264, 266, 268], "user_postprocess": [226, 229, 230, 236, 240], "parsedecodecocotransform": 227, "quantizedinput": [228, 265, 612], "desir": [228, 232, 265, 268, 297, 612], "labelshift": [228, 265, 536, 612], "label_shift": [228, 265, 612], "parsedecodeimagenet": [228, 265, 612], "proto": [228, 232, 265, 268, 612], "parsedecodeimagenettransform": [228, 265], "tensorflowresizecropimagenettransform": [228, 265], "height": [228, 232, 265, 268, 291, 310, 340, 568, 603, 612, 614], "width": [228, 232, 265, 268, 291, 310, 340, 568, 607, 612, 614], "random_crop": [228, 265, 612], "resize_sid": [228, 265, 612], "resize_method": [228, 265], "bilinear": [228, 232, 265, 268, 612], "random_flip_left_right": [228, 265, 612], "mean_valu": [228, 265, 612], "channels_last": [228, 265, 581], "subpixel": [228, 265], "rgb": [228, 265], "applic": [228, 265, 517, 546, 548, 550, 561, 570, 581, 598, 605, 611, 612], "crop": [228, 232, 265, 268, 564, 612], "flip": [228, 232, 265, 268, 612], "left": [228, 232, 265, 268, 340, 561, 592, 598, 612], "std": [228, 232, 265, 268, 291, 612], "bilinearimagenettransform": [228, 265], "central_fract": [228, 265, 612], "875": [228, 265, 612], "fraction": [228, 265, 612], "onnxbilinearimagenettransform": [228, 265], "onnxresizecropimagenettransform": [228, 265], "std_valu": [228, 265], "229": [228, 265], "225": [228, 265], "resizewithaspectratio": [228, 265], "87": [228, 265, 615], "inter_pol": [228, 265], "cv2": [228, 265], "inter_area": [228, 265], "aspect": [228, 232, 265, 268, 612], "convert_to_unicod": [231, 267], "unicod": [231, 267, 276, 318], "utf": [231, 267], "load_vocab": [231, 267], "vocab_fil": [231, 232, 267, 268, 612], "convert_by_vocab": [231, 267], "vocab": [231, 267, 297], "whitespace_token": [231, 267], "whitespac": [231, 267, 281, 323], "fulltoken": [231, 267], "tokenzi": [231, 267], "convert_tokens_to_id": [231, 267], "convert_ids_to_token": [231, 267], "basictoken": [231, 267], "punctuat": [231, 267, 276, 281, 318, 323], "lower": [231, 232, 267, 268, 281, 323, 356, 533, 567, 603, 604, 605, 607, 612, 613], "wordpiecetoken": [231, 267], "unk_token": [231, 267], "unk": [231, 267], "max_input_chars_per_word": [231, 267], "wordpiec": [231, 232, 267, 268, 612], "greedi": [231, 267], "unaff": [231, 267], "un": [231, 267], "aff": [231, 267], "concat_gener": [232, 268], "tensorflowtransform": [232, 268], "mxnettransform": [232, 268], "pytorchtransform": [232, 268], "onnxrtqltransform": [232, 268], "onnxrtittransform": [232, 268], "tensorflowwrapfunct": [232, 268], "transform_func": [232, 268], "pytorchmxnettransform": [232, 268], "get_torchvision_map": [232, 268], "interpol": [232, 268, 347, 578, 604, 612], "composetransform": [232, 268], "transform_list": [232, 268, 612], "togeth": [232, 268, 310, 316, 340, 566, 576, 585, 605, 611, 612], "croptoboundingbox": [232, 268, 612], "offset_height": [232, 268, 612], "offset_width": [232, 268, 612], "target_height": [232, 268, 612], "target_width": [232, 268, 612], "vertic": [232, 268, 310, 340, 612], "coordin": [232, 268, 355, 612], "horizont": [232, 268, 612], "mxnetcroptoboundingbox": [232, 268], "onnxrtcroptoboundingbox": [232, 268], "tensorflowcroptoboundingbox": [232, 268], "resizewithratio": [232, 268, 612], "min_dim": [232, 268, 612], "800": [232, 268, 612], "max_dim": [232, 268, 612], "1365": [232, 268, 612], "constant_valu": [232, 268], "side": [232, 268, 297, 561, 564, 592, 612], "exce": [232, 268, 612], "tensorflowresizewithratio": [232, 268], "perm": [232, 268, 612], "permut": [232, 268, 340, 612], "tensorflowtranspos": [232, 268], "mxnettranspos": [232, 268], "pytorchtranspos": [232, 268], "randomverticalflip": [232, 268, 612], "tensorflowrandomverticalflip": [232, 268], "randomhorizontalflip": [232, 268, 612], "tensorflowrandomhorizontalflip": [232, 268], "toarrai": [232, 268, 612], "pil": [232, 268, 612], "casttftransform": [232, 268], "castonnxtransform": [232, 268], "castpytorchtransform": [232, 268], "centercroptftransform": [232, 268], "paddedcentercroptransform": [232, 268], "crop_pad": [232, 268], "resizetftransform": [232, 268], "nearest": [232, 268, 612], "bicub": [232, 268, 612], "resizepytorchtransform": [232, 268], "randomcroptftransform": [232, 268], "locat": [232, 268, 568, 584, 591, 595, 598, 607, 609, 612, 614], "randomresizedcroppytorchtransform": [232, 268], "randomresizedcropmxnettransform": [232, 268], "randomresizedcroptftransform": [232, 268], "pramet": [232, 268], "normalizetftransform": [232, 268], "rescal": [232, 268, 612], "deviat": [232, 268, 612], "broadcast": [232, 268, 568, 612], "rescalekeraspretraintransform": [232, 268], "rescaletftransform": [232, 268], "rescaletransform": [232, 268], "alignimagechanneltransform": [232, 268], "dim": [232, 268, 305, 340, 355, 612], "w": [232, 268, 291, 603, 604, 612], "pytorchalignimagechannel": [232, 268], "tondarraytransform": [232, 268], "resizemxnettransform": [232, 268], "resizetransform": [232, 268], "cropresizetftransform": [232, 268], "boundari": [232, 268, 431, 612], "area": [232, 268, 279, 321, 578, 612], "pytorchcropresizetransform": [232, 268], "mxnetcropresizetransform": [232, 268], "cropresizetransform": [232, 268], "centercroptransform": [232, 268], "mxnetnormalizetransform": [232, 268], "pytorchnormalizetransform": [232, 268], "normalizetransform": [232, 268], "randomcroptransform": [232, 268], "randomresizedcroptransform": [232, 268], "get_final_text": [232, 268], "pred_text": [232, 268], "orig_text": [232, 268], "squadexampl": [232, 268], "qas_id": [232, 268], "question_text": [232, 268], "doc_token": [232, 268], "orig_answer_text": [232, 268], "start_posit": [232, 268], "end_posit": [232, 268], "is_imposs": [232, 268], "unique_id": [232, 268], "example_index": [232, 268], "doc_span_index": [232, 268], "token_to_orig_map": [232, 268], "token_is_max_context": [232, 268], "input_mask": [232, 268, 347], "segment_id": [232, 268], "read_squad_exampl": [232, 268], "input_fil": [232, 268], "doc_strid": [232, 268, 612], "max_query_length": [232, 268, 612], "output_fn": [232, 268], "inputbatch": [232, 268], "collecttransform": [232, 268], "10833": [232, 268], "tfsquadv1posttransform": [232, 268], "n_best_siz": [232, 268, 612], "384": [232, 268, 612], "max_answer_length": [232, 268, 612], "total": [232, 268, 283, 312, 314, 325, 334, 335, 336, 340, 347, 350, 356, 564, 604, 612], "nbest_predict": [232, 268, 612], "long": [232, 268, 571, 612], "chunk": [232, 268, 612], "much": [232, 268, 269, 275, 337, 566, 592, 603, 604, 612], "stride": [232, 268, 341, 612], "process_result": [232, 268], "get_postprocess_result": [232, 268], "tfmodelzoocollecttransform": [232, 268], "tfsquadv1modelzooposttransform": [232, 268], "squadv1": [232, 268, 612], "parsedecodevoctransform": [232, 268], "set_env_var": 233, "env_var": 233, "overwrite_exist": 233, "env": [233, 518, 526], "set_all_env_var": 233, "core": [233, 275, 290, 378, 398, 561, 562, 577, 591, 595, 602, 615], "get_architectur": 233, "get_threads_per_cor": 233, "thread": [233, 549, 561, 563, 602], "get_thread": 233, "get_physical_id": 233, "socket": [233, 378, 521, 550, 602, 615], "get_core_id": 233, "get_bounded_thread": 233, "core_id": 233, "bind": 233, "command": [233, 275, 297, 368, 398, 409, 412, 419, 425, 427, 428, 495, 518, 526, 546, 561, 568, 581, 583, 586, 591, 595, 599], "unnecessari": [233, 275], "summary_benchmark": [233, 275], "config_inst": [233, 275], "generate_prefix": [233, 275], "core_list": [233, 275], "numactl": [233, 275, 584, 592], "run_inst": [233, 275], "critet": 234, "tensorflowcrossentropyloss": 234, "pytorchcrossentropyloss": 234, "tensorflowknowledgedistillationloss": 234, "pytorchknowledgedistillationloss": 234, "pytorchintermediatelayersknowledgedistillationloss": 234, "tensorflowcriterion": 234, "pytorchcriterion": 234, "criterion_cl": 234, "criterion_registri": 234, "criterion_typ": 234, "registry_criterion": 234, "param_dict": [234, 239, 288], "crossentropyloss": [234, 566], "tensorflowsparsecategoricalcrossentropi": 234, "sparsecategoricalcrossentropyloss": 234, "knowledgedistillationframework": 234, "student_model": [234, 269, 275], "knowledgedistillationloss": [234, 614], "teacher_model_forward": 234, "notimplementederror": [234, 282, 283, 324, 325], "teacher_student_loss_c": 234, "student_output": [234, 242, 275, 368, 566], "teacher_output": [234, 242, 269, 275, 368], "student_targets_loss_c": 234, "groud": 234, "truth": [234, 280, 281, 322, 323], "loss_cal": 234, "loss_cal_sloss": 234, "student_loss": [234, 242, 275, 368, 566], "softcrossentropi": 234, "logit": [234, 566], "ground": [234, 280, 281, 322, 323], "kullbackleiblerdiverg": 234, "pytorchknowledgedistillationlosswrapp": 234, "tensorflowknowledgedistillationlosswrapp": 234, "tensorflowknowledgedistillationlossextern": 234, "intermediatelayersknowledgedistillationloss": [234, 541], "init_loss_func": 234, "init_feature_match": 234, "student_featur": 234, "teacher_featur": 234, "matcher": [234, 599], "clear_featur": 234, "register_hooks_for_model": 234, "attributeerror": 234, "remove_all_hook": 234, "pytorch_linear_feature_match": 234, "pytorchintermediatelayersknowledgedistillationlosswrapp": 234, "selfknowledgedistillationloss": [234, 541], "selfknowledg": 234, "pytorchselfknowledgedistillationloss": 234, "l2diverg": 234, "feature1": 234, "feature2": 234, "pytorchselfknowledgedistillationlosswrapp": 234, "setter": [235, 236], "tensorflowoptim": 239, "pytorchoptim": 239, "optimizer_cl": 239, "allow": [239, 355, 374, 550, 561, 566, 568, 578, 579, 606, 614], "optimizer_registri": 239, "optimizer_typ": 239, "cross": [239, 282, 283, 324, 325, 573, 613], "tensorflowsgd": 239, "tensorflowadamw": 239, "tensorflow_addon": 239, "adamw": 239, "tensorflowadam": 239, "adam": [239, 614], "pytorchsgd": 239, "record_output": 241, "output_process": 241, "get_activ": 241, "mainli": [242, 275, 314, 340, 350, 604, 607], "train_func": [242, 275, 316, 568, 607], "train_dataload": [242, 275, 603], "prepare_qat": [242, 275], "pre_process": [242, 269, 275, 286, 298, 302, 307, 315, 568], "post_process": [242, 275], "Be": [242, 275, 279, 321, 341, 345, 346], "epoch": [242, 269, 275, 302, 307, 312, 313, 341, 344, 345, 346, 347, 348, 368, 566, 568, 601, 603, 614], "on_train_end": [242, 275, 302, 307, 312, 313, 346, 347, 348, 368, 566, 601, 603, 607], "pre_epoch_begin": [242, 275, 302, 307], "post_epoch_end": [242, 275, 302, 307], "on_step_begin": [242, 275, 302, 307, 312, 313, 337, 341, 344, 345, 346, 347, 348, 368, 371, 566, 601, 603], "batch_id": [242, 275, 341, 344, 345, 346, 368], "on_batch_begin": [242, 275, 302, 307], "on_after_compute_loss": [242, 275, 302, 307, 368, 566, 601], "on_before_optimizer_step": [242, 275, 312, 313, 337, 342, 346, 347, 348, 349, 368, 566, 601, 603], "on_after_optimizer_step": [242, 275, 312, 313, 337, 347, 348, 349, 368, 603], "on_before_ev": [242, 275, 312, 313, 347, 348], "on_after_ev": [242, 275, 312, 313, 347, 348], "on_post_grad": [242, 275], "on_step_end": [242, 275, 302, 307, 312, 313, 341, 344, 345, 346, 347, 348, 368, 371, 566, 601, 603], "on_batch_end": [242, 275, 302, 307], "register_hook": [242, 275], "input_arg": [242, 275], "input_kwarg": [242, 275], "relat": [269, 275, 279, 293, 294, 302, 307, 310, 321, 349, 371, 461, 464, 466, 471, 551, 554, 555, 556, 559, 581, 614], "_epoch_ran": [269, 275], "ran": [269, 275], "eval_frequ": [269, 275], "frequenc": [269, 275, 312, 347, 602, 603, 614], "best_scor": [269, 275], "best_model": [269, 275], "train_cfg": [269, 275, 371], "evaluation_distribut": [269, 275, 302, 307], "train_distribut": [269, 275, 302, 307], "on_post_forward": [269, 275], "deprec": [269, 275, 533, 593, 596, 612], "init_train_cfg": [269, 275], "create_criterion": [269, 275], "create_optim": [269, 275], "disil": [269, 275], "generate_hook": [269, 275, 302, 307], "qlinear2qdq": [270, 275, 317], "torch_to_fp32_onnx": [270, 272], "do_constant_fold": [270, 272, 335], "verbos": [270, 272, 288, 289, 290, 335, 355], "ax": [270, 272, 335], "torch_to_int8_onnx": [270, 272], "u8s8": [270, 272], "optionl": [270, 272], "qdq_op_int32_bia": [270, 272, 570], "qdq_op_fp32_bias_qdq": [270, 272, 570], "onnx_qlinear_to_qdq": [270, 271], "input_name_to_nod": [270, 271, 333], "qlinearop": [270, 271, 575, 589, 607], "check_model": 271, "update_weight_bia": 272, "fp32_onnx_path": [272, 273], "wegiht": 272, "set_data_typ": 272, "weight_typ": 272, "activation_typ": 272, "get_node_map": 272, "module_node_map": 272, "get_quantizable_onnx_op": 272, "quantize_nod": 272, "build_scale_map": 272, "int8_scale_info": 272, "scale_zp_dict": 272, "set_scale_info": 272, "int8_onnx_model": 272, "int8_onnx_path": 272, "recalculate_bia": 272, "recalcul": [272, 340], "remove_nodes_by_nam": 272, "sub_graph_with_int32_bia": 272, "a_info": 272, "b_info": 272, "qdq_fp32_bia": 272, "excut": 272, "qdq_int32_bia": 272, "qdq_fp32_bias_qdq": 272, "onnx2numpy_dtyp": 273, "onnx_node_typ": 273, "dummydataread": 273, "achiev": [274, 275, 315, 570, 578, 601, 603, 604, 605, 607, 611, 613], "variou": [274, 275, 284, 315, 326, 575, 581, 604, 606], "dl": [274, 275, 284, 302, 307, 315, 326, 573, 585, 598, 605], "bring": [274, 275, 315, 592, 607], "vari": [274, 275, 302, 307, 315, 602, 615], "roc": [274, 275, 283, 302, 307, 315, 325], "footprint": [274, 275, 302, 307, 315, 336, 567, 600, 603, 604, 606], "flexibl": [274, 275, 302, 307, 315, 566, 603, 604], "set_config_by_model": [274, 275, 284], "model_obj": [274, 275, 284], "bleu": [275, 277, 282, 296, 317, 319, 324, 578], "bleu_util": [275, 282, 317, 324], "coco_label_map": [275, 282, 317, 324], "coco_tool": [275, 282, 317, 324], "evaluate_squad": [275, 282, 317, 324], "dynast": [275, 298, 317], "supernetwork": [275, 288, 291, 292, 298], "dynas_manag": [275, 291, 292, 298], "dynas_predictor": [275, 291, 292, 298], "dynas_search": [275, 292, 298], "dynas_util": [275, 290, 292, 298], "basic_na": [275, 298, 317], "nas_util": [275, 298, 317], "pruning_recip": [275, 317], "tile_pattern": [275, 303, 304], "pytorch_prun": [275, 317, 348], "logger": [275, 308, 317, 338, 369, 372, 378, 514, 518, 522], "prune_util": [275, 308, 317], "pruner": [275, 302, 307, 308, 310, 313, 317, 541, 544, 603, 614], "graph_optim": [275, 284, 317, 385, 454, 489, 493, 494, 514, 522, 538], "mixed_precis": [275, 317, 387, 454, 489, 514, 522, 538], "model_convers": [275, 317], "pruning_v2": [275, 317], "quantconf": [275, 315, 326, 352], "qfunc": [275, 315], "routinu": [275, 315], "pruningconf": [275, 302, 307], "pruning_func": [275, 302, 307], "update_items_for_all_prun": [275, 302, 313], "howev": [275, 302, 307, 313, 348, 570, 603], "still": [275, 302, 307, 313, 348, 607, 608], "analys": [275, 302, 307, 313], "generate_prun": [275, 302, 307], "dens": [275, 302, 307, 314, 350, 603, 604, 615], "spars": [275, 302, 307, 312, 347, 564, 603, 604, 605], "get_sparsity_ratio": [275, 302, 307, 310, 313, 340, 348], "elementwise_over_matmul_gemm_conv": [275, 302, 307, 313, 348], "elementwise_over_al": [275, 302, 307, 313, 348], "blockwise_over_matmul_gemm_conv": [275, 302, 307, 313, 348], "graphoptim": [275, 284, 385, 486, 537], "unicoderegex": [276, 318], "hoc": [276, 318], "hack": [276, 318], "nondigit_punct_r": [276, 318], "compil": [276, 318, 602], "preced": [276, 318], "digit": [276, 318, 605], "punct_nondigit_r": [276, 318], "symbol_r": [276, 318], "property_char": [276, 318], "join": [276, 318], "bleu_token": [276, 318], "mose": [276, 318], "smt": [276, 318], "mosesdecod": [276, 318], "master": [276, 277, 280, 281, 310, 313, 318, 319, 322, 323, 340, 348], "mteval": [276, 318], "v14": [276, 318], "pl": [276, 318], "l954": [276, 318], "l983": [276, 318], "tensor2tensor": [277, 297, 319], "bleu_hook": [277, 319], "compute_bleu": [277, 296, 319], "reference_corpu": [277, 319], "translation_corpu": [277, 319], "max_ord": [277, 319], "use_bp": [277, 319], "against": [277, 319], "gram": [277, 319], "flag": [277, 319, 368, 543], "third": [279, 321, 577], "parti": [279, 321, 577, 607], "pycocotool": [279, 321, 571, 576], "object_detect": [279, 321], "noth": [279, 321, 526, 613], "thu": [279, 321, 607], "slim": [279, 321, 332, 334, 580], "jonathanhuang": [279, 321], "image_id": [279, 321, 578], "encod": [279, 288, 297, 321, 612], "groundtruth": [279, 321], "invok": [279, 321], "groundtruth_dict": [279, 321], "exportgroundtruthtococo": [279, 321], "groundtruth_boxes_list": [279, 321], "groundtruth_classes_list": [279, 321], "max_num_class": [279, 321], "output_path": [279, 321, 333, 526], "detections_list": [279, 321], "exportdetectionstococo": [279, 321], "detection_boxes_list": [279, 321], "detection_scores_list": [279, 321], "detection_classes_list": [279, 321], "cocowrapp": [279, 321], "loadannot": [279, 321], "cocoevalwrapp": [279, 321], "agnostic_mod": [279, 321], "computemetr": [279, 321], "detection_typ": [279, 321], "hold": [279, 321, 333, 355, 564], "datastructur": [279, 321], "mscoco": [279, 321], "replic": [279, 321], "extern": [279, 321, 333, 561], "category_id": [279, 321], "iou_typ": [279, 321], "iou_thr": [279, 283, 321, 325, 578], "map_point": [279, 283, 321, 325, 578], "cocoev": [279, 321], "Then": [279, 321, 561, 591, 593, 595, 596, 613], "getcategori": [279, 321], "getagnosticmod": [279, 321], "agnost": [279, 321, 566], "getcategoryidlist": [279, 321], "accumul": [279, 321, 354, 613], "p": [279, 321, 561, 599], "include_metrics_per_categori": [279, 321], "all_metrics_per_categori": [279, 321], "summeri": [279, 321], "per_category_ap": [279, 321], "care": [279, 321], "pollut": [279, 321], "mldash": [279, 321], "summary_metr": [279, 321], "iou": [279, 283, 321, 325], "increment": [279, 295, 297, 321, 613], "50iou": [279, 321], "75iou": [279, 321], "75": [279, 321, 615], "pixel": [279, 321, 612], "96": [279, 321, 615], "larg": [279, 321, 333, 563, 566, 603, 604, 615], "10000": [279, 321, 355], "recal": [279, 281, 283, 321, 323, 325], "bycategori": [279, 321], "supercategori": [279, 321], "backward": [279, 321, 368, 566, 568, 601, 603, 607, 609], "performancebycategori": [279, 321], "category_stat": [279, 321], "exportsingleimagegroundtruthtococo": [279, 321], "next_annotation_id": [279, 321], "category_id_set": [279, 321], "groundtruth_box": [279, 321], "groundtruth_class": [279, 321], "groundtruth_mask": [279, 321], "groundtruth_is_crowd": [279, 321], "ingest": [279, 321], "ones": [279, 321, 604], "exportsingleimagedetectionstococo": [279, 321], "uniqu": [279, 291, 316, 321, 355, 420, 421, 607], "assign": [279, 321, 335, 378, 419, 420, 425, 426, 427, 428, 561, 568, 606], "num_gt_box": [279, 321], "num_detect": [279, 283, 321, 325, 578, 614], "image_height": [279, 321], "image_width": [279, 321], "detection_mask": [279, 321], "crowd": [279, 321], "exportsingleimagedetectionboxestococo": [279, 321], "detection_box": [279, 321, 614], "detection_scor": [279, 321, 614], "detection_class": [279, 321, 614], "exporsingleimagedetectionboxestococo": [279, 321], "exportsingleimagedetectionmaskstococo": [279, 321], "allenai": [280, 281, 322, 323], "bi": [280, 281, 322, 323], "att": [280, 281, 322, 323], "f1_score": [280, 281, 322, 323], "ground_truth": [280, 281, 322, 323], "metric_max_over_ground_truth": [280, 281, 322, 323], "metric_fn": [280, 281, 322, 323], "exact_match_scor": [280, 322], "exact": [280, 322], "articl": [280, 281, 322, 323], "paragraph": [280, 281, 322, 323], "qa": [280, 281, 322, 323], "cantain": [280, 281, 322, 323], "normalize_answ": [281, 323], "extra": [281, 323], "newlin": [281, 323], "tab": [281, 323, 422, 425, 431, 549, 598, 611], "harmon": [281, 283, 323, 325], "answer_start": [281, 323], "177": [281, 323], "denver": [281, 323], "bronco": [281, 323], "nfl": [281, 323], "afc": [281, 323], "bowl": [281, 323], "56be4db0acb8001400a502ec": [281, 323], "percentag": [281, 289, 323, 614], "single_output": [282, 283, 324, 325], "hvd": [282, 283, 324, 325, 568], "sample_weight": [282, 283, 324, 325], "metric_registri": [282, 283, 324, 325], "metric_typ": [282, 283, 324, 325], "decorator_metr": [282, 283, 324, 325], "tensorflowmetr": [283, 325], "pytorchmetr": [283, 325], "mxnetmetr": [283, 325], "onnxrtqlmetr": [283, 325], "onnxrtitmetr": [283, 325], "wrappytorchmetr": [283, 325], "wrapmxnetmetr": [283, 325], "wraponnxrtmetr": [283, 325], "proport": [283, 325], "were": [283, 325, 584], "pred_list": [283, 325], "pytorchloss": [283, 325], "least": [283, 313, 325, 340, 348, 527, 603, 604, 613], "sum": [283, 325, 566], "mae": [283, 325, 578], "magnitud": [283, 317, 325, 337, 338, 342, 343, 575, 603, 604, 615], "numer": [283, 325, 579, 605, 607], "rmse": [283, 289, 325, 578, 613], "squar": [283, 289, 325, 360, 578, 613], "tensorflowtopk": [283, 325], "k": [283, 325, 578, 603], "among": [283, 325, 592], "most": [283, 325, 355, 561, 579, 603, 607, 613], "outcom": [283, 325], "num_correct": [283, 325], "generaltopk": [283, 325], "cocomapv2": [283, 325, 578], "anno_path": [283, 325, 578], "map_kei": [283, 325], "detectionboxes_precis": [283, 325], "output_index_map": [283, 325, 578], "tensorflowmap": [283, 325], "tensorflowcocomap": [283, 325], "tensorflowvocmap": [283, 325], "squadf1": [283, 325, 578], "miou": [283, 325], "num_class": [283, 325], "21": [283, 325, 587, 615], "hist": [283, 325, 373], "onnxrtglu": [283, 325], "dlrm": [283, 325], "basicna": [286, 298], "model_build": [286, 298, 299], "conf_fnam": [286, 298], "init_by_cfg": [286, 298], "init_for_search": [287, 298], "select_model_arch": [287, 298, 299], "create_acc_predictor": [287, 298], "create_macs_predictor": [287, 298], "create_latency_predictor": [287, 298], "latenc": [287, 288, 289, 291, 296, 298, 531, 610, 613], "init_cfg": [287, 298], "parametermanag": [288, 291], "hot": 288, "pymoo": [288, 290, 291], "process_param_dict": 288, "upper": [288, 290, 598], "vector": [288, 299, 301], "onehot_gener": 288, "in_arrai": 288, "onehot": 288, "depth": [288, 566, 608], "input_arrai": 288, "elast": 288, "mapper": [288, 419, 482, 483], "random_sampl": [288, 355], "subnetwork": [288, 291], "trial_limit": 288, "100000": 288, "translate2param": 288, "pymoo_vector": 288, "translate2pymoo": 288, "import_csv": 288, "filepath": 288, "column_nam": 288, "drop_dupl": 288, "panda": 288, "datafram": [288, 334, 335], "purpos": [288, 572, 579, 598, 606], "subnet": [288, 291], "column": [288, 561, 603], "df": [288, 334, 335], "set_se": 288, "create_training_set": 288, "train_with_al": 288, "sklearn": 288, "transformerltencod": 288, "alpha": [289, 337, 349], "default_alpha": 289, "cost_factor": 289, "default_cost_factor": 289, "max_iter": 289, "default_max_iter": 289, "regressor": 289, "get_paramet": 289, "get_metr": [289, 371, 395], "mape": 289, "kendal": 289, "rank": [289, 568], "correl": 289, "spearman": 289, "searcher": [289, 301], "searchalgomanag": 290, "optuna": 290, "configure_nsga2": 290, "1000": [290, 531, 614], "warm_pop": 290, "crossover_prob": 290, "crossover_eta": 290, "mutation_prob": 290, "02": [290, 615], "mutation_eta": 290, "configure_ag": 290, "run_search": 290, "save_histori": 290, "previous": [290, 563], "problemmultiobject": 290, "evaluation_interfac": 290, "evaluationinterfac": [290, 291], "param_count": 290, "param_upperbound": 290, "ofa": [290, 291], "get_mac": 291, "input_s": 291, "measure_lat": 291, "warmup_step": 291, "measure_step": 291, "resolut": 291, "warm": [291, 336], "adjust": [291, 340, 589, 607], "runner": [291, 599], "ofarunn": 291, "acc_predictor": 291, "macs_predictor": 291, "latency_predictor": 291, "datasetpath": 291, "w1": 291, "estimate_accuracy_top1": 291, "subnet_cfg": 291, "top1": [291, 607], "estimate_mac": 291, "estimate_lat": 291, "validate_top1": 291, "validate_mac": 291, "flop": 291, "fvcore": 291, "get_subnet": 291, "transformerltrunn": 291, "checkpoint_path": [291, 296], "predictor_mod": 291, "csv_path": 291, "written": 291, "eval_subnet": 291, "clear_csv": 291, "evaluationinterfaceresnet50": 291, "evaluationinterfacemobilenetv3": 291, "evaluationinterfacetransformerlt": 291, "get_torchvision_model": 291, "torchvisionrefer": 291, "baselin": [291, 336, 363, 371, 610, 611], "subprocess": [291, 526, 549], "machine_transl": [292, 293, 298], "transformer_interfac": [292, 293, 294], "get_incremental_st": 295, "incremental_st": [295, 297], "set_incremental_st": 295, "multiheadattentionsup": 295, "super_embed_dim": 295, "num_head": 295, "is_encod": 295, "super_kdim": 295, "super_vdim": 295, "dropout": [295, 297], "add_bias_kv": [295, 297], "add_zero_attn": [295, 297], "self_attent": 295, "encoder_decoder_attent": 295, "out_dim": 295, "qkv_dim": 295, "head": [295, 297, 603], "key_padding_mask": 295, "need_weight": 295, "static_kv": 295, "attn_mask": [295, 297], "timestep": 295, "bytetensor": [295, 297], "src_len": [295, 297], "reorder_incremental_st": 295, "new_ord": [295, 297], "buffer": [295, 334], "compute_lat": 296, "get_model_paramet": 296, "compute_mac": 296, "transformersupernetwork": 297, "fairseq": 297, "vaswani": 297, "2017": 297, "arxiv": [297, 312, 337], "1706": 297, "03762": 297, "transformerencod": 297, "transformerdecod": 297, "line": [297, 525, 526, 546, 561, 568, 575, 581, 586, 587, 603, 611], "encoder_config": 297, "embed_token": 297, "encoder_lay": 297, "transformerencoderlay": 297, "argpars": [297, 598], "namespac": 297, "src_token": 297, "src_length": 297, "longtensor": 297, "sentenc": 297, "encoder_out": 297, "embed_dim": 297, "encoder_padding_mask": 297, "reorder_encoder_out": 297, "rearrang": 297, "max_posit": 297, "upgrade_state_dict_nam": 297, "upgrad": 297, "possibli": 297, "old": [297, 313, 378, 609], "decoder_config": 297, "no_encoder_attn": 297, "decoder_lay": 297, "transformerdecoderlay": 297, "attend": 297, "prev_output_token": 297, "tgt_len": 297, "forc": [297, 374, 579, 608], "extract_featur": 297, "output_lay": 297, "layer_idx": 297, "paper": [297, 566, 603, 604], "ffn": 297, "residu": 297, "robust": 297, "encoder_normalize_befor": 297, "norm": 297, "layer_norm": 297, "self_attn_layer_norm": 297, "final_layer_norm": 297, "seq_len": 297, "t_tgt": 297, "t_src": 297, "decoder_normalize_befor": 297, "prev_self_attn_st": 297, "prev_attn_st": 297, "self_attn_mask": 297, "self_attn_padding_mask": 297, "builder": [299, 334], "res_save_path": 299, "count_model_paramet": 299, "load_search_result": 299, "dump_search_result": 299, "params_vec2params_dict": [299, 301], "paras_vec": 299, "find_best_model_arch": 299, "metrics_convers": 299, "init_search_cfg": 299, "nas_registri": 300, "nas_method": 300, "create_search_space_pool": 300, "idx": [300, 333, 564], "find_pareto_front": 300, "n_point": 300, "n_metric": 300, "n_pareto_point": 300, "get_feedback": 301, "feedback": 301, "para_vec": 301, "gridsearch": 301, "whole": [301, 548, 561, 607, 615], "exhaust": [301, 317, 359, 606], "randomsearch": 301, "42": [301, 602, 615], "bayesianoptimizationsearch": 301, "indices2params_vec": 301, "tfpruningcallback": [302, 307], "input_model": [302, 307, 580, 611], "pure": [302, 307], "s_output": [302, 307], "s_loss": [302, 307], "t_output": [302, 307], "support_pattern": [303, 304, 305], "pattern_registri": 305, "pattern_typ": 305, "patternbas": [305, 306], "mask_shap": [305, 306], "is_contigu": 305, "compute_spars": [305, 306, 378], "abs_sum": 305, "abs_max": 305, "tile": 306, "tilepatternbas": 306, "nxm": [306, 310, 340, 347, 604], "repeat_mask": 306, "ori_shap": 306, "repeat": [306, 613], "tilepattern_1x1": 306, "1x1": [306, 566, 603], "unstructur": [306, 575, 603, 604, 615], "tilepattern_2x2": 306, "2x2": 306, "tilepattern_1x16": 306, "1x16": 306, "tilepattern_4x1": 306, "tilepattern_1x2": 306, "1x2": 306, "update_config": [307, 348], "register_pattern": [310, 340], "get_pattern": [310, 340], "assertionerror": [310, 311, 312, 326, 340, 347, 351], "is_glob": [310, 340], "contrast": [310, 340, 612], "get_mask": [310, 340], "target_sparsity_ratio": [310, 312, 340, 347], "pre_mask": [310, 340], "max_sparsity_ratio_per_lay": [310, 312, 606], "get_masks_glob": [310, 340], "get_mask_singl": 310, "exact_sparsity_ratio": [310, 340], "get_block_size_dict": [310, 340], "get_masks_loc": [310, 340], "calul": [310, 340], "ration": [310, 340], "get_pattern_lock_mask": [310, 340], "lock": [310, 340, 345, 346, 575, 601, 603, 604], "patternnxm": [310, 340], "kept": [310, 340], "block_siz": [310, 340], "block_size_1": [310, 340], "block_size_2": [310, 340], "keep_pre_mask": [310, 340], "unchang": [310, 340], "patternninm": [310, 340], "doc": [310, 340, 378, 578, 593, 596], "md": [310, 340, 568], "check_config": [311, 351], "prune_config": [311, 351], "everyth": [311, 351, 586], "reset_non_value_to_default": 311, "undefin": [311, 351], "process_and_check_config": [311, 351], "obejct": 311, "process_config": [311, 351], "parse_to_prun": [311, 351], "parse_not_to_prun": 311, "register_prun": [312, 347], "get_prun": [312, 347], "module_nam": [312, 314, 337, 347, 349, 350, 378, 533], "cuurent": [312, 347], "current_sparsity_ratio": [312, 347], "global_step": [312, 347], "update_frequency_on_step": [312, 606], "mask_weight": [312, 347], "formal": [312, 347], "local_step": [312, 313, 347, 348], "judg": 312, "Or": 312, "simpli": [312, 568, 580, 581, 583, 586, 598], "check_is_pruned_step": [312, 347], "update_scor": 312, "magnitudeprun": 312, "snipprun": 312, "snip": [312, 337, 575, 603, 604, 615], "1810": [312, 337], "02340": [312, 337], "snipmomentumprun": 312, "moreoev": 312, "momentum": [312, 337, 575, 603, 604, 614], "patternlockprun": [312, 345, 347], "templat": [313, 317, 348, 401, 420, 425, 514, 522, 559, 561, 603], "tree": [313, 348, 396, 425, 427], "nlp": [313, 348, 586, 603, 604, 607], "huggingface_model": [313, 348], "config_file_path": [313, 348], "pruner_info": [313, 348], "register_schedul": [314, 350], "get_schedul": [314, 350], "gradual": [314, 350, 603, 604], "update_sparsity_ratio": [314, 350], "aggressive_ratio": 314, "current_prune_step": [314, 350], "total_prune_step": [314, 350], "oneshotschedul": [314, 350], "aggress": 314, "iterativeschedul": [314, 350], "target_ratio": [314, 350], "server": [316, 317, 454, 461, 513, 514, 521, 522, 530, 533, 544, 546, 548, 561, 598], "seper": 316, "opt_model": 316, "fulli": [316, 607], "saniti": 316, "illeg": 316, "sync": 316, "accordingli": [316, 344, 589], "contrib": 317, "base_model": [317, 328, 329, 331, 333, 334, 335], "keras_model": [317, 328], "mxnet_model": [317, 328], "nets_factori": [317, 328], "onnx_model": [317, 328, 465], "tensorflow_model": [317, 328], "torch_model": [317, 328], "pruner_legaci": [317, 338], "gradient_sensit": [317, 338, 343], "group_lasso": [317, 338, 343], "pattern_lock": [317, 338, 343], "reg": [317, 338, 347], "tuning_sampl": [317, 359, 364], "tuning_spac": [317, 359, 364, 367], "tuning_struct": [317, 359, 364], "auto_mixed_precis": [317, 359], "conserv": [317, 359], "hawq_v2": [317, 359], "mse_v2": [317, 359], "collect_layer_histogram": [317, 372], "create_obj_from_config": [317, 372], "kl_diverg": [317, 372], "load_huggingfac": [317, 372], "ux": 317, "config_gener": [317, 454, 514], "configuration_wizard": [317, 454, 514], "db_manag": [317, 454, 514, 552], "file_brows": [317, 454, 514], "jobs_manag": [317, 454, 514], "model_zoo": [317, 454, 514], "names_mapp": [317, 454, 514], "profil": [317, 388, 406, 413, 415, 425, 428, 430, 431, 454, 462, 470, 514, 515, 525, 531, 548, 553], "manage_workspac": [317, 454, 514], "workload": [317, 383, 384, 385, 387, 389, 390, 393, 415, 420, 425, 485, 502, 509, 514, 516, 522, 532, 533, 548, 551, 553, 554, 555, 556, 605], "executor": [317, 381, 514, 522], "expiring_dict": [317, 514, 522], "github_info": [317, 514, 522], "hw_info": [317, 514, 522], "json_seri": [317, 384, 438, 439, 444, 446, 447, 450, 460, 469, 495, 501, 514, 521, 522, 531, 534, 535, 536, 537, 539, 540, 541, 542, 543], "proc": [317, 514, 522], "status_upd": [317, 514, 522], "yaml_util": [317, 514, 522], "web": [317, 513, 514, 561, 611], "servic": [317, 514, 547, 548, 598, 602], "router": [317, 514, 548], "mix_precis": [317, 579], "set_random_se": [317, 378, 543], "set_tensorboard": [317, 378], "set_workspac": [317, 378, 534, 543], "eval_metr": [326, 352], "hybirdblock": [326, 352], "paramt": [326, 352], "basemodel": [327, 328, 329, 331, 333, 334, 335], "plai": [327, 328, 603, 605], "role": [327, 328, 603], "node_typ": [327, 328], "kerasmodel": [329, 472], "get_model_fwk_nam": 330, "fwk": 330, "net": 332, "factori": [332, 435, 454, 489, 505, 510, 514, 525, 529], "tfslimnetsfactori": 332, "model_func": 332, "arg_scop": 332, "onnxmodel": [333, 465], "large_s": 333, "ort": 333, "output_name_to_nod": 333, "ir_vers": 333, "opset_import": 333, "nodes_to_remov": 333, "nodes_to_add": 333, "add_initi": 333, "get_initi": 333, "remove_initi": 333, "init_to_remov": 333, "set_initi": 333, "get_children": 333, "get_par": 333, "find_node_by_nam": 333, "new_nodes_list": 333, "find_nodes_by_initi": 333, "get_scale_zero": 333, "save_model_to_fil": 333, "use_external_data_format": 333, "2gb": 333, "replace_node_input": 333, "new_input_nam": 333, "replace_input_of_all_nod": 333, "white_optyp": 333, "black_optyp": 333, "replace_node_output": 333, "new_output_nam": 333, "replace_output_of_all_nod": 333, "remove_unused_const": 333, "topological_sort": 333, "enable_subgraph": 333, "topolog": 333, "get_nodes_chain": 333, "start_nod": 333, "stop_nod": 333, "result_chain": 333, "chain": 333, "get_model_typ": [334, 463], "validate_graph_nod": 334, "validate_and_inference_input_output": 334, "input_tensor_nam": 334, "output_tensor_nam": 334, "graph_sess": 334, "graph_def_sess": 334, "frozen_pb_sess": 334, "load_saved_model": 334, "saved_model_tag": 334, "serv": [334, 550, 558], "signatur": 334, "saved_model_dir": 334, "tag": [334, 374, 520, 533, 611], "metagraphdef": 334, "keras_sess": 334, "slim_sess": 334, "checkpoint_sess": 334, "estimator_sess": 334, "saved_model_sess": 334, "renturn": 334, "workspace_path": [334, 335, 518, 533], "tensorflowsavedmodelmodel": 334, "get_all_weight_nam": [334, 335], "update_weight": [334, 335, 345], "new_tensor": [334, 335], "get_weight": [334, 335], "wight": 334, "report_spars": [334, 335], "total_spars": [334, 335], "build_saved_model": 334, "savedmodelbuild": 334, "protocol": 334, "asset": 334, "tensorflowqatmodel": 334, "tensorflowcheckpointmodel": 334, "checkpoint": [334, 377, 580], "tensorflowmodel": [334, 441, 470, 472, 473, 474, 475], "pytorchbasemodel": 335, "register_forward_pre_hook": 335, "remove_hook": 335, "generate_forward_pre_hook": 335, "update_gradi": 335, "grad_nam": 335, "new_grad": 335, "grad": 335, "prune_weights_": 335, "place": [335, 576, 603, 611], "get_input": 335, "get_gradi": 335, "pytorchmodel": [335, 341, 342, 344, 345, 346], "quantized_state_dict": 335, "load_quantized_state_dict": 335, "stat_dict": 335, "export_to_jit": 335, "jit": [335, 581, 583, 588, 611], "export_to_fp32_onnx": 335, "rand": [335, 581], "stdout": 335, "export_to_bf16_onnx": 335, "export_to_int8_onnx": 335, "s8s8": 335, "pytorchfxmodel": 335, "ipexmodel": 335, "objective_registri": 336, "objective_custom_registri": 336, "obj_cl": 336, "sart": 336, "result_list": 336, "durat": [336, 363, 398, 409, 412, 419, 425, 427, 428, 518, 610], "alloc": 336, "models": [336, 600, 606], "multiobject": [336, 543], "metric_criterion": 336, "metric_weight": 336, "obj_criterion": 336, "obj_weight": 336, "is_measur": 336, "accuracy_target": 336, "accuracy_meet": 336, "verifi": 336, "set_model": 336, "best_result": 336, "tune_data": 336, "acc1": 336, "obj1": 336, "obj2": 336, "acc2": 336, "register_criterion": 337, "get_criterion": 337, "pruningcriterion": 337, "magnitudecriterion": 337, "criterion_class": 337, "magtinud": 337, "gradientcriterion": 337, "snipcriterion": 337, "product": [337, 575, 579, 581, 582, 598, 602, 605, 607, 610, 613], "snipmomentumcriterion": 337, "mechan": [337, 610], "preserv": 337, "basepattern": [340, 349], "keep_mask_lay": 340, "invalid_lay": 340, "reduce_tensor": 340, "along": [340, 526, 576], "unprun": 340, "get_single_mask_per_target_ratio": 340, "return_dict": 340, "zero_cnt": 340, "total_cnt": 340, "check_layer_valid": 340, "get_reduced_masks_from_data": 340, "update_residual_cnt": 340, "get_sparsity_ratio_each_lay": 340, "sparsity_ratio": 340, "cnt": 340, "sparsityinfo": 340, "adjust_ratio": 340, "key_new_spars": 340, "max_sparsity_ratio": 340, "min_sparsity_ratio": 340, "final_target_sparsity_ratio": 340, "examin": [340, 603], "adjust_sparsity_ratio": 340, "block_wis": 340, "get_sparsity_ratio_progress": 340, "reshape_orig_to_pattern": 340, "s1": 340, "s2": 340, "reshape_reduced_to_orig": 340, "orig_shap": 340, "reduce_scor": 340, "get_mask_per_threshold": 340, "cur_target_sparsity_ratio": 340, "keep_exact_sparsity_ratio": 340, "remain": [340, 586], "count_new_masked_cnt": 340, "new_added_mask": 340, "update_new_added_mask": 340, "cur_mask": 340, "bacaus": 340, "update_progressive_mask": 340, "progressive_step": 340, "progressive_config": 340, "update_progressive_masks_linear": 340, "update_progressive_masks_scor": 340, "update_progressive_masks_loc": 340, "domain": [340, 395, 403, 406, 423, 425, 430, 454, 461, 462, 465, 483, 514, 515, 517, 533, 545, 550, 561, 603, 604, 613], "update_progressive_masks_glob": 340, "get_least_ninm_mask_from_data": 340, "elementwis": [340, 341], "sparisti": 340, "get_ele_mask_per_threshold": 340, "least_ninm_mask": 340, "least_m_in_m_mask": 340, "gradientsensitivityprun": 341, "local_config": [341, 342, 344, 345, 346, 351], "global_config": [341, 342, 344, 345, 346, 351], "overwritten": [341, 342, 344, 345, 346, 586], "elementwise_prun": 341, "parse_weight_nam": 341, "weight_name_pattern": 341, "compute_mask": [341, 344, 345], "prune_weight": 341, "update_importance_elementwis": 341, "update_importance_ab": 341, "update_importance_weight": 341, "prune_by_import": 341, "num_inst": 341, "lasso": [342, 349, 575, 603, 604], "grouplassoprun": 342, "basicmagnitudeprun": [342, 344], "legaci": 343, "pruner_registri": 346, "clase": 346, "update_spars": 346, "parse_valid_pruner_typ": 347, "baseprun": 347, "mask_weights_gener": 347, "update_mask": 347, "basicprun": 347, "proce": 347, "regul": 347, "set_global_step": 347, "progressiveprun": 347, "grain": [347, 605], "interv": [347, 604], "check_progressive_valid": 347, "check_is_pruned_progressive_step": 347, "update_masks_progress": 347, "print_progressive_spars": 347, "register_reg": 349, "regulariz": 349, "get_reg_typ": 349, "get_reg": 349, "basereg": 349, "grouplasso": 349, "coeff": 349, "reg_term": 349, "coeffient": 349, "pruningschedul": 350, "init_ratio": 350, "init_sparsity_ratio": 350, "reset_none_to_default": 351, "update_param": [351, 400], "process_weight_config": 351, "default_config": 351, "pruners_info": 351, "process_yaml_config": 351, "check_key_valid": 351, "template_config": 351, "user_config": 351, "calib_func": 352, "automixedprecisiontunestrategi": 353, "rule": [353, 581, 603, 604], "tri": [353, 546, 613], "tune_config": [353, 354, 355, 356, 357, 358, 360, 361, 362, 363], "basictunestrategi": 354, "bayesiantunestrategi": 355, "discret": [355, 613], "gaussian": [355, 613], "posterior": [355, 613], "black": [355, 613], "maxim": [355, 603, 604, 613], "acq_max": 355, "ac": 355, "gp": 355, "y_max": 355, "n_warmup": 355, "n_iter": 355, "acquisit": 355, "relev": 355, "limit": [355, 378, 566, 603, 611], "acq": 355, "randomst": 355, "scipi": 355, "x_max": 355, "targetspac": 355, "pbound": 355, "9527": [355, 614], "params_to_arrai": 355, "array_to_param": 355, "amort": 355, "keyerror": 355, "get_target": 355, "num": [355, 378, 578], "_kei": 355, "bayesianoptim": 355, "promis": [355, 567, 603, 604], "gen_next_param": 355, "conservativetunestrategi": 356, "o0": 356, "quantifi": 356, "quant_queu": 356, "prioriti": [356, 613], "go": [356, 572, 593, 596, 606, 612], "fp16": [356, 579, 607], "trail": 356, "exhaustivetunestrategi": 357, "hawq_v2tunestrategi": 358, "impact": [358, 360, 361, 609, 613], "msetunestrategi": 360, "mse_impact_lst": 360, "best_qmodel": 360, "current_best_model": 360, "ordered_op_name_typ": 360, "mse_v2tunestrategi": 361, "highest": [361, 613], "revert": [361, 613], "lowest": [361, 603, 604, 613], "randomtunestrategi": 362, "strategy_registri": [363, 613], "evaluation_result": [363, 568], "initial_tuning_cfg": 363, "quant_mode_wise_item": 363, "quant_mod": 363, "initial_op_tuning_cfg": 363, "op_item_dtype_dict": 363, "show_baseline_info": 363, "displai": [363, 378, 449, 462, 598], "initial_best_acc": 363, "set_tuning_spac": 363, "setup_resum": 363, "set_q_func": 363, "update_best_op_tuning_cfg": 363, "op_tuning_cfg": 363, "deploy_config": 363, "deploy": [363, 565, 581, 598], "optuningconfig": [364, 367], "op_quant_mod": [364, 367], "get_stat": [364, 367], "from_stat": [364, 367], "compressionmanag": 368, "uesd": 368, "deal": 368, "commpon": 368, "train_loop": [368, 601], "path_to_sav": 368, "layerhistogramcollector": [369, 372], "histogram": [369, 372, 378, 422, 425, 433, 611], "layer_tensor": [369, 372], "include_lay": [369, 372], "diverg": [369, 372, 373, 566, 613], "get_func_from_config": 371, "func_dict": 371, "get_preprocess": 371, "get_postprocess": 371, "get_algorithm": 371, "create_dataset": 371, "cfg_preprocess": 371, "cfg_filter": 371, "create_dataload": 371, "dataloader_cfg": 371, "create_eval_func": 371, "postprocess_cfg": 371, "create_train_func": 371, "Their": 371, "auxiliari": 372, "msg": [372, 375], "debug": [372, 375, 435, 436, 440, 561, 591, 595, 599, 613], "warn": [372, 375, 561], "warin": [372, 375], "alia": [372, 375, 583, 588], "fatal": [372, 375], "probabl": 373, "expand_quantized_bin": 373, "quantized_bin": 373, "reference_bin": 373, "expand": 373, "bin": [373, 378], "safe_entropi": 373, "reference_distr_p": 373, "p_sum": 373, "candidate_distr_q": 373, "q_sum": 373, "entropi": [373, 613], "get_threshold": 373, "hist_edg": 373, "min_val": 373, "max_val": 373, "quantized_typ": 373, "num_quantized_bin": 373, "255": [373, 607], "pretrain": [374, 581, 587], "optimizedmodel": 374, "from_pretrain": 374, "repositori": [374, 454, 459, 461, 514, 520, 574, 593, 596], "host": [374, 568], "cache_dir": 374, "force_download": 374, "resume_download": 374, "delet": [374, 413, 419, 420, 425, 426, 427, 428, 429, 603, 604], "receiv": [374, 610], "artifact": 374, "co": [374, 604], "save_for_huggingface_upstream": 374, "output_dir": [374, 526, 586, 587], "get_logg": 375, "checkpoint_dir": 377, "history_cfg": 377, "best_configur": 377, "best_model_weight": 377, "pt": [377, 580, 605, 608], "snapshot": [377, 431, 552], "cfg_from_fil": 378, "yaml_fil": [378, 564, 568, 578], "lazyimport": 378, "lazi": 378, "till": [378, 613], "decorat": 378, "time_limit": 378, "get_siz": [378, 533], "fault_tolerant_fil": 378, "equal_dict": 378, "d2": 378, "compare_kei": 378, "ignore_kei": 378, "ignor": [378, 564], "cpuinfo": 378, "cores_per_socket": 378, "get_number_of_socket": [378, 521], "customized_msg": 378, "elaps": 378, "combine_histogram": 378, "old_hist": 378, "get_tensor_histogram": 378, "2048": 378, "get_all_fp32_data": 378, "get_tuning_histori": 378, "tuning_history_path": [378, 502], "str2arrai": 378, "dequantizeweight": 378, "weight_tensor": 378, "scale_info": 378, "statist": 378, "header": [378, 479, 558, 571], "field_nam": 378, "output_handl": 378, "printer": 378, "print_stat": 378, "global_st": 378, "load_data_from_pkl": 378, "pkl": 378, "dump_data_to_loc": 378, "set_resume_from": 378, "project_data": [379, 485, 486, 491, 495, 498, 501, 508], "benchmark_data": 379, "workdir": [379, 495, 508, 514, 518, 522, 530], "config_filenam": [379, 495, 508], "configuration_data": [379, 486, 491, 495, 498, 501], "generate_config": [379, 486, 491, 495, 498, 501, 508], "dataloaderinterfac": [379, 495, 508], "dataloader_data": [379, 391, 420, 425, 495, 508], "parse_arg": [380, 488, 492, 497, 500, 506], "benchmark_mod": [380, 525], "set_eager_execut": [380, 488, 492, 500], "request_id": [381, 484, 502, 503, 518, 526], "asd": [381, 503], "benchmark_id": [381, 398, 399, 409], "benchmark_result_upd": 381, "benchmark_result_update_pytorch_script": 381, "neural_coder_perform": 381, "neural_coder_tim": 381, "pytorch_script_bench_optim": 381, "command_line_of_script": 381, "pytorch_script_bench_original_model": 381, "execute_real_benchmark": 381, "project_detail": [381, 414, 484, 503], "benchmark_detail": 381, "benchmark_model": [382, 454, 514], "execute_benchmark": [382, 454, 514], "benchmarkconfiggener": 383, "configgener": [383, 384, 385, 387, 388, 389, 390], "generate_evaluation_config": [383, 385, 387, 389, 390], "generate_accuracy_config": 383, "generate_performance_config": 383, "workload_directori": 384, "configuration_path": 384, "jsonseri": [384, 438, 439, 444, 446, 447, 450, 460, 469, 495, 501, 521, 523, 531, 534, 535, 536, 537, 539, 540, 541, 542, 543], "get_predefined_config_path": [384, 533], "generate_model_config": 384, "generate_dataloader_config": 384, "graphoptimizationconfiggener": 385, "generate_graph_optimization_config": 385, "benchmark_config_gener": [386, 454, 514], "graph_optimization_config_gener": [386, 454, 514], "mixed_precision_config_gener": [386, 454, 514], "profiling_config_gener": [386, 454, 514], "pruning_config_gener": [386, 454, 514], "quantization_config_gener": [386, 454, 514], "mixedprecisionconfiggener": 387, "generate_mixed_precision_config": 387, "profilingconfiggener": 388, "pruningconfiggener": 389, "generate_pruning_config": 389, "quantizationconfiggener": 390, "generate_tuning_config": 390, "generate_quantization_config": 390, "configurationpars": 391, "input_data": [391, 396, 563], "parse_evaluation_data": 391, "evaluation_data": 391, "parse_transform": 391, "transforms_data": [391, 420, 425], "parse_dataload": 391, "parse_metr": 391, "metric_data": 391, "get_param_typ": 391, "param_group": 391, "parse_valu": 391, "required_typ": 391, "parse_list_valu": 391, "parse_multidim_list": 391, "dimension": 391, "normalize_string_list": 391, "string_list": 391, "bracket": 391, "get_predefined_configur": 393, "update_config_to_machine_specif": 393, "configuration_pars": [394, 454, 514], "get_boundary_nod": [394, 454, 514], "get_configur": [394, 454, 514], "params_feed": [394, 454, 514], "pruning_config_pars": [394, 454, 514], "feeder": 395, "get_framework": [395, 468], "get_domain": 395, "get_model": [395, 468, 554], "get_dataload": 395, "get_transform": 395, "get_object": 395, "get_strategi": 395, "get_quantization_approach": 395, "get_possible_valu": 395, "pruningconfigpars": 396, "generate_tre": 396, "parse_entri": 396, "bench": [397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 484, 513, 581], "dbmanag": [397, 430], "database_loc": [397, 430], "log_level": [397, 430, 524], "initialize_databas": [397, 430], "create_sqlalchemy_engin": [397, 430], "create_al": [397, 430], "tabl": [397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 420, 421, 430], "project_id": [398, 401, 408, 409, 412, 414, 420, 424, 425], "model_id": [398, 408, 409, 412], "dataset_id": [398, 401, 409, 412, 420, 424, 425], "warmup_iter": 398, "number_of_inst": 398, "execution_command": [398, 409, 412], "benchark": 398, "delete_benchmark": [398, 419, 425], "benchmark_nam": 398, "update_statu": [398, 409, 412], "execution_statu": [398, 409, 412], "executionstatu": [398, 409, 412, 419, 425, 427, 428, 515, 532], "update_dur": [398, 409, 412], "update_execution_command": [398, 409, 412, 419, 425, 427, 428], "update_log_path": [398, 409, 412, 425, 428], "update_config_path": [398, 409], "update_dataset": [398, 409, 412], "update_batch_s": [398, 409], "update_mod": 398, "update_cores_per_inst": 398, "update_number_of_inst": 398, "clean_statu": [398, 409, 412, 419, 425, 427, 428, 532], "status_to_clean": [398, 409, 412, 419, 425, 427, 428, 532], "build_info": [398, 399, 401, 408, 409, 412, 413, 415, 418], "benchmark_result": [398, 406, 430, 454], "benchmarkresult": [398, 399], "update_accuraci": 399, "update_perform": 399, "list_by_framework": [400, 407, 416], "framework_id": [400, 407, 408, 416, 432], "query_to_list": [400, 407, 416], "dataloaders_queri": 400, "dataloader_id": 400, "fill_dictionari": [400, 402, 403, 405, 407, 410, 411, 416], "dataset_nam": [401, 420, 425], "template_path": 401, "delete_dataset": [401, 420, 425], "update_template_path": 401, "get_domain_id": 402, "domain_nam": 402, "domainflavour": [403, 515], "db": [403, 410, 411, 431, 432], "get_domain_flavour_id": 403, "domain_flavour_nam": 403, "flavour": [403, 423, 425, 483, 515], "get_framework_id": 405, "framework_nam": [405, 481, 521], "domain_flavour": [406, 430, 454, 460, 533], "optimization_typ": [406, 409, 430, 454], "profiling_result": [406, 412, 430, 454], "pruning_detail": [406, 409, 430, 454], "tuning_detail": [406, 409, 430, 454], "tuning_histori": [406, 409, 425, 427, 430, 454, 489, 514], "metrics_queri": 407, "precision_id": [408, 409, 410, 411], "domain_id": [408, 416], "domain_flavour_id": 408, "supports_profil": [408, 462, 470], "supports_graph": [408, 462], "supports_prun": [408, 462, 474], "delete_model": [408, 425, 426], "optimization_type_id": 409, "sampling_s": [409, 534, 614], "tuning_details_id": [409, 417], "pruning_details_id": [409, 415], "diagnosis_config": 409, "delete_optim": [409, 425, 427], "optimization_id": [409, 410, 425, 427, 484], "optimization_nam": [409, 410, 424, 425], "update_optimized_model": [409, 425, 427], "optimized_model_id": 409, "update_sampling_s": 409, "update_precis": 409, "update_tuning_detail": 409, "update_pruning_detail": 409, "pin_accuracy_benchmark": [409, 425, 427], "pin": [409, 425, 427, 591, 595], "pin_performance_benchmark": [409, 425, 427], "get_optimization_by_project_and_model": 409, "unpin_benchmark": 409, "db_connect": 409, "unpin": 409, "optimizationtyp": [409, 410, 515], "tuningdetail": [409, 417, 501], "tuninghistori": [409, 418, 502], "pruningdetail": [409, 415], "optimized_model": 409, "get_pinned_benchmark": 409, "list_for_precis": 410, "precision_nam": [410, 411], "get_optimization_type_for_precis": 410, "get_optimization_type_id": 410, "get_optimization_type_by_nam": 410, "get_optimization_type_by_id": 410, "get_precision_id": 411, "get_precision_by_nam": 411, "get_precision_by_id": 411, "num_thread": 412, "delete_profil": [412, 425, 428], "profiling_id": [412, 413, 425, 428, 503], "profiling_nam": 412, "update_num_thread": 412, "profilingresult": [412, 413], "total_execution_tim": 413, "accelerator_execution_tim": 413, "cpu_execution_tim": 413, "op_run": 413, "op_defin": 413, "get_result": 413, "bulk_add": 413, "params_interfac": [413, 419, 420, 422, 424, 425, 426, 427, 428, 430, 454, 514, 552], "profilingresultaddparamsinterfac": [413, 425, 428, 431], "bulk": [413, 425, 428], "delete_result": 413, "create_project": [414, 424, 425, 429], "delete_project": [414, 425, 429], "project_nam": [414, 420, 425], "get_model_by_nam": 414, "list_project": [414, 425, 429], "update_not": 414, "pruning_details_data": 415, "delete_pruning_detail": 415, "list_by_domain": 416, "transforms_queri": 416, "accuracy_criterion_typ": 417, "accuracy_criterion_threshold": 417, "exit_polici": [417, 614], "tuning_details_data": 417, "delete_tuning_detail": 417, "update_tuning_histori": 417, "tuning_history_id": 417, "minimal_accuraci": 418, "baseline_accuraci": 418, "baseline_perform": 418, "last_tune_accuraci": 418, "last_tune_perform": 418, "best_tune_accuraci": 418, "best_tune_perform": 418, "benchmarkapiinterfac": [419, 425], "get_benchmark_detail": [419, 425], "list_benchmark": [419, 425], "update_benchmark_accuraci": [419, 425], "update_benchmark_perform": [419, 425], "update_benchmark_statu": [419, 425], "update_benchmark_dur": [419, 425], "update_path": [419, 425, 427], "add_benchmark": [419, 425], "add_result": [419, 425, 428], "edit_benchmark": [419, 425], "parse_benchmark_data": [419, 425], "benchmarkaddparamsinterfac": [419, 425, 431], "parse_benchmark_edit_data": [419, 425], "benchmarkeditparamsinterfac": [419, 425, 431], "before_delete_benchmark_entri": 419, "sqlite3": 419, "db_model": [419, 430, 454, 514], "datasetapiinterfac": [420, 425], "get_dataset_detail": [420, 425], "list_dataset": [420, 425], "add_dataset": [420, 425], "set_template_path": [420, 425], "parsed_dataset_data": [420, 425], "datasetaddparamsinterfac": [420, 425, 431], "check_if_custom_metric_or_dataload": [420, 425], "dataset_data": [420, 425, 485, 486, 491, 495, 498, 501, 535], "generate_custom_templ": [420, 425], "dataloader_path": [420, 425], "generate_templ": [420, 425], "template_typ": [420, 425], "parse_dataset_data": [420, 425], "get_predefined_dataset": [420, 425], "prepare_predefined_dataload": [420, 425], "prepare_predefined_transform": [420, 425], "set_database_vers": [420, 421], "version_num": [420, 421], "alembic_vers": [420, 421], "initialize_associ": [420, 421], "initialize_precision_optimization_types_associ": [420, 421], "search_in_list_of_dict_for_unique_valu": [420, 421], "list_of_dict": [420, 421], "search_in_list_of_dict": [420, 421], "diagnosisapiinterfac": [422, 425], "get_op_list": [422, 425, 433], "get_op_detail": [422, 425, 433], "generate_optim": [422, 425], "model_wise_param": [422, 425], "parse_optimization_data": [422, 425, 427], "diagnosisoptimizationparamsinterfac": [422, 425, 431], "parse_op_wise_config": [422, 425], "op_wise_param": [422, 425], "parse_wise_paramet": [422, 425], "params_per_typ": [422, 425], "set_op_wise_pattern_precis": [422, 425], "parse_model_wise_config": [422, 425], "dictionariesapiinterfac": [423, 425], "dictonari": [423, 425], "list_domain": [423, 425], "list_domain_flavour": [423, 425], "list_optimization_typ": [423, 425], "list_optimization_types_for_precis": [423, 425], "list_precis": [423, 425], "list_dataload": [423, 425], "list_dataloaders_by_framework": [423, 425], "list_transform": [423, 425], "list_transforms_by_framework": [423, 425], "list_transforms_by_domain": [423, 425], "list_metr": [423, 425], "list_metrics_by_framework": [423, 425], "examplesapiinterfac": [424, 425], "get_optimization_data": [424, 425], "optimizationaddparamsinterfac": [424, 425, 427, 431], "benchmark_api_interfac": [425, 430, 454], "dataset_api_interfac": [425, 430, 454], "diagnosis_api_interfac": [425, 430, 454], "dictionaries_api_interfac": [425, 430, 454], "examples_api_interfac": [425, 430, 454], "model_api_interfac": [425, 430, 454], "optimization_api_interfac": [425, 430, 454], "profiling_api_interfac": [425, 430, 454], "project_api_interfac": [425, 430, 454], "modelapiinterfac": [425, 426], "add_model": [425, 426, 429], "get_model_detail": [425, 426], "list_model": [425, 426, 454, 480, 514], "parse_model_data": [425, 426], "modeladdparamsinterfac": [425, 426, 431], "optimizationapiinterfac": [425, 427], "get_optimization_detail": [425, 427], "list_optim": [425, 427], "update_optimization_statu": [425, 427], "update_optimization_dur": [425, 427], "add_optim": [425, 427], "add_quantization_optim": [425, 427], "optimization_data": [425, 427, 485, 486, 491, 495, 498, 501], "add_pruning_optim": [425, 427], "add_standard_optim": [425, 427], "edit_optim": [425, 427], "get_pruning_detail": [425, 427], "gat": [425, 427], "edit_tuning_detail": [425, 427], "parsed_optimization_data": [425, 427], "optimizationeditparamsinterfac": [425, 427, 431], "edit_pruning_detail": [425, 427], "pruning_data": [425, 427], "add_tuning_histori": [425, 427], "parse_tuning_histori": [425, 427], "tuninghistoryinterfac": [425, 427, 431, 552], "parse_optimization_edit_data": [425, 427], "load_pruning_details_config": [425, 427, 533], "profilingapiinterfac": [425, 428], "get_profiling_detail": [425, 428], "list_profil": [425, 428], "update_profiling_statu": [425, 428], "update_profiling_dur": [425, 428], "add_profil": [425, 428], "edit_profil": [425, 428], "bulk_add_result": [425, 428], "parse_profiling_data": [425, 428], "profilingaddparamsinterfac": [425, 428, 431], "parse_profiling_result_data": [425, 428], "parse_profiling_edit_data": [425, 428], "profilingeditparamsinterfac": [425, 428, 431], "projectapiinterfac": [425, 429], "get_project_detail": [425, 429], "add_dummy_dataset": [425, 429], "update_project_not": [425, 429], "db_oper": [430, 454, 514], "parse_nod": 431, "tuninghistoryiteminterfac": [431, 552], "update_dataloaders_param": 432, "dataloaders_to_upd": 432, "framework_dataloaders_config": 432, "get_framework_dataloaders_config": 432, "get_framework_transforms_config": 432, "get_tensors_info": [433, 462], "load_quantization_config": 433, "calculate_ms": 433, "input_model_tensor": 433, "optimized_model_tensor": 433, "op_detail": [433, 435, 454, 514], "opdetail": [433, 438], "get_histogram_data": 433, "draw": [433, 610, 613], "diagnosisfactori": 434, "get_diagnosi": 434, "onnx_diagnosi": [435, 454, 514], "onnxrt_diagnosi": [435, 436, 454], "tensorflow_diagnosi": [435, 454, 514], "op_entri": [435, 454, 514], "onnxrtdiagnosi": 437, "onnxrtmodel": [437, 465], "serialization_typ": [438, 439, 469, 521, 523, 535, 536, 540, 541], "oppattern": 438, "pattern_data": 438, "opweight": 438, "weights_data": 438, "opactiv": 438, "op_activ": 438, "opentri": 439, "activation_min": 439, "activation_max": 439, "tensorflowdiagnosi": 441, "browser": [442, 561, 591, 595], "get_directory_entri": 442, "get_requested_path": 442, "request": [442, 454, 455, 456, 477, 478, 481, 502, 514, 518, 545, 547, 549, 550, 554, 556, 557, 559, 561, 607], "get_non_hidden_directory_entri": 442, "create_dir_entri": 442, "direntri": 442, "create_file_entri": 442, "create_entri": 442, "is_directori": 442, "sort_entri": 442, "should_show_fil": 442, "should_show_only_model_fil": 442, "get_setting_valu": 442, "get_filter_valu": 442, "filter_requested_entri": 442, "filter_nam": 442, "is_directory_entri": 442, "is_model_or_directory_entri": 442, "is_dataset_or_directory_entri": 442, "brows": 443, "filesystem": [443, 533, 558], "attribute_typ": 444, "expanded_group": [445, 448], "add_edg": 447, "source_id": 447, "target_id": 447, "get_nod": 447, "highlight_pattern": 447, "get_target_nod": 447, "reader": [448, 449, 454, 514], "graphread": 448, "find_pattern_in_graph": [448, 549], "onnxrt_read": [449, 451, 454], "tensorflow_read": [449, 451, 454], "collaps": [449, 454, 514, 561], "graph_read": [449, 454, 514], "groupnod": 450, "group_nam": 450, "onnxrtread": 452, "tensorflowread": 453, "jobs_control_queu": [454, 455, 514], "frozen_pb": [454, 461, 471], "meta_graph": [454, 461, 471], "model_type_gett": [454, 461, 514], "download_config": [454, 479, 480, 514], "download_model": [454, 479, 480, 514], "optimize_model": [454, 487, 489, 490, 493, 496], "neural_coder_optim": [454, 489, 514], "tune_model": [454, 489, 499], "execute_optim": [454, 489, 514], "tensorflow_profil": [454, 505, 514], "execute_profil": [454, 505, 514], "profile_model": [454, 505, 507, 511, 514], "job": [455, 529], "_jobscontrolqueu": 456, "queu": 456, "jobsmanag": 456, "_jobsmmanag": 457, "_job": 457, "get_default_path": 459, "shape_elements_ord": [462, 465, 474, 533], "get_input_nod": [462, 472, 473, 474], "get_output_nod": [462, 472, 473, 474], "ensure_supported_path": 462, "get_model_graph": [462, 465, 473, 474, 549], "supports_path": [462, 465, 467, 470, 472, 473, 475], "guard_requirements_instal": [462, 465, 467, 474], "instal": [462, 465, 467, 474, 481, 568, 571, 581, 583, 589, 593, 596, 598, 599, 602], "nc_model_inst": [465, 474], "filtered_input_nod": 465, "remove_number_of_samples_from_shap": 465, "pytorchscriptmodel": 467, "modelrepositori": 468, "get_framework_from_path": [468, 533], "get_supported_framework": 468, "is_model_path": 468, "trust": [469, 561], "frozenpbmodel": 470, "metagraphmodel": 473, "metagraph": 473, "savedmodelmodel": 475, "get_input_shap": 476, "fix_dynamic_shap": 476, "resourc": [479, 566, 603], "download_yaml_config": 479, "model_info": 479, "download_fil": 479, "download_path": 479, "report_progress": 479, "unpack_arch": 479, "archive_path": 479, "unpack": 479, "archiv": 479, "get_yaml_url": 479, "model_src_dir": 479, "yaml_relative_loc": 479, "get_available_model": 481, "check_vers": 481, "framework_vers": 481, "supported_vers": 481, "validate_model_list": 481, "model_list": 481, "get_framework_module_nam": 481, "get_installed_framework": 481, "mappingdirect": 483, "namesmapp": 483, "framework_map": 483, "domain_map": 483, "domain_flavour_map": 483, "precision_map": 483, "map_nam": 483, "parameter_typ": 483, "execute_optimization_pytorch_script": 484, "execute_optimization_regular": 484, "parse_model_data_to_bench_nam": 484, "parse_log": 484, "optimization_detail": 484, "check_if_collect_tuning_histori": 484, "optimizationfactori": 485, "get_optim": 485, "optimization_script": [486, 491, 495, 498, 501], "optimize_graph": [488, 492], "output_graph": [488, 492, 497, 500], "optimize_graph_config": [488, 492], "optimize_pt_script": 494, "output_model_nam": 495, "output_model_dir": 495, "optimizationinterfac": 495, "optimization_workdir": 502, "watcher": 502, "process_succeed": 502, "signal": [502, 533], "was_history_file_chang": 502, "history_file_modification_tim": 502, "send_history_snapshot": 502, "execute_real_profil": 503, "profiling_detail": 503, "profilerfactori": [504, 509], "get_profil": [504, 509], "profiling_data": [504, 508, 509, 511, 531], "load_profiling_detail": 506, "json_path": 506, "config_path": 508, "initialize_graph": 511, "tf_modul": 511, "create_tf_config": 511, "num_warmup": 511, "get_node_by_nam": 511, "convert_nodes_to_list": 511, "build_dataload": 511, "delete_assign": 512, "wsgi": 513, "prepare_environ": 513, "app": [514, 548], "history_snapshot_pars": [514, 548, 553], "request_data_processor": [514, 548, 553], "response_gener": [514, 548, 553, 554, 556, 559], "status": [515, 527, 532], "ensure_workdir_exists_and_writ": 516, "clean_workloads_wip_statu": 516, "wip": [516, 615], "workloads_list": 516, "migrate_databas": 516, "latest": [516, 526, 576, 605, 609], "alemb": [516, 571, 576], "notfoundexcept": [517, 546, 547], "accessdeniedexcept": 517, "deni": 517, "clienterrorexcept": 517, "internalexcept": 517, "subject": [518, 545, 577], "send_respons": 518, "log_nam": 518, "additional_log_nam": [518, 526], "shell": [518, 526, 611], "process_dur": 518, "call_on": 518, "cwd": [518, 526], "universal_newlin": [518, 526], "startupinfo": [518, 526], "creationflag": [518, 526], "ignore_exit_cod": [518, 526], "pid": [518, 526], "env_arg": 518, "ncprocess": [518, 527], "refresh_workdir": 518, "is_multi_command": 518, "expir": 519, "expiringdictitem": 519, "expires_at": 519, "is_expir": 519, "expiringdict": 519, "initial_valu": 519, "ttl": 519, "120": 519, "userdict": 519, "githubinfo": 520, "hw": 521, "hwinfo": 521, "get_distribut": 521, "distibut": 521, "get_bios_vers": 521, "bio": [521, 602], "is_turbo_boost_en": 521, "turbo": [521, 602], "boost": [521, 579, 582, 598, 605], "get_kernel_vers": 521, "get_framework_info": 521, "get_framework_dependency_info": 521, "subdepend": 521, "serializ": 523, "serialize_item": 523, "datetim": 523, "throw": 523, "typeerror": 523, "2016": 523, "84913": 523, "08t11": 523, "084913": 523, "change_log_level": 524, "optimizationpars": 525, "performancepars": 525, "update_parti": 525, "partial": [525, 607], "parsed_result": 525, "summarize_parti": 525, "summarize_valu": 525, "accuracypars": 525, "benchmarkparserfactori": 525, "get_pars": 525, "profilingpars": 525, "unify_tim": 525, "string_valu": 525, "micro": 525, "125": [525, 615], "6m": 525, "microsecond": 525, "cmd": [526, 599], "docker": 526, "aibt_tensorflow": 526, "7_3_mkldnn_tensorflow": 526, "111224": 526, "pull_imag": 526, "0c750a01": 526, "90e0": 526, "4aa8": 526, "99fe": 526, "a194d55a2046": 526, "time_start": 526, "2018": 526, "17t14": 526, "47": [526, 615], "352502": 526, "time_stop": 526, "25": [526, 615], "110410": 526, "info_path": 526, "tail": 526, "is_ok": [526, 527], "popen": 526, "remove_log": 526, "properli": 527, "rtype": 527, "return_code_al": 527, "remove_successful_log": 527, "success": [527, 545, 576], "get_status_update_funct": 529, "job_typ": 529, "sent": 531, "throughput": 531, "acc_input_model": 531, "acc_optimized_model": 531, "size_input_model": 531, "size_optimized_model": 531, "path_optimized_model": 531, "optimization_tim": 531, "insert_data": 531, "calculate_throughput": 531, "readi": 531, "ensure_working_path_exist": 532, "clean_log": 532, "workdir_path": 532, "is_hidden": 533, "get_dataset_path": 533, "get_file_extens": 533, "lead": [533, 566, 579, 603, 604], "is_dataset_fil": 533, "normalize_domain": 533, "underscor": 533, "normalize_framework": 533, "normalize_str": 533, "string_to_norm": 533, "get_model_zoo_config_path": 533, "model_dict": 533, "get_model_zoo_model_path": 533, "check_modul": 533, "get_module_vers": 533, "mb": 533, "add_unit": 533, "load_model_config": 533, "load_dataloader_config": 533, "load_transforms_config": 533, "load_transforms_filter_config": 533, "meaning": [533, 601], "load_precisions_config": 533, "get_default_pruning_config_path": 533, "load_model_wise_param": 533, "load_metrics_config": 533, "get_metrics_dict": 533, "load_help_nc_param": 533, "replace_with_valu": 533, "file_path": 533, "verify_file_path": 533, "determine_ip": 533, "ip": 533, "is_development_env": 533, "nc_mode": 533, "filter_transform": 533, "parse_bool_valu": 533, "release_tag": 533, "get_shape_from_transform": 533, "get_height_width_from_s": 533, "parse_to_string_list": 533, "parse_to_float_list": 533, "export_to_csv": 533, "parse_vers": 533, "string_vers": 533, "remove_dataload": 534, "datalad": 534, "remove_accuracy_metr": 534, "set_evaluation_dataload": 534, "udpat": 534, "set_evaluation_dataset_path": 534, "get_performance_config": 534, "set_performance_cores_per_inst": 534, "get_performance_cores_per_inst": 534, "set_performance_num_of_inst": 534, "get_performance_num_of_inst": 534, "set_accuracy_and_performance_batch_s": 534, "set_quantization_dataload": 534, "set_quantization_dataset_path": 534, "set_quantization_batch_s": 534, "set_accuracy_go": 534, "accuracy_go": 534, "set_accuracy_metr": 534, "set_transform": 534, "process_transform": 534, "set_quantization_approach": 534, "set_input": 534, "set_output": 534, "set_quantization_sampling_s": 534, "set_performance_warmup": 534, "set_performance_iter": 534, "set_optimization_precis": 534, "yaml_path": 534, "is_dummi": 535, "labelbal": [535, 563, 564], "set_transforms_from_list": 535, "transforms_list": 535, "set_dataset": 535, "postprocessschema": 536, "get_label_shift_valu": 536, "set_accuracy_postprocess_transform": 536, "set_precis": [537, 539], "sgdoptim": 541, "adamwoptim": 541, "adamoptim": 541, "crossentropylosscriterion": 541, "sparsecategoricalcrossentropycriterion": 541, "knowledgedistillationlosscriterion": 541, "set_postprocess_transform": 541, "weightcompressionapproach": 541, "initialize_prun": 541, "pruner_dict_list": 541, "serialize_prun": 541, "parse_dict_value_to_float": 541, "parse_dict_value_to_int": 541, "wiseconfigdetail": 542, "wiseconfig": 542, "acccriterion": 543, "exitpolici": 543, "set_timeout": 543, "set_max_tri": 543, "trial": [543, 613], "set_performance_onli": 543, "float_represent": 544, "dumper": 544, "pruner_represent": 544, "outsid": 545, "create_simple_respons": 545, "gui": [545, 546, 550, 561, 575, 576], "messagequeu": 545, "queue": [545, 550], "post_failur": 545, "post_success": 545, "post_error": 545, "wait": [545, 591, 595, 598], "global_config_directori": 546, "set_up": 546, "determine_values_from_environ": 546, "get_command_line_arg": 546, "determine_server_port": 546, "max_ports_tri": 546, "port_default": 546, "determine_gui_port": 546, "client": [546, 561], "server_port": 546, "unless": [546, 572], "is_port_taken": 546, "determine_log_level": 546, "determine_url_prefix": 546, "get_url": 546, "dump_token_to_fil": 546, "servicenotfoundexcept": 547, "unknown": 547, "connector": 549, "routingdefinit": 549, "rout": 549, "realtimeroutingdefinit": 549, "realtim": 549, "deferredroutingdefinit": 549, "deferredsubprocessroutingdefinit": 549, "spawn": 549, "get_system_info": 549, "endpoint": 550, "run_serv": 550, "webserv": 550, "get_tls_arg": 550, "tl": [550, 561], "block_ifram": 550, "werkzeug": [550, 558], "ifram": 550, "csp": 550, "block_snif": 550, "mime": 550, "snif": 550, "require_api_token": 550, "author": [550, 577], "handle_api_cal": 550, "subpath": 550, "allow_api_cal": 550, "page_not_found": 550, "disable_cach": 550, "build_paramet": 550, "flask": [550, 561], "web_socket_publish": 550, "web_socket": 550, "flask_socketio": 550, "socketio": [550, 561], "benchmarkservic": 551, "workloadservic": [551, 555, 556, 559], "historysnapshotpars": 552, "history_snapshot": 552, "provide_perform": 552, "parse_history_snapshot": 552, "parse_history_item": 552, "history_item": 552, "extract_accuraci": 552, "extract_perform": 552, "modelservic": 554, "optimizationservic": 555, "profilingservic": 556, "generate_csv": 556, "processor": [557, 579, 602, 605, 607, 608, 615], "requestdataprocessor": 557, "get_string_valu": 557, "responsegener": 558, "serve_from_filesystem": 558, "mimetyp": 558, "as_attach": 558, "add_refresh": 558, "refresh_tim": 558, "refresh": [558, 591, 595], "from_except": 558, "get_status_code_for_except": 558, "get_code_templ": 559, "get_output": 559, "conda": [561, 571, 576, 584, 592, 609], "forg": [561, 571, 576], "setup": [561, 572, 576, 593, 596, 603], "ui": 561, "5000": 561, "338174d13706855fc6924cec7b3a8ae8": 561, "listen": 561, "firewal": 561, "8080": 561, "cert": 561, "path_to_cert": 561, "crt": 561, "path_to_private_kei": 561, "encrypt": 561, "insecur": 561, "expos": 561, "forfeit": 561, "threat": 561, "button": [561, 575, 592, 598], "pop": [561, 598], "recognit": [561, 568, 611], "few": [561, 605, 613], "finish": [561, 592], "synthet": 561, "plu": 561, "icon": 561, "section": [561, 566, 598, 603, 606, 614], "unfold": 561, "On": [561, 607], "panel": [561, 593, 596, 598], "navig": 561, "trash": 561, "visibl": 561, "cursor": 561, "prompt": [561, 568], "confirm": 561, "exit": [561, 579, 614], "pencil": 561, "light": [561, 567], "blue": 561, "color": 561, "row": [561, 603], "arrow": 561, "checkbox": 561, "chart": [561, 607, 610, 611], "offer": [561, 564], "conveni": 561, "variat": 561, "yellow": 561, "remind": 561, "dialog": 561, "cryptographi": 561, "linux": [562, 592, 598], "window": [562, 598, 599], "x86_64": 562, "aarch64": 562, "often": [563, 566, 601, 603, 604], "encount": 563, "consum": 563, "lack": 563, "faster": [563, 565, 605, 615], "hard": 563, "treat": 563, "manner": [563, 566, 580], "post_training_static_qu": [563, 564, 606, 613], "300": [563, 564], "output_model": [563, 611], "customis": [563, 564], "ensp": [564, 578, 612], "imagerecord": [564, 568, 614], "image_nam": 564, "cocorecord": 564, "gt": [564, 570, 612], "float16": 564, "int64": 564, "style_transf": 564, "content": 564, "tfrecorddataset": 564, "helloworld": [564, 612], "aid": 565, "increas": [565, 575, 581, 598, 613], "infrastructur": 565, "deploi": [566, 613], "power": [566, 592, 602], "mobil": [566, 615], "produc": 566, "softmax": 566, "l": [566, 611, 613], "kd": 566, "kullback": 566, "leibler": 566, "patient": 566, "compact": [566, 584, 603, 604], "ia": 566, "attach": 566, "shallow": 566, "deepest": 566, "deeper": 566, "10006": 566, "training_func_for_nc": 566, "distil_loss": 566, "lr": [566, 568], "huge": [567, 604], "bit": [567, 579, 605, 607], "heavi": 567, "booster": 567, "degrad": 567, "retrain": [567, 603, 604], "incorpor": [567, 613], "novel": [567, 581, 592, 598], "horovod": 568, "builtin": 568, "program": [568, 577, 579, 581, 598], "addition": [568, 613], "enable_eager_execut": 568, "yaml_file_path": 568, "evaluation_time_cost": 568, "partit": 568, "distributedsampl": 568, "train_sampl": 568, "train_dataset": 568, "num_replica": 568, "train_load": 568, "train_kwarg": 568, "adadelta": 568, "distributedoptim": 568, "named_paramet": 568, "broadcast_paramet": 568, "root_rank": 568, "broadcast_optimizer_st": 568, "set_epoch": 568, "batch_idx": 568, "zero_grad": [568, 603], "nll_loss": 568, "log_interv": 568, "0f": 568, "tloss": 568, "6f": 568, "dry_run": 568, "test_func": 568, "num_of_process": 568, "002": 568, "ssh": [568, 598], "readm": 568, "exactli": [568, 582], "resnet50_v1": 568, "topk": [568, 578], "resizecropimagenet": [568, 612], "realiz": [568, 578, 600, 608, 610], "tow": 568, "situat": 568, "node1": 568, "node2": 568, "TO": [568, 583], "your_node1_nam": 568, "your_node2_nam": 568, "resnet50_fp32_pretrained_model": 568, "nc_resnet50_v1": 568, "wide": [569, 579, 604, 607], "varieti": [569, 606, 613], "demonstr": [569, 581, 603, 604, 611], "exchang": 570, "hope": 570, "briefli": [570, 603], "matur": 570, "major": [570, 573, 607], "reus": 570, "inc_model": [570, 580], "fp32_onnx_config": 570, "randn": 570, "int8_onnx_config": 570, "matmulintegertofloat": 570, "matmulinteg": 570, "incompat": 571, "88": [571, 610, 615], "80": [571, 611, 615], "pyobject": 571, "reinstal": 571, "importerror": 571, "libgl": 571, "apt": [571, 576, 584, 592], "yum": [571, 576], "opencv": [571, 592], "conflict": 571, "pend": 571, "27": [571, 576, 615], "quick": [572, 614], "friendli": [572, 614], "dive": 572, "let": [572, 586, 606, 614], "syntax": 572, "up1": 572, "up2": 572, "valid_mixed_precis": 572, "per_tensor": [572, 614], "grappler_optim": 572, "constfold": 572, "arithmet": 572, "debug_stripp": 572, "concept": [573, 610], "custom_metr": 573, "explicitli": 573, "refin": [573, 604], "These": 575, "broad": [575, 587], "420": 575, "geomean": 575, "snippet": 575, "upload": [575, 593, 596], "qintegerop": [575, 607], "plan": [575, 579], "uninstal": [576, 598], "frequent": 576, "ask": 576, "consolid": 576, "eas": [576, 583, 605], "streamlin": 576, "scienc": 576, "anaconda": 576, "suit": [576, 599, 611], "esri": 576, "apach": 577, "softwar": [577, 579, 602, 605, 609], "copyright": 577, "accompani": 577, "research": 577, "wish": 577, "bibtex": 577, "misc": 577, "feng": 577, "tian": 577, "hanwen": 577, "haihao": 577, "shen": 577, "suyu": 577, "chen": 577, "titl": [577, 599], "howpublish": 577, "year": 577, "logo": [577, 602], "atom": 577, "phi": 577, "pentium": 577, "vtune": 577, "corpor": [577, 602], "subsidiari": [577, 602], "brand": [577, 602], "claim": [577, 602], "popularli": 578, "industri": [578, 605], "label_map": 578, "decis": 578, "ap": 578, "curv": 578, "turn": [578, 592], "target_boxes_num": 578, "str_label": 578, "int_label": 578, "inturn": 578, "cocomap": 578, "vocmap": 578, "categor": 578, "multiclass": 578, "multilabel": 578, "multi_metr": 578, "newmetr": 578, "reflect": [578, 602, 612], "recent": 579, "growth": [579, 604], "complex": [579, 604], "significantli": [579, 603, 604], "bfloat16": [579, 581, 589, 608], "half": [579, 589], "sixteen": 579, "bandwidth": 579, "launch": [579, 599], "3rd": [579, 605, 607, 608], "gen": [579, 605, 608], "codenam": 579, "x86": 579, "avx512": [579, 607], "vcvtne2ps2bf16": 579, "vcvtneps2bf16": 579, "vdpbf16p": 579, "avx512_bf16": 579, "consequ": 579, "persist": 580, "brought": [580, 582, 589, 607], "tf2": 580, "h5": 580, "onnx_ml_pb2": 580, "hybridblock": 580, "0000": 580, "saved_result": 580, "cuda": [581, 583], "subsequ": [581, 598], "acquir": 581, "analysi": [581, 598, 610], "heurist": [581, 598], "great": 581, "facilit": 581, "enhanc": [581, 608], "autocast": 581, "simultan": [581, 601, 606], "my_model": 581, "no_grad": 581, "memory_format": 581, "112": [581, 615], "plugin": [581, 599], "jupyterlab": [581, 587, 589, 591, 595], "aw": [581, 589, 605, 615], "amazon": [581, 589], "sagemak": [581, 589], "inlin": [581, 586, 589], "neural_cod": [581, 583, 585, 586, 587, 589], "superbench": 581, "enjoi": [582, 586, 589], "reload": [582, 599], "modern": 583, "democrat": [583, 605], "programm": [583, 589, 598], "nano_bf16_channels_last": 583, "resnet18": [583, 615], "nano_bf16_ipex_channels_last": 583, "nano_bf16_ipex": 583, "nano_bf16": 583, "nano_fp32_channels_last": 583, "nano_fp32_ipex_channels_last": 583, "nano_fp32_ipex": 583, "nano_gpu_to_cpu": 583, "nano_int8": 583, "nano_jit_bf16_channels_last": 583, "nano_jit_bf16_ipex_channels_last": 583, "nano_jit_bf16_ipex": 583, "nano_jit_bf16": 583, "nano_jit_fp32_channels_last": 583, "nano_jit_fp32_ipex_channels_last": 583, "nano_jit_fp32_ipex": 583, "nano_jit_fp32": 583, "nano_onnxruntime_fp32": 583, "nano_onnxruntime_int8_qlinear": 583, "openvino": 583, "nano_openvino_fp32": 583, "nano_openvino_int8": 583, "bc": [584, 592], "conda_prefix": 584, "echo": 584, "tradit": [584, 604], "libjemalloc": 584, "libiomp5": 584, "home": 584, "lib": 584, "ld_preload": 584, "malloc_conf": 584, "oversize_threshold": 584, "background_thread": 584, "metadata_thp": 584, "dirty_decay_m": 584, "9000000000": 584, "muzzy_decay_m": 584, "kmp_affin": 584, "kmp_blocktim": 584, "dnnl_primitive_cache_capac": 584, "sy": 584, "cpufreq": 584, "scaling_governor": 584, "powersav": 584, "sudo": 584, "tee": 584, "pytorch_jit_script": [585, 588], "pytorch_channels_last": [585, 588], "run_bench": 585, "patch": [585, 598], "patch_path": 585, "your_patch_path": 585, "sweep": 585, "sweep_object": 585, "bench_config": 585, "bench_featur": 585, "sai": 586, "run_glu": [586, 587], "task_nam": [586, 587], "do_ev": [586, 587], "run_glue_optim": 586, "opt": 586, "static_ipex": 586, "auto_qu": 587, "v4": [587, 615], "albert": [587, 615], "sst2": [587, 615], "alexnet": [587, 615], "pytorch_amp": 588, "optimize_for_infer": 588, "pytorch_jit_trac": 588, "pytorch_jit_script_ofi": 588, "pytorch_jit_trace_ofi": 588, "torchdynamo": 588, "pytorch_torchdynamo_jit_script": 588, "pytorch_torchdynamo_jit_trac": 588, "pytorch_torchdynamo_jit_script_ofi": 588, "pytorch_torchdynamo_jit_trace_ofi": 588, "pytorch_inc_bf16": 588, "pytorch_inc_static_quant_fx": 588, "pytorch_inc_static_quant_ipex": 588, "pytorch_inc_dynamic_qu": 588, "pytorch_ipex_fp32": 588, "pytorch_ipex_bf16": 588, "pytorch_ipex_int8_static_qu": 588, "pytorch_ipex_int8_dynamic_qu": 588, "alibaba": [588, 595, 596, 605], "blade": 588, "disc": 588, "pytorch_aliblad": 588, "lightn": 588, "pytorch_lightning_bf16_cpu": 588, "tensorflow_amp": 588, "keras_amp": 588, "tensorflow_inc": 588, "keras_inc": 588, "onnx_inc_static_quant_qlinear": 588, "onnx_inc_static_quant_qdq": 588, "onnx_inc_dynamic_qu": 588, "optimum": [588, 589], "pytorch_inc_huggingface_optimum_stat": 588, "pytorch_inc_huggingface_optimum_dynam": 588, "intel_extension_for_transform": 588, "bigdl": [588, 589], "nano": [588, 589], "nano_": 588, "inc_auto": 588, "delight": 589, "announc": 589, "trainer": 589, "500": 589, "speed": [589, 604, 605, 607], "innov": [589, 605], "isa": 589, "xpu": 589, "delta": 589, "acc_delta": 589, "int8_acc": 589, "fp32_acc": 589, "ext": [591, 593, 595, 596, 597], "nodej": [591, 595], "jlpm": [591, 595], "yarn": [591, 595], "npm": [591, 592, 595], "lieu": [591, 595], "labextens": [591, 592, 595], "typescript": [591, 595], "watch": [591, 595], "termin": [591, 592, 595], "immedi": [591, 595], "rebuilt": [591, 595], "dev": [591, 595], "symlink": [591, 595], "blank": 592, "cell": 592, "gain": [592, 601, 605], "mkl": 592, "jemalloc": 592, "pip3": 592, "headless": 592, "pyproject": [593, 596], "toml": [593, 596], "twine": [593, 596], "whl": [593, 596], "dist": [593, 596], "sdist": [593, 596], "bdist_wheel": [593, 596], "frontend": [593, 596], "login": [593, 596, 610], "cut": [593, 596], "fork": [593, 596], "admin_github_token": [593, 596], "pypi_token": [593, 596], "npm_token": [593, 596], "secret": [593, 596], "draft": [593, 596], "changelog": [593, 596, 597], "pkg": [593, 596], "bot": [593, 596], "pick": [593, 596, 599], "feedstock": [593, 596], "hatch": 596, "notabl": 597, "vscode": [597, 599], "daili": 598, "advantag": [598, 606], "remot": 598, "market": 598, "sidebar": 598, "hover": 598, "diff": 598, "manifest": 599, "declar": 599, "palett": 599, "veri": [599, 607, 613], "registercommand": 599, "amodio": 599, "tsl": 599, "dbaeumer": 599, "eslint": 599, "press": 599, "f5": 599, "ctrl": [599, 615], "hello": 599, "world": 599, "breakpoint": 599, "consol": 599, "relaunch": 599, "toolbar": 599, "node_modul": 599, "viewlet": 599, "dropdown": 599, "startup": 599, "bundl": 599, "marketplac": [599, 605], "multi_object": 600, "peak": 600, "arbitrari": 601, "benefit": [601, 603], "distillation_criterion": 601, "d_conf": 601, "p_conf": 601, "platinum": [602, 615], "8358": 602, "manufactur": 602, "m50cyp2sbstd": 602, "se5c620": 602, "86b": 602, "0005": 602, "2202160810": 602, "microcod": 602, "0xd000332": 602, "irq": 602, "60ghz": 602, "6chz": 602, "perf": 602, "512gb": 602, "16x32gb": 602, "ddr4": 602, "3200": 602, "mt": 602, "nic": 602, "1x": 602, "ethernet": 602, "100mb": 602, "i350": 602, "gigabit": 602, "drive": 602, "intel_ssdsckkb48": 602, "447": 602, "1g": 602, "factor": [602, 615], "publicli": 602, "degre": 602, "mark": 602, "trademark": 602, "art": [603, 604], "increasingli": [603, 604], "crucial": [603, 604], "salient": [603, 604], "nonzero": [603, 604], "irregular": [603, 604], "anywher": [603, 604], "2in4": 603, "amper": 603, "oc": 603, "kh": 603, "kw": 603, "fastform": 603, "finetun": [603, 604, 615], "downstream": [603, 604], "formula": [603, 604], "exemplifi": 603, "complement": 603, "pruner1": 603, "layer1": 603, "layer3": 603, "rate": [603, 607], "pruner2": 603, "snip_momentum_progress": 603, "layer2": 603, "num_train_epoch": 603, "lr_schedul": 603, "mention": 603, "cv": [603, 604], "grown": 604, "unpreced": 604, "smooth": 604, "cube": 604, "discourag": 604, "idea": [604, 613], "penal": 604, "l2": 604, "parametr": 604, "namhoon": 604, "lee": 604, "thalaiyasingam": 604, "ajanthan": 604, "philip": 604, "torr": 604, "2019": 604, "tencent": 605, "deepen": 605, "cloud": 605, "foundat": 605, "intellig": 605, "applianc": 605, "bitnami": 605, "nov": 605, "signific": [605, 607], "sota": 605, "oct": 605, "plug": 605, "twitter": 605, "linkedin": 605, "zone": 605, "land": 605, "gcp": 605, "azur": 605, "pat": 605, "keynot": 605, "intelon": 605, "sep": 605, "chines": 605, "aug": 605, "purif": 605, "sacrif": 605, "jun": 605, "partner": 605, "apr": 605, "ecosystem": 605, "mar": 605, "feb": 605, "jan": 605, "bilibili": 605, "ml": 605, "doubl": 605, "mlperf": [605, 615], "reconstruct": 605, "abound": 605, "lpot": [605, 609], "cern": 605, "gan": 605, "3dgan": 605, "4th": 605, "iml": 605, "workshop": 605, "highli": 605, "intelcaff": 605, "aris": 606, "tell": 606, "henc": 606, "post_training_dynamic_qu": [606, 613], "quant_aware_train": 606, "initial_spars": [606, 614], "prune_typ": [606, 614], "basic_magnitud": [606, 614], "start_epoch": [606, 614], "end_epoch": [606, 614], "update_frequ": 606, "prune_domain": 606, "tile_pattern_1x1": 606, "graph_optimization_level": 606, "disable_al": 606, "invent": 607, "int4": 607, "cost": 607, "theoret": 607, "affin": 607, "zeropoint": 607, "asymmetr": [607, 613], "earli": [607, 613, 614], "overflow": 607, "solv": [607, 609], "fbgemm": 607, "unseen": 607, "enough": 607, "peopl": 607, "emul": 607, "mimic": 607, "fact": 607, "ultim": 607, "pain": 607, "lossi": 607, "understand": [607, 611], "philosophi": 607, "val_dataset": 607, "val_dataload": 607, "worker": 607, "ping_memori": 607, "val_load": 607, "avg": 607, "bf16wrapper": 608, "retrac": 608, "site": 609, "assist": 609, "comparison": [609, 611], "sed": 609, "your_script": 609, "hyperparamet": [610, 613], "backbon": 610, "interact": 610, "sigopt_api_token": [610, 613], "sigopt_project_id": [610, 613], "sigopt_experiment_id": 610, "nc": [610, 613], "certain": 610, "suffici": 610, "ordinari": 610, "capac": 610, "sigopt_experiment_nam": [610, 613], "mobilenet": [610, 615], "8266": 610, "8372": 610, "2132": 610, "83": [610, 615], "7495": 610, "8299": 610, "8294": 610, "85": [610, 615], "0837": 610, "8291": 610, "4469": 610, "discov": 611, "why": 611, "valuabl": 611, "instrument": 611, "writer": 611, "_pre_eval_hook": 611, "submodul": 611, "whitelist": 611, "_recordingobserv": 611, "output_tensors_dict": 611, "current_it": 611, "get_tensor_valu": 611, "_observer_forward_hook": 611, "activation_post_process": 611, "_add_observer_": 611, "named_children": 611, "leaf": 611, "add_modul": 611, "register_forward_hook": 611, "dump_tim": 611, "summarywrit": 611, "_acc": 611, "tune_": 611, "add_graph": 611, "get_observer_dict": 611, "observer_dict": 611, "is_quant": 611, "add_histogram": 611, "bind_al": 611, "logdir_spec": 611, "tune_0_acc0": 611, "tune_1": 611, "tune_1_acc0": 611, "79": [611, 615], "four": 611, "baseline_acc_0": 611, "776": 611, "tune_1_acc_0": 611, "095": 611, "runs_v3": 611, "image_recognit": 611, "run_tuning_dump_tensor": 611, "sh": 611, "inceptionv3": 611, "v0": 611, "cg": 611, "conv0": 611, "op_wis": [611, 614], "bash": 611, "run_tun": 611, "topologi": 611, "inception_v3": 611, "dataset_loc": 611, "inceptionv3_fp32_pretrained_model": 611, "nc_inceptionv3": 611, "inceptionv3_dump_tensor": 611, "poor": 611, "disappear": 611, "centercrop": 612, "randomresizedcrop": 612, "randomcrop": 612, "cropres": 612, "decodeimag": 612, "jpeg": 612, "encodejp": 612, "alignimagechannel": 612, "68": [612, 615], "116": 612, "78": [612, 615], "103": 612, "94": [612, 615], "017": 612, "bilinearimagenet": [612, 614], "totensor": 612, "topilimag": 612, "padding_mod": 612, "border": 612, "colorjitt": 612, "bright": 612, "satur": 612, "hue": 612, "jitter": 612, "tondarrai": 612, "human": 613, "post_training_auto_qu": 613, "ii": 613, "iii": 613, "classic": 613, "primari": 613, "spent": 613, "hawq_v2_loss": 613, "model_loss": 613, "compli": 613, "focu": 613, "short": 613, "never": 613, "loglevel": 613, "endlessli": 613, "perspect": 613, "smbo": 613, "appl": 613, "surrog": 613, "divid": 613, "quantil": 613, "x1": 613, "x2": 613, "densiti": 613, "parzen": 613, "greatest": 613, "hour": 613, "dai": 613, "abctunestrategi": 613, "overridden": 613, "mobilenet_v1": 614, "onnxrt_integ": 614, "onnxrt_qlinear": 614, "image_tensor": 614, "subsect": 614, "model_wis": 614, "conv1": 614, "hyper": 614, "40": [614, 615], "06": [614, 615], "beta_1": 614, "beta_2": 614, "999": 614, "sparsecategoricalcrossentropi": 614, "reduct": 614, "sum_over_batch_s": 614, "from_logit": 614, "54": [614, 615], "19": [614, 615], "90": [614, 615], "nesterov": 614, "weight_decai": 614, "overal": 614, "8380": 615, "performancethroughput": 615, "sec": 615, "efficientnet": 615, "76": 615, "74": 615, "91": 615, "43": 615, "69": 615, "32x": 615, "cnn": 615, "incept": 615, "37": 615, "65": 615, "38": 615, "77": 615, "53": 615, "62": 615, "57x": 615, "46": 615, "61": 615, "58x": 615, "resnet101": 615, "39": 615, "63": 615, "11x": 615, "71": 615, "51x": 615, "26": 615, "59": 615, "23": 615, "06x": 615, "25x": 615, "70": 615, "44": 615, "00": 615, "163": 615, "133": 615, "22x": 615, "73": 615, "97": 615, "49": 615, "111": 615, "20x": 615, "v3": 615, "67": 615, "43x": 615, "18": 615, "56": 615, "53x": 615, "36": 615, "33x": 615, "44x": 615, "374": 615, "226": 615, "66x": 615, "92": 615, "41x": 615, "fashion": 615, "359": 615, "244": 615, "47x": 615, "172": 615, "66": 615, "98x": 615, "153": 615, "76x": 615, "151": 615, "35x": 615, "26x": 615, "72": 615, "99": 615, "56x": 615, "82": 615, "93x": 615, "vgg16": 615, "89": 615, "178": 615, "14x": 615, "vgg19": 615, "156": 615, "18x": 615, "23x": 615, "barthez": 615, "81": 615, "86": 615, "82x": 615, "203": 615, "01x": 615, "216": 615, "102": 615, "10x": 615, "218": 615, "stsb": 615, "57": 615, "48": 615, "49x": 615, "93": 615, "70x": 615, "50x": 615, "40x": 615, "blendcnn": 615, "3878": 615, "3717": 615, "04x": 615, "camembert": 615, "188": 615, "91x": 615, "deberta": 615, "124": 615, "81x": 615, "347": 615, "73x": 615, "382": 615, "198": 615, "flaubert": 615, "561": 615, "35": 615, "370": 615, "52x": 615, "hubert": 615, "84": 615, "36x": 615, "409": 615, "181": 615, "longform": 615, "28x": 615, "mbart": 615, "16x": 615, "639": 615, "490": 615, "31x": 615, "lvwerra": 615, "pegasu": 615, "samsum": 615, "19x": 615, "peleenet": 615, "419": 615, "316": 615, "686": 615, "332": 615, "07x": 615, "611": 615, "333": 615, "83x": 615, "327": 615, "162": 615, "resnext101_32x8d": 615, "175": 615, "88x": 615, "197": 615, "99x": 615, "se_resnext50_32x4d": 615, "308": 615, "144": 615, "13x": 615, "squeezebert": 615, "186": 615, "155": 615, "78x": 615, "transfo": 615, "xl": 615, "37x": 615, "wave2vec2": 615, "60": 615, "58": 615, "21x": 615, "114": 615, "15x": 615, "yolo": 615, "29x": 615, "690": 615, "330": 615, "09x": 615, "614": 615, "334": 615, "84x": 615, "54x": 615, "410": 615, "168": 615, "resnext101_32x16d_wsl": 615, "1189": 615, "680": 615, "75x": 615, "677": 615, "381": 615, "59x": 615, "960": 615, "469": 615, "05x": 615, "962": 615, "466": 615, "arcfac": 615, "235": 615, "130": 615, "294": 615, "34x": 615, "604": 615, "51": 615, "80x": 615, "caffenet": 615, "1501": 615, "536": 615, "1493": 615, "533": 615, "1372": 615, "485": 615, "541": 615, "480": 615, "1250": 615, "753": 615, "1130": 615, "748": 615, "emot": 615, "ferplu": 615, "336": 615, "65x": 615, "fcn": 615, "googlenet": 615, "740": 615, "587": 615, "770": 615, "567": 615, "824": 615, "601": 615, "819": 615, "597": 615, "45x": 615, "613": 615, "506": 615, "2454": 615, "1543": 615, "2164": 615, "1564": 615, "38x": 615, "2147": 615, "1046": 615, "1877": 615, "1054": 615, "mobilenetv2": 615, "2751": 615, "1797": 615, "2656": 615, "1835": 615, "7615": 615, "7646": 615, "764": 615, "901": 615, "434": 615, "141": 615, "7614": 615, "575": 615, "952": 615, "433": 615, "7226": 615, "7229": 615, "761": 615, "432": 615, "615": 615, "722": 615, "032": 615, "894": 615, "885": 615, "454": 615, "95x": 615, "603": 615, "455": 615, "644": 615, "636": 615, "254": 615, "791": 615, "shufflenet": 615, "2298": 615, "55": 615, "1480": 615, "55x": 615, "1951": 615, "1490": 615, "squeezenet": 615, "2588": 615, "1605": 615, "61x": 615, "2566": 615, "1936": 615, "725": 615, "570": 615, "27x": 615, "666": 615, "539": 615, "641": 615, "519": 615, "633": 615, "492": 615, "542": 615, "401": 615, "68x": 615, "tini": 615, "yolov3": 615, "648": 615, "518": 615, "221": 615, "319": 615, "307": 615, "30x": 615, "yolov4": 615, "zfnet": 615, "459": 615, "261": 615, "460": 615, "264": 615, "74x": 615, "441": 615, "337": 615, "272": 615, "211": 615, "152": 615, "423": 615, "180": 615, "311": 615, "69x": 615, "taskdataset": 615, "accuracyspars": 615, "ratiospars": 615, "commentsbalanc": 615, "unbalanc": 615, "classificationimagenet": 615, "76top": 615, "13top": 615, "magnitudepost": 615, "magnitudequant": 615, "answeringsquad": 615, "34f1": 615, "2x1": 615, "lassounbalanc": 615, "classificationmnli": 615, "mm": 615, "allbalanc": 615, "classificationsst": 615, "32accuraci": 615, "sensitivitybalanc": 615, "classificationqqp": 615, "classificationqnli": 615, "54accuraci": 615, "em": 615, "87f1": 615, "momentumunbalanc": 615, "momentumbalanc": 615, "90f1": 615, "59f1": 615, "23f1": 615, "classificationmrpc": 615, "52f1": 615, "26f1": 615, "61accuraci": 615, "7965": 615, "wideresnet40": 615, "9522": 615, "8178": 615, "0213": 615, "8235": 615, "027": 615, "5494": 615, "7153": 615, "5540": 615, "0046": 615, "5523": 615, "0029": 615, "vgg": 615, "7022": 615, "7415": 615, "7025": 615, "0003": 615, "6739": 615, "7399": 615, "6845": 615, "0106": 615, "7034": 615, "8382": 615, "bilstm": 615, "sst": 615, "8314": 615, "9403": 615, "9048": 615, "0734": 615, "7323": 615, "8256": 615, "8084": 615, "8814": 615, "7442": 615, "8371": 615, "0119": 615, "0115": 615, "tinybert": 615, "8018": 615, "8044": 615, "8363": 615, "8411": 615, "8025": 615, "8074": 615, "0007": 615, "0030": 615, "8626": 615, "8213": 615, "9091": 615, "8782": 615, "8684": 615, "8259": 615, "0058": 615, "distilroberta": 615, "6057": 615, "6455": 615, "6187": 615, "0130": 615, "c6i": 615, "2xlarg": 615, "c6a": 615, "c6g": 615, "a100cuda": 615}, "objects": {"": [[49, 0, 0, "-", "644ec953a7dc_pruning_support"], [50, 0, 0, "-", "6ece06672ed3_v1_14"], [51, 0, 0, "-", "6f0d0f71d92e_v1_13"], [52, 0, 0, "-", "9e89549a08c8_v1_11"], [53, 0, 0, "-", "block_mask"], [54, 0, 0, "-", "env"], [317, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[50, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [50, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[54, 1, 1, "", "run_migrations_offline"], [54, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[317, 2, 1, "", "Benchmark"], [317, 2, 1, "", "DistillationConfig"], [317, 2, 1, "", "PostTrainingQuantConfig"], [317, 2, 1, "", "QuantizationAwareTrainingConfig"], [317, 2, 1, "", "WeightPruningConfig"], [56, 0, 0, "-", "adaptor"], [193, 0, 0, "-", "algorithm"], [195, 0, 0, "-", "benchmark"], [198, 0, 0, "-", "conf"], [200, 0, 0, "-", "config"], [201, 0, 0, "-", "contrib"], [226, 0, 0, "-", "data"], [275, 0, 0, "-", "experimental"], [324, 0, 0, "-", "metric"], [326, 0, 0, "-", "mix_precision"], [328, 0, 0, "-", "model"], [336, 0, 0, "-", "objective"], [338, 0, 0, "-", "pruner"], [352, 0, 0, "-", "quantization"], [317, 1, 1, "", "set_random_seed"], [317, 1, 1, "", "set_tensorboard"], [317, 1, 1, "", "set_workspace"], [359, 0, 0, "-", "strategy"], [368, 0, 0, "-", "training"], [372, 0, 0, "-", "utils"], [514, 0, 0, "-", "ux"], [560, 0, 0, "-", "version"]], "neural_compressor.Benchmark": [[317, 3, 1, "", "dataloader"], [317, 3, 1, "", "metric"], [317, 3, 1, "", "postprocess"]], "neural_compressor.DistillationConfig": [[317, 4, 1, "", "criterion"], [317, 4, 1, "", "optimizer"], [317, 4, 1, "", "teacher_model"]], "neural_compressor.PostTrainingQuantConfig": [[317, 4, 1, "", "approach"], [317, 4, 1, "", "tuning_criterion"]], "neural_compressor.QuantizationAwareTrainingConfig": [[317, 4, 1, "", "approach"]], "neural_compressor.WeightPruningConfig": [[317, 4, 1, "", "weight_compression"]], "neural_compressor.adaptor": [[55, 0, 0, "-", "adaptor"], [57, 0, 0, "-", "keras"], [58, 0, 0, "-", "keras_utils"], [60, 0, 0, "-", "mxnet"], [61, 0, 0, "-", "mxnet_utils"], [63, 0, 0, "-", "onnxrt"], [65, 0, 0, "-", "ox_utils"], [88, 0, 0, "-", "pytorch"], [89, 0, 0, "-", "query"], [90, 0, 0, "-", "tensorflow"], [150, 0, 0, "-", "tf_utils"], [187, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[55, 2, 1, "", "Adaptor"], [55, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[55, 3, 1, "", "convert"], [55, 3, 1, "", "evaluate"], [55, 3, 1, "", "inspect_tensor"], [55, 3, 1, "", "quantize"], [55, 3, 1, "", "quantize_input"], [55, 3, 1, "", "query_fused_patterns"], [55, 3, 1, "", "query_fw_capability"], [55, 3, 1, "", "save"], [55, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[57, 2, 1, "", "KerasAdaptor"], [57, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[57, 3, 1, "", "convert"], [57, 3, 1, "", "evaluate"], [57, 3, 1, "", "get_optype_wise_ability"], [57, 3, 1, "", "inspect_tensor"], [57, 3, 1, "", "quantize"], [57, 3, 1, "", "quantize_input"], [57, 3, 1, "", "query_fw_capability"], [57, 3, 1, "", "save"], [57, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[57, 3, 1, "", "get_op_types"], [57, 3, 1, "", "get_op_types_by_precision"], [57, 3, 1, "", "get_precisions"], [57, 3, 1, "", "get_quantization_capability"], [57, 3, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[59, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[60, 2, 1, "", "MXNetQuery"], [60, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MXNetQuery": [[60, 3, 1, "", "get_fuse_patterns"], [60, 3, 1, "", "get_mixed_precision_combination"], [60, 3, 1, "", "get_op_types"], [60, 3, 1, "", "get_precisions"], [60, 3, 1, "", "get_quantization_capability"], [60, 3, 1, "", "get_version"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[60, 3, 1, "", "evaluate"], [60, 3, 1, "", "inspect_tensor"], [60, 3, 1, "", "quantize"], [60, 3, 1, "", "query_fw_capability"], [60, 3, 1, "", "recover_tuned_model"], [60, 3, 1, "", "save"], [60, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[62, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[62, 2, 1, "", "CalibCollector"], [62, 2, 1, "", "CalibData"], [62, 2, 1, "", "CollectorBase"], [62, 2, 1, "", "DataIterLoader"], [62, 2, 1, "", "DataLoaderWrap"], [62, 2, 1, "", "NameCollector"], [62, 2, 1, "", "OpType"], [62, 2, 1, "", "TensorCollector"], [62, 1, 1, "", "amp_convert"], [62, 1, 1, "", "calib_model"], [62, 1, 1, "", "check_mx_version"], [62, 1, 1, "", "combine_capabilities"], [62, 1, 1, "", "create_data_example"], [62, 1, 1, "", "distribute_calib_tensors"], [62, 1, 1, "", "ensure_list"], [62, 1, 1, "", "fuse"], [62, 1, 1, "", "get_framework_name"], [62, 1, 1, "", "is_model_quantized"], [62, 1, 1, "", "isiterable"], [62, 1, 1, "", "make_module"], [62, 1, 1, "", "make_nc_model"], [62, 1, 1, "", "make_symbol_block"], [62, 1, 1, "", "ndarray_to_device"], [62, 1, 1, "", "parse_tune_config"], [62, 1, 1, "", "prepare_dataloader"], [62, 1, 1, "", "prepare_model"], [62, 1, 1, "", "prepare_model_data"], [62, 1, 1, "", "quantize_sym_model"], [62, 1, 1, "", "query_quantizable_nodes"], [62, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.mxnet_utils.util.CalibCollector": [[62, 3, 1, "", "calc_kl_th_dict"], [62, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.CalibData": [[62, 4, 1, "", "min_max_dict"], [62, 3, 1, "", "post_collect"]], "neural_compressor.adaptor.mxnet_utils.util.CollectorBase": [[62, 3, 1, "", "collect_gluon"], [62, 3, 1, "", "collect_module"], [62, 3, 1, "", "post_batch"], [62, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.mxnet_utils.util.NameCollector": [[62, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.TensorCollector": [[62, 3, 1, "", "collect_gluon"], [62, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.onnxrt": [[63, 2, 1, "", "ONNXRTQuery"], [63, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [63, 2, 1, "", "ONNXRT_QDQAdaptor"], [63, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [63, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[63, 3, 1, "", "get_graph_optimization"], [63, 3, 1, "", "get_op_types"], [63, 3, 1, "", "get_op_types_by_precision"], [63, 3, 1, "", "get_precisions"], [63, 3, 1, "", "get_quantization_capability"], [63, 3, 1, "", "get_version"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[63, 3, 1, "", "evaluate"], [63, 3, 1, "", "inspect_tensor"], [63, 3, 1, "", "quantize"], [63, 3, 1, "", "query_fw_capability"], [63, 3, 1, "", "recover"], [63, 3, 1, "", "save"], [63, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.ox_utils": [[64, 0, 0, "-", "calibration"], [77, 0, 0, "-", "operators"], [86, 0, 0, "-", "quantizer"], [87, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[64, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[64, 3, 1, "", "augment_graph"], [64, 3, 1, "", "calculate_quantization_params"], [64, 3, 1, "", "calculate_scale_zeropoint"], [64, 3, 1, "", "dump_calibration"], [64, 3, 1, "", "dump_minmax"], [64, 3, 1, "", "dump_tensor"], [64, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[66, 0, 0, "-", "activation"], [67, 0, 0, "-", "argmax"], [68, 0, 0, "-", "attention"], [69, 0, 0, "-", "binary_op"], [70, 0, 0, "-", "concat"], [71, 0, 0, "-", "conv"], [72, 0, 0, "-", "direct_q8"], [73, 0, 0, "-", "embed_layernorm"], [74, 0, 0, "-", "gather"], [75, 0, 0, "-", "gavgpool"], [76, 0, 0, "-", "gemm"], [78, 0, 0, "-", "lstm"], [79, 0, 0, "-", "matmul"], [80, 0, 0, "-", "maxpool"], [81, 0, 0, "-", "ops"], [82, 0, 0, "-", "pad"], [83, 0, 0, "-", "pooling"], [84, 0, 0, "-", "resize"], [85, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[66, 2, 1, "", "ActivationOperator"], [66, 2, 1, "", "QActivationOperator"], [66, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator": [[66, 3, 1, "", "convert"], [66, 3, 1, "", "convert_check"], [66, 3, 1, "", "quantize"], [66, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator": [[66, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator": [[66, 3, 1, "", "quantize"], [66, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[67, 2, 1, "", "ArgMaxOperator"], [67, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator": [[67, 3, 1, "", "convert"], [67, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[68, 2, 1, "", "AttentionOperator"], [68, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator": [[68, 3, 1, "", "convert"], [68, 3, 1, "", "convert_check"], [68, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator": [[68, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[69, 2, 1, "", "BinaryOperator"], [69, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator": [[69, 3, 1, "", "convert"], [69, 3, 1, "", "convert_check"], [69, 3, 1, "", "quantize"], [69, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator": [[69, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[70, 2, 1, "", "ConcatOperator"], [70, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator": [[70, 3, 1, "", "cast"], [70, 3, 1, "", "convert"], [70, 3, 1, "", "convert_check"], [70, 3, 1, "", "quantize"], [70, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator": [[70, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[71, 2, 1, "", "ConvOperator"], [71, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator": [[71, 3, 1, "", "convert"], [71, 3, 1, "", "convert_check"], [71, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator": [[71, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[72, 2, 1, "", "Direct8BitOperator"], [72, 2, 1, "", "DirectCastOperator"], [72, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator": [[72, 3, 1, "", "cast"], [72, 3, 1, "", "convert"], [72, 3, 1, "", "convert_check"], [72, 3, 1, "", "quantize"], [72, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator": [[72, 3, 1, "", "cast"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[73, 2, 1, "", "EmbedLayerNormalizationOperator"], [73, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator": [[73, 3, 1, "", "convert"], [73, 3, 1, "", "convert_check"], [73, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator": [[73, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[74, 2, 1, "", "GatherOperator"], [74, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator": [[74, 3, 1, "", "convert"], [74, 3, 1, "", "convert_check"], [74, 3, 1, "", "quantize"], [74, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[75, 2, 1, "", "GlobalAveragePoolOperator"], [75, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator": [[75, 3, 1, "", "convert"], [75, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator": [[75, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[76, 2, 1, "", "GemmOperator"], [76, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator": [[76, 3, 1, "", "convert"], [76, 3, 1, "", "convert_check"], [76, 3, 1, "", "quantize"], [76, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator": [[76, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[78, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator": [[78, 3, 1, "", "convert"], [78, 3, 1, "", "convert_check"], [78, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[79, 2, 1, "", "MatMulOperator"], [79, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator": [[79, 3, 1, "", "convert"], [79, 3, 1, "", "convert_check"], [79, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator": [[79, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[80, 2, 1, "", "MaxPoolOperator"], [80, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator": [[80, 3, 1, "", "convert"], [80, 3, 1, "", "convert_check"], [80, 3, 1, "", "quantize"], [80, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[81, 2, 1, "", "Operator"], [81, 2, 1, "", "QOperator"], [81, 1, 1, "", "op_registry"], [81, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.ops.Operator": [[81, 3, 1, "", "cast"], [81, 3, 1, "", "convert"], [81, 3, 1, "", "convert_check"], [81, 3, 1, "", "quantize"], [81, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops.QOperator": [[81, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[82, 2, 1, "", "PadOperator"], [82, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator": [[82, 3, 1, "", "convert"], [82, 3, 1, "", "convert_check"], [82, 3, 1, "", "quantize"], [82, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[83, 2, 1, "", "PoolOperator"], [83, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator": [[83, 3, 1, "", "convert"], [83, 3, 1, "", "convert_check"], [83, 3, 1, "", "quantize"], [83, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator": [[83, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[84, 2, 1, "", "QResizeOperator"], [84, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator": [[84, 3, 1, "", "convert"], [84, 3, 1, "", "convert_check"], [84, 3, 1, "", "quantize"], [84, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[85, 2, 1, "", "QSplitOperator"], [85, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator": [[85, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator": [[85, 3, 1, "", "cast"], [85, 3, 1, "", "convert"], [85, 3, 1, "", "convert_check"], [85, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.quantizer": [[86, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer.Quantizer": [[86, 3, 1, "", "check_opset_version"], [86, 3, 1, "", "convert_qdq_to_operator_oriented"], [86, 3, 1, "", "dequantize_tensor"], [86, 3, 1, "", "dtype_cast"], [86, 3, 1, "", "get_bias_add_nodes"], [86, 3, 1, "", "insert_qdq"], [86, 3, 1, "", "is_valid_quantize_weight"], [86, 3, 1, "", "merge_dedicated_qdq_pair"], [86, 3, 1, "", "quantize_bias"], [86, 3, 1, "", "quantize_bias_tensor"], [86, 3, 1, "", "quantize_inputs"], [86, 3, 1, "", "quantize_model"], [86, 3, 1, "", "quantize_outputs"], [86, 3, 1, "", "quantize_weight_per_channel"], [86, 3, 1, "", "quantize_weights_per_channel"], [86, 3, 1, "", "remove_redundant_pairs"], [86, 3, 1, "", "should_cast"], [86, 3, 1, "", "should_convert"], [86, 3, 1, "", "should_quantize"], [86, 3, 1, "", "tensor_proto_to_array"]], "neural_compressor.adaptor.ox_utils.util": [[87, 2, 1, "", "QuantFormat"], [87, 2, 1, "", "QuantType"], [87, 2, 1, "", "QuantizationMode"], [87, 2, 1, "", "QuantizedInitializer"], [87, 2, 1, "", "QuantizedValue"], [87, 2, 1, "", "QuantizedValueType"], [87, 2, 1, "", "ValueInfo"], [87, 1, 1, "", "attribute_to_kwarg"], [87, 1, 1, "", "calculate_scale_zp"], [87, 1, 1, "", "cast_tensor"], [87, 1, 1, "", "collate_preds"], [87, 1, 1, "", "dequantize_data"], [87, 1, 1, "", "dequantize_data_with_scale_zero"], [87, 1, 1, "", "dtype_to_name"], [87, 1, 1, "", "find_by_name"], [87, 1, 1, "", "is_B_transposed"], [87, 1, 1, "", "make_dquant_node"], [87, 1, 1, "", "make_quant_node"], [87, 1, 1, "", "quantize_data"], [87, 1, 1, "", "quantize_data_per_channel"], [87, 1, 1, "", "quantize_data_with_scale_zero"], [87, 1, 1, "", "quantize_nparray"], [87, 1, 1, "", "remove_init_from_model_input"], [87, 1, 1, "", "split_shared_bias"]], "neural_compressor.adaptor.pytorch": [[88, 2, 1, "", "PyTorchAdaptor"], [88, 2, 1, "", "PyTorchQuery"], [88, 2, 1, "", "PyTorch_FXAdaptor"], [88, 2, 1, "", "PyTorch_IPEXAdaptor"], [88, 2, 1, "", "TemplateAdaptor"], [88, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[88, 3, 1, "", "evaluate"], [88, 3, 1, "", "get_non_quant_modules"], [88, 3, 1, "", "inspect_tensor"], [88, 3, 1, "", "is_fused_child"], [88, 3, 1, "", "is_fused_op"], [88, 3, 1, "", "is_last_fused_child"], [88, 3, 1, "", "quantize"], [88, 3, 1, "", "query_fw_capability"], [88, 3, 1, "", "save"], [88, 3, 1, "", "set_tensor"], [88, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[88, 3, 1, "", "get_op_types"], [88, 3, 1, "", "get_op_types_by_precision"], [88, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[88, 3, 1, "", "calculate_op_sensitivity"], [88, 3, 1, "", "convert_sub_graph"], [88, 3, 1, "", "evaluate"], [88, 3, 1, "", "fuse_fx_model"], [88, 3, 1, "", "prepare_sub_graph"], [88, 3, 1, "", "quantize"], [88, 3, 1, "", "query_fw_capability"], [88, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[88, 3, 1, "", "evaluate"], [88, 3, 1, "", "inspect_tensor"], [88, 3, 1, "", "quantize"], [88, 3, 1, "", "query_fw_capability"], [88, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[88, 3, 1, "", "calculate_hessian_trace"], [88, 3, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[89, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[89, 3, 1, "", "get_fuse_patterns"], [89, 3, 1, "", "get_mixed_precision_combination"], [89, 3, 1, "", "get_op_types"], [89, 3, 1, "", "get_precisions"], [89, 3, 1, "", "get_quantization_capability"], [89, 3, 1, "", "get_version"], [89, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[90, 2, 1, "", "TensorFlowAdaptor"], [90, 2, 1, "", "TensorflowQuery"], [90, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[90, 3, 1, "", "calculate_op_sensitivity"], [90, 3, 1, "", "convert"], [90, 3, 1, "", "diagnosis_helper"], [90, 3, 1, "", "evaluate"], [90, 3, 1, "", "fused_node_mapping"], [90, 3, 1, "", "get_optype_wise_ability"], [90, 3, 1, "", "get_output_op_names"], [90, 3, 1, "", "inspect_activation"], [90, 3, 1, "", "inspect_tensor"], [90, 3, 1, "", "inspect_weight_and_bias"], [90, 3, 1, "", "qat_convert"], [90, 3, 1, "", "quantize"], [90, 3, 1, "", "quantize_input"], [90, 3, 1, "", "query_fw_capability"], [90, 3, 1, "", "recover_tuned_model"], [90, 3, 1, "", "save"], [90, 3, 1, "", "set_tensor"], [90, 3, 1, "", "train"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[90, 3, 1, "", "generate_internal_patterns"], [90, 3, 1, "", "get_bf16_patterns"], [90, 3, 1, "", "get_eightbit_patterns"], [90, 3, 1, "", "get_fuse_patterns"], [90, 3, 1, "", "get_grappler_optimization_cfg"], [90, 3, 1, "", "get_mixed_precision_combination"], [90, 3, 1, "", "get_op_types"], [90, 3, 1, "", "get_op_types_by_precision"], [90, 3, 1, "", "get_precisions"], [90, 3, 1, "", "get_quantization_capability"], [90, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[90, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[91, 0, 0, "-", "graph_converter"], [92, 0, 0, "-", "graph_converter_without_calib"], [131, 0, 0, "-", "graph_rewriter"], [149, 0, 0, "-", "graph_util"], [151, 0, 0, "-", "quantize_graph"], [178, 0, 0, "-", "quantize_graph_common"], [181, 0, 0, "-", "transform_graph"], [184, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[91, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter": [[91, 3, 1, "", "bf16_convert"], [91, 3, 1, "", "convert"], [91, 3, 1, "", "quantize"], [91, 3, 1, "", "quantize_with_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[92, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib": [[92, 3, 1, "", "bf16_convert"], [92, 3, 1, "", "convert_without_calib"], [92, 3, 1, "", "quantize_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[94, 0, 0, "-", "bf16"], [119, 0, 0, "-", "generic"], [130, 0, 0, "-", "graph_base"], [139, 0, 0, "-", "int8"], [145, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[93, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[93, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[93, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[95, 0, 0, "-", "convert_add_to_biasadd"], [96, 0, 0, "-", "convert_layout"], [97, 0, 0, "-", "convert_leakyrelu"], [98, 0, 0, "-", "convert_nan_to_random"], [99, 0, 0, "-", "convert_placeholder_to_const"], [100, 0, 0, "-", "dequantize_cast_optimizer"], [101, 0, 0, "-", "dilated_contraction"], [102, 0, 0, "-", "dummy_biasadd"], [103, 0, 0, "-", "expanddims_optimizer"], [104, 0, 0, "-", "fetch_weight_from_reshape"], [105, 0, 0, "-", "fold_batch_norm"], [106, 0, 0, "-", "fold_constant"], [107, 0, 0, "-", "fuse_biasadd_add"], [108, 0, 0, "-", "fuse_column_wise_mul"], [109, 0, 0, "-", "fuse_conv_with_math"], [110, 0, 0, "-", "fuse_decomposed_bn"], [111, 0, 0, "-", "fuse_decomposed_in"], [112, 0, 0, "-", "fuse_gelu"], [113, 0, 0, "-", "fuse_layer_norm"], [114, 0, 0, "-", "fuse_pad_with_conv"], [115, 0, 0, "-", "fuse_pad_with_fp32_conv"], [116, 0, 0, "-", "fuse_reshape_transpose"], [117, 0, 0, "-", "graph_cse_optimizer"], [118, 0, 0, "-", "grappler_pass"], [120, 0, 0, "-", "insert_print_node"], [121, 0, 0, "-", "move_squeeze_after_relu"], [122, 0, 0, "-", "pre_optimize"], [123, 0, 0, "-", "remove_training_nodes"], [124, 0, 0, "-", "rename_batch_norm"], [125, 0, 0, "-", "split_shared_input"], [126, 0, 0, "-", "strip_equivalent_nodes"], [127, 0, 0, "-", "strip_unused_nodes"], [128, 0, 0, "-", "switch_optimizer"], [129, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[95, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[95, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[96, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[96, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[97, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[97, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[98, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[98, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[99, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[99, 3, 1, "", "do_transformation"], [99, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[100, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[100, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[101, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[101, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[102, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[102, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[103, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[103, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[104, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[104, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[105, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[105, 3, 1, "", "do_transformation"], [105, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[106, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[106, 3, 1, "", "check_all_folded"], [106, 3, 1, "", "check_const_inputs"], [106, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[107, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[107, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[108, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[108, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[109, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[109, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[110, 2, 1, "", "FuseDecomposedBNOptimizer"], [110, 1, 1, "", "bypass_reshape"], [110, 1, 1, "", "get_const_dim_count"], [110, 1, 1, "", "node_from_map"], [110, 1, 1, "", "node_name_from_input"], [110, 1, 1, "", "valid_reshape_inputs"], [110, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer": [[110, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[111, 2, 1, "", "FuseDecomposedINOptimizer"], [111, 1, 1, "", "bypass_reshape"], [111, 1, 1, "", "get_const_dim_count"], [111, 1, 1, "", "node_from_map"], [111, 1, 1, "", "node_name_from_input"], [111, 1, 1, "", "valid_reshape_inputs"], [111, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer": [[111, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[112, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[112, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[113, 2, 1, "", "FuseLayerNormOptimizer"], [113, 1, 1, "", "node_from_map"], [113, 1, 1, "", "node_name_from_input"], [113, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[113, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[114, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[114, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[115, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[115, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[116, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[117, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[117, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[118, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[118, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[120, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[120, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[121, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[121, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[122, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization": [[122, 3, 1, "", "get_excluded_node_names"], [122, 3, 1, "", "get_matched_nodes"], [122, 3, 1, "", "get_optimized_model"], [122, 3, 1, "", "has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[123, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[123, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[124, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[124, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[125, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[125, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[126, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[126, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[127, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[127, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[128, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[128, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[129, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[129, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[130, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[130, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[132, 0, 0, "-", "freeze_fake_quant"], [133, 0, 0, "-", "freeze_value"], [134, 0, 0, "-", "freeze_value_without_calib"], [135, 0, 0, "-", "fuse_conv_redundant_dequantize"], [136, 0, 0, "-", "fuse_conv_requantize"], [137, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [138, 0, 0, "-", "fuse_matmul_requantize"], [140, 0, 0, "-", "meta_op_optimizer"], [141, 0, 0, "-", "post_hostconst_converter"], [142, 0, 0, "-", "post_quantized_op_cse"], [143, 0, 0, "-", "rnn_convert"], [144, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[132, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[132, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[133, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[133, 3, 1, "", "do_transformation"], [133, 3, 1, "", "generate_output_graph"], [133, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[134, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[134, 3, 1, "", "do_transformation_without_calib"], [134, 3, 1, "", "generate_output_graph"], [134, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[135, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[135, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[136, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[136, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[137, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[137, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[138, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [138, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [138, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [138, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[138, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[138, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[138, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[138, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[140, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[140, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[141, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[141, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[142, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[142, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[143, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[143, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[144, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[144, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[146, 0, 0, "-", "insert_qdq_pattern"], [147, 0, 0, "-", "merge_duplicated_qdq"], [148, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[146, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[146, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[147, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[147, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[148, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[148, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[149, 2, 1, "", "GraphAnalyzer"], [149, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[149, 3, 1, "", "add_node"], [149, 3, 1, "", "dump_graph"], [149, 3, 1, "", "get_frame_info"], [149, 3, 1, "", "get_graph_input_output"], [149, 4, 1, "", "graph"], [149, 3, 1, "", "has_positive_input"], [149, 3, 1, "", "parse_graph"], [149, 3, 1, "", "query_fusion_pattern_nodes"], [149, 3, 1, "", "remove_node"], [149, 3, 1, "", "remove_node_with_single_input_output"], [149, 3, 1, "", "replace_const_node"], [149, 3, 1, "", "replace_constant_graph_with_constant_node"], [149, 3, 1, "", "replace_node"], [149, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[149, 3, 1, "", "analysis_rnn_model"], [149, 3, 1, "", "compare_node_attr"], [149, 3, 1, "", "create_constant_node"], [149, 3, 1, "", "create_node"], [149, 3, 1, "", "gen_valid_sampling_log"], [149, 3, 1, "", "generate_int32_bias_for_conv"], [149, 3, 1, "", "generate_int32_bias_for_matmul"], [149, 3, 1, "", "node_name_from_input"], [149, 3, 1, "", "set_attr_bool"], [149, 3, 1, "", "set_attr_dtype"], [149, 3, 1, "", "set_attr_float"], [149, 3, 1, "", "set_attr_int"], [149, 3, 1, "", "set_attr_int_list"], [149, 3, 1, "", "set_attr_string"], [149, 3, 1, "", "set_attr_string_list"], [149, 3, 1, "", "set_attr_tensor"], [149, 3, 1, "", "set_attr_type_list"], [149, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[153, 0, 0, "-", "qat"], [169, 0, 0, "-", "qdq"], [171, 0, 0, "-", "quantize_graph_base"], [172, 0, 0, "-", "quantize_graph_bn"], [173, 0, 0, "-", "quantize_graph_concatv2"], [174, 0, 0, "-", "quantize_graph_conv"], [175, 0, 0, "-", "quantize_graph_for_intel_cpu"], [176, 0, 0, "-", "quantize_graph_matmul"], [177, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[152, 0, 0, "-", "fake_quantize"], [154, 0, 0, "-", "quantize_config"], [155, 0, 0, "-", "quantize_helper"], [156, 0, 0, "-", "quantize_layers"], [161, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[152, 2, 1, "", "FakeQuantize"], [152, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[152, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[152, 3, 1, "", "from_config"], [152, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[154, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[154, 3, 1, "", "add_quantize_recipe"], [154, 3, 1, "", "clear_quantize_recipe"], [154, 3, 1, "", "get_quantize_recipe"], [154, 3, 1, "", "is_empty"], [154, 3, 1, "", "query_layer"], [154, 3, 1, "", "remove_layer"], [154, 3, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[155, 1, 1, "", "init_quantize_config"], [155, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[157, 0, 0, "-", "optimize_layer"], [158, 0, 0, "-", "quantize_layer_add"], [159, 0, 0, "-", "quantize_layer_base"], [160, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[157, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[158, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[159, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[160, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[161, 2, 1, "", "QuantizeWrapper"], [161, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[161, 3, 1, "", "build"], [161, 3, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[161, 3, 1, "", "build"], [161, 3, 1, "", "call"], [161, 3, 1, "", "compute_output_shape"], [161, 3, 1, "", "from_config"], [161, 3, 1, "", "get_config"], [161, 4, 1, "", "losses"], [161, 4, 1, "", "non_trainable_weights"], [161, 3, 1, "", "query_input_index"], [161, 4, 1, "", "trainable"], [161, 4, 1, "", "trainable_weights"], [161, 4, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[162, 0, 0, "-", "fuse_qdq_bn"], [163, 0, 0, "-", "fuse_qdq_concatv2"], [164, 0, 0, "-", "fuse_qdq_conv"], [165, 0, 0, "-", "fuse_qdq_deconv"], [166, 0, 0, "-", "fuse_qdq_in"], [167, 0, 0, "-", "fuse_qdq_matmul"], [168, 0, 0, "-", "fuse_qdq_pooling"], [170, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[162, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[162, 3, 1, "", "apply_newly_bn_leakyrelu_fusion"], [162, 3, 1, "", "apply_newly_bn_relu_fusion"], [162, 3, 1, "", "apply_the_transform"], [162, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[163, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[163, 3, 1, "", "apply_the_transform"], [163, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[164, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[164, 3, 1, "", "apply_conv3d_add_addn_fusion"], [164, 3, 1, "", "apply_conv3d_add_addn_relu_fusion"], [164, 3, 1, "", "apply_conv3d_add_fusion"], [164, 3, 1, "", "apply_conv3d_add_relu_fusion"], [164, 3, 1, "", "apply_conv3d_single_fusion"], [164, 3, 1, "", "apply_conv_biasadd_hardswish_fusion"], [164, 3, 1, "", "apply_newly_conv_biasadd_addn_fusion"], [164, 3, 1, "", "apply_newly_conv_biasadd_addn_relu_fusion"], [164, 3, 1, "", "apply_newly_conv_biasadd_fusion"], [164, 3, 1, "", "apply_newly_conv_biasadd_relu_fusion"], [164, 3, 1, "", "apply_newly_conv_biasadd_swishf32_fusion"], [164, 3, 1, "", "apply_newly_conv_single_fusion"], [164, 3, 1, "", "apply_the_transform"], [164, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[165, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[165, 3, 1, "", "apply_deconv2d_biasadd_fusion"], [165, 3, 1, "", "apply_deconv3d_biasadd_fusion"], [165, 3, 1, "", "apply_single_deconv2d_fusion"], [165, 3, 1, "", "apply_single_deconv3d_fusion"], [165, 3, 1, "", "apply_the_transform"], [165, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[166, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[166, 3, 1, "", "apply_newly_in_relu_fusion"], [166, 3, 1, "", "apply_the_transform"], [166, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[167, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[167, 3, 1, "", "apply_batchmatmulv2_fusion"], [167, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [167, 3, 1, "", "apply_matmul_biasadd_fusion"], [167, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [167, 3, 1, "", "apply_the_transform"], [167, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[168, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[168, 3, 1, "", "apply_the_transform"], [168, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[170, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[170, 3, 1, "", "do_transform"], [170, 3, 1, "", "get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[171, 2, 1, "", "QuantizeGraphBase"], [171, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[171, 3, 1, "", "do_transform"], [171, 3, 1, "", "register_transformer"], [171, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[171, 3, 1, "", "add_output_graph_node"], [171, 3, 1, "", "apply_the_transform"], [171, 3, 1, "", "create_nodes_map"], [171, 3, 1, "", "eightbitize_single_input_tensor_node"], [171, 3, 1, "", "get_longest_fuse"], [171, 3, 1, "", "remove_redundant_quantization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[172, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[172, 3, 1, "", "apply_newly_bn_leakyrelu_fusion"], [172, 3, 1, "", "apply_newly_bn_relu_fusion"], [172, 3, 1, "", "apply_the_transform"], [172, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[173, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[173, 3, 1, "", "apply_the_transform"], [173, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[174, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[174, 3, 1, "", "apply_conv_biasadd_addn_relu_fusion"], [174, 3, 1, "", "apply_conv_biasadd_fusion"], [174, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [174, 3, 1, "", "apply_conv_single_fusion"], [174, 3, 1, "", "apply_the_transform"], [174, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[175, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[175, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[176, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[176, 3, 1, "", "apply_matmul_biasadd_fusion"], [176, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [176, 3, 1, "", "apply_the_transform"], [176, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[177, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[177, 3, 1, "", "apply_the_transform"], [177, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[178, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[178, 3, 1, "", "copy_attr"], [178, 3, 1, "", "create_constant_node"], [178, 3, 1, "", "create_node"], [178, 3, 1, "", "ensure_tensor_name_has_port"], [178, 3, 1, "", "generate_quantized_weight_node"], [178, 3, 1, "", "get_sorted_graph"], [178, 3, 1, "", "node_name_from_input"], [178, 3, 1, "", "remove_training_nodes"], [178, 3, 1, "", "set_attr_bool"], [178, 3, 1, "", "set_attr_dtype"], [178, 3, 1, "", "set_attr_float"], [178, 3, 1, "", "set_attr_int"], [178, 3, 1, "", "set_attr_string"], [178, 3, 1, "", "set_attr_string_list"], [178, 3, 1, "", "set_attr_tensor"], [178, 3, 1, "", "set_attr_type_list"], [178, 3, 1, "", "split_shared_inputs"], [178, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[179, 0, 0, "-", "bias_correction"], [180, 0, 0, "-", "graph_transform_base"], [182, 0, 0, "-", "insert_logging"], [183, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[179, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[179, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[180, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase": [[180, 3, 1, "", "do_transformation"], [180, 3, 1, "", "generate_input_map"], [180, 3, 1, "", "get_node_name_from_input"], [180, 3, 1, "", "node_name_from_input"], [180, 3, 1, "", "parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[182, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[182, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[183, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[183, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[184, 1, 1, "", "collate_tf_preds"], [184, 1, 1, "", "disable_random"], [184, 1, 1, "", "fix_ref_type_of_graph_def"], [184, 1, 1, "", "generate_feed_dict"], [184, 1, 1, "", "get_estimator_graph"], [184, 1, 1, "", "get_graph_def"], [184, 1, 1, "", "get_input_output_node_names"], [184, 1, 1, "", "get_model_input_shape"], [184, 1, 1, "", "get_tensor_by_name"], [184, 1, 1, "", "get_tensor_val_from_graph_node"], [184, 1, 1, "", "int8_node_name_reverse"], [184, 1, 1, "", "is_ckpt_format"], [184, 1, 1, "", "is_saved_model_format"], [184, 1, 1, "", "iterator_sess_run"], [184, 1, 1, "", "read_graph"], [184, 1, 1, "", "strip_equivalent_nodes"], [184, 1, 1, "", "strip_unused_nodes"], [184, 1, 1, "", "tf_diagnosis_helper"], [184, 1, 1, "", "version1_eq_version2"], [184, 1, 1, "", "version1_gt_version2"], [184, 1, 1, "", "version1_gte_version2"], [184, 1, 1, "", "version1_lt_version2"], [184, 1, 1, "", "version1_lte_version2"], [184, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[185, 0, 0, "-", "bf16_convert"], [186, 0, 0, "-", "hawq_metric"], [188, 0, 0, "-", "onnx"], [189, 0, 0, "-", "symbolic_trace"], [190, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[185, 2, 1, "", "BF16ModuleWrapper"], [185, 1, 1, "", "Convert"], [185, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper": [[185, 3, 1, "", "forward"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[186, 2, 1, "", "HessianTrace"], [186, 2, 1, "", "Node_collector"], [186, 1, 1, "", "compare_weights"], [186, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[186, 3, 1, "", "get_act_gap"], [186, 3, 1, "", "get_act_traces"], [186, 3, 1, "", "get_avg_traces"], [186, 3, 1, "", "get_device"], [186, 3, 1, "", "get_fused_mapping"], [186, 3, 1, "", "get_params"], [186, 3, 1, "", "get_vtHv_weight"], [186, 3, 1, "", "get_weight_traces"], [186, 3, 1, "", "is_fused_module"], [186, 3, 1, "", "mse_metric_gap"], [186, 3, 1, "", "register_act_grad_hooks"], [186, 3, 1, "", "reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector": [[186, 3, 1, "", "hook_fn_act"], [186, 3, 1, "", "remove"]], "neural_compressor.adaptor.torch_utils.onnx": [[188, 2, 1, "", "DataReader"]], "neural_compressor.adaptor.torch_utils.onnx.DataReader": [[188, 3, 1, "", "get_next"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[189, 1, 1, "", "symbolic_trace"], [189, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[190, 1, 1, "", "append_attr"], [190, 1, 1, "", "auto_copy"], [190, 1, 1, "", "check_cfg_and_qconfig"], [190, 1, 1, "", "collate_torch_preds"], [190, 1, 1, "", "fetch_module"], [190, 1, 1, "", "generate_activation_observer"], [190, 1, 1, "", "get_embedding_contiguous"], [190, 1, 1, "", "get_example_input"], [190, 1, 1, "", "get_fallback_order"], [190, 1, 1, "", "get_mse_order_per_fp32"], [190, 1, 1, "", "get_mse_order_per_int8"], [190, 1, 1, "", "get_quantizable_ops_from_cfgs"], [190, 1, 1, "", "get_torch_version"], [190, 1, 1, "", "input2tuple"], [190, 1, 1, "", "is_fused_module"], [190, 1, 1, "", "paser_cfgs"], [190, 1, 1, "", "set_module"], [190, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[193, 2, 1, "", "ALGORITHMS"], [193, 2, 1, "", "Algorithm"], [193, 2, 1, "", "AlgorithmScheduler"], [191, 0, 0, "-", "algorithm"], [193, 1, 1, "", "algorithm_registry"], [192, 0, 0, "-", "fast_bias_correction"], [194, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.ALGORITHMS": [[193, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.AlgorithmScheduler": [[193, 4, 1, "", "adaptor"], [193, 4, 1, "", "calib_iter"], [193, 4, 1, "", "dataloader"], [193, 4, 1, "", "origin_model"], [193, 4, 1, "", "q_model"]], "neural_compressor.algorithm.algorithm": [[191, 2, 1, "", "ALGORITHMS"], [191, 2, 1, "", "Algorithm"], [191, 2, 1, "", "AlgorithmScheduler"], [191, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.algorithm.ALGORITHMS": [[191, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.algorithm.AlgorithmScheduler": [[191, 4, 1, "", "adaptor"], [191, 4, 1, "", "calib_iter"], [191, 4, 1, "", "dataloader"], [191, 4, 1, "", "origin_model"], [191, 4, 1, "", "q_model"]], "neural_compressor.algorithm.fast_bias_correction": [[192, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[194, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[195, 2, 1, "", "Benchmark"], [195, 1, 1, "", "fit"]], "neural_compressor.benchmark.Benchmark": [[195, 3, 1, "", "dataloader"], [195, 3, 1, "", "metric"], [195, 3, 1, "", "postprocess"]], "neural_compressor.conf": [[196, 0, 0, "-", "config"], [197, 0, 0, "-", "dotdict"], [199, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[196, 2, 1, "", "Benchmark_Conf"], [196, 2, 1, "", "Conf"], [196, 2, 1, "", "DefaultConf"], [196, 2, 1, "", "Distillation_Conf"], [196, 2, 1, "", "Graph_Optimization_Conf"], [196, 2, 1, "", "MixedPrecision_Conf"], [196, 2, 1, "", "NASConfig"], [196, 2, 1, "", "PrunerV2"], [196, 2, 1, "", "Pruning_Conf"], [196, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[197, 2, 1, "", "DotDict"], [197, 1, 1, "", "deep_get"], [197, 1, 1, "", "deep_set"]], "neural_compressor.config": [[200, 2, 1, "", "AccuracyCriterion"], [200, 2, 1, "", "BenchmarkConfig"], [200, 2, 1, "", "DistillationConfig"], [200, 2, 1, "", "ExportConfig"], [200, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [200, 2, 1, "", "KnowledgeDistillationLossConfig"], [200, 2, 1, "", "MixedPrecisionConfig"], [200, 2, 1, "", "ONNXQlinear2QDQConfig"], [200, 2, 1, "", "Options"], [200, 2, 1, "", "PostTrainingQuantConfig"], [200, 2, 1, "", "QuantizationAwareTrainingConfig"], [200, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [200, 2, 1, "", "TF2ONNXConfig"], [200, 2, 1, "", "Torch2ONNXConfig"], [200, 2, 1, "", "TuningCriterion"], [200, 2, 1, "", "WeightPruningConfig"], [200, 1, 1, "", "check_value"]], "neural_compressor.config.AccuracyCriterion": [[200, 4, 1, "", "absolute"], [200, 4, 1, "", "criterion"], [200, 4, 1, "", "higher_is_better"], [200, 4, 1, "", "relative"], [200, 4, 1, "", "tolerable_loss"]], "neural_compressor.config.BenchmarkConfig": [[200, 4, 1, "", "backend"], [200, 4, 1, "", "cores_per_instance"], [200, 4, 1, "", "inputs"], [200, 4, 1, "", "inter_num_of_threads"], [200, 4, 1, "", "intra_num_of_threads"], [200, 4, 1, "", "iteration"], [200, 4, 1, "", "num_of_instance"], [200, 4, 1, "", "outputs"], [200, 4, 1, "", "warmup"]], "neural_compressor.config.DistillationConfig": [[200, 4, 1, "", "criterion"], [200, 4, 1, "", "optimizer"], [200, 4, 1, "", "teacher_model"]], "neural_compressor.config.ExportConfig": [[200, 4, 1, "", "dtype"], [200, 4, 1, "", "dynamic_axes"], [200, 4, 1, "", "example_inputs"], [200, 4, 1, "", "input_names"], [200, 4, 1, "", "opset_version"], [200, 4, 1, "", "output_names"], [200, 4, 1, "", "quant_format"]], "neural_compressor.config.Options": [[200, 4, 1, "", "random_seed"], [200, 4, 1, "", "resume_from"], [200, 4, 1, "", "tensorboard"], [200, 4, 1, "", "workspace"]], "neural_compressor.config.PostTrainingQuantConfig": [[200, 4, 1, "", "approach"], [200, 4, 1, "", "tuning_criterion"]], "neural_compressor.config.QuantizationAwareTrainingConfig": [[200, 4, 1, "", "approach"]], "neural_compressor.config.TuningCriterion": [[200, 4, 1, "", "max_trials"], [200, 4, 1, "", "objective"], [200, 4, 1, "", "strategy"], [200, 4, 1, "", "strategy_kwargs"], [200, 4, 1, "", "timeout"]], "neural_compressor.config.WeightPruningConfig": [[200, 4, 1, "", "weight_compression"]], "neural_compressor.contrib": [[202, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[203, 0, 0, "-", "sigopt"], [204, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[203, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[203, 3, 1, "", "create_exp"], [203, 3, 1, "", "get_acc_target"], [203, 3, 1, "", "next_tune_cfg"], [203, 3, 1, "", "params_to_tune_configs"], [203, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[204, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[204, 3, 1, "", "add_loss_to_tuned_history_and_find_best"], [204, 3, 1, "", "calculate_loss"], [204, 3, 1, "", "object_evaluation"], [204, 3, 1, "", "stop"], [204, 3, 1, "", "traverse"]], "neural_compressor.data": [[226, 2, 1, "", "BaseTransform"], [226, 2, 1, "", "DataLoader"], [226, 2, 1, "", "Dataset"], [226, 2, 1, "", "Datasets"], [226, 2, 1, "", "FILTERS"], [226, 2, 1, "", "Filter"], [226, 2, 1, "", "IterableDataset"], [226, 2, 1, "", "Postprocess"], [226, 2, 1, "", "TRANSFORMS"], [209, 0, 0, "-", "dataloaders"], [226, 1, 1, "", "dataset_registry"], [221, 0, 0, "-", "datasets"], [226, 1, 1, "", "filter_registry"], [225, 0, 0, "-", "filters"], [226, 1, 1, "", "transform_registry"], [229, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[226, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[209, 2, 1, "", "DataLoader"], [205, 0, 0, "-", "base_dataloader"], [206, 0, 0, "-", "dataloader"], [207, 0, 0, "-", "default_dataloader"], [208, 0, 0, "-", "fetcher"], [210, 0, 0, "-", "mxnet_dataloader"], [211, 0, 0, "-", "onnxrt_dataloader"], [212, 0, 0, "-", "pytorch_dataloader"], [213, 0, 0, "-", "sampler"], [214, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[205, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[205, 3, 1, "", "batch"], [205, 4, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[206, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[207, 2, 1, "", "DefaultDataLoader"], [207, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[207, 3, 1, "", "batch"], [207, 4, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[208, 2, 1, "", "Fetcher"], [208, 2, 1, "", "IndexFetcher"], [208, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[210, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[211, 2, 1, "", "ONNXRTBertDataLoader"], [211, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[212, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[213, 2, 1, "", "BatchSampler"], [213, 2, 1, "", "IterableSampler"], [213, 2, 1, "", "Sampler"], [213, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[214, 2, 1, "", "TFDataDataLoader"], [214, 2, 1, "", "TensorflowBertDataLoader"], [214, 2, 1, "", "TensorflowDataLoader"], [214, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[214, 3, 1, "", "batch"]], "neural_compressor.data.datasets": [[221, 2, 1, "", "Dataset"], [221, 2, 1, "", "Datasets"], [221, 2, 1, "", "IterableDataset"], [215, 0, 0, "-", "bert_dataset"], [216, 0, 0, "-", "coco_dataset"], [217, 0, 0, "-", "dataset"], [221, 1, 1, "", "dataset_registry"], [218, 0, 0, "-", "dummy_dataset"], [219, 0, 0, "-", "dummy_dataset_v2"], [220, 0, 0, "-", "imagenet_dataset"], [222, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[215, 2, 1, "", "InputFeatures"], [215, 2, 1, "", "ONNXRTBertDataset"], [215, 2, 1, "", "ParseDecodeBert"], [215, 2, 1, "", "PytorchBertDataset"], [215, 2, 1, "", "TensorflowBertDataset"], [215, 2, 1, "", "TensorflowModelZooBertDataset"], [215, 1, 1, "", "convert_examples_to_features"], [215, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[215, 3, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[216, 2, 1, "", "COCONpy"], [216, 2, 1, "", "COCORaw"], [216, 2, 1, "", "COCORecordDataset"], [216, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[217, 2, 1, "", "CIFAR10"], [217, 2, 1, "", "CIFAR100"], [217, 2, 1, "", "Dataset"], [217, 2, 1, "", "Datasets"], [217, 2, 1, "", "FashionMNIST"], [217, 2, 1, "", "ImageFolder"], [217, 2, 1, "", "IterableDataset"], [217, 2, 1, "", "MNIST"], [217, 2, 1, "", "MXNetCIFAR10"], [217, 2, 1, "", "MXNetCIFAR100"], [217, 2, 1, "", "MXNetDatasets"], [217, 2, 1, "", "MXNetFashionMNIST"], [217, 2, 1, "", "MXNetImageFolder"], [217, 2, 1, "", "MXNetMNIST"], [217, 2, 1, "", "ONNXRTITDatasets"], [217, 2, 1, "", "ONNXRTQLDatasets"], [217, 2, 1, "", "PyTorchDatasets"], [217, 2, 1, "", "PytorchCIFAR10"], [217, 2, 1, "", "PytorchCIFAR100"], [217, 2, 1, "", "PytorchFashionMNIST"], [217, 2, 1, "", "PytorchMNIST"], [217, 2, 1, "", "PytorchMxnetWrapDataset"], [217, 2, 1, "", "PytorchMxnetWrapFunction"], [217, 2, 1, "", "TensorflowCIFAR10"], [217, 2, 1, "", "TensorflowCIFAR100"], [217, 2, 1, "", "TensorflowDatasets"], [217, 2, 1, "", "TensorflowFashionMNIST"], [217, 2, 1, "", "TensorflowImageFolder"], [217, 2, 1, "", "TensorflowImageRecord"], [217, 2, 1, "", "TensorflowMNIST"], [217, 2, 1, "", "TensorflowTFRecordDataset"], [217, 2, 1, "", "TensorflowVOCRecord"], [217, 1, 1, "", "calculate_md5"], [217, 1, 1, "", "check_integrity"], [217, 1, 1, "", "dataset_registry"], [217, 1, 1, "", "download_url"], [217, 5, 1, "", "framework_datasets"], [217, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[217, 3, 1, "", "download"], [217, 3, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[217, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[217, 4, 1, "", "class_to_idx"], [217, 3, 1, "", "download"], [217, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[218, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[219, 2, 1, "", "DummyDataset"], [219, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[220, 2, 1, "", "ImagenetRaw"], [220, 2, 1, "", "MXNetImagenetRaw"], [220, 2, 1, "", "ONNXRTImagenetDataset"], [220, 2, 1, "", "PytorchImagenetRaw"], [220, 2, 1, "", "TensorflowImagenetDataset"], [220, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[222, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[225, 2, 1, "", "FILTERS"], [225, 2, 1, "", "Filter"], [223, 0, 0, "-", "coco_filter"], [224, 0, 0, "-", "filter"], [225, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[223, 2, 1, "", "LabelBalanceCOCORawFilter"], [223, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[224, 2, 1, "", "FILTERS"], [224, 2, 1, "", "Filter"], [224, 2, 1, "", "MXNetFilters"], [224, 2, 1, "", "ONNXRTITFilters"], [224, 2, 1, "", "ONNXRTQLFilters"], [224, 2, 1, "", "PyTorchFilters"], [224, 2, 1, "", "TensorflowFilters"], [224, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[229, 2, 1, "", "BaseTransform"], [229, 2, 1, "", "Postprocess"], [229, 2, 1, "", "TRANSFORMS"], [227, 0, 0, "-", "coco_transform"], [228, 0, 0, "-", "imagenet_transform"], [230, 0, 0, "-", "postprocess"], [231, 0, 0, "-", "tokenization"], [232, 0, 0, "-", "transform"], [229, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TRANSFORMS": [[229, 3, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[227, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[228, 2, 1, "", "BilinearImagenetTransform"], [228, 2, 1, "", "LabelShift"], [228, 2, 1, "", "ONNXResizeCropImagenetTransform"], [228, 2, 1, "", "OnnxBilinearImagenetTransform"], [228, 2, 1, "", "ParseDecodeImagenet"], [228, 2, 1, "", "ParseDecodeImagenetTransform"], [228, 2, 1, "", "QuantizedInput"], [228, 2, 1, "", "ResizeWithAspectRatio"], [228, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[230, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[231, 2, 1, "", "BasicTokenizer"], [231, 2, 1, "", "FullTokenizer"], [231, 2, 1, "", "WordpieceTokenizer"], [231, 1, 1, "", "convert_by_vocab"], [231, 1, 1, "", "convert_to_unicode"], [231, 1, 1, "", "load_vocab"], [231, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[231, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[231, 3, 1, "", "convert_ids_to_tokens"], [231, 3, 1, "", "convert_tokens_to_ids"], [231, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[231, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[232, 2, 1, "", "AlignImageChannelTransform"], [232, 2, 1, "", "BaseTransform"], [232, 2, 1, "", "CastONNXTransform"], [232, 2, 1, "", "CastPyTorchTransform"], [232, 2, 1, "", "CastTFTransform"], [232, 2, 1, "", "CenterCropTFTransform"], [232, 2, 1, "", "CenterCropTransform"], [232, 2, 1, "", "CollectTransform"], [232, 2, 1, "", "ComposeTransform"], [232, 2, 1, "", "CropResizeTFTransform"], [232, 2, 1, "", "CropResizeTransform"], [232, 2, 1, "", "CropToBoundingBox"], [232, 2, 1, "", "InputFeatures"], [232, 2, 1, "", "MXNetCropResizeTransform"], [232, 2, 1, "", "MXNetCropToBoundingBox"], [232, 2, 1, "", "MXNetNormalizeTransform"], [232, 2, 1, "", "MXNetTransforms"], [232, 2, 1, "", "MXNetTranspose"], [232, 2, 1, "", "NormalizeTFTransform"], [232, 2, 1, "", "NormalizeTransform"], [232, 2, 1, "", "ONNXRTCropToBoundingBox"], [232, 2, 1, "", "ONNXRTITTransforms"], [232, 2, 1, "", "ONNXRTQLTransforms"], [232, 2, 1, "", "PaddedCenterCropTransform"], [232, 2, 1, "", "ParseDecodeVocTransform"], [232, 2, 1, "", "PyTorchAlignImageChannel"], [232, 2, 1, "", "PyTorchCropResizeTransform"], [232, 2, 1, "", "PyTorchNormalizeTransform"], [232, 2, 1, "", "PyTorchTransforms"], [232, 2, 1, "", "PyTorchTranspose"], [232, 2, 1, "", "PytorchMxnetTransform"], [232, 2, 1, "", "PytorchMxnetWrapFunction"], [232, 2, 1, "", "RandomCropTFTransform"], [232, 2, 1, "", "RandomCropTransform"], [232, 2, 1, "", "RandomHorizontalFlip"], [232, 2, 1, "", "RandomResizedCropMXNetTransform"], [232, 2, 1, "", "RandomResizedCropPytorchTransform"], [232, 2, 1, "", "RandomResizedCropTFTransform"], [232, 2, 1, "", "RandomResizedCropTransform"], [232, 2, 1, "", "RandomVerticalFlip"], [232, 2, 1, "", "RescaleKerasPretrainTransform"], [232, 2, 1, "", "RescaleTFTransform"], [232, 2, 1, "", "RescaleTransform"], [232, 2, 1, "", "ResizeMXNetTransform"], [232, 2, 1, "", "ResizePytorchTransform"], [232, 2, 1, "", "ResizeTFTransform"], [232, 2, 1, "", "ResizeTransform"], [232, 2, 1, "", "ResizeWithRatio"], [232, 2, 1, "", "SquadExample"], [232, 2, 1, "", "TFModelZooCollectTransform"], [232, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [232, 2, 1, "", "TFSquadV1PostTransform"], [232, 2, 1, "", "TRANSFORMS"], [232, 2, 1, "", "TensorflowCropToBoundingBox"], [232, 2, 1, "", "TensorflowRandomHorizontalFlip"], [232, 2, 1, "", "TensorflowRandomVerticalFlip"], [232, 2, 1, "", "TensorflowResizeWithRatio"], [232, 2, 1, "", "TensorflowTransform"], [232, 2, 1, "", "TensorflowTransforms"], [232, 2, 1, "", "TensorflowTranspose"], [232, 2, 1, "", "TensorflowWrapFunction"], [232, 2, 1, "", "ToArray"], [232, 2, 1, "", "ToNDArrayTransform"], [232, 2, 1, "", "Transforms"], [232, 2, 1, "", "Transpose"], [232, 1, 1, "", "convert_examples_to_features"], [232, 1, 1, "", "get_final_text"], [232, 1, 1, "", "get_torchvision_map"], [232, 1, 1, "", "read_squad_examples"], [232, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[232, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[232, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[232, 3, 1, "", "get_postprocess_result"], [232, 3, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[232, 3, 1, "", "register"]], "neural_compressor.experimental": [[275, 2, 1, "", "Benchmark"], [275, 2, 1, "", "Component"], [275, 2, 1, "", "Distillation"], [275, 2, 1, "", "Graph_Optimization"], [275, 2, 1, "", "MixedPrecision"], [275, 2, 1, "", "ModelConversion"], [275, 2, 1, "", "NAS"], [275, 2, 1, "", "Pruning"], [275, 2, 1, "", "Quantization"], [233, 0, 0, "-", "benchmark"], [236, 0, 0, "-", "common"], [242, 0, 0, "-", "component"], [264, 0, 0, "-", "data"], [269, 0, 0, "-", "distillation"], [270, 0, 0, "-", "export"], [274, 0, 0, "-", "graph_optimization"], [282, 0, 0, "-", "metric"], [284, 0, 0, "-", "mixed_precision"], [285, 0, 0, "-", "model_conversion"], [298, 0, 0, "-", "nas"], [302, 0, 0, "-", "pruning"], [303, 0, 0, "-", "pruning_recipes"], [307, 0, 0, "-", "pruning_v2"], [308, 0, 0, "-", "pytorch_pruner"], [315, 0, 0, "-", "quantization"], [316, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[275, 4, 1, "", "b_dataloader"], [275, 4, 1, "", "b_func"], [275, 3, 1, "", "config_instance"], [275, 3, 1, "", "generate_prefix"], [275, 4, 1, "", "metric"], [275, 4, 1, "", "model"], [275, 4, 1, "", "postprocess"], [275, 4, 1, "", "results"], [275, 3, 1, "", "run_instance"], [275, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[275, 4, 1, "", "eval_dataloader"], [275, 4, 1, "", "eval_func"], [275, 3, 1, "", "execute"], [275, 4, 1, "", "model"], [275, 3, 1, "", "on_after_compute_loss"], [275, 3, 1, "", "on_after_eval"], [275, 3, 1, "", "on_after_optimizer_step"], [275, 3, 1, "", "on_batch_begin"], [275, 3, 1, "", "on_batch_end"], [275, 3, 1, "", "on_before_eval"], [275, 3, 1, "", "on_before_optimizer_step"], [275, 3, 1, "", "on_epoch_begin"], [275, 3, 1, "", "on_epoch_end"], [275, 3, 1, "", "on_post_grad"], [275, 3, 1, "", "on_step_begin"], [275, 3, 1, "", "on_step_end"], [275, 3, 1, "", "on_train_begin"], [275, 3, 1, "", "on_train_end"], [275, 3, 1, "", "post_epoch_end"], [275, 3, 1, "", "post_process"], [275, 3, 1, "", "pre_epoch_begin"], [275, 3, 1, "", "pre_process"], [275, 3, 1, "", "prepare"], [275, 3, 1, "", "prepare_qat"], [275, 3, 1, "", "register_hook"], [275, 4, 1, "", "train_dataloader"], [275, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[275, 6, 1, "", "_epoch_ran"], [275, 6, 1, "", "best_model"], [275, 6, 1, "", "best_score"], [275, 3, 1, "", "create_criterion"], [275, 3, 1, "", "create_optimizer"], [275, 4, 1, "", "criterion"], [275, 6, 1, "", "eval_frequency"], [275, 4, 1, "", "evaluation_distributed"], [275, 3, 1, "", "execute"], [275, 3, 1, "", "generate_hooks"], [275, 3, 1, "", "init_train_cfg"], [275, 3, 1, "", "on_post_forward"], [275, 4, 1, "", "optimizer"], [275, 3, 1, "", "pre_process"], [275, 3, 1, "", "prepare"], [275, 4, 1, "", "student_model"], [275, 4, 1, "", "teacher_model"], [275, 4, 1, "", "train_cfg"], [275, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[275, 3, 1, "", "dataset"], [275, 4, 1, "", "eval_dataloader"], [275, 4, 1, "", "eval_func"], [275, 4, 1, "", "input"], [275, 4, 1, "", "metric"], [275, 4, 1, "", "model"], [275, 4, 1, "", "output"], [275, 4, 1, "", "postprocess"], [275, 4, 1, "", "precisions"], [275, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[275, 4, 1, "", "precisions"], [275, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[275, 3, 1, "", "dataset"], [275, 4, 1, "", "destination"], [275, 4, 1, "", "eval_dataloader"], [275, 4, 1, "", "eval_func"], [275, 4, 1, "", "metric"], [275, 4, 1, "", "model"], [275, 4, 1, "", "postprocess"], [275, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[275, 6, 1, "", "conf"], [275, 4, 1, "", "evaluation_distributed"], [275, 3, 1, "", "execute"], [275, 3, 1, "", "generate_hooks"], [275, 3, 1, "", "generate_pruners"], [275, 3, 1, "", "get_sparsity_ratio"], [275, 3, 1, "", "pre_process"], [275, 3, 1, "", "prepare"], [275, 6, 1, "", "pruners"], [275, 4, 1, "", "pruning_func"], [275, 4, 1, "", "train_distributed"], [275, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.Quantization": [[275, 4, 1, "", "calib_dataloader"], [275, 3, 1, "", "dataset"], [275, 3, 1, "", "execute"], [275, 4, 1, "", "metric"], [275, 4, 1, "", "model"], [275, 4, 1, "", "objective"], [275, 4, 1, "", "postprocess"], [275, 3, 1, "", "pre_process"], [275, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[233, 2, 1, "", "Benchmark"], [233, 1, 1, "", "get_architecture"], [233, 1, 1, "", "get_bounded_threads"], [233, 1, 1, "", "get_core_ids"], [233, 1, 1, "", "get_physical_ids"], [233, 1, 1, "", "get_threads"], [233, 1, 1, "", "get_threads_per_core"], [233, 1, 1, "", "set_all_env_var"], [233, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[233, 4, 1, "", "b_dataloader"], [233, 4, 1, "", "b_func"], [233, 3, 1, "", "config_instance"], [233, 3, 1, "", "generate_prefix"], [233, 4, 1, "", "metric"], [233, 4, 1, "", "model"], [233, 4, 1, "", "postprocess"], [233, 4, 1, "", "results"], [233, 3, 1, "", "run_instance"], [233, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[236, 2, 1, "", "DataLoader"], [236, 2, 1, "", "Metric"], [236, 2, 1, "", "Model"], [236, 2, 1, "", "Postprocess"], [234, 0, 0, "-", "criterion"], [235, 0, 0, "-", "dataloader"], [237, 0, 0, "-", "metric"], [238, 0, 0, "-", "model"], [239, 0, 0, "-", "optimizer"], [240, 0, 0, "-", "postprocess"], [241, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[234, 2, 1, "", "Criterions"], [234, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [234, 2, 1, "", "KnowledgeDistillationFramework"], [234, 2, 1, "", "KnowledgeDistillationLoss"], [234, 2, 1, "", "PyTorchCriterions"], [234, 2, 1, "", "PyTorchCrossEntropyLoss"], [234, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [234, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [234, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [234, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [234, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [234, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [234, 2, 1, "", "SelfKnowledgeDistillationLoss"], [234, 2, 1, "", "TensorFlowCrossEntropyLoss"], [234, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [234, 2, 1, "", "TensorflowCriterions"], [234, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [234, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [234, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [234, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[234, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[234, 3, 1, "", "clear_features"], [234, 3, 1, "", "init_feature_matcher"], [234, 3, 1, "", "init_loss_funcs"], [234, 3, 1, "", "loss_cal"], [234, 3, 1, "", "loss_cal_sloss"], [234, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[234, 4, 1, "", "student_model"], [234, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[234, 3, 1, "", "loss_cal"], [234, 3, 1, "", "loss_cal_sloss"], [234, 3, 1, "", "student_targets_loss_cal"], [234, 3, 1, "", "teacher_model_forward"], [234, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[234, 3, 1, "", "init_feature_matcher"], [234, 3, 1, "", "init_loss_funcs"], [234, 3, 1, "", "loss_cal"], [234, 3, 1, "", "loss_cal_sloss"], [234, 3, 1, "", "register_hooks_for_models"], [234, 3, 1, "", "remove_all_hooks"], [234, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[234, 3, 1, "", "KullbackLeiblerDivergence"], [234, 3, 1, "", "SoftCrossEntropy"], [234, 3, 1, "", "student_targets_loss_cal"], [234, 3, 1, "", "teacher_model_forward"], [234, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[234, 3, 1, "", "KullbackLeiblerDivergence"], [234, 3, 1, "", "L2Divergence"], [234, 3, 1, "", "SoftCrossEntropy"], [234, 3, 1, "", "init_loss_funcs"], [234, 3, 1, "", "loss_cal"], [234, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[234, 3, 1, "", "init_loss_funcs"], [234, 3, 1, "", "loss_cal"], [234, 3, 1, "", "loss_cal_sloss"], [234, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[234, 3, 1, "", "SoftCrossEntropy"], [234, 3, 1, "", "student_targets_loss_cal"], [234, 3, 1, "", "teacher_model_forward"], [234, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[234, 3, 1, "", "student_targets_loss_cal"], [234, 3, 1, "", "teacher_model_forward"], [234, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[235, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[237, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[238, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[239, 2, 1, "", "Optimizers"], [239, 2, 1, "", "PyTorchOptimizers"], [239, 2, 1, "", "PyTorchSGD"], [239, 2, 1, "", "TensorFlowAdam"], [239, 2, 1, "", "TensorFlowAdamW"], [239, 2, 1, "", "TensorFlowSGD"], [239, 2, 1, "", "TensorflowOptimizers"], [239, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[239, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[240, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[241, 1, 1, "", "get_activation"], [241, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[242, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[242, 4, 1, "", "eval_dataloader"], [242, 4, 1, "", "eval_func"], [242, 3, 1, "", "execute"], [242, 4, 1, "", "model"], [242, 3, 1, "", "on_after_compute_loss"], [242, 3, 1, "", "on_after_eval"], [242, 3, 1, "", "on_after_optimizer_step"], [242, 3, 1, "", "on_batch_begin"], [242, 3, 1, "", "on_batch_end"], [242, 3, 1, "", "on_before_eval"], [242, 3, 1, "", "on_before_optimizer_step"], [242, 3, 1, "", "on_epoch_begin"], [242, 3, 1, "", "on_epoch_end"], [242, 3, 1, "", "on_post_grad"], [242, 3, 1, "", "on_step_begin"], [242, 3, 1, "", "on_step_end"], [242, 3, 1, "", "on_train_begin"], [242, 3, 1, "", "on_train_end"], [242, 3, 1, "", "post_epoch_end"], [242, 3, 1, "", "post_process"], [242, 3, 1, "", "pre_epoch_begin"], [242, 3, 1, "", "pre_process"], [242, 3, 1, "", "prepare"], [242, 3, 1, "", "prepare_qat"], [242, 3, 1, "", "register_hook"], [242, 4, 1, "", "train_dataloader"], [242, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[264, 2, 1, "", "BaseTransform"], [264, 2, 1, "", "Dataset"], [264, 2, 1, "", "Datasets"], [264, 2, 1, "", "FILTERS"], [264, 2, 1, "", "Filter"], [264, 2, 1, "", "IterableDataset"], [264, 2, 1, "", "TRANSFORMS"], [247, 0, 0, "-", "dataloaders"], [264, 1, 1, "", "dataset_registry"], [259, 0, 0, "-", "datasets"], [264, 1, 1, "", "filter_registry"], [263, 0, 0, "-", "filters"], [264, 1, 1, "", "transform_registry"], [266, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[264, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[243, 0, 0, "-", "base_dataloader"], [244, 0, 0, "-", "dataloader"], [245, 0, 0, "-", "default_dataloader"], [246, 0, 0, "-", "fetcher"], [248, 0, 0, "-", "mxnet_dataloader"], [249, 0, 0, "-", "onnxrt_dataloader"], [250, 0, 0, "-", "pytorch_dataloader"], [251, 0, 0, "-", "sampler"], [252, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[243, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[243, 3, 1, "", "batch"], [243, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[245, 2, 1, "", "DefaultDataLoader"], [245, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[245, 3, 1, "", "batch"], [245, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[246, 2, 1, "", "Fetcher"], [246, 2, 1, "", "IndexFetcher"], [246, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[248, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[249, 2, 1, "", "ONNXRTBertDataLoader"], [249, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[250, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[251, 2, 1, "", "BatchSampler"], [251, 2, 1, "", "IterableSampler"], [251, 2, 1, "", "Sampler"], [251, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[252, 2, 1, "", "TFDataDataLoader"], [252, 2, 1, "", "TensorflowBertDataLoader"], [252, 2, 1, "", "TensorflowDataLoader"], [252, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[252, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[259, 2, 1, "", "Dataset"], [259, 2, 1, "", "Datasets"], [259, 2, 1, "", "IterableDataset"], [253, 0, 0, "-", "bert_dataset"], [254, 0, 0, "-", "coco_dataset"], [255, 0, 0, "-", "dataset"], [259, 1, 1, "", "dataset_registry"], [256, 0, 0, "-", "dummy_dataset"], [257, 0, 0, "-", "dummy_dataset_v2"], [258, 0, 0, "-", "imagenet_dataset"], [260, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[253, 2, 1, "", "InputFeatures"], [253, 2, 1, "", "ONNXRTBertDataset"], [253, 2, 1, "", "ParseDecodeBert"], [253, 2, 1, "", "PytorchBertDataset"], [253, 2, 1, "", "TensorflowBertDataset"], [253, 2, 1, "", "TensorflowModelZooBertDataset"], [253, 1, 1, "", "convert_examples_to_features"], [253, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[253, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[254, 2, 1, "", "COCONpy"], [254, 2, 1, "", "COCORaw"], [254, 2, 1, "", "COCORecordDataset"], [254, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[255, 2, 1, "", "CIFAR10"], [255, 2, 1, "", "CIFAR100"], [255, 2, 1, "", "Dataset"], [255, 2, 1, "", "Datasets"], [255, 2, 1, "", "FashionMNIST"], [255, 2, 1, "", "ImageFolder"], [255, 2, 1, "", "IterableDataset"], [255, 2, 1, "", "MNIST"], [255, 2, 1, "", "MXNetCIFAR10"], [255, 2, 1, "", "MXNetCIFAR100"], [255, 2, 1, "", "MXNetDatasets"], [255, 2, 1, "", "MXNetFashionMNIST"], [255, 2, 1, "", "MXNetImageFolder"], [255, 2, 1, "", "MXNetMNIST"], [255, 2, 1, "", "ONNXRTITDatasets"], [255, 2, 1, "", "ONNXRTQLDatasets"], [255, 2, 1, "", "PyTorchDatasets"], [255, 2, 1, "", "PytorchCIFAR10"], [255, 2, 1, "", "PytorchCIFAR100"], [255, 2, 1, "", "PytorchFashionMNIST"], [255, 2, 1, "", "PytorchMNIST"], [255, 2, 1, "", "PytorchMxnetWrapDataset"], [255, 2, 1, "", "PytorchMxnetWrapFunction"], [255, 2, 1, "", "TensorflowCIFAR10"], [255, 2, 1, "", "TensorflowCIFAR100"], [255, 2, 1, "", "TensorflowDatasets"], [255, 2, 1, "", "TensorflowFashionMNIST"], [255, 2, 1, "", "TensorflowImageFolder"], [255, 2, 1, "", "TensorflowImageRecord"], [255, 2, 1, "", "TensorflowMNIST"], [255, 2, 1, "", "TensorflowTFRecordDataset"], [255, 2, 1, "", "TensorflowVOCRecord"], [255, 1, 1, "", "calculate_md5"], [255, 1, 1, "", "check_integrity"], [255, 1, 1, "", "dataset_registry"], [255, 1, 1, "", "download_url"], [255, 5, 1, "", "framework_datasets"], [255, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[255, 3, 1, "", "download"], [255, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[255, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[255, 4, 1, "", "class_to_idx"], [255, 3, 1, "", "download"], [255, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[256, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[257, 2, 1, "", "DummyDataset"], [257, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[258, 2, 1, "", "ImagenetRaw"], [258, 2, 1, "", "MXNetImagenetRaw"], [258, 2, 1, "", "ONNXRTImagenetDataset"], [258, 2, 1, "", "PytorchImagenetRaw"], [258, 2, 1, "", "TensorflowImagenetDataset"], [258, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[260, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[263, 2, 1, "", "FILTERS"], [263, 2, 1, "", "Filter"], [261, 0, 0, "-", "coco_filter"], [262, 0, 0, "-", "filter"], [263, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[261, 2, 1, "", "LabelBalanceCOCORawFilter"], [261, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[262, 2, 1, "", "FILTERS"], [262, 2, 1, "", "Filter"], [262, 2, 1, "", "MXNetFilters"], [262, 2, 1, "", "ONNXRTITFilters"], [262, 2, 1, "", "ONNXRTQLFilters"], [262, 2, 1, "", "PyTorchFilters"], [262, 2, 1, "", "TensorflowFilters"], [262, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[266, 2, 1, "", "BaseTransform"], [266, 2, 1, "", "TRANSFORMS"], [265, 0, 0, "-", "imagenet_transform"], [267, 0, 0, "-", "tokenization"], [268, 0, 0, "-", "transform"], [266, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[266, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[265, 2, 1, "", "BilinearImagenetTransform"], [265, 2, 1, "", "LabelShift"], [265, 2, 1, "", "ONNXResizeCropImagenetTransform"], [265, 2, 1, "", "OnnxBilinearImagenetTransform"], [265, 2, 1, "", "ParseDecodeImagenet"], [265, 2, 1, "", "ParseDecodeImagenetTransform"], [265, 2, 1, "", "QuantizedInput"], [265, 2, 1, "", "ResizeWithAspectRatio"], [265, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[267, 2, 1, "", "BasicTokenizer"], [267, 2, 1, "", "FullTokenizer"], [267, 2, 1, "", "WordpieceTokenizer"], [267, 1, 1, "", "convert_by_vocab"], [267, 1, 1, "", "convert_to_unicode"], [267, 1, 1, "", "load_vocab"], [267, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[267, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[267, 3, 1, "", "convert_ids_to_tokens"], [267, 3, 1, "", "convert_tokens_to_ids"], [267, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[267, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[268, 2, 1, "", "AlignImageChannelTransform"], [268, 2, 1, "", "BaseTransform"], [268, 2, 1, "", "CastONNXTransform"], [268, 2, 1, "", "CastPyTorchTransform"], [268, 2, 1, "", "CastTFTransform"], [268, 2, 1, "", "CenterCropTFTransform"], [268, 2, 1, "", "CenterCropTransform"], [268, 2, 1, "", "CollectTransform"], [268, 2, 1, "", "ComposeTransform"], [268, 2, 1, "", "CropResizeTFTransform"], [268, 2, 1, "", "CropResizeTransform"], [268, 2, 1, "", "CropToBoundingBox"], [268, 2, 1, "", "InputFeatures"], [268, 2, 1, "", "MXNetCropResizeTransform"], [268, 2, 1, "", "MXNetCropToBoundingBox"], [268, 2, 1, "", "MXNetNormalizeTransform"], [268, 2, 1, "", "MXNetTransforms"], [268, 2, 1, "", "MXNetTranspose"], [268, 2, 1, "", "NormalizeTFTransform"], [268, 2, 1, "", "NormalizeTransform"], [268, 2, 1, "", "ONNXRTCropToBoundingBox"], [268, 2, 1, "", "ONNXRTITTransforms"], [268, 2, 1, "", "ONNXRTQLTransforms"], [268, 2, 1, "", "PaddedCenterCropTransform"], [268, 2, 1, "", "ParseDecodeVocTransform"], [268, 2, 1, "", "PyTorchAlignImageChannel"], [268, 2, 1, "", "PyTorchCropResizeTransform"], [268, 2, 1, "", "PyTorchNormalizeTransform"], [268, 2, 1, "", "PyTorchTransforms"], [268, 2, 1, "", "PyTorchTranspose"], [268, 2, 1, "", "PytorchMxnetTransform"], [268, 2, 1, "", "PytorchMxnetWrapFunction"], [268, 2, 1, "", "RandomCropTFTransform"], [268, 2, 1, "", "RandomCropTransform"], [268, 2, 1, "", "RandomHorizontalFlip"], [268, 2, 1, "", "RandomResizedCropMXNetTransform"], [268, 2, 1, "", "RandomResizedCropPytorchTransform"], [268, 2, 1, "", "RandomResizedCropTFTransform"], [268, 2, 1, "", "RandomResizedCropTransform"], [268, 2, 1, "", "RandomVerticalFlip"], [268, 2, 1, "", "RescaleKerasPretrainTransform"], [268, 2, 1, "", "RescaleTFTransform"], [268, 2, 1, "", "RescaleTransform"], [268, 2, 1, "", "ResizeMXNetTransform"], [268, 2, 1, "", "ResizePytorchTransform"], [268, 2, 1, "", "ResizeTFTransform"], [268, 2, 1, "", "ResizeTransform"], [268, 2, 1, "", "ResizeWithRatio"], [268, 2, 1, "", "SquadExample"], [268, 2, 1, "", "TFModelZooCollectTransform"], [268, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [268, 2, 1, "", "TFSquadV1PostTransform"], [268, 2, 1, "", "TRANSFORMS"], [268, 2, 1, "", "TensorflowCropToBoundingBox"], [268, 2, 1, "", "TensorflowRandomHorizontalFlip"], [268, 2, 1, "", "TensorflowRandomVerticalFlip"], [268, 2, 1, "", "TensorflowResizeWithRatio"], [268, 2, 1, "", "TensorflowTransform"], [268, 2, 1, "", "TensorflowTransforms"], [268, 2, 1, "", "TensorflowTranspose"], [268, 2, 1, "", "TensorflowWrapFunction"], [268, 2, 1, "", "ToArray"], [268, 2, 1, "", "ToNDArrayTransform"], [268, 2, 1, "", "Transforms"], [268, 2, 1, "", "Transpose"], [268, 1, 1, "", "convert_examples_to_features"], [268, 1, 1, "", "get_final_text"], [268, 1, 1, "", "get_torchvision_map"], [268, 1, 1, "", "read_squad_examples"], [268, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[268, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[268, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[268, 3, 1, "", "get_postprocess_result"], [268, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[268, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[269, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[269, 6, 1, "", "_epoch_ran"], [269, 6, 1, "", "best_model"], [269, 6, 1, "", "best_score"], [269, 3, 1, "", "create_criterion"], [269, 3, 1, "", "create_optimizer"], [269, 4, 1, "", "criterion"], [269, 6, 1, "", "eval_frequency"], [269, 4, 1, "", "evaluation_distributed"], [269, 3, 1, "", "execute"], [269, 3, 1, "", "generate_hooks"], [269, 3, 1, "", "init_train_cfg"], [269, 3, 1, "", "on_post_forward"], [269, 4, 1, "", "optimizer"], [269, 3, 1, "", "pre_process"], [269, 3, 1, "", "prepare"], [269, 4, 1, "", "student_model"], [269, 4, 1, "", "teacher_model"], [269, 4, 1, "", "train_cfg"], [269, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[270, 1, 1, "", "onnx_qlinear_to_qdq"], [271, 0, 0, "-", "qlinear2qdq"], [272, 0, 0, "-", "torch2onnx"], [270, 1, 1, "", "torch_to_fp32_onnx"], [270, 1, 1, "", "torch_to_int8_onnx"], [273, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[271, 1, 1, "", "check_model"], [271, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.torch2onnx": [[272, 1, 1, "", "build_scale_mapping"], [272, 1, 1, "", "get_node_mapping"], [272, 1, 1, "", "get_quantizable_onnx_ops"], [272, 1, 1, "", "qdq_fp32_bias"], [272, 1, 1, "", "qdq_fp32_bias_qdq"], [272, 1, 1, "", "qdq_int32_bias"], [272, 1, 1, "", "recalculate_bias"], [272, 1, 1, "", "remove_nodes_by_name"], [272, 1, 1, "", "set_data_type"], [272, 1, 1, "", "set_scale_info"], [272, 1, 1, "", "sub_graph_with_int32_bias"], [272, 1, 1, "", "torch_to_fp32_onnx"], [272, 1, 1, "", "torch_to_int8_onnx"], [272, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[273, 2, 1, "", "DummyDataReader"], [273, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[273, 3, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[274, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[274, 3, 1, "", "dataset"], [274, 4, 1, "", "eval_dataloader"], [274, 4, 1, "", "eval_func"], [274, 4, 1, "", "input"], [274, 4, 1, "", "metric"], [274, 4, 1, "", "model"], [274, 4, 1, "", "output"], [274, 4, 1, "", "postprocess"], [274, 4, 1, "", "precisions"], [274, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[282, 2, 1, "", "BaseMetric"], [282, 2, 1, "", "METRICS"], [276, 0, 0, "-", "bleu"], [277, 0, 0, "-", "bleu_util"], [278, 0, 0, "-", "coco_label_map"], [279, 0, 0, "-", "coco_tools"], [280, 0, 0, "-", "evaluate_squad"], [281, 0, 0, "-", "f1"], [283, 0, 0, "-", "metric"], [282, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[282, 4, 1, "", "hvd"], [282, 4, 1, "", "metric"], [282, 3, 1, "", "reset"], [282, 3, 1, "", "result"], [282, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[282, 6, 1, "", "metrics"], [282, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[276, 2, 1, "", "BLEU"], [276, 2, 1, "", "UnicodeRegex"], [276, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[276, 6, 1, "", "labels"], [276, 6, 1, "", "predictions"], [276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[276, 6, 1, "", "nondigit_punct_re"], [276, 3, 1, "", "property_chars"], [276, 6, 1, "", "punct_nondigit_re"], [276, 6, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[277, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[279, 2, 1, "", "COCOEvalWrapper"], [279, 2, 1, "", "COCOWrapper"], [279, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [279, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [279, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[279, 3, 1, "", "ComputeMetrics"], [279, 3, 1, "", "GetAgnosticMode"], [279, 3, 1, "", "GetCategory"], [279, 3, 1, "", "GetCategoryIdList"], [279, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[279, 3, 1, "", "LoadAnnotations"], [279, 6, 1, "", "dataset"], [279, 6, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[280, 1, 1, "", "evaluate"], [280, 1, 1, "", "exact_match_score"], [280, 1, 1, "", "f1_score"], [280, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[281, 1, 1, "", "evaluate"], [281, 1, 1, "", "f1_score"], [281, 1, 1, "", "metric_max_over_ground_truths"], [281, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[283, 2, 1, "", "Accuracy"], [283, 2, 1, "", "BaseMetric"], [283, 2, 1, "", "COCOmAPv2"], [283, 2, 1, "", "F1"], [283, 2, 1, "", "GeneralTopK"], [283, 2, 1, "", "Loss"], [283, 2, 1, "", "MAE"], [283, 2, 1, "", "METRICS"], [283, 2, 1, "", "MSE"], [283, 2, 1, "", "MXNetMetrics"], [283, 2, 1, "", "ONNXRTGLUE"], [283, 2, 1, "", "ONNXRTITMetrics"], [283, 2, 1, "", "ONNXRTQLMetrics"], [283, 2, 1, "", "PyTorchLoss"], [283, 2, 1, "", "PyTorchMetrics"], [283, 2, 1, "", "RMSE"], [283, 2, 1, "", "ROC"], [283, 2, 1, "", "SquadF1"], [283, 2, 1, "", "TensorflowCOCOMAP"], [283, 2, 1, "", "TensorflowMAP"], [283, 2, 1, "", "TensorflowMetrics"], [283, 2, 1, "", "TensorflowTopK"], [283, 2, 1, "", "TensorflowVOCMAP"], [283, 2, 1, "", "WrapMXNetMetric"], [283, 2, 1, "", "WrapONNXRTMetric"], [283, 2, 1, "", "WrapPyTorchMetric"], [283, 2, 1, "", "mIOU"], [283, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[283, 6, 1, "", "label_list"], [283, 6, 1, "", "pred_list"], [283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 6, 1, "", "sample"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[283, 4, 1, "", "hvd"], [283, 4, 1, "", "metric"], [283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[283, 6, 1, "", "k"], [283, 6, 1, "", "num_correct"], [283, 6, 1, "", "num_sample"], [283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 6, 1, "", "sample"], [283, 6, 1, "", "sum"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[283, 6, 1, "", "compare_label"], [283, 6, 1, "", "label_list"], [283, 6, 1, "", "pred_list"], [283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[283, 6, 1, "", "metrics"], [283, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[283, 6, 1, "", "compare_label"], [283, 6, 1, "", "label_list"], [283, 6, 1, "", "pred_list"], [283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[283, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[283, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[283, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[283, 3, 1, "", "compute"], [283, 3, 1, "", "reset"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[283, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[283, 6, 1, "", "mse"], [283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[283, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[283, 6, 1, "", "k"], [283, 6, 1, "", "num_correct"], [283, 6, 1, "", "num_sample"], [283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[284, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[284, 4, 1, "", "precisions"], [284, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[285, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[285, 3, 1, "", "dataset"], [285, 4, 1, "", "destination"], [285, 4, 1, "", "eval_dataloader"], [285, 4, 1, "", "eval_func"], [285, 4, 1, "", "metric"], [285, 4, 1, "", "model"], [285, 4, 1, "", "postprocess"], [285, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[298, 2, 1, "", "BasicNAS"], [298, 2, 1, "", "DyNAS"], [298, 2, 1, "", "NAS"], [286, 0, 0, "-", "basic_nas"], [287, 0, 0, "-", "dynas"], [292, 0, 0, "-", "dynast"], [299, 0, 0, "-", "nas"], [300, 0, 0, "-", "nas_utils"], [301, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[298, 3, 1, "", "estimate"], [298, 3, 1, "", "execute"], [298, 3, 1, "", "init_by_cfg"], [298, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[298, 3, 1, "", "create_acc_predictor"], [298, 3, 1, "", "create_latency_predictor"], [298, 3, 1, "", "create_macs_predictor"], [298, 3, 1, "", "estimate"], [298, 3, 1, "", "init_cfg"], [298, 3, 1, "", "init_for_search"], [298, 3, 1, "", "search"], [298, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[286, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[286, 3, 1, "", "estimate"], [286, 3, 1, "", "execute"], [286, 3, 1, "", "init_by_cfg"], [286, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[287, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[287, 3, 1, "", "create_acc_predictor"], [287, 3, 1, "", "create_latency_predictor"], [287, 3, 1, "", "create_macs_predictor"], [287, 3, 1, "", "estimate"], [287, 3, 1, "", "init_cfg"], [287, 3, 1, "", "init_for_search"], [287, 3, 1, "", "search"], [287, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[288, 0, 0, "-", "dynas_manager"], [289, 0, 0, "-", "dynas_predictor"], [290, 0, 0, "-", "dynas_search"], [291, 0, 0, "-", "dynas_utils"], [293, 0, 0, "-", "supernetwork"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[288, 2, 1, "", "ParameterManager"], [288, 2, 1, "", "TransformerLTEncoding"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[288, 3, 1, "", "create_training_set"], [288, 3, 1, "", "import_csv"], [288, 3, 1, "", "onehot_generic"], [288, 3, 1, "", "process_param_dict"], [288, 3, 1, "", "random_sample"], [288, 3, 1, "", "random_samples"], [288, 3, 1, "", "set_seed"], [288, 3, 1, "", "translate2param"], [288, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding": [[288, 3, 1, "", "create_training_set"], [288, 3, 1, "", "import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[289, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[289, 3, 1, "", "get_metrics"], [289, 3, 1, "", "get_parameters"], [289, 3, 1, "", "load"], [289, 3, 1, "", "predict"], [289, 3, 1, "", "save"], [289, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[290, 2, 1, "", "ProblemMultiObjective"], [290, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[290, 3, 1, "", "configure_age"], [290, 3, 1, "", "configure_nsga2"], [290, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[291, 2, 1, "", "EvaluationInterface"], [291, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [291, 2, 1, "", "EvaluationInterfaceResNet50"], [291, 2, 1, "", "EvaluationInterfaceTransformerLT"], [291, 2, 1, "", "OFARunner"], [291, 2, 1, "", "Runner"], [291, 2, 1, "", "TorchVisionReference"], [291, 2, 1, "", "TransformerLTRunner"], [291, 1, 1, "", "get_macs"], [291, 1, 1, "", "get_torchvision_model"], [291, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[291, 3, 1, "", "clear_csv"], [291, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[291, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[291, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT": [[291, 3, 1, "", "clear_csv"], [291, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[291, 3, 1, "", "estimate_accuracy_top1"], [291, 3, 1, "", "estimate_latency"], [291, 3, 1, "", "estimate_macs"], [291, 3, 1, "", "get_subnet"], [291, 3, 1, "", "measure_latency"], [291, 3, 1, "", "validate_macs"], [291, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[291, 3, 1, "", "measure_latency"], [291, 3, 1, "", "validate_macs"], [291, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner": [[291, 3, 1, "", "measure_latency"], [291, 3, 1, "", "validate_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[294, 0, 0, "-", "machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[295, 0, 0, "-", "modules_supernetwork"], [296, 0, 0, "-", "transformer_interface"], [297, 0, 0, "-", "transformer_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[295, 2, 1, "", "MultiheadAttentionSuper"], [295, 1, 1, "", "get_incremental_state"], [295, 1, 1, "", "set_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper": [[295, 3, 1, "", "forward"], [295, 3, 1, "", "reorder_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[296, 1, 1, "", "compute_bleu"], [296, 1, 1, "", "compute_latency"], [296, 1, 1, "", "compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[297, 2, 1, "", "TransformerDecoder"], [297, 2, 1, "", "TransformerDecoderLayer"], [297, 2, 1, "", "TransformerEncoder"], [297, 2, 1, "", "TransformerEncoderLayer"], [297, 2, 1, "", "TransformerSuperNetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder": [[297, 3, 1, "", "extract_features"], [297, 3, 1, "", "forward"], [297, 3, 1, "", "max_positions"], [297, 3, 1, "", "output_layer"], [297, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer": [[297, 3, 1, "", "forward"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder": [[297, 3, 1, "", "forward"], [297, 3, 1, "", "max_positions"], [297, 3, 1, "", "reorder_encoder_out"], [297, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer": [[297, 3, 1, "", "forward"], [297, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.nas": [[299, 2, 1, "", "NAS"], [299, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[299, 3, 1, "", "count_model_parameters"], [299, 3, 1, "", "dump_search_results"], [299, 3, 1, "", "estimate"], [299, 3, 1, "", "find_best_model_archs"], [299, 3, 1, "", "init_search_cfg"], [299, 3, 1, "", "load_search_results"], [299, 3, 1, "", "metrics_conversion"], [299, 4, 1, "", "model_builder"], [299, 3, 1, "", "params_vec2params_dict"], [299, 3, 1, "", "search"], [299, 4, 1, "", "search_algorithm"], [299, 4, 1, "", "search_space"], [299, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[300, 1, 1, "", "create_search_space_pool"], [300, 1, 1, "", "find_pareto_front"], [300, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[301, 2, 1, "", "BayesianOptimizationSearcher"], [301, 2, 1, "", "GridSearcher"], [301, 2, 1, "", "RandomSearcher"], [301, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[301, 3, 1, "", "get_feedback"], [301, 3, 1, "", "indices2params_vec"], [301, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[301, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[301, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[301, 3, 1, "", "get_feedback"], [301, 3, 1, "", "params_vec2params_dict"], [301, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[302, 2, 1, "", "Pruning"], [302, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[302, 6, 1, "", "conf"], [302, 4, 1, "", "evaluation_distributed"], [302, 3, 1, "", "execute"], [302, 3, 1, "", "generate_hooks"], [302, 3, 1, "", "generate_pruners"], [302, 3, 1, "", "get_sparsity_ratio"], [302, 3, 1, "", "pre_process"], [302, 3, 1, "", "prepare"], [302, 6, 1, "", "pruners"], [302, 4, 1, "", "pruning_func"], [302, 4, 1, "", "train_distributed"], [302, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[302, 3, 1, "", "on_after_compute_loss"], [302, 3, 1, "", "on_batch_begin"], [302, 3, 1, "", "on_batch_end"], [302, 3, 1, "", "on_epoch_begin"], [302, 3, 1, "", "on_epoch_end"], [302, 3, 1, "", "on_step_begin"], [302, 3, 1, "", "on_step_end"], [302, 3, 1, "", "on_train_begin"], [302, 3, 1, "", "on_train_end"], [302, 3, 1, "", "post_epoch_end"], [302, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[303, 2, 1, "", "PATTERNS"], [304, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[303, 6, 1, "", "patterns"], [303, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[304, 2, 1, "", "PATTERNS"], [305, 0, 0, "-", "pattern"], [306, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[304, 6, 1, "", "patterns"], [304, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[305, 2, 1, "", "PATTERNS"], [305, 2, 1, "", "PatternBase"], [305, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[305, 6, 1, "", "patterns"], [305, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[305, 3, 1, "", "compute_sparsity"], [305, 3, 1, "", "reduce"], [305, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[306, 2, 1, "", "TilePatternBase"], [306, 2, 1, "", "TilePattern_1x1"], [306, 2, 1, "", "TilePattern_1x16"], [306, 2, 1, "", "TilePattern_1x2"], [306, 2, 1, "", "TilePattern_2x2"], [306, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[306, 3, 1, "", "compute_sparsity"], [306, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pruning_v2": [[307, 2, 1, "", "Pruning"], [307, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[307, 6, 1, "", "conf"], [307, 4, 1, "", "evaluation_distributed"], [307, 3, 1, "", "execute"], [307, 3, 1, "", "generate_hooks"], [307, 3, 1, "", "get_sparsity_ratio"], [307, 3, 1, "", "pre_process"], [307, 3, 1, "", "prepare"], [307, 6, 1, "", "pruners"], [307, 4, 1, "", "pruning_func"], [307, 4, 1, "", "train_distributed"], [307, 3, 1, "", "update_config"]], "neural_compressor.experimental.pruning_v2.TfPruningCallback": [[307, 3, 1, "", "on_after_compute_loss"], [307, 3, 1, "", "on_batch_begin"], [307, 3, 1, "", "on_batch_end"], [307, 3, 1, "", "on_epoch_begin"], [307, 3, 1, "", "on_epoch_end"], [307, 3, 1, "", "on_step_begin"], [307, 3, 1, "", "on_step_end"], [307, 3, 1, "", "on_train_begin"], [307, 3, 1, "", "on_train_end"], [307, 3, 1, "", "post_epoch_end"], [307, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pytorch_pruner": [[309, 0, 0, "-", "logger"], [310, 0, 0, "-", "patterns"], [311, 0, 0, "-", "prune_utils"], [312, 0, 0, "-", "pruner"], [313, 0, 0, "-", "pruning"], [314, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[310, 2, 1, "", "Pattern"], [310, 2, 1, "", "PatternNInM"], [310, 2, 1, "", "PatternNxM"], [310, 1, 1, "", "get_pattern"], [310, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[310, 3, 1, "", "get_block_size_dict"], [310, 3, 1, "", "get_mask_single"], [310, 3, 1, "", "get_masks"], [310, 3, 1, "", "get_masks_global"], [310, 3, 1, "", "get_masks_local"], [310, 3, 1, "", "get_pattern_lock_masks"], [310, 3, 1, "", "get_sparsity_ratio"], [310, 6, 1, "", "is_global"], [310, 6, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[310, 6, 1, "", "M"], [310, 6, 1, "", "N"], [310, 3, 1, "", "get_masks_global"], [310, 3, 1, "", "get_pattern_lock_masks"], [310, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[310, 6, 1, "", "block_size"], [310, 3, 1, "", "get_block_size_dict"], [310, 3, 1, "", "get_masks_global"], [310, 3, 1, "", "get_pattern_lock_masks"], [310, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[311, 1, 1, "", "check_config"], [311, 1, 1, "", "parse_not_to_prune"], [311, 1, 1, "", "parse_to_prune"], [311, 1, 1, "", "process_and_check_config"], [311, 1, 1, "", "process_config"], [311, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[312, 2, 1, "", "MagnitudePruner"], [312, 2, 1, "", "PatternLockPruner"], [312, 2, 1, "", "Pruner"], [312, 2, 1, "", "SnipMomentumPruner"], [312, 2, 1, "", "SnipPruner"], [312, 1, 1, "", "get_pruner"], [312, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[312, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[312, 3, 1, "", "on_after_optimizer_step"], [312, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[312, 3, 1, "", "check_is_pruned_step"], [312, 6, 1, "", "config"], [312, 6, 1, "", "current_sparsity_ratio"], [312, 6, 1, "", "end_step"], [312, 6, 1, "", "global_step"], [312, 3, 1, "", "mask_weights"], [312, 6, 1, "", "masks"], [312, 6, 1, "", "max_sparsity_ratio_per_layer"], [312, 6, 1, "", "modules"], [312, 3, 1, "", "on_after_eval"], [312, 3, 1, "", "on_after_optimizer_step"], [312, 3, 1, "", "on_before_eval"], [312, 3, 1, "", "on_before_optimizer_step"], [312, 3, 1, "", "on_epoch_begin"], [312, 3, 1, "", "on_epoch_end"], [312, 3, 1, "", "on_step_begin"], [312, 3, 1, "", "on_step_end"], [312, 3, 1, "", "on_train_begin"], [312, 3, 1, "", "on_train_end"], [312, 6, 1, "", "pattern"], [312, 6, 1, "", "scheduler"], [312, 6, 1, "", "scores"], [312, 6, 1, "", "start_step"], [312, 6, 1, "", "target_sparsity_ratio"], [312, 6, 1, "", "update_frequency_on_step"], [312, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[312, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[312, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[313, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[313, 6, 1, "", "config_file_path"], [313, 3, 1, "", "get_sparsity_ratio"], [313, 6, 1, "", "model"], [313, 3, 1, "", "on_after_eval"], [313, 3, 1, "", "on_after_optimizer_step"], [313, 3, 1, "", "on_before_eval"], [313, 3, 1, "", "on_before_optimizer_step"], [313, 3, 1, "", "on_epoch_begin"], [313, 3, 1, "", "on_epoch_end"], [313, 3, 1, "", "on_step_begin"], [313, 3, 1, "", "on_step_end"], [313, 3, 1, "", "on_train_begin"], [313, 3, 1, "", "on_train_end"], [313, 3, 1, "", "prepare"], [313, 6, 1, "", "pruner_info"], [313, 6, 1, "", "pruners"], [313, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[314, 2, 1, "", "IterativeScheduler"], [314, 2, 1, "", "OneshotScheduler"], [314, 2, 1, "", "Scheduler"], [314, 1, 1, "", "get_scheduler"], [314, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[314, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[314, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[314, 6, 1, "", "config"], [314, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[315, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[315, 4, 1, "", "calib_dataloader"], [315, 3, 1, "", "dataset"], [315, 3, 1, "", "execute"], [315, 4, 1, "", "metric"], [315, 4, 1, "", "model"], [315, 4, 1, "", "objective"], [315, 4, 1, "", "postprocess"], [315, 3, 1, "", "pre_process"], [315, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[316, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[316, 3, 1, "", "append"], [316, 3, 1, "", "combine"], [316, 4, 1, "", "eval_func"], [316, 4, 1, "", "model"], [316, 4, 1, "", "train_func"]], "neural_compressor.metric": [[324, 2, 1, "", "BaseMetric"], [324, 2, 1, "", "METRICS"], [324, 2, 1, "", "Metric"], [318, 0, 0, "-", "bleu"], [319, 0, 0, "-", "bleu_util"], [320, 0, 0, "-", "coco_label_map"], [321, 0, 0, "-", "coco_tools"], [322, 0, 0, "-", "evaluate_squad"], [323, 0, 0, "-", "f1"], [325, 0, 0, "-", "metric"], [324, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[324, 4, 1, "", "hvd"], [324, 4, 1, "", "metric"], [324, 3, 1, "", "reset"], [324, 3, 1, "", "result"], [324, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[324, 6, 1, "", "metrics"], [324, 3, 1, "", "register"]], "neural_compressor.metric.bleu": [[318, 2, 1, "", "BLEU"], [318, 2, 1, "", "UnicodeRegex"], [318, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[318, 6, 1, "", "labels"], [318, 6, 1, "", "predictions"], [318, 3, 1, "", "reset"], [318, 3, 1, "", "result"], [318, 3, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[318, 6, 1, "", "nondigit_punct_re"], [318, 3, 1, "", "property_chars"], [318, 6, 1, "", "punct_nondigit_re"], [318, 6, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[319, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[321, 2, 1, "", "COCOEvalWrapper"], [321, 2, 1, "", "COCOWrapper"], [321, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [321, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [321, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[321, 3, 1, "", "ComputeMetrics"], [321, 3, 1, "", "GetAgnosticMode"], [321, 3, 1, "", "GetCategory"], [321, 3, 1, "", "GetCategoryIdList"], [321, 3, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[321, 3, 1, "", "LoadAnnotations"], [321, 6, 1, "", "dataset"], [321, 6, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[322, 1, 1, "", "evaluate"], [322, 1, 1, "", "exact_match_score"], [322, 1, 1, "", "f1_score"], [322, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[323, 1, 1, "", "evaluate"], [323, 1, 1, "", "f1_score"], [323, 1, 1, "", "metric_max_over_ground_truths"], [323, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[325, 2, 1, "", "Accuracy"], [325, 2, 1, "", "BaseMetric"], [325, 2, 1, "", "COCOmAPv2"], [325, 2, 1, "", "F1"], [325, 2, 1, "", "GeneralTopK"], [325, 2, 1, "", "Loss"], [325, 2, 1, "", "MAE"], [325, 2, 1, "", "METRICS"], [325, 2, 1, "", "MSE"], [325, 2, 1, "", "MXNetMetrics"], [325, 2, 1, "", "Metric"], [325, 2, 1, "", "ONNXRTGLUE"], [325, 2, 1, "", "ONNXRTITMetrics"], [325, 2, 1, "", "ONNXRTQLMetrics"], [325, 2, 1, "", "PyTorchLoss"], [325, 2, 1, "", "PyTorchMetrics"], [325, 2, 1, "", "RMSE"], [325, 2, 1, "", "ROC"], [325, 2, 1, "", "SquadF1"], [325, 2, 1, "", "TensorflowCOCOMAP"], [325, 2, 1, "", "TensorflowMAP"], [325, 2, 1, "", "TensorflowMetrics"], [325, 2, 1, "", "TensorflowTopK"], [325, 2, 1, "", "TensorflowVOCMAP"], [325, 2, 1, "", "WrapMXNetMetric"], [325, 2, 1, "", "WrapONNXRTMetric"], [325, 2, 1, "", "WrapPyTorchMetric"], [325, 2, 1, "", "mIOU"], [325, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[325, 6, 1, "", "label_list"], [325, 6, 1, "", "pred_list"], [325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 6, 1, "", "sample"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[325, 4, 1, "", "hvd"], [325, 4, 1, "", "metric"], [325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[325, 6, 1, "", "k"], [325, 6, 1, "", "num_correct"], [325, 6, 1, "", "num_sample"], [325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 6, 1, "", "sample"], [325, 6, 1, "", "sum"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[325, 6, 1, "", "compare_label"], [325, 6, 1, "", "label_list"], [325, 6, 1, "", "pred_list"], [325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[325, 6, 1, "", "metrics"], [325, 3, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[325, 6, 1, "", "compare_label"], [325, 6, 1, "", "label_list"], [325, 6, 1, "", "pred_list"], [325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[325, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[325, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[325, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[325, 3, 1, "", "compute"], [325, 3, 1, "", "reset"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[325, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[325, 6, 1, "", "mse"], [325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[325, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[325, 6, 1, "", "k"], [325, 6, 1, "", "num_correct"], [325, 6, 1, "", "num_sample"], [325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.mix_precision": [[326, 1, 1, "", "fit"]], "neural_compressor.model": [[328, 2, 1, "", "BaseModel"], [328, 2, 1, "", "Model"], [327, 0, 0, "-", "base_model"], [329, 0, 0, "-", "keras_model"], [330, 0, 0, "-", "model"], [331, 0, 0, "-", "mxnet_model"], [332, 0, 0, "-", "nets_factory"], [333, 0, 0, "-", "onnx_model"], [334, 0, 0, "-", "tensorflow_model"], [335, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[328, 3, 1, "", "export"], [328, 3, 1, "", "framework"], [328, 4, 1, "", "graph_info"], [328, 4, 1, "", "model"], [328, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[327, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[327, 3, 1, "", "export"], [327, 3, 1, "", "framework"], [327, 4, 1, "", "graph_info"], [327, 4, 1, "", "model"], [327, 3, 1, "", "save"]], "neural_compressor.model.keras_model": [[329, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[329, 3, 1, "", "framework"], [329, 4, 1, "", "graph_info"], [329, 4, 1, "", "model"], [329, 4, 1, "", "q_config"], [329, 3, 1, "", "save"]], "neural_compressor.model.model": [[330, 2, 1, "", "Model"], [330, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[331, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[331, 3, 1, "", "framework"], [331, 4, 1, "", "model"], [331, 3, 1, "", "save"]], "neural_compressor.model.nets_factory": [[332, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.nets_factory.TFSlimNetsFactory": [[332, 3, 1, "", "register"]], "neural_compressor.model.onnx_model": [[333, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[333, 3, 1, "", "add_initializer"], [333, 3, 1, "", "add_initializers"], [333, 3, 1, "", "add_node"], [333, 3, 1, "", "add_nodes"], [333, 3, 1, "", "export"], [333, 3, 1, "", "find_node_by_name"], [333, 3, 1, "", "find_nodes_by_initializer"], [333, 3, 1, "", "framework"], [333, 3, 1, "", "get_children"], [333, 3, 1, "", "get_initializer"], [333, 3, 1, "", "get_nodes_chain"], [333, 3, 1, "", "get_parent"], [333, 3, 1, "", "get_parents"], [333, 3, 1, "", "get_scale_zero"], [333, 3, 1, "", "graph"], [333, 4, 1, "", "graph_info"], [333, 3, 1, "", "initializer"], [333, 3, 1, "", "input"], [333, 4, 1, "", "input_name_to_nodes"], [333, 3, 1, "", "ir_version"], [333, 4, 1, "", "large_size"], [333, 4, 1, "", "model"], [333, 4, 1, "", "model_path"], [333, 3, 1, "", "nodes"], [333, 3, 1, "", "opset_import"], [333, 3, 1, "", "output"], [333, 4, 1, "", "output_name_to_node"], [333, 4, 1, "", "q_config"], [333, 3, 1, "", "remove_initializer"], [333, 3, 1, "", "remove_initializers"], [333, 3, 1, "", "remove_node"], [333, 3, 1, "", "remove_nodes"], [333, 3, 1, "", "remove_unused_constant"], [333, 3, 1, "", "replace_input_of_all_nodes"], [333, 3, 1, "", "replace_node_input"], [333, 3, 1, "", "replace_node_output"], [333, 3, 1, "", "replace_output_of_all_nodes"], [333, 3, 1, "", "save"], [333, 3, 1, "", "save_model_to_file"], [333, 3, 1, "", "set_initializer"], [333, 3, 1, "", "topological_sort"], [333, 3, 1, "", "update"]], "neural_compressor.model.tensorflow_model": [[334, 2, 1, "", "TensorflowBaseModel"], [334, 2, 1, "", "TensorflowCheckpointModel"], [334, 2, 1, "", "TensorflowModel"], [334, 2, 1, "", "TensorflowQATModel"], [334, 2, 1, "", "TensorflowSavedModelModel"], [334, 1, 1, "", "checkpoint_session"], [334, 1, 1, "", "estimator_session"], [334, 1, 1, "", "frozen_pb_session"], [334, 1, 1, "", "get_model_type"], [334, 1, 1, "", "graph_def_session"], [334, 1, 1, "", "graph_session"], [334, 1, 1, "", "keras_session"], [334, 1, 1, "", "load_saved_model"], [334, 1, 1, "", "saved_model_session"], [334, 1, 1, "", "slim_session"], [334, 1, 1, "", "validate_and_inference_input_output"], [334, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[334, 3, 1, "", "framework"], [334, 4, 1, "", "graph"], [334, 4, 1, "", "graph_def"], [334, 4, 1, "", "graph_info"], [334, 4, 1, "", "input_node_names"], [334, 4, 1, "", "input_tensor"], [334, 4, 1, "", "input_tensor_names"], [334, 4, 1, "", "iter_op"], [334, 4, 1, "", "model"], [334, 4, 1, "", "model_type"], [334, 4, 1, "", "name"], [334, 4, 1, "", "output_node_names"], [334, 4, 1, "", "output_tensor"], [334, 4, 1, "", "output_tensor_names"], [334, 4, 1, "", "q_config"], [334, 3, 1, "", "save"], [334, 4, 1, "", "sess"], [334, 4, 1, "", "weights"], [334, 4, 1, "", "workspace_path"]], "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel": [[334, 4, 1, "", "graph_def"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[334, 4, 1, "", "model"], [334, 3, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[334, 3, 1, "", "build_saved_model"], [334, 3, 1, "", "get_all_weight_names"], [334, 3, 1, "", "get_weight"], [334, 4, 1, "", "model"], [334, 3, 1, "", "report_sparsity"], [334, 3, 1, "", "save"], [334, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model": [[335, 2, 1, "", "IPEXModel"], [335, 2, 1, "", "PyTorchBaseModel"], [335, 2, 1, "", "PyTorchFXModel"], [335, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[335, 3, 1, "", "save"], [335, 4, 1, "", "workspace_path"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[335, 3, 1, "", "forward"], [335, 4, 1, "", "fp32_model"], [335, 3, 1, "", "framework"], [335, 3, 1, "", "generate_forward_pre_hook"], [335, 3, 1, "", "get_all_weight_names"], [335, 3, 1, "", "get_gradient"], [335, 3, 1, "", "get_inputs"], [335, 3, 1, "", "get_weight"], [335, 4, 1, "", "model"], [335, 3, 1, "", "prune_weights_"], [335, 3, 1, "", "register_forward_pre_hook"], [335, 3, 1, "", "remove_hooks"], [335, 3, 1, "", "report_sparsity"], [335, 3, 1, "", "update_gradient"], [335, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[335, 3, 1, "", "export"], [335, 3, 1, "", "export_to_bf16_onnx"], [335, 3, 1, "", "export_to_fp32_onnx"], [335, 3, 1, "", "export_to_int8_onnx"], [335, 3, 1, "", "export_to_jit"], [335, 4, 1, "", "graph_info"], [335, 3, 1, "", "load_quantized_state_dict"], [335, 3, 1, "", "quantized_state_dict"], [335, 3, 1, "", "save"], [335, 4, 1, "", "workspace_path"]], "neural_compressor.objective": [[336, 2, 1, "", "Accuracy"], [336, 2, 1, "", "Footprint"], [336, 2, 1, "", "ModelSize"], [336, 2, 1, "", "MultiObjective"], [336, 2, 1, "", "Objective"], [336, 2, 1, "", "Performance"], [336, 1, 1, "", "objective_custom_registry"], [336, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[336, 3, 1, "", "end"], [336, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[336, 3, 1, "", "end"], [336, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[336, 3, 1, "", "end"], [336, 3, 1, "", "start"]], "neural_compressor.objective.MultiObjective": [[336, 3, 1, "", "accuracy_meets"], [336, 4, 1, "", "accuracy_target"], [336, 4, 1, "", "baseline"], [336, 3, 1, "", "best_result"], [336, 3, 1, "", "compare"], [336, 3, 1, "", "end"], [336, 3, 1, "", "evaluate"], [336, 3, 1, "", "reset"], [336, 3, 1, "", "result"], [336, 3, 1, "", "set_model"], [336, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[336, 3, 1, "", "end"], [336, 4, 1, "", "model"], [336, 3, 1, "", "reset"], [336, 3, 1, "", "result"], [336, 3, 1, "", "result_list"], [336, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[336, 3, 1, "", "end"], [336, 3, 1, "", "start"]], "neural_compressor.pruner": [[337, 0, 0, "-", "criteria"], [339, 0, 0, "-", "logger"], [340, 0, 0, "-", "patterns"], [343, 0, 0, "-", "pruner_legacy"], [347, 0, 0, "-", "pruners"], [348, 0, 0, "-", "pruning"], [349, 0, 0, "-", "regs"], [350, 0, 0, "-", "schedulers"], [351, 0, 0, "-", "utils"]], "neural_compressor.pruner.criteria": [[337, 2, 1, "", "GradientCriterion"], [337, 2, 1, "", "MagnitudeCriterion"], [337, 2, 1, "", "PruningCriterion"], [337, 2, 1, "", "SnipCriterion"], [337, 2, 1, "", "SnipMomentumCriterion"], [337, 1, 1, "", "get_criterion"], [337, 1, 1, "", "register_criterion"]], "neural_compressor.pruner.criteria.GradientCriterion": [[337, 3, 1, "", "on_before_optimizer_step"], [337, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.MagnitudeCriterion": [[337, 3, 1, "", "on_step_begin"], [337, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.PruningCriterion": [[337, 3, 1, "", "on_after_optimizer_step"], [337, 3, 1, "", "on_before_optimizer_step"], [337, 3, 1, "", "on_step_begin"], [337, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipCriterion": [[337, 3, 1, "", "on_before_optimizer_step"], [337, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipMomentumCriterion": [[337, 3, 1, "", "on_before_optimizer_step"], [337, 6, 1, "", "scores"]], "neural_compressor.pruner.patterns": [[340, 2, 1, "", "BasePattern"], [340, 2, 1, "", "PatternNInM"], [340, 2, 1, "", "PatternNxM"], [340, 1, 1, "", "get_pattern"], [340, 1, 1, "", "register_pattern"]], "neural_compressor.pruner.patterns.BasePattern": [[340, 3, 1, "", "adjust_ratio"], [340, 3, 1, "", "check_layer_validity"], [340, 6, 1, "", "config"], [340, 3, 1, "", "get_block_size_dict"], [340, 3, 1, "", "get_masks"], [340, 3, 1, "", "get_masks_global"], [340, 3, 1, "", "get_masks_local"], [340, 3, 1, "", "get_pattern_lock_masks"], [340, 3, 1, "", "get_reduced_masks_from_data"], [340, 3, 1, "", "get_single_mask_per_target_ratio"], [340, 3, 1, "", "get_sparsity_ratio"], [340, 3, 1, "", "get_sparsity_ratio_each_layer"], [340, 6, 1, "", "invalid_layers"], [340, 6, 1, "", "is_global"], [340, 6, 1, "", "keep_mask_layers"], [340, 6, 1, "", "max_sparsity_ratio_per_op"], [340, 6, 1, "", "min_sparsity_ratio_per_op"], [340, 6, 1, "", "modules"], [340, 6, 1, "", "pattern"], [340, 3, 1, "", "reduce_tensor"], [340, 6, 1, "", "target_sparsity"], [340, 3, 1, "", "update_residual_cnt"]], "neural_compressor.pruner.patterns.PatternNInM": [[340, 6, 1, "", "M"], [340, 6, 1, "", "N"], [340, 3, 1, "", "check_layer_validity"], [340, 3, 1, "", "get_ele_mask_per_threshold"], [340, 3, 1, "", "get_least_ninm_mask_from_data"], [340, 3, 1, "", "get_masks_global"], [340, 3, 1, "", "get_pattern_lock_masks"], [340, 3, 1, "", "get_reduced_masks_from_data"], [340, 3, 1, "", "get_sparsity_ratio"], [340, 3, 1, "", "reduce_scores"], [340, 3, 1, "", "reshape_orig_to_pattern"], [340, 3, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.pruner.patterns.PatternNxM": [[340, 6, 1, "", "block_size"], [340, 3, 1, "", "check_layer_validity"], [340, 3, 1, "", "count_new_masked_cnts"], [340, 3, 1, "", "get_block_size_dict"], [340, 3, 1, "", "get_mask_per_threshold"], [340, 3, 1, "", "get_masks_global"], [340, 3, 1, "", "get_pattern_lock_masks"], [340, 3, 1, "", "get_reduced_masks_from_data"], [340, 3, 1, "", "get_sparsity_ratio"], [340, 3, 1, "", "get_sparsity_ratio_progressive"], [340, 3, 1, "", "reduce_scores"], [340, 3, 1, "", "reshape_orig_to_pattern"], [340, 3, 1, "", "reshape_reduced_to_orig"], [340, 3, 1, "", "update_new_added_masks"], [340, 3, 1, "", "update_progressive_masks"], [340, 3, 1, "", "update_progressive_masks_global"], [340, 3, 1, "", "update_progressive_masks_linear"], [340, 3, 1, "", "update_progressive_masks_local"], [340, 3, 1, "", "update_progressive_masks_scores"]], "neural_compressor.pruner.pruner_legacy": [[341, 0, 0, "-", "gradient_sensitivity"], [342, 0, 0, "-", "group_lasso"], [344, 0, 0, "-", "magnitude"], [345, 0, 0, "-", "pattern_lock"], [346, 0, 0, "-", "pruner"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[341, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner": [[341, 3, 1, "", "compute_mask"], [341, 3, 1, "", "on_epoch_begin"], [341, 3, 1, "", "on_epoch_end"], [341, 3, 1, "", "on_step_begin"], [341, 3, 1, "", "on_step_end"], [341, 3, 1, "", "parse_weight_name"], [341, 3, 1, "", "prune_by_importance"], [341, 3, 1, "", "prune_weight"], [341, 3, 1, "", "update_importance_abs"], [341, 3, 1, "", "update_importance_elementwise"], [341, 3, 1, "", "update_importance_weighted"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[342, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner": [[342, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[344, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner": [[344, 3, 1, "", "compute_mask"], [344, 3, 1, "", "on_epoch_begin"], [344, 3, 1, "", "on_epoch_end"], [344, 3, 1, "", "on_step_begin"], [344, 3, 1, "", "on_step_end"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[345, 2, 1, "", "PatternLockPruner"]], "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner": [[345, 3, 1, "", "compute_mask"], [345, 3, 1, "", "on_epoch_begin"], [345, 3, 1, "", "on_epoch_end"], [345, 3, 1, "", "on_step_begin"], [345, 3, 1, "", "on_step_end"], [345, 3, 1, "", "update_weights"]], "neural_compressor.pruner.pruner_legacy.pruner": [[346, 2, 1, "", "Pruner"], [346, 1, 1, "", "pruner_registry"]], "neural_compressor.pruner.pruner_legacy.pruner.Pruner": [[346, 3, 1, "", "on_before_optimizer_step"], [346, 3, 1, "", "on_epoch_begin"], [346, 3, 1, "", "on_epoch_end"], [346, 3, 1, "", "on_step_begin"], [346, 3, 1, "", "on_step_end"], [346, 3, 1, "", "on_train_begin"], [346, 3, 1, "", "on_train_end"], [346, 3, 1, "", "update_sparsity"]], "neural_compressor.pruner.pruners": [[347, 2, 1, "", "BasePruner"], [347, 2, 1, "", "BasicPruner"], [347, 2, 1, "", "PatternLockPruner"], [347, 2, 1, "", "ProgressivePruner"], [347, 1, 1, "", "get_pruner"], [347, 1, 1, "", "parse_valid_pruner_types"], [347, 1, 1, "", "register_pruner"]], "neural_compressor.pruner.pruners.BasePruner": [[347, 3, 1, "", "check_is_pruned_step"], [347, 6, 1, "", "config"], [347, 6, 1, "", "current_sparsity_ratio"], [347, 6, 1, "", "end_step"], [347, 6, 1, "", "global_step"], [347, 3, 1, "", "mask_weights"], [347, 3, 1, "", "mask_weights_general"], [347, 6, 1, "", "masks"], [347, 6, 1, "", "max_sparsity_ratio_per_op"], [347, 6, 1, "", "modules"], [347, 3, 1, "", "on_after_eval"], [347, 3, 1, "", "on_after_optimizer_step"], [347, 3, 1, "", "on_before_eval"], [347, 3, 1, "", "on_before_optimizer_step"], [347, 3, 1, "", "on_epoch_begin"], [347, 3, 1, "", "on_epoch_end"], [347, 3, 1, "", "on_step_begin"], [347, 3, 1, "", "on_step_end"], [347, 3, 1, "", "on_train_begin"], [347, 3, 1, "", "on_train_end"], [347, 6, 1, "", "pattern"], [347, 6, 1, "", "pruning_frequency"], [347, 6, 1, "", "scheduler"], [347, 6, 1, "", "scores"], [347, 6, 1, "", "start_step"], [347, 6, 1, "", "target_sparsity_ratio"], [347, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.BasicPruner": [[347, 6, 1, "", "criterion"], [347, 3, 1, "", "on_after_optimizer_step"], [347, 3, 1, "", "on_before_optimizer_step"], [347, 6, 1, "", "pattern"], [347, 6, 1, "", "reg"], [347, 6, 1, "", "scheduler"], [347, 3, 1, "", "set_global_step"], [347, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.PatternLockPruner": [[347, 3, 1, "", "on_after_optimizer_step"], [347, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.ProgressivePruner": [[347, 3, 1, "", "check_is_pruned_progressive_step"], [347, 3, 1, "", "check_progressive_validity"], [347, 3, 1, "", "on_after_optimizer_step"], [347, 3, 1, "", "on_before_optimizer_step"], [347, 3, 1, "", "on_step_begin"], [347, 3, 1, "", "print_progressive_sparsity"], [347, 3, 1, "", "update_masks_progressive"]], "neural_compressor.pruner.pruning": [[348, 2, 1, "", "Pruning"]], "neural_compressor.pruner.pruning.Pruning": [[348, 6, 1, "", "config_file_path"], [348, 3, 1, "", "get_sparsity_ratio"], [348, 4, 1, "id0", "model"], [348, 3, 1, "", "on_after_eval"], [348, 3, 1, "", "on_after_optimizer_step"], [348, 3, 1, "", "on_before_eval"], [348, 3, 1, "", "on_before_optimizer_step"], [348, 3, 1, "", "on_epoch_begin"], [348, 3, 1, "", "on_epoch_end"], [348, 3, 1, "", "on_step_begin"], [348, 3, 1, "", "on_step_end"], [348, 3, 1, "", "on_train_begin"], [348, 3, 1, "", "on_train_end"], [348, 6, 1, "", "pruner_info"], [348, 6, 1, "", "pruners"], [348, 3, 1, "", "update_config"]], "neural_compressor.pruner.regs": [[349, 2, 1, "", "BaseReg"], [349, 2, 1, "", "GroupLasso"], [349, 1, 1, "", "get_reg"], [349, 1, 1, "", "get_reg_type"], [349, 1, 1, "", "register_reg"]], "neural_compressor.pruner.regs.BaseReg": [[349, 3, 1, "", "on_after_optimizer_step"], [349, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.regs.GroupLasso": [[349, 6, 1, "", "alpha"], [349, 3, 1, "", "on_after_optimizer_step"], [349, 3, 1, "", "on_before_optimizer_step"], [349, 6, 1, "", "reg_terms"]], "neural_compressor.pruner.schedulers": [[350, 2, 1, "", "IterativeScheduler"], [350, 2, 1, "", "OneshotScheduler"], [350, 2, 1, "", "PruningScheduler"], [350, 1, 1, "", "get_scheduler"], [350, 1, 1, "", "register_scheduler"]], "neural_compressor.pruner.schedulers.IterativeScheduler": [[350, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.OneshotScheduler": [[350, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.PruningScheduler": [[350, 6, 1, "", "config"], [350, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.utils": [[351, 1, 1, "", "check_config"], [351, 1, 1, "", "check_key_validity"], [351, 1, 1, "", "parse_to_prune"], [351, 1, 1, "", "process_and_check_config"], [351, 1, 1, "", "process_config"], [351, 1, 1, "", "process_weight_config"], [351, 1, 1, "", "process_yaml_config"], [351, 1, 1, "", "reset_none_to_default"], [351, 1, 1, "", "update_params"]], "neural_compressor.quantization": [[352, 1, 1, "", "fit"]], "neural_compressor.strategy": [[353, 0, 0, "-", "auto_mixed_precision"], [354, 0, 0, "-", "basic"], [355, 0, 0, "-", "bayesian"], [356, 0, 0, "-", "conservative"], [357, 0, 0, "-", "exhaustive"], [358, 0, 0, "-", "hawq_v2"], [360, 0, 0, "-", "mse"], [361, 0, 0, "-", "mse_v2"], [362, 0, 0, "-", "random"], [363, 0, 0, "-", "strategy"], [364, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[353, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[353, 3, 1, "", "next_tune_cfg"], [353, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[354, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[354, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[355, 2, 1, "", "BayesianOptimization"], [355, 2, 1, "", "BayesianTuneStrategy"], [355, 2, 1, "", "TargetSpace"], [355, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianOptimization": [[355, 3, 1, "", "gen_next_params"], [355, 4, 1, "", "max"], [355, 4, 1, "", "res"], [355, 4, 1, "", "space"], [355, 3, 1, "", "suggest"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[355, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[355, 3, 1, "", "array_to_params"], [355, 4, 1, "", "bounds"], [355, 4, 1, "", "dim"], [355, 4, 1, "", "empty"], [355, 3, 1, "", "get_target"], [355, 4, 1, "", "keys"], [355, 3, 1, "", "max"], [355, 4, 1, "", "params"], [355, 3, 1, "", "params_to_array"], [355, 3, 1, "", "random_sample"], [355, 3, 1, "", "register"], [355, 3, 1, "", "res"], [355, 4, 1, "", "target"]], "neural_compressor.strategy.conservative": [[356, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[356, 3, 1, "", "next_tune_cfg"], [356, 3, 1, "", "stop"], [356, 3, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[357, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[357, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[358, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[358, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[360, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[360, 3, 1, "", "mse_impact_lst"], [360, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[361, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[361, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[362, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[362, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[363, 2, 1, "", "TuneStrategy"], [363, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[363, 3, 1, "", "deploy_config"], [363, 4, 1, "", "evaluation_result"], [363, 3, 1, "", "initial_best_acc"], [363, 3, 1, "", "initial_tuning_cfg"], [363, 3, 1, "", "next_tune_cfg"], [363, 3, 1, "", "set_q_func"], [363, 3, 1, "", "set_tuning_space"], [363, 3, 1, "", "setup_resume"], [363, 3, 1, "", "show_baseline_info"], [363, 3, 1, "", "stop"], [363, 3, 1, "", "traverse"], [363, 3, 1, "", "update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils": [[364, 2, 1, "", "OpTuningConfig"], [365, 0, 0, "-", "tuning_sampler"], [366, 0, 0, "-", "tuning_space"], [367, 0, 0, "-", "tuning_structs"]], "neural_compressor.strategy.utils.OpTuningConfig": [[364, 3, 1, "", "from_state"], [364, 3, 1, "", "get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[367, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig": [[367, 3, 1, "", "from_state"], [367, 3, 1, "", "get_state"]], "neural_compressor.training": [[368, 2, 1, "", "CompressionManager"], [368, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[368, 2, 1, "", "CallBacks"], [368, 3, 1, "", "export"], [368, 3, 1, "", "save"]], "neural_compressor.training.CompressionManager.CallBacks": [[368, 3, 1, "", "on_after_compute_loss"], [368, 3, 1, "", "on_after_optimizer_step"], [368, 3, 1, "", "on_before_optimizer_step"], [368, 3, 1, "", "on_epoch_begin"], [368, 3, 1, "", "on_epoch_end"], [368, 3, 1, "", "on_step_begin"], [368, 3, 1, "", "on_step_end"], [368, 3, 1, "", "on_train_begin"], [368, 3, 1, "", "on_train_end"]], "neural_compressor.utils": [[372, 2, 1, "", "LayerHistogramCollector"], [369, 0, 0, "-", "collect_layer_histogram"], [370, 0, 0, "-", "constant"], [371, 0, 0, "-", "create_obj_from_config"], [372, 1, 1, "", "debug"], [372, 1, 1, "", "error"], [372, 1, 1, "", "fatal"], [372, 1, 1, "", "info"], [373, 0, 0, "-", "kl_divergence"], [374, 0, 0, "-", "load_huggingface"], [372, 1, 1, "", "log"], [375, 0, 0, "-", "logger"], [376, 0, 0, "-", "options"], [377, 0, 0, "-", "pytorch"], [378, 0, 0, "-", "utility"], [372, 1, 1, "", "warn"], [372, 1, 1, "", "warning"]], "neural_compressor.utils.LayerHistogramCollector": [[372, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[369, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[369, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[371, 1, 1, "", "create_dataloader"], [371, 1, 1, "", "create_dataset"], [371, 1, 1, "", "create_eval_func"], [371, 1, 1, "", "create_train_func"], [371, 1, 1, "", "get_algorithm"], [371, 1, 1, "", "get_func_from_config"], [371, 1, 1, "", "get_metrics"], [371, 1, 1, "", "get_postprocess"], [371, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[373, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[373, 3, 1, "", "expand_quantized_bins"], [373, 3, 1, "", "get_threshold"], [373, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.load_huggingface": [[374, 2, 1, "", "OptimizedModel"], [374, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.load_huggingface.OptimizedModel": [[374, 3, 1, "", "from_pretrained"]], "neural_compressor.utils.logger": [[375, 2, 1, "", "Logger"], [375, 1, 1, "", "debug"], [375, 1, 1, "", "error"], [375, 1, 1, "", "fatal"], [375, 1, 1, "", "info"], [375, 1, 1, "", "log"], [375, 1, 1, "", "warn"], [375, 1, 1, "", "warning"]], "neural_compressor.utils.logger.Logger": [[375, 3, 1, "", "get_logger"]], "neural_compressor.utils.options": [[376, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[377, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[378, 2, 1, "", "CpuInfo"], [378, 1, 1, "", "Dequantize"], [378, 1, 1, "", "DequantizeWeight"], [378, 2, 1, "", "GLOBAL_STATE"], [378, 2, 1, "", "LazyImport"], [378, 2, 1, "", "MODE"], [378, 2, 1, "", "Statistics"], [378, 1, 1, "", "combine_histogram"], [378, 1, 1, "", "compute_sparsity"], [378, 1, 1, "", "dump_data_to_local"], [378, 1, 1, "", "dump_elapsed_time"], [378, 1, 1, "", "equal_dicts"], [378, 1, 1, "", "fault_tolerant_file"], [378, 1, 1, "", "get_all_fp32_data"], [378, 1, 1, "", "get_size"], [378, 1, 1, "", "get_tensor_histogram"], [378, 1, 1, "", "get_tuning_history"], [378, 1, 1, "", "load_data_from_pkl"], [378, 1, 1, "", "recover"], [378, 1, 1, "", "set_random_seed"], [378, 1, 1, "", "set_resume_from"], [378, 1, 1, "", "set_tensorboard"], [378, 1, 1, "", "set_workspace"], [378, 1, 1, "", "singleton"], [378, 1, 1, "", "str2array"], [378, 1, 1, "", "time_limit"], [378, 1, 1, "", "version1_eq_version2"], [378, 1, 1, "", "version1_gt_version2"], [378, 1, 1, "", "version1_gte_version2"], [378, 1, 1, "", "version1_lt_version2"], [378, 1, 1, "", "version1_lte_version2"]], "neural_compressor.utils.utility.CpuInfo": [[378, 4, 1, "", "bf16"], [378, 4, 1, "", "cores_per_socket"], [378, 3, 1, "", "get_number_of_sockets"], [378, 4, 1, "", "vnni"]], "neural_compressor.utils.utility.Statistics": [[378, 3, 1, "", "print_stat"]], "neural_compressor.ux": [[454, 0, 0, "-", "components"], [513, 0, 0, "-", "inc_bench"], [522, 0, 0, "-", "utils"], [548, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[382, 0, 0, "-", "benchmark"], [386, 0, 0, "-", "config_generator"], [394, 0, 0, "-", "configuration_wizard"], [430, 0, 0, "-", "db_manager"], [435, 0, 0, "-", "diagnosis"], [443, 0, 0, "-", "file_browser"], [449, 0, 0, "-", "graph"], [455, 0, 0, "-", "jobs_management"], [459, 0, 0, "-", "manage_workspace"], [461, 0, 0, "-", "model"], [480, 0, 0, "-", "model_zoo"], [482, 0, 0, "-", "names_mapper"], [489, 0, 0, "-", "optimization"], [505, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[382, 2, 1, "", "Benchmarks"], [379, 0, 0, "-", "benchmark"], [380, 0, 0, "-", "benchmark_model"], [381, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[379, 2, 1, "", "Benchmark"], [379, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[379, 4, 1, "", "config_filename"], [379, 4, 1, "", "configuration_data"], [379, 3, 1, "", "execute"], [379, 3, 1, "", "generate_config"], [379, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[380, 1, 1, "", "benchmark_model"], [380, 1, 1, "", "parse_args"], [380, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[381, 1, 1, "", "benchmark_result_update"], [381, 1, 1, "", "benchmark_result_update_pytorch_script"], [381, 1, 1, "", "execute_benchmark"], [381, 1, 1, "", "execute_real_benchmark"], [381, 1, 1, "", "pytorch_script_bench_optimizations"], [381, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[383, 0, 0, "-", "benchmark_config_generator"], [384, 0, 0, "-", "config_generator"], [385, 0, 0, "-", "graph_optimization_config_generator"], [387, 0, 0, "-", "mixed_precision_config_generator"], [388, 0, 0, "-", "profiling_config_generator"], [389, 0, 0, "-", "pruning_config_generator"], [390, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[383, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[383, 3, 1, "", "generate"], [383, 3, 1, "", "generate_accuracy_config"], [383, 3, 1, "", "generate_evaluation_config"], [383, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[384, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[384, 3, 1, "", "generate"], [384, 3, 1, "", "generate_dataloader_config"], [384, 3, 1, "", "generate_model_config"], [384, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[385, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[385, 3, 1, "", "generate"], [385, 3, 1, "", "generate_evaluation_config"], [385, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[387, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[387, 3, 1, "", "generate"], [387, 3, 1, "", "generate_evaluation_config"], [387, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[388, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[388, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[389, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator": [[389, 3, 1, "", "generate"], [389, 3, 1, "", "generate_evaluation_config"], [389, 3, 1, "", "generate_pruning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[390, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[390, 3, 1, "", "generate"], [390, 3, 1, "", "generate_evaluation_config"], [390, 3, 1, "", "generate_quantization_config"], [390, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[391, 0, 0, "-", "configuration_parser"], [392, 0, 0, "-", "get_boundary_nodes"], [393, 0, 0, "-", "get_configuration"], [395, 0, 0, "-", "params_feeder"], [396, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[391, 2, 1, "", "ConfigurationParser"], [391, 1, 1, "", "normalize_string_list"], [391, 1, 1, "", "parse_list_value"], [391, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[391, 3, 1, "", "get_param_type"], [391, 3, 1, "", "parse"], [391, 3, 1, "", "parse_dataloader"], [391, 3, 1, "", "parse_evaluation_data"], [391, 3, 1, "", "parse_metric"], [391, 3, 1, "", "parse_transforms"], [391, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[392, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[393, 1, 1, "", "get_predefined_configuration"], [393, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[395, 2, 1, "", "Feeder"], [395, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[395, 3, 1, "", "feed"], [395, 3, 1, "", "get_dataloaders"], [395, 3, 1, "", "get_domains"], [395, 3, 1, "", "get_frameworks"], [395, 3, 1, "", "get_metrics"], [395, 3, 1, "", "get_models"], [395, 3, 1, "", "get_objectives"], [395, 3, 1, "", "get_precisions"], [395, 3, 1, "", "get_quantization_approaches"], [395, 3, 1, "", "get_strategies"], [395, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[396, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser": [[396, 3, 1, "", "generate_tree"], [396, 3, 1, "", "parse"], [396, 3, 1, "", "parse_entry"]], "neural_compressor.ux.components.db_manager": [[430, 2, 1, "", "DBManager"], [397, 0, 0, "-", "db_manager"], [406, 0, 0, "-", "db_models"], [425, 0, 0, "-", "db_operations"], [431, 0, 0, "-", "params_interfaces"], [432, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[430, 3, 1, "", "create_all"], [430, 3, 1, "", "create_sqlalchemy_engine"], [430, 4, 1, "", "engine"], [430, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[397, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[397, 3, 1, "", "create_all"], [397, 3, 1, "", "create_sqlalchemy_engine"], [397, 4, 1, "", "engine"], [397, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[398, 0, 0, "-", "benchmark"], [399, 0, 0, "-", "benchmark_result"], [400, 0, 0, "-", "dataloader"], [401, 0, 0, "-", "dataset"], [402, 0, 0, "-", "domain"], [403, 0, 0, "-", "domain_flavour"], [404, 0, 0, "-", "example"], [405, 0, 0, "-", "framework"], [407, 0, 0, "-", "metric"], [408, 0, 0, "-", "model"], [409, 0, 0, "-", "optimization"], [410, 0, 0, "-", "optimization_type"], [411, 0, 0, "-", "precision"], [412, 0, 0, "-", "profiling"], [413, 0, 0, "-", "profiling_result"], [414, 0, 0, "-", "project"], [415, 0, 0, "-", "pruning_details"], [416, 0, 0, "-", "transform"], [417, 0, 0, "-", "tuning_details"], [418, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[398, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[398, 3, 1, "", "add"], [398, 3, 1, "", "build_info"], [398, 3, 1, "", "clean_status"], [398, 3, 1, "", "delete_benchmark"], [398, 3, 1, "", "details"], [398, 3, 1, "", "list"], [398, 3, 1, "", "update_batch_size"], [398, 3, 1, "", "update_config_path"], [398, 3, 1, "", "update_cores_per_instance"], [398, 3, 1, "", "update_dataset"], [398, 3, 1, "", "update_duration"], [398, 3, 1, "", "update_execution_command"], [398, 3, 1, "", "update_log_path"], [398, 3, 1, "", "update_mode"], [398, 3, 1, "", "update_number_of_instance"], [398, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[399, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[399, 3, 1, "", "add"], [399, 3, 1, "", "build_info"], [399, 3, 1, "", "update_accuracy"], [399, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[400, 2, 1, "", "Dataloader"], [400, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[400, 3, 1, "", "list"], [400, 3, 1, "", "list_by_framework"], [400, 3, 1, "", "query_to_list"], [400, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[401, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[401, 3, 1, "", "add"], [401, 3, 1, "", "build_info"], [401, 3, 1, "", "delete_dataset"], [401, 3, 1, "", "details"], [401, 3, 1, "", "list"], [401, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[402, 2, 1, "", "Domain"], [402, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[402, 3, 1, "", "get_domain_id"], [402, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[403, 2, 1, "", "DomainFlavour"], [403, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[403, 3, 1, "", "get_domain_flavour_id"], [403, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[404, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[405, 2, 1, "", "Framework"], [405, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[405, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[407, 2, 1, "", "Metric"], [407, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[407, 3, 1, "", "list"], [407, 3, 1, "", "list_by_framework"], [407, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[408, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[408, 3, 1, "", "add"], [408, 3, 1, "", "build_info"], [408, 3, 1, "", "delete_model"], [408, 3, 1, "", "details"], [408, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[409, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[409, 3, 1, "", "add"], [409, 3, 1, "", "build_info"], [409, 3, 1, "", "clean_status"], [409, 3, 1, "", "delete_optimization"], [409, 3, 1, "", "details"], [409, 3, 1, "", "get_optimization_by_project_and_model"], [409, 3, 1, "", "get_pinned_benchmarks"], [409, 3, 1, "", "list"], [409, 3, 1, "", "pin_accuracy_benchmark"], [409, 3, 1, "", "pin_performance_benchmark"], [409, 3, 1, "", "unpin_benchmark"], [409, 3, 1, "", "update_batch_size"], [409, 3, 1, "", "update_config_path"], [409, 3, 1, "", "update_dataset"], [409, 3, 1, "", "update_duration"], [409, 3, 1, "", "update_execution_command"], [409, 3, 1, "", "update_log_path"], [409, 3, 1, "", "update_optimized_model"], [409, 3, 1, "", "update_precision"], [409, 3, 1, "", "update_pruning_details"], [409, 3, 1, "", "update_sampling_size"], [409, 3, 1, "", "update_status"], [409, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[410, 2, 1, "", "OptimizationType"], [410, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[410, 3, 1, "", "add"], [410, 3, 1, "", "get_optimization_type_by_id"], [410, 3, 1, "", "get_optimization_type_by_name"], [410, 3, 1, "", "get_optimization_type_for_precision"], [410, 3, 1, "", "get_optimization_type_id"], [410, 3, 1, "", "list"], [410, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[411, 2, 1, "", "Precision"], [411, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[411, 3, 1, "", "add"], [411, 3, 1, "", "get_precision_by_id"], [411, 3, 1, "", "get_precision_by_name"], [411, 3, 1, "", "get_precision_id"], [411, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[412, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[412, 3, 1, "", "add"], [412, 3, 1, "", "build_info"], [412, 3, 1, "", "clean_status"], [412, 3, 1, "", "delete_profiling"], [412, 3, 1, "", "details"], [412, 3, 1, "", "list"], [412, 3, 1, "", "update_dataset"], [412, 3, 1, "", "update_duration"], [412, 3, 1, "", "update_execution_command"], [412, 3, 1, "", "update_log_path"], [412, 3, 1, "", "update_num_threads"], [412, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[413, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[413, 3, 1, "", "add"], [413, 3, 1, "", "build_info"], [413, 3, 1, "", "bulk_add"], [413, 3, 1, "", "delete_results"], [413, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[414, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[414, 3, 1, "", "create_project"], [414, 3, 1, "", "delete_project"], [414, 3, 1, "", "get_model_by_name"], [414, 3, 1, "", "list_projects"], [414, 3, 1, "", "project_details"], [414, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[415, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails": [[415, 3, 1, "", "add"], [415, 3, 1, "", "build_info"], [415, 3, 1, "", "delete_pruning_details"], [415, 3, 1, "", "update"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[416, 2, 1, "", "Transform"], [416, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[416, 3, 1, "", "list"], [416, 3, 1, "", "list_by_domain"], [416, 3, 1, "", "list_by_framework"], [416, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[417, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[417, 3, 1, "", "add"], [417, 3, 1, "", "delete_tuning_details"], [417, 3, 1, "", "update"], [417, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[418, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[418, 3, 1, "", "add"], [418, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[425, 2, 1, "", "BenchmarkAPIInterface"], [425, 2, 1, "", "DatasetAPIInterface"], [425, 2, 1, "", "DiagnosisAPIInterface"], [425, 2, 1, "", "DictionariesAPIInterface"], [425, 2, 1, "", "ExamplesAPIInterface"], [425, 2, 1, "", "ModelAPIInterface"], [425, 2, 1, "", "OptimizationAPIInterface"], [425, 2, 1, "", "ProfilingAPIInterface"], [425, 2, 1, "", "ProjectAPIInterface"], [419, 0, 0, "-", "benchmark_api_interface"], [420, 0, 0, "-", "dataset_api_interface"], [421, 0, 0, "-", "db_operations"], [422, 0, 0, "-", "diagnosis_api_interface"], [423, 0, 0, "-", "dictionaries_api_interface"], [424, 0, 0, "-", "examples_api_interface"], [426, 0, 0, "-", "model_api_interface"], [427, 0, 0, "-", "optimization_api_interface"], [428, 0, 0, "-", "profiling_api_interface"], [429, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[425, 3, 1, "", "add_benchmark"], [425, 3, 1, "", "add_result"], [425, 3, 1, "", "clean_status"], [425, 3, 1, "", "delete_benchmark"], [425, 3, 1, "", "edit_benchmark"], [425, 3, 1, "", "get_benchmark_details"], [425, 3, 1, "", "list_benchmarks"], [425, 3, 1, "", "parse_benchmark_data"], [425, 3, 1, "", "parse_benchmark_edit_data"], [425, 3, 1, "", "update_benchmark_accuracy"], [425, 3, 1, "", "update_benchmark_duration"], [425, 3, 1, "", "update_benchmark_performance"], [425, 3, 1, "", "update_benchmark_status"], [425, 3, 1, "", "update_execution_command"], [425, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[425, 3, 1, "", "add_dataset"], [425, 3, 1, "", "check_if_custom_metric_or_dataloader"], [425, 3, 1, "", "dataloader_path"], [425, 3, 1, "", "delete_dataset"], [425, 3, 1, "", "generate_custom_template"], [425, 3, 1, "", "generate_template"], [425, 3, 1, "", "get_dataset_details"], [425, 3, 1, "", "get_predefined_dataset"], [425, 3, 1, "", "list_datasets"], [425, 3, 1, "", "parse_dataset_data"], [425, 3, 1, "", "prepare_predefined_dataloader"], [425, 3, 1, "", "prepare_predefined_transform"], [425, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[425, 3, 1, "", "generate_optimization"], [425, 3, 1, "", "get_op_details"], [425, 3, 1, "", "get_op_list"], [425, 3, 1, "", "histogram"], [425, 3, 1, "", "model_wise_params"], [425, 3, 1, "", "parse_model_wise_config"], [425, 3, 1, "", "parse_op_wise_config"], [425, 3, 1, "", "parse_optimization_data"], [425, 3, 1, "", "parse_wise_parameters"], [425, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[425, 3, 1, "", "list_dataloaders"], [425, 3, 1, "", "list_dataloaders_by_framework"], [425, 3, 1, "", "list_domain_flavours"], [425, 3, 1, "", "list_domains"], [425, 3, 1, "", "list_metrics"], [425, 3, 1, "", "list_metrics_by_framework"], [425, 3, 1, "", "list_optimization_types"], [425, 3, 1, "", "list_optimization_types_for_precision"], [425, 3, 1, "", "list_precisions"], [425, 3, 1, "", "list_transforms"], [425, 3, 1, "", "list_transforms_by_domain"], [425, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[425, 3, 1, "", "create_project"], [425, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[425, 3, 1, "", "add_model"], [425, 3, 1, "", "delete_model"], [425, 3, 1, "", "get_model_details"], [425, 3, 1, "", "list_models"], [425, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[425, 3, 1, "", "add_optimization"], [425, 3, 1, "", "add_pruning_optimization"], [425, 3, 1, "", "add_quantization_optimization"], [425, 3, 1, "", "add_standard_optimization"], [425, 3, 1, "", "add_tuning_history"], [425, 3, 1, "", "clean_status"], [425, 3, 1, "", "delete_optimization"], [425, 3, 1, "", "edit_optimization"], [425, 3, 1, "", "edit_pruning_details"], [425, 3, 1, "", "edit_tuning_details"], [425, 3, 1, "", "get_optimization_details"], [425, 3, 1, "", "get_pruning_details"], [425, 3, 1, "", "list_optimizations"], [425, 3, 1, "", "load_pruning_details_config"], [425, 3, 1, "", "parse_optimization_data"], [425, 3, 1, "", "parse_optimization_edit_data"], [425, 3, 1, "", "parse_tuning_history"], [425, 3, 1, "", "pin_accuracy_benchmark"], [425, 3, 1, "", "pin_performance_benchmark"], [425, 3, 1, "", "update_execution_command"], [425, 3, 1, "", "update_optimization_duration"], [425, 3, 1, "", "update_optimization_status"], [425, 3, 1, "", "update_optimized_model"], [425, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[425, 3, 1, "", "add_profiling"], [425, 3, 1, "", "add_result"], [425, 3, 1, "", "bulk_add_results"], [425, 3, 1, "", "clean_status"], [425, 3, 1, "", "delete_profiling"], [425, 3, 1, "", "edit_profiling"], [425, 3, 1, "", "get_profiling_details"], [425, 3, 1, "", "list_profilings"], [425, 3, 1, "", "parse_profiling_data"], [425, 3, 1, "", "parse_profiling_edit_data"], [425, 3, 1, "", "parse_profiling_result_data"], [425, 3, 1, "", "update_execution_command"], [425, 3, 1, "", "update_log_path"], [425, 3, 1, "", "update_profiling_duration"], [425, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[425, 3, 1, "", "add_dummy_dataset"], [425, 3, 1, "", "add_model"], [425, 3, 1, "", "create_project"], [425, 3, 1, "", "delete_project"], [425, 3, 1, "", "get_project_details"], [425, 3, 1, "", "list_projects"], [425, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[419, 2, 1, "", "BenchmarkAPIInterface"], [419, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[419, 3, 1, "", "add_benchmark"], [419, 3, 1, "", "add_result"], [419, 3, 1, "", "clean_status"], [419, 3, 1, "", "delete_benchmark"], [419, 3, 1, "", "edit_benchmark"], [419, 3, 1, "", "get_benchmark_details"], [419, 3, 1, "", "list_benchmarks"], [419, 3, 1, "", "parse_benchmark_data"], [419, 3, 1, "", "parse_benchmark_edit_data"], [419, 3, 1, "", "update_benchmark_accuracy"], [419, 3, 1, "", "update_benchmark_duration"], [419, 3, 1, "", "update_benchmark_performance"], [419, 3, 1, "", "update_benchmark_status"], [419, 3, 1, "", "update_execution_command"], [419, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[420, 2, 1, "", "DatasetAPIInterface"], [420, 1, 1, "", "initialize_associations"], [420, 1, 1, "", "initialize_precision_optimization_types_association"], [420, 1, 1, "", "search_in_list_of_dict"], [420, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [420, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[420, 3, 1, "", "add_dataset"], [420, 3, 1, "", "check_if_custom_metric_or_dataloader"], [420, 3, 1, "", "dataloader_path"], [420, 3, 1, "", "delete_dataset"], [420, 3, 1, "", "generate_custom_template"], [420, 3, 1, "", "generate_template"], [420, 3, 1, "", "get_dataset_details"], [420, 3, 1, "", "get_predefined_dataset"], [420, 3, 1, "", "list_datasets"], [420, 3, 1, "", "parse_dataset_data"], [420, 3, 1, "", "prepare_predefined_dataloader"], [420, 3, 1, "", "prepare_predefined_transform"], [420, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[421, 1, 1, "", "initialize_associations"], [421, 1, 1, "", "initialize_precision_optimization_types_association"], [421, 1, 1, "", "search_in_list_of_dict"], [421, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [421, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[422, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[422, 3, 1, "", "generate_optimization"], [422, 3, 1, "", "get_op_details"], [422, 3, 1, "", "get_op_list"], [422, 3, 1, "", "histogram"], [422, 3, 1, "", "model_wise_params"], [422, 3, 1, "", "parse_model_wise_config"], [422, 3, 1, "", "parse_op_wise_config"], [422, 3, 1, "", "parse_optimization_data"], [422, 3, 1, "", "parse_wise_parameters"], [422, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[423, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[423, 3, 1, "", "list_dataloaders"], [423, 3, 1, "", "list_dataloaders_by_framework"], [423, 3, 1, "", "list_domain_flavours"], [423, 3, 1, "", "list_domains"], [423, 3, 1, "", "list_metrics"], [423, 3, 1, "", "list_metrics_by_framework"], [423, 3, 1, "", "list_optimization_types"], [423, 3, 1, "", "list_optimization_types_for_precision"], [423, 3, 1, "", "list_precisions"], [423, 3, 1, "", "list_transforms"], [423, 3, 1, "", "list_transforms_by_domain"], [423, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[424, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[424, 3, 1, "", "create_project"], [424, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[426, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[426, 3, 1, "", "add_model"], [426, 3, 1, "", "delete_model"], [426, 3, 1, "", "get_model_details"], [426, 3, 1, "", "list_models"], [426, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[427, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[427, 3, 1, "", "add_optimization"], [427, 3, 1, "", "add_pruning_optimization"], [427, 3, 1, "", "add_quantization_optimization"], [427, 3, 1, "", "add_standard_optimization"], [427, 3, 1, "", "add_tuning_history"], [427, 3, 1, "", "clean_status"], [427, 3, 1, "", "delete_optimization"], [427, 3, 1, "", "edit_optimization"], [427, 3, 1, "", "edit_pruning_details"], [427, 3, 1, "", "edit_tuning_details"], [427, 3, 1, "", "get_optimization_details"], [427, 3, 1, "", "get_pruning_details"], [427, 3, 1, "", "list_optimizations"], [427, 3, 1, "", "load_pruning_details_config"], [427, 3, 1, "", "parse_optimization_data"], [427, 3, 1, "", "parse_optimization_edit_data"], [427, 3, 1, "", "parse_tuning_history"], [427, 3, 1, "", "pin_accuracy_benchmark"], [427, 3, 1, "", "pin_performance_benchmark"], [427, 3, 1, "", "update_execution_command"], [427, 3, 1, "", "update_optimization_duration"], [427, 3, 1, "", "update_optimization_status"], [427, 3, 1, "", "update_optimized_model"], [427, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[428, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[428, 3, 1, "", "add_profiling"], [428, 3, 1, "", "add_result"], [428, 3, 1, "", "bulk_add_results"], [428, 3, 1, "", "clean_status"], [428, 3, 1, "", "delete_profiling"], [428, 3, 1, "", "edit_profiling"], [428, 3, 1, "", "get_profiling_details"], [428, 3, 1, "", "list_profilings"], [428, 3, 1, "", "parse_profiling_data"], [428, 3, 1, "", "parse_profiling_edit_data"], [428, 3, 1, "", "parse_profiling_result_data"], [428, 3, 1, "", "update_execution_command"], [428, 3, 1, "", "update_log_path"], [428, 3, 1, "", "update_profiling_duration"], [428, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[429, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[429, 3, 1, "", "add_dummy_dataset"], [429, 3, 1, "", "add_model"], [429, 3, 1, "", "create_project"], [429, 3, 1, "", "delete_project"], [429, 3, 1, "", "get_project_details"], [429, 3, 1, "", "list_projects"], [429, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[431, 2, 1, "", "BenchmarkAddParamsInterface"], [431, 2, 1, "", "BenchmarkEditParamsInterface"], [431, 2, 1, "", "DatasetAddParamsInterface"], [431, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [431, 2, 1, "", "ModelAddParamsInterface"], [431, 2, 1, "", "OptimizationAddParamsInterface"], [431, 2, 1, "", "OptimizationEditParamsInterface"], [431, 2, 1, "", "ProfilingAddParamsInterface"], [431, 2, 1, "", "ProfilingEditParamsInterface"], [431, 2, 1, "", "ProfilingResultAddParamsInterface"], [431, 2, 1, "", "TuningHistoryInterface"], [431, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[431, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[431, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[431, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[432, 1, 1, "", "get_framework_dataloaders_config"], [432, 1, 1, "", "get_framework_transforms_config"], [432, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[433, 0, 0, "-", "diagnosis"], [434, 0, 0, "-", "factory"], [436, 0, 0, "-", "onnx_diagnosis"], [438, 0, 0, "-", "op_details"], [439, 0, 0, "-", "op_entry"], [440, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[433, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[433, 3, 1, "", "calculate_mse"], [433, 3, 1, "", "get_histogram_data"], [433, 3, 1, "", "get_op_details"], [433, 3, 1, "", "get_op_list"], [433, 3, 1, "", "get_tensors_info"], [433, 3, 1, "", "load_quantization_config"], [433, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[434, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[434, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[437, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[437, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[437, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[438, 2, 1, "", "OpActivation"], [438, 2, 1, "", "OpDetails"], [438, 2, 1, "", "OpPattern"], [438, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[438, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[439, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[439, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[441, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[441, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[441, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[442, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[442, 1, 1, "", "create_dir_entry"], [442, 1, 1, "", "create_entry"], [442, 1, 1, "", "create_file_entry"], [442, 1, 1, "", "filter_requested_entries"], [442, 1, 1, "", "get_directory_entries"], [442, 1, 1, "", "get_filter_value"], [442, 1, 1, "", "get_non_hidden_directory_entries"], [442, 1, 1, "", "get_requested_path"], [442, 1, 1, "", "get_setting_value"], [442, 1, 1, "", "is_dataset_or_directory_entry"], [442, 1, 1, "", "is_directory_entry"], [442, 1, 1, "", "is_model_or_directory_entry"], [442, 1, 1, "", "should_show_files"], [442, 1, 1, "", "should_show_only_model_files"], [442, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[444, 0, 0, "-", "attribute"], [445, 0, 0, "-", "collapser"], [446, 0, 0, "-", "edge"], [447, 0, 0, "-", "graph"], [448, 0, 0, "-", "graph_reader"], [450, 0, 0, "-", "node"], [451, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[444, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[445, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[445, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[446, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[446, 4, 1, "", "source"], [446, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[447, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[447, 3, 1, "", "add_edge"], [447, 3, 1, "", "add_node"], [447, 4, 1, "", "edges"], [447, 3, 1, "", "get_node"], [447, 3, 1, "", "get_target_nodes"], [447, 3, 1, "", "highlight_pattern"], [447, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[448, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[448, 3, 1, "", "find_pattern_in_graph"], [448, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[450, 2, 1, "", "GroupNode"], [450, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[452, 0, 0, "-", "onnxrt_reader"], [453, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[452, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[452, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[453, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[453, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[456, 0, 0, "-", "jobs_control_queue"], [457, 0, 0, "-", "jobs_manager"], [458, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[459, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[460, 0, 0, "-", "domain"], [462, 0, 0, "-", "model"], [463, 0, 0, "-", "model_type_getter"], [464, 0, 0, "-", "onnxrt"], [466, 0, 0, "-", "pytorch"], [468, 0, 0, "-", "repository"], [469, 0, 0, "-", "shape"], [471, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[460, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[462, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[462, 4, 1, "", "domain"], [462, 3, 1, "", "ensure_supported_path"], [462, 3, 1, "", "get_framework_name"], [462, 3, 1, "", "get_input_nodes"], [462, 3, 1, "", "get_model_graph"], [462, 3, 1, "", "get_output_nodes"], [462, 3, 1, "", "get_tensors_info"], [462, 3, 1, "", "guard_requirements_installed"], [462, 4, 1, "", "input_shape"], [462, 4, 1, "", "shape_elements_order"], [462, 4, 1, "", "supports_graph"], [462, 3, 1, "", "supports_path"], [462, 4, 1, "", "supports_profiling"], [462, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.model_type_getter": [[463, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[465, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[465, 2, 1, "", "OnnxrtModel"], [465, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[465, 4, 1, "", "domain"], [465, 4, 1, "", "filtered_input_nodes"], [465, 3, 1, "", "get_framework_name"], [465, 3, 1, "", "get_model_graph"], [465, 3, 1, "", "guard_requirements_installed"], [465, 4, 1, "", "input_shape"], [465, 4, 1, "", "nc_model_instance"], [465, 4, 1, "", "shape_elements_order"], [465, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[467, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[467, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[467, 3, 1, "", "get_framework_name"], [467, 3, 1, "", "guard_requirements_installed"], [467, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[468, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[468, 3, 1, "", "get_framework_from_path"], [468, 3, 1, "", "get_frameworks"], [468, 3, 1, "", "get_model"], [468, 3, 1, "", "get_supported_frameworks"], [468, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[469, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[469, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[470, 0, 0, "-", "frozen_pb"], [472, 0, 0, "-", "keras"], [473, 0, 0, "-", "meta_graph"], [474, 0, 0, "-", "model"], [475, 0, 0, "-", "saved_model"], [476, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[470, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[470, 3, 1, "", "supports_path"], [470, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[472, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[472, 3, 1, "", "get_input_nodes"], [472, 3, 1, "", "get_output_nodes"], [472, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[473, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[473, 3, 1, "", "get_input_nodes"], [473, 3, 1, "", "get_model_graph"], [473, 3, 1, "", "get_output_nodes"], [473, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[474, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[474, 3, 1, "", "get_framework_name"], [474, 3, 1, "", "get_input_nodes"], [474, 3, 1, "", "get_model_graph"], [474, 3, 1, "", "get_output_nodes"], [474, 3, 1, "", "guard_requirements_installed"], [474, 4, 1, "", "input_shape"], [474, 4, 1, "", "nc_model_instance"], [474, 4, 1, "", "shape_elements_order"], [474, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[475, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[475, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[476, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[477, 0, 0, "-", "download_config"], [478, 0, 0, "-", "download_model"], [479, 0, 0, "-", "downloader"], [481, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[477, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[478, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[479, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[479, 3, 1, "", "download"], [479, 3, 1, "", "download_config"], [479, 3, 1, "", "download_file"], [479, 3, 1, "", "download_model"], [479, 3, 1, "", "download_yaml_config"], [479, 3, 1, "", "get_yaml_url"], [479, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[481, 1, 1, "", "check_version"], [481, 1, 1, "", "get_available_models"], [481, 1, 1, "", "get_framework_module_name"], [481, 1, 1, "", "get_installed_frameworks"], [481, 1, 1, "", "list_models"], [481, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[483, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[483, 2, 1, "", "MappingDirection"], [483, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[483, 4, 1, "", "domain_flavour_mappings"], [483, 4, 1, "", "domain_mappings"], [483, 4, 1, "", "framework_mappings"], [483, 3, 1, "", "map_name"], [483, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[489, 2, 1, "", "Optimizations"], [484, 0, 0, "-", "execute_optimization"], [485, 0, 0, "-", "factory"], [487, 0, 0, "-", "graph_optimizer"], [490, 0, 0, "-", "mixed_precision"], [493, 0, 0, "-", "neural_coder_optimization"], [495, 0, 0, "-", "optimization"], [496, 0, 0, "-", "pruning"], [499, 0, 0, "-", "tune"], [502, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[484, 1, 1, "", "check_if_collect_tuning_history"], [484, 1, 1, "", "execute_optimization"], [484, 1, 1, "", "execute_optimization_pytorch_script"], [484, 1, 1, "", "execute_optimization_regular"], [484, 1, 1, "", "parse_logs"], [484, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[485, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[485, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[486, 0, 0, "-", "graph_optimization"], [488, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[486, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[486, 4, 1, "", "configuration_data"], [486, 3, 1, "", "execute"], [486, 3, 1, "", "generate_config"], [486, 4, 1, "", "optimization_script"], [486, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[488, 1, 1, "", "optimize_graph"], [488, 1, 1, "", "optimize_graph_config"], [488, 1, 1, "", "parse_args"], [488, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[491, 0, 0, "-", "mixed_precision"], [492, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[491, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[491, 4, 1, "", "configuration_data"], [491, 3, 1, "", "execute"], [491, 3, 1, "", "generate_config"], [491, 4, 1, "", "optimization_script"], [491, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[492, 1, 1, "", "optimize_graph"], [492, 1, 1, "", "optimize_graph_config"], [492, 1, 1, "", "parse_args"], [492, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[494, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[494, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[495, 2, 1, "", "DataloaderInterface"], [495, 2, 1, "", "Optimization"], [495, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[495, 4, 1, "", "command"], [495, 4, 1, "", "config_filename"], [495, 4, 1, "", "configuration_data"], [495, 3, 1, "", "execute"], [495, 3, 1, "", "generate_config"], [495, 4, 1, "", "optimization_script"], [495, 4, 1, "", "output_model_dir"], [495, 4, 1, "", "output_model_name"], [495, 4, 1, "", "parameters"], [495, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.pruning": [[497, 0, 0, "-", "optimize_model"], [498, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[497, 1, 1, "", "optimize_model"], [497, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[498, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning.Pruning": [[498, 4, 1, "", "configuration_data"], [498, 3, 1, "", "execute"], [498, 3, 1, "", "generate_config"], [498, 4, 1, "", "optimization_script"], [498, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tune": [[500, 0, 0, "-", "tune_model"], [501, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[500, 1, 1, "", "parse_args"], [500, 1, 1, "", "set_eager_execution"], [500, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[501, 2, 1, "", "AccuracyCriterion"], [501, 2, 1, "", "Tuning"], [501, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[501, 4, 1, "", "configuration_data"], [501, 3, 1, "", "execute"], [501, 3, 1, "", "generate_config"], [501, 4, 1, "", "optimization_script"], [501, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[502, 2, 1, "", "TuningHistory"], [502, 2, 1, "", "Watcher"], [502, 1, 1, "", "tuning_history"], [502, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[502, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[502, 3, 1, "", "history_file_modification_time"], [502, 3, 1, "", "stop"], [502, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[503, 0, 0, "-", "execute_profiling"], [504, 0, 0, "-", "factory"], [506, 0, 0, "-", "profile_model"], [507, 0, 0, "-", "profiler"], [508, 0, 0, "-", "profiling"], [510, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[503, 1, 1, "", "execute_profiling"], [503, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[504, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[504, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[506, 1, 1, "", "load_profiling_details"], [506, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[507, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[507, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[508, 2, 1, "", "DataloaderInterface"], [508, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[508, 4, 1, "", "config_filename"], [508, 4, 1, "", "config_path"], [508, 3, 1, "", "execute"], [508, 3, 1, "", "generate_config"], [508, 4, 1, "", "profiling_data"], [508, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[509, 0, 0, "-", "factory"], [511, 0, 0, "-", "profiler"], [512, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[509, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[509, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[511, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[511, 3, 1, "", "build_dataloader"], [511, 3, 1, "", "convert_nodes_to_list"], [511, 3, 1, "", "create_tf_config"], [511, 3, 1, "", "get_node_by_name"], [511, 3, 1, "", "initialize_graph"], [511, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[512, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[513, 1, 1, "", "main"], [513, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[515, 0, 0, "-", "consts"], [516, 0, 0, "-", "environment"], [517, 0, 0, "-", "exceptions"], [518, 0, 0, "-", "executor"], [519, 0, 0, "-", "expiring_dict"], [520, 0, 0, "-", "github_info"], [521, 0, 0, "-", "hw_info"], [523, 0, 0, "-", "json_serializer"], [524, 0, 0, "-", "logger"], [525, 0, 0, "-", "parser"], [526, 0, 0, "-", "proc"], [527, 0, 0, "-", "processes"], [528, 0, 0, "-", "singleton"], [529, 0, 0, "-", "status_updates"], [530, 0, 0, "-", "templates"], [533, 0, 0, "-", "utils"], [538, 0, 0, "-", "workload"], [544, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[515, 2, 1, "", "DomainFlavours"], [515, 2, 1, "", "Domains"], [515, 2, 1, "", "ExecutionStatus"], [515, 2, 1, "", "Frameworks"], [515, 2, 1, "", "OptimizationTypes"], [515, 2, 1, "", "Precisions"], [515, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[516, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[516, 3, 1, "", "clean_workloads_wip_status"], [516, 3, 1, "", "ensure_workdir_exists_and_writeable"], [516, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[517, 7, 1, "", "AccessDeniedException"], [517, 7, 1, "", "ClientErrorException"], [517, 7, 1, "", "InternalException"], [517, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[518, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[518, 4, 1, "", "additional_log_names"], [518, 3, 1, "", "call"], [518, 3, 1, "", "call_one"], [518, 3, 1, "", "is_multi_commands"], [518, 4, 1, "", "log_name"], [518, 4, 1, "", "process_duration"], [518, 3, 1, "", "refresh_workdir"], [518, 4, 1, "", "request_id"], [518, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[519, 2, 1, "", "ExpiringDict"], [519, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[519, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[520, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[520, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[521, 2, 1, "", "HWInfo"], [521, 1, 1, "", "get_bios_version"], [521, 1, 1, "", "get_distribution"], [521, 1, 1, "", "get_framework_dependency_info"], [521, 1, 1, "", "get_framework_info"], [521, 1, 1, "", "get_kernel_version"], [521, 1, 1, "", "get_number_of_sockets"], [521, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[521, 3, 1, "", "initialize"], [521, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[523, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[523, 3, 1, "", "serialize"], [523, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[524, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[525, 2, 1, "", "AccuracyParser"], [525, 2, 1, "", "BenchmarkParserFactory"], [525, 2, 1, "", "OptimizationParser"], [525, 2, 1, "", "Parser"], [525, 2, 1, "", "PerformanceParser"], [525, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[525, 4, 1, "", "patterns"], [525, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[525, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[525, 4, 1, "", "patterns"], [525, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[525, 4, 1, "", "patterns"], [525, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[525, 4, 1, "", "patterns"], [525, 3, 1, "", "process"], [525, 3, 1, "", "summarize_partial"], [525, 3, 1, "", "summarize_value"], [525, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[525, 4, 1, "", "patterns"], [525, 3, 1, "", "process"], [525, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[526, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[526, 4, 1, "", "info"], [526, 4, 1, "", "info_path"], [526, 4, 1, "", "is_ok"], [526, 4, 1, "", "output"], [526, 4, 1, "", "output_path"], [526, 3, 1, "", "remove_logs"], [526, 3, 1, "", "run"], [526, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[527, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[527, 4, 1, "", "is_ok"], [527, 3, 1, "", "remove_successful_logs"], [527, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[528, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[529, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[531, 0, 0, "-", "metric"], [532, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[531, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[531, 4, 1, "", "acc_input_model"], [531, 4, 1, "", "acc_optimized_model"], [531, 4, 1, "", "accuracy"], [531, 3, 1, "", "calculate_throughput"], [531, 3, 1, "", "insert_data"], [531, 4, 1, "", "latency"], [531, 4, 1, "", "optimization_time"], [531, 4, 1, "", "path_optimized_model"], [531, 4, 1, "", "profiling_data"], [531, 4, 1, "", "size_input_model"], [531, 4, 1, "", "size_optimized_model"], [531, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[532, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[532, 3, 1, "", "clean_logs"], [532, 3, 1, "", "clean_status"], [532, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[533, 1, 1, "", "check_module"], [533, 1, 1, "", "deprecated"], [533, 1, 1, "", "determine_ip"], [533, 1, 1, "", "export_to_csv"], [533, 1, 1, "", "filter_transforms"], [533, 1, 1, "", "get_dataset_path"], [533, 1, 1, "", "get_default_pruning_config_path"], [533, 1, 1, "", "get_file_extension"], [533, 1, 1, "", "get_framework_from_path"], [533, 1, 1, "", "get_height_width_from_size"], [533, 1, 1, "", "get_metrics_dict"], [533, 1, 1, "", "get_model_zoo_config_path"], [533, 1, 1, "", "get_model_zoo_model_path"], [533, 1, 1, "", "get_module_version"], [533, 1, 1, "", "get_predefined_config_path"], [533, 1, 1, "", "get_shape_from_transforms"], [533, 1, 1, "", "get_size"], [533, 1, 1, "", "is_dataset_file"], [533, 1, 1, "", "is_development_env"], [533, 1, 1, "", "is_hidden"], [533, 1, 1, "", "load_dataloader_config"], [533, 1, 1, "", "load_help_nc_params"], [533, 1, 1, "", "load_metrics_config"], [533, 1, 1, "", "load_model_config"], [533, 1, 1, "", "load_model_wise_params"], [533, 1, 1, "", "load_precisions_config"], [533, 1, 1, "", "load_pruning_details_config"], [533, 1, 1, "", "load_transforms_config"], [533, 1, 1, "", "load_transforms_filter_config"], [533, 1, 1, "", "normalize_domain"], [533, 1, 1, "", "normalize_framework"], [533, 1, 1, "", "normalize_string"], [533, 1, 1, "", "parse_bool_value"], [533, 1, 1, "", "parse_to_float_list"], [533, 1, 1, "", "parse_to_string_list"], [533, 1, 1, "", "parse_version"], [533, 1, 1, "", "release_tag"], [533, 1, 1, "", "replace_with_values"], [533, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[534, 0, 0, "-", "config"], [535, 0, 0, "-", "dataloader"], [536, 0, 0, "-", "evaluation"], [537, 0, 0, "-", "graph_optimization"], [539, 0, 0, "-", "mixed_precision"], [540, 0, 0, "-", "model"], [541, 0, 0, "-", "pruning"], [542, 0, 0, "-", "quantization"], [543, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[534, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[534, 3, 1, "", "dump"], [534, 3, 1, "", "get_performance_configs"], [534, 3, 1, "", "get_performance_cores_per_instance"], [534, 3, 1, "", "get_performance_num_of_instance"], [534, 3, 1, "", "initialize"], [534, 3, 1, "", "load"], [534, 3, 1, "", "process_transform"], [534, 3, 1, "", "remove_accuracy_metric"], [534, 3, 1, "", "remove_dataloader"], [534, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [534, 3, 1, "", "set_accuracy_goal"], [534, 3, 1, "", "set_accuracy_metric"], [534, 3, 1, "", "set_evaluation_dataloader"], [534, 3, 1, "", "set_evaluation_dataset_path"], [534, 3, 1, "", "set_inputs"], [534, 3, 1, "", "set_optimization_precision"], [534, 3, 1, "", "set_outputs"], [534, 3, 1, "", "set_performance_cores_per_instance"], [534, 3, 1, "", "set_performance_iterations"], [534, 3, 1, "", "set_performance_num_of_instance"], [534, 3, 1, "", "set_performance_warmup"], [534, 3, 1, "", "set_quantization_approach"], [534, 3, 1, "", "set_quantization_batch_size"], [534, 3, 1, "", "set_quantization_dataloader"], [534, 3, 1, "", "set_quantization_dataset_path"], [534, 3, 1, "", "set_quantization_sampling_size"], [534, 3, 1, "", "set_transform"], [534, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[535, 2, 1, "", "Dataloader"], [535, 2, 1, "", "Dataset"], [535, 2, 1, "", "Filter"], [535, 2, 1, "", "LabelBalance"], [535, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[535, 3, 1, "", "serialize"], [535, 3, 1, "", "set_dataset"], [535, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[535, 3, 1, "", "is_dummy"], [535, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[535, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[536, 2, 1, "", "Accuracy"], [536, 2, 1, "", "Configs"], [536, 2, 1, "", "Evaluation"], [536, 2, 1, "", "Metric"], [536, 2, 1, "", "Performance"], [536, 2, 1, "", "Postprocess"], [536, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[536, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[536, 4, 1, "", "name"], [536, 4, 1, "", "param"], [536, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema": [[536, 3, 1, "", "get_label_shift_value"]], "neural_compressor.ux.utils.workload.graph_optimization": [[537, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[537, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[539, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[539, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[540, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[540, 4, 1, "", "inputs"], [540, 4, 1, "", "outputs"], [540, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[541, 2, 1, "", "AdamOptimizer"], [541, 2, 1, "", "AdamWOptimizer"], [541, 2, 1, "", "Approach"], [541, 2, 1, "", "Criterion"], [541, 2, 1, "", "CrossEntropyLossCriterion"], [541, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [541, 2, 1, "", "KnowledgeDistillationLossCriterion"], [541, 2, 1, "", "Optimizer"], [541, 2, 1, "", "Pruning"], [541, 2, 1, "", "SGDOptimizer"], [541, 2, 1, "", "SelfKnowledgeDistillationLoss"], [541, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [541, 2, 1, "", "Train"], [541, 2, 1, "", "WeightCompressionApproach"], [541, 1, 1, "", "parse_dict_value_to_float"], [541, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[541, 3, 1, "", "serialize"], [541, 3, 1, "", "set_postprocess_transforms"]], "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach": [[541, 3, 1, "", "initialize_pruners"], [541, 3, 1, "", "serialize"], [541, 3, 1, "", "serialize_pruner"]], "neural_compressor.ux.utils.workload.quantization": [[542, 2, 1, "", "Advance"], [542, 2, 1, "", "Calibration"], [542, 2, 1, "", "Quantization"], [542, 2, 1, "", "WiseConfig"], [542, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[543, 2, 1, "", "AccCriterion"], [543, 2, 1, "", "Diagnosis"], [543, 2, 1, "", "ExitPolicy"], [543, 2, 1, "", "MultiObjectives"], [543, 2, 1, "", "Strategy"], [543, 2, 1, "", "Tuning"], [543, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[543, 4, 1, "", "objective"], [543, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[543, 3, 1, "", "set_max_trials"], [543, 3, 1, "", "set_performance_only"], [543, 3, 1, "", "set_random_seed"], [543, 3, 1, "", "set_timeout"], [543, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[544, 1, 1, "", "float_representer"], [544, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[545, 0, 0, "-", "communication"], [546, 0, 0, "-", "configuration"], [547, 0, 0, "-", "exceptions"], [549, 0, 0, "-", "router"], [550, 0, 0, "-", "server"], [553, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[545, 2, 1, "", "Message"], [545, 2, 1, "", "MessageQueue"], [545, 2, 1, "", "Request"], [545, 2, 1, "", "Response"], [545, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[545, 4, 1, "", "data"], [545, 4, 1, "", "status"], [545, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[545, 3, 1, "", "get"], [545, 3, 1, "", "post_error"], [545, 3, 1, "", "post_failure"], [545, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[546, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[546, 3, 1, "", "determine_gui_port"], [546, 3, 1, "", "determine_log_level"], [546, 3, 1, "", "determine_server_port"], [546, 3, 1, "", "determine_url_prefix"], [546, 3, 1, "", "determine_values_from_environment"], [546, 3, 1, "", "dump_token_to_file"], [546, 3, 1, "", "get_command_line_args"], [546, 3, 1, "", "get_url"], [546, 4, 1, "", "global_config_directory"], [546, 3, 1, "", "is_port_taken"], [546, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[547, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[549, 2, 1, "", "DeferredRoutingDefinition"], [549, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [549, 2, 1, "", "RealtimeRoutingDefinition"], [549, 2, 1, "", "Router"], [549, 2, 1, "", "RoutingDefinition"], [549, 1, 1, "", "find_pattern_in_graph"], [549, 1, 1, "", "get_model_graph"], [549, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[549, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[550, 1, 1, "", "allow_api_call"], [550, 1, 1, "", "block_iframe"], [550, 1, 1, "", "block_sniffing"], [550, 1, 1, "", "build_parameters"], [550, 1, 1, "", "disable_cache"], [550, 1, 1, "", "get_tls_args"], [550, 1, 1, "", "handle_api_call"], [550, 1, 1, "", "page_not_found"], [550, 1, 1, "", "require_api_token"], [550, 1, 1, "", "root"], [550, 1, 1, "", "run_server"], [550, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[551, 0, 0, "-", "benchmark"], [552, 0, 0, "-", "history_snapshot_parser"], [554, 0, 0, "-", "model"], [555, 0, 0, "-", "optimization"], [556, 0, 0, "-", "profiling"], [557, 0, 0, "-", "request_data_processor"], [558, 0, 0, "-", "response_generator"], [559, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[551, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[552, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[552, 3, 1, "", "extract_accuracy"], [552, 3, 1, "", "extract_performance"], [552, 3, 1, "", "parse_history_item"], [552, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[554, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[554, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[555, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[556, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[556, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[557, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[557, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[558, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[558, 3, 1, "", "add_refresh"], [558, 3, 1, "", "from_exception"], [558, 3, 1, "", "get_status_code_for_exception"], [558, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[559, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[559, 3, 1, "", "get_code_template"], [559, 3, 1, "", "get_config"], [559, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data", "6": "py:attribute", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contributor": [0, 1], "coven": [0, 1], "code": [0, 1, 3, 599], "conduct": [0, 1], "our": 0, "pledg": 0, "standard": 0, "respons": 0, "scope": [0, 604], "enforc": 0, "attribut": [0, 209, 217, 226, 255, 264, 275, 303, 328, 444], "contribut": [1, 591, 595], "guidelin": 1, "pull": 1, "request": [1, 458], "checklist": 1, "templat": [1, 530, 531, 532], "support": [1, 2, 3, 5, 6, 562, 563, 564, 566, 568, 570, 572, 575, 578, 579, 580, 582, 583, 587, 588, 600, 601, 603, 606, 607, 611, 612, 614], "fx": 2, "introduct": [2, 3, 6, 561, 562, 563, 564, 566, 567, 568, 570, 572, 575, 578, 579, 580, 598, 600, 601, 603, 604, 606, 607, 610, 611, 612, 613, 614], "mode": [2, 615], "matrix": [2, 3, 6, 562, 563, 564, 566, 568, 570, 572, 575, 578, 579, 580, 583, 600, 601, 603, 606, 607, 611, 614], "neural": [2, 3, 5, 39, 561, 574, 575, 581, 585, 587, 592, 598, 603, 604, 610], "compressor": [2, 5, 561, 574, 575, 592, 598, 610], "get": [2, 3, 5, 6, 562, 563, 564, 566, 568, 572, 578, 579, 581, 592, 599, 600, 601, 603, 606, 607, 611, 614], "start": [2, 3, 5, 6, 561, 562, 563, 564, 566, 568, 572, 578, 579, 581, 582, 586, 592, 600, 601, 603, 606, 607, 611, 614], "post": [2, 607], "train": [2, 23, 368, 568, 607], "static": [2, 607], "quantiz": [2, 5, 22, 41, 59, 86, 315, 352, 542, 567, 587, 598, 606, 607, 608, 615], "dynam": [2, 3, 607], "awar": [2, 607], "exampl": [2, 3, 6, 404, 562, 563, 564, 566, 567, 568, 569, 570, 579, 580, 583, 587, 600, 601, 603, 604, 607, 611, 615], "note": [2, 609], "detail": [2, 561, 604], "common": [2, 24, 234, 235, 236, 237, 238, 239, 240, 241, 571], "problem": 2, "architectur": [3, 5, 39, 565, 575], "search": [3, 39, 598], "basic": [3, 354, 613], "na": [3, 39, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 606], "api": [3, 5, 6, 16, 17, 35, 562, 563, 564, 566, 568, 573, 578, 579, 581, 585, 599, 600, 601, 603, 606], "usag": [3, 587, 598, 611, 613], "1": [3, 561, 568, 571, 573, 576, 598, 615], "python": [3, 5, 45, 578, 581, 585, 586, 593, 596, 606], "yaml": [3, 563, 564, 567, 568, 572, 614], "2": [3, 35, 561, 568, 571, 573, 576, 598, 615], "onli": 3, "advanc": 3, "custom": [3, 561, 578, 613], "secur": [4, 561, 568], "polici": [4, 613], "report": 4, "vulner": 4, "intel": [5, 561, 574, 575, 584, 592, 598, 615], "instal": [5, 561, 576, 582, 584, 591, 592, 595], "prerequisit": [5, 576], "linux": [5, 576], "jupyterlab": [5, 592], "extens": [5, 581, 591, 592, 595, 598, 599, 615], "gui": 5, "system": [5, 561, 602], "requir": [5, 591, 595], "valid": [5, 615], "hardwar": [5, 615], "environ": [5, 516, 584], "cpu": [5, 584, 615], "base": 5, "64": 5, "compat": 5, "processor": 5, "gpu": 5, "built": [5, 573, 578], "": [5, 599], "xe": 5, "onnx": [5, 8, 12, 188, 607, 615], "model": [5, 33, 44, 238, 327, 328, 329, 330, 331, 332, 333, 334, 335, 408, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 540, 554, 561, 570, 580, 587, 615], "multipl": [5, 600, 615], "vendor": 5, "through": [5, 615], "runtim": [5, 8, 607, 615], "softwar": 5, "document": [5, 574], "select": [5, 592], "public": [5, 605], "event": [5, 605], "addit": 5, "content": [5, 26, 39, 50, 54, 55, 56, 57, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 450, 452, 453, 459, 460, 462, 463, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 483, 484, 485, 486, 488, 489, 491, 492, 494, 495, 497, 498, 500, 501, 502, 503, 504, 506, 507, 508, 509, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 561], "hire": 5, "adaptor": [6, 7, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190], "work": [6, 607], "flow": [6, 607], "queri": [6, 89], "background": [6, 598], "ad": 6, "new": [6, 561, 593, 596, 613], "backend": 6, "capabl": 6, "implement": 6, "onnxrtadaptor": 6, "class": [6, 26, 39, 55, 57, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 188, 191, 192, 193, 194, 195, 196, 197, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 274, 275, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 310, 312, 313, 314, 315, 316, 317, 318, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 367, 368, 369, 372, 373, 374, 375, 376, 378, 379, 382, 383, 384, 385, 387, 388, 389, 390, 391, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 437, 438, 439, 441, 444, 445, 446, 447, 448, 450, 452, 453, 460, 462, 465, 467, 468, 469, 470, 472, 473, 474, 475, 479, 483, 485, 486, 489, 491, 495, 498, 501, 502, 504, 507, 508, 509, 511, 515, 516, 518, 519, 520, 521, 523, 525, 526, 527, 528, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 549, 551, 552, 554, 555, 556, 557, 558, 559], "torch": [9, 615], "util": [9, 14, 48, 62, 87, 184, 190, 273, 351, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 432, 476, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], "bf16": [10, 93, 94], "convert": 10, "hawq": 11, "metric": [11, 32, 237, 276, 277, 278, 279, 280, 281, 282, 283, 318, 319, 320, 321, 322, 323, 324, 325, 407, 531, 573, 578], "symbol": 13, "trace": 13, "algorithm": [15, 191, 192, 193, 194], "user": [17, 563, 564, 567, 568, 573, 606, 614], "face": [17, 573], "benchmark": [18, 25, 195, 233, 379, 380, 381, 382, 398, 551, 561, 562, 606], "config": [19, 196, 200, 534, 563, 564, 600], "mix": [20, 579, 608], "precis": [20, 411, 579, 608], "object": [21, 336, 600], "bleu": [26, 276, 318], "modul": [26, 50, 54, 55, 57, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 200, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 265, 267, 268, 269, 271, 272, 273, 274, 276, 277, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 299, 300, 301, 302, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 318, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 450, 452, 453, 459, 460, 462, 463, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 483, 484, 485, 486, 488, 491, 492, 494, 495, 497, 498, 500, 501, 502, 503, 504, 506, 507, 508, 509, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559], "criterion": [27, 234], "data": [28, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "dataload": [29, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 235, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 400, 535, 563, 564], "basedataload": 29, "dataset": [30, 215, 216, 217, 218, 219, 220, 221, 222, 253, 254, 255, 256, 257, 258, 259, 260, 401, 561, 564, 573], "transform": [31, 227, 228, 229, 230, 231, 232, 265, 266, 267, 268, 416, 573, 612], "optim": [34, 239, 409, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 555, 561, 588, 598, 601], "compon": [35, 242, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512], "experiement": 35, "deprec": 35, "0": [35, 615], "distil": [36, 269, 566, 567, 606, 615], "mixedprecis": 37, "modelconvers": 38, "packag": [39, 56, 77, 193, 209, 221, 225, 226, 229, 236, 247, 259, 263, 264, 266, 270, 275, 282, 298, 303, 304, 317, 324, 328, 343, 359, 364, 372, 382, 425, 430, 489, 591, 593, 595, 596], "prune": [40, 302, 313, 348, 496, 497, 498, 541, 561, 603, 604, 606, 615], "schedul": [42, 314, 316, 350, 603, 604], "contrib": [43, 201, 202, 203, 204], "strategi": [46, 47, 202, 203, 204, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 610, 613], "644ec953a7dc_pruning_support": 49, "6ece06672ed3_v1_14": 50, "function": [50, 54, 55, 62, 81, 87, 88, 110, 111, 113, 155, 157, 184, 185, 186, 189, 190, 191, 193, 195, 197, 200, 207, 215, 217, 221, 224, 225, 226, 229, 231, 232, 233, 234, 236, 239, 241, 245, 253, 255, 259, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 276, 277, 279, 280, 281, 282, 283, 291, 295, 296, 300, 305, 310, 311, 312, 314, 317, 318, 319, 321, 322, 323, 324, 325, 326, 330, 334, 336, 337, 340, 346, 347, 349, 350, 351, 352, 355, 363, 368, 371, 372, 374, 375, 377, 378, 380, 381, 391, 392, 393, 395, 400, 402, 403, 405, 407, 410, 411, 416, 419, 420, 421, 432, 442, 459, 463, 465, 476, 477, 478, 481, 484, 488, 492, 494, 497, 500, 502, 503, 506, 512, 513, 521, 524, 529, 533, 541, 544, 545, 549, 550, 568], "6f0d0f71d92e_v1_13": 51, "9e89549a08c8_v1_11": 52, "block_mask": 53, "env": 54, "neural_compressor": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560], "subpackag": [56, 65, 131, 150, 151, 153, 201, 226, 264, 275, 292, 293, 298, 303, 317, 338, 359, 430, 435, 449, 454, 461, 489, 505, 514, 522, 548], "submodul": [56, 61, 65, 77, 94, 119, 131, 139, 145, 150, 151, 153, 156, 169, 181, 187, 193, 202, 209, 221, 225, 229, 236, 247, 259, 263, 266, 270, 275, 282, 292, 294, 298, 304, 308, 317, 324, 328, 338, 343, 359, 364, 372, 382, 386, 394, 406, 425, 430, 435, 436, 440, 443, 449, 451, 454, 455, 461, 464, 466, 471, 480, 482, 487, 489, 490, 493, 496, 499, 505, 510, 514, 522, 530, 538, 548, 553], "kera": [57, 472], "keras_util": [58, 59], "mxnet": [60, 564, 578, 607, 612, 615], "mxnet_util": [61, 62], "onnxrt": [63, 464, 465, 564, 578, 612], "ox_util": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "calibr": 64, "oper": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "activ": 66, "argmax": 67, "attent": 68, "binary_op": 69, "concat": 70, "conv": 71, "direct_q8": 72, "embed_layernorm": 73, "gather": 74, "gavgpool": 75, "gemm": 76, "lstm": 78, "matmul": 79, "maxpool": 80, "op": 81, "pad": 82, "pool": 83, "resiz": 84, "split": 85, "pytorch": [88, 377, 466, 467, 564, 568, 578, 607, 608, 611, 612, 615], "tensorflow": [90, 470, 471, 472, 473, 474, 475, 476, 564, 568, 578, 607, 608, 611, 612, 615], "tf_util": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "graph_convert": 91, "graph_converter_without_calib": 92, "graph_rewrit": [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "bf16_convert": [93, 185], "gener": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "convert_add_to_biasadd": 95, "convert_layout": 96, "convert_leakyrelu": 97, "convert_nan_to_random": 98, "convert_placeholder_to_const": 99, "dequantize_cast_optim": 100, "dilated_contract": 101, "dummy_biasadd": 102, "expanddims_optim": 103, "fetch_weight_from_reshap": 104, "fold_batch_norm": 105, "fold_const": 106, "fuse_biasadd_add": 107, "fuse_column_wise_mul": 108, "fuse_conv_with_math": 109, "fuse_decomposed_bn": 110, "fuse_decomposed_in": 111, "fuse_gelu": 112, "fuse_layer_norm": 113, "fuse_pad_with_conv": 114, "fuse_pad_with_fp32_conv": 115, "fuse_reshape_transpos": 116, "graph_cse_optim": 117, "grappler_pass": 118, "insert_print_nod": 120, "move_squeeze_after_relu": 121, "pre_optim": 122, "remove_training_nod": 123, "rename_batch_norm": 124, "split_shared_input": 125, "strip_equivalent_nod": 126, "strip_unused_nod": 127, "switch_optim": 128, "update_ent": 129, "graph_bas": 130, "int8": [132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 570, 615], "freeze_fake_qu": 132, "freeze_valu": 133, "freeze_value_without_calib": 134, "fuse_conv_redundant_dequant": 135, "fuse_conv_requant": 136, "fuse_matmul_redundant_dequant": 137, "fuse_matmul_requant": 138, "meta_op_optim": 140, "post_hostconst_convert": 141, "post_quantized_op_cs": 142, "rnn_convert": 143, "scale_propag": 144, "qdq": [145, 146, 147, 148, 162, 163, 164, 165, 166, 167, 168, 169, 170, 615], "insert_qdq_pattern": 146, "merge_duplicated_qdq": 147, "share_qdq_y_pattern": 148, "graph_util": 149, "quantize_graph": [151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], "qat": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 615], "fake_quant": 152, "quantize_config": 154, "quantize_help": 155, "quantize_lay": [156, 157, 158, 159, 160], "optimize_lay": 157, "quantize_layer_add": 158, "quantize_layer_bas": 159, "quantize_layer_bn": 160, "quantize_wrapp": 161, "fuse_qdq_bn": 162, "fuse_qdq_concatv2": 163, "fuse_qdq_conv": 164, "fuse_qdq_deconv": 165, "fuse_qdq_in": 166, "fuse_qdq_matmul": 167, "fuse_qdq_pool": 168, "optimize_qdq": 170, "quantize_graph_bas": 171, "quantize_graph_bn": 172, "quantize_graph_concatv2": 173, "quantize_graph_conv": 174, "quantize_graph_for_intel_cpu": 175, "quantize_graph_matmul": 176, "quantize_graph_pool": 177, "quantize_graph_common": 178, "transform_graph": [179, 180, 181, 182, 183], "bias_correct": 179, "graph_transform_bas": 180, "insert_log": 182, "rerange_quantized_concat": 183, "torch_util": [185, 186, 187, 188, 189, 190, 241], "hawq_metr": 186, "symbolic_trac": 189, "fast_bias_correct": 192, "weight_correct": 194, "conf": [196, 197, 198, 199], "dotdict": 197, "pythonic_config": 199, "sigopt": [203, 610, 613], "tpe": [204, 613], "base_dataload": [205, 243], "default_dataload": [207, 245], "fetcher": [208, 246], "mxnet_dataload": [210, 248], "onnxrt_dataload": [211, 249], "pytorch_dataload": [212, 250], "sampler": [213, 251], "tensorflow_dataload": [214, 252], "bert_dataset": [215, 253], "coco_dataset": [216, 254], "dummy_dataset": [218, 256], "dummy_dataset_v2": [219, 257], "imagenet_dataset": [220, 258], "style_transfer_dataset": [222, 260], "filter": [223, 224, 225, 261, 262, 263], "coco_filt": [223, 261], "coco_transform": 227, "imagenet_transform": [228, 265], "postprocess": [230, 240], "token": [231, 267], "experiment": [233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "export": [270, 271, 272, 273, 570], "qlinear2qdq": 271, "torch2onnx": 272, "graph_optim": [274, 486, 487, 488, 537], "bleu_util": [277, 319], "coco_label_map": [278, 320], "coco_tool": [279, 321], "evaluate_squad": [280, 322], "f1": [281, 323], "mixed_precis": [284, 490, 491, 492, 539], "model_convers": 285, "basic_na": 286, "dyna": 287, "dynast": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "dynas_manag": 288, "dynas_predictor": 289, "dynas_search": 290, "dynas_util": 291, "supernetwork": [293, 294, 295, 296, 297], "machine_transl": [294, 295, 296, 297], "modules_supernetwork": 295, "transformer_interfac": 296, "transformer_supernetwork": 297, "nas_util": 300, "search_algorithm": 301, "pruning_recip": [303, 304, 305, 306], "pattern": [304, 305, 306, 310, 340, 603, 604], "tile_pattern": 306, "pruning_v2": 307, "pytorch_prun": [308, 309, 310, 311, 312, 313, 314], "logger": [309, 339, 375, 524], "prune_util": 311, "pruner": [312, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "mix_precis": 326, "base_model": 327, "keras_model": 329, "mxnet_model": 331, "nets_factori": 332, "onnx_model": 333, "tensorflow_model": 334, "torch_model": 335, "criteria": [337, 603, 604, 613], "pruner_legaci": [341, 342, 343, 344, 345, 346], "gradient_sensit": 341, "group_lasso": 342, "magnitud": 344, "pattern_lock": 345, "reg": 349, "auto_mixed_precis": 353, "bayesian": [355, 613], "conserv": 356, "exhaust": [357, 613], "hawq_v2": [358, 613], "mse": [360, 613], "mse_v2": [361, 613], "random": [362, 613], "tuning_sampl": 365, "tuning_spac": 366, "tuning_struct": 367, "collect_layer_histogram": 369, "constant": 370, "create_obj_from_config": 371, "kl_diverg": 373, "load_huggingfac": 374, "option": [376, 561, 568, 576, 586], "ux": [379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559], "benchmark_model": 380, "execute_benchmark": 381, "config_gener": [383, 384, 385, 386, 387, 388, 389, 390], "benchmark_config_gener": 383, "graph_optimization_config_gener": 385, "mixed_precision_config_gener": 387, "profiling_config_gener": 388, "pruning_config_gener": 389, "quantization_config_gener": 390, "configuration_wizard": [391, 392, 393, 394, 395, 396], "configuration_pars": 391, "get_boundary_nod": 392, "get_configur": 393, "params_feed": 395, "pruning_config_pars": 396, "db_manag": [397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432], "db_model": [398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418], "benchmark_result": 399, "domain": [402, 460], "domain_flavour": 403, "framework": [405, 563, 564, 570, 572, 580, 606], "optimization_typ": 410, "profil": [412, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 556, 561], "profiling_result": 413, "project": [414, 561], "pruning_detail": 415, "tuning_detail": 417, "tuning_histori": [418, 502], "db_oper": [419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429], "benchmark_api_interfac": 419, "dataset_api_interfac": 420, "diagnosis_api_interfac": 422, "dictionaries_api_interfac": 423, "examples_api_interfac": 424, "model_api_interfac": 426, "optimization_api_interfac": 427, "profiling_api_interfac": 428, "project_api_interfac": 429, "params_interfac": 431, "diagnosi": [433, 434, 435, 436, 437, 438, 439, 440, 441, 561], "factori": [434, 485, 504, 509], "onnx_diagnosi": [436, 437], "onnxrt_diagnosi": 437, "op_detail": 438, "op_entri": 439, "tensorflow_diagnosi": [440, 441], "file_brows": [442, 443], "graph": [444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 561], "collaps": 445, "edg": 446, "graph_read": 448, "node": 450, "reader": [451, 452, 453], "onnxrt_read": 452, "tensorflow_read": 453, "jobs_manag": [455, 456, 457, 458], "jobs_control_queu": 456, "manage_workspac": 459, "model_type_gett": 463, "repositori": 468, "shape": 469, "frozen_pb": 470, "meta_graph": 473, "saved_model": 475, "model_zoo": [477, 478, 479, 480, 481], "download_config": 477, "download_model": 478, "download": 479, "list_model": 481, "names_mapp": [482, 483], "execute_optim": 484, "optimize_model": [488, 492, 494, 497], "neural_coder_optim": [493, 494], "tune": [499, 500, 501, 543, 607, 613], "tune_model": 500, "execute_profil": 503, "profile_model": 506, "tensorflow_profil": [509, 510, 511, 512], "inc_bench": 513, "const": 515, "except": [517, 547], "executor": 518, "expiring_dict": 519, "github_info": 520, "hw_info": 521, "json_seri": 523, "parser": 525, "proc": 526, "process": 527, "singleton": 528, "status_upd": 529, "workdir": 532, "workload": [534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 559], "evalu": [536, 568], "yaml_util": 544, "web": [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559], "commun": 545, "configur": [546, 568, 572, 602, 606, 610, 614], "router": 549, "server": 550, "servic": [551, 552, 553, 554, 555, 556, 557, 558, 559], "history_snapshot_pars": 552, "request_data_processor": 557, "response_gener": 558, "version": 560, "bench": [561, 585], "tabl": 561, "from": [561, 576], "binari": [561, 576], "sourc": [561, 576], "home": 561, "screen": 561, "creat": [561, 563], "predefin": 561, "displai": 561, "list": [561, 612], "remov": 561, "develop": [561, 591, 595], "tab": 561, "wizard": 561, "edit": 561, "entri": 561, "inform": [561, 577], "file": [563, 564, 572, 614], "specif": [563, 564], "design": [565, 613], "workflow": 565, "knowledg": [566, 615], "intermedi": 566, "layer": 566, "self": 566, "defin": [567, 568], "distribut": [568, 587], "infer": 568, "featur": [568, 572, 575, 587, 588, 592, 606, 607, 611, 614], "pure": 568, "horovodrun": 568, "execut": 568, "fp32": 570, "appendix": 570, "frequent": 571, "ask": 571, "question": 571, "build": [571, 578], "issu": [571, 609], "3": [571, 576, 582, 598], "incompat": [573, 609], "chang": [573, 597, 599, 609], "between": 573, "v1": 573, "section": 574, "infrastructur": 575, "ai": 576, "kit": 576, "window": 576, "legal": 577, "licens": 577, "citat": 577, "trademark": 577, "singl": [578, 600], "multi": 578, "coder": [581, 585, 587, 598], "what": [581, 599], "do": 581, "we": 581, "offer": 581, "jupyt": [581, 582, 593, 596], "lab": [581, 582], "launcher": [581, 586], "contact": 581, "aw": 582, "amazon": 582, "sagemak": 582, "For": 582, "studio": 582, "notebook": 582, "instanc": 582, "guid": 582, "bigdl": 583, "nano": 583, "platform": [584, 610], "best": [584, 592], "perform": [584, 610], "set": [584, 598], "mkl": 584, "openmp": 584, "jemalloc": 584, "numa": 584, "control": 584, "variabl": 584, "frequenc": 584, "govern": 584, "enabl": [585, 592, 598], "superbench": 585, "quick": 586, "argument": 586, "pypi": 587, "v0": 589, "4": [589, 598, 605], "highlight": 589, "other": 589, "changelog": [590, 594], "neural_compressor_ext_lab": [591, 593], "uninstal": [591, 595], "auto": [592, 598, 608], "Or": 592, "let": 592, "u": 592, "help": 592, "you": 592, "pre": 592, "requisit": 592, "make": [593, 596, 599], "releas": [593, 596, 609], "manual": [593, 596], "npm": [593, 596], "autom": [593, 596], "publish": [593, 596], "conda": [593, 596], "forg": [593, 596], "neural_compressor_ext_lab_alibaba": [595, 596], "log": 597, "unreleas": 597, "vscode": 598, "open": 598, "icon": 598, "5": 598, "welcom": 599, "your": 599, "v": 599, "folder": 599, "setup": 599, "up": 599, "run": 599, "straight": 599, "awai": 599, "explor": 599, "test": 599, "go": 599, "further": 599, "orchestr": 601, "One": 601, "shot": 601, "network": [603, 604], "type": 604, "sparsiti": 604, "decai": 604, "regular": 604, "refer": [604, 607], "full": 605, "52": 605, "2022": 605, "34": 605, "2021": 605, "14": 605, "2018": 605, "2020": 605, "style": 606, "access": 606, "fundament": 607, "scheme": 607, "ipex": 607, "approach": 607, "accuraci": [607, 613], "turn": 608, "ON": 608, "dure": 608, "known": 609, "prepar": 610, "benefit": 610, "comparison": 610, "differ": 610, "tensorboard": 611, "space": 613, "exit": 613, "travers": 613, "logic": 613, "o0": 613, "10": 615, "12": 615, "ptq": 615, "11": 615, "7": 615}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributor Covenant Code of Conduct": [[0, "contributor-covenant-code-of-conduct"], [1, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[0, "our-pledge"]], "Our Standards": [[0, "our-standards"]], "Our Responsibilities": [[0, "our-responsibilities"]], "Scope": [[0, "scope"]], "Enforcement": [[0, "enforcement"]], "Attribution": [[0, "attribution"]], "Contribution Guidelines": [[1, "contribution-guidelines"]], "Pull Request Checklist": [[1, "pull-request-checklist"]], "Pull Request Template": [[1, "pull-request-template"]], "Support": [[1, "support"]], "FX": [[2, "fx"]], "Introduction": [[2, "introduction"], [3, "introduction"], [6, "introduction"], [561, "introduction"], [562, "introduction"], [563, "introduction"], [564, "introduction"], [566, "introduction"], [567, "introduction"], [568, "introduction"], [570, "introduction"], [572, "introduction"], [575, "introduction"], [578, "introduction"], [579, "introduction"], [580, "introduction"], [600, "introduction"], [601, "introduction"], [603, "introduction"], [604, "introduction"], [606, "introduction"], [610, "introduction"], [611, "introduction"], [612, "introduction"], [613, "introduction"], [614, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[2, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[2, "get-start"]], "Post Training Static Quantization": [[2, "post-training-static-quantization"], [607, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[2, "post-training-dynamic-quantization"], [607, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[2, "quantization-aware-training"]], "Examples": [[2, "examples"], [3, "examples"], [562, "examples"], [563, "examples"], [564, "examples"], [566, "examples"], [567, "examples"], [568, "examples"], [569, "examples"], [570, "examples"], [579, "examples"], [580, "examples"], [601, "examples"], [603, "examples"], [607, "examples"], [611, "examples"]], "Note": [[2, "note"]], "Details": [[2, "details"]], "Common Problem": [[2, "common-problem"]], "Dynamic Quantization": [[2, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[2, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[3, "neural-architecture-search"]], "Basic NAS": [[3, "basic-nas"]], "Dynamic NAS": [[3, "dynamic-nas"]], "NAS Support Matrix": [[3, "nas-support-matrix"]], "Get Started with NAS API": [[3, "get-started-with-nas-api"]], "Basic Usage": [[3, "basic-usage"]], "1. Python code + YAML": [[3, "python-code-yaml"]], "2. Python code only": [[3, "python-code-only"]], "Advanced Usage (Custom NAS)": [[3, "advanced-usage-custom-nas"]], "Security Policy": [[4, "security-policy"]], "Report a Vulnerability": [[4, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[5, "intel-neural-compressor"], [598, "intel-neural-compressor"]], "Installation": [[5, "installation"], [576, "installation"], [592, "installation"]], "Prerequisites": [[5, "prerequisites"], [576, "prerequisites"], [576, "id1"]], "Install on Linux": [[5, "install-on-linux"]], "Getting Started": [[5, "getting-started"]], "Quantization with Python API": [[5, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[5, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[5, "quantization-with-gui"]], "System Requirements": [[5, "system-requirements"]], "Validated Hardware Environment": [[5, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[5, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[5, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[5, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[5, "validated-software-environment"]], "Validated Models": [[5, "validated-models"], [615, "validated-models"]], "Documentation": [[5, "documentation"]], "Selected Publications/Events": [[5, "selected-publications-events"]], "Additional Content": [[5, "additional-content"]], "Hiring": [[5, "hiring"]], "Adaptor": [[6, "adaptor"], [7, "adaptor"]], "Adaptor Support Matrix": [[6, "adaptor-support-matrix"]], "Working Flow": [[6, "working-flow"], [607, "working-flow"]], "Get Start with Adaptor API": [[6, "get-start-with-adaptor-api"]], "Query API": [[6, "query-api"]], "Background": [[6, "background"]], "Query API Introduction": [[6, "query-api-introduction"]], "Example of Adding a New Backend Support": [[6, "example-of-adding-a-new-backend-support"]], "Capability": [[6, "capability"]], "Implement ONNXRTAdaptor Class": [[6, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[8, "onnx-runtime"]], "Torch Utils": [[9, "torch-utils"]], "Bf16 Convert": [[10, "bf16-convert"]], "Hawq Metric": [[11, "hawq-metric"]], "Onnx": [[12, "onnx"]], "Symbolic Trace": [[13, "symbolic-trace"]], "Util": [[14, "util"]], "Algorithm": [[15, "algorithm"]], "APIs": [[16, "apis"]], "User facing APIs": [[17, "user-facing-apis"]], "Benchmark": [[18, "benchmark"], [25, "benchmark"], [606, "benchmark"]], "Config": [[19, "config"]], "Mix Precision": [[20, "mix-precision"]], "Objective": [[21, "objective"], [600, "objective"]], "Quantization": [[22, "quantization"], [41, "quantization"], [606, "quantization"], [607, "quantization"]], "Training": [[23, "training"]], "Common": [[24, "common"]], "BLEU": [[26, "module-neural_compressor.experimental.metric.bleu"]], "Module Contents": [[26, "module-contents"], [50, "module-contents"], [54, "module-contents"], [55, "module-contents"], [57, "module-contents"], [60, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [152, "module-contents"], [154, "module-contents"], [155, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [200, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [227, "module-contents"], [228, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [245, "module-contents"], [246, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [265, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [276, "module-contents"], [277, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [318, "module-contents"], [319, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [371, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [441, "module-contents"], [442, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [450, "module-contents"], [452, "module-contents"], [453, "module-contents"], [459, "module-contents"], [460, "module-contents"], [462, "module-contents"], [463, "module-contents"], [465, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [481, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [488, "module-contents"], [491, "module-contents"], [492, "module-contents"], [494, "module-contents"], [495, "module-contents"], [497, "module-contents"], [498, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [523, "module-contents"], [524, "module-contents"], [525, "module-contents"], [526, "module-contents"], [527, "module-contents"], [528, "module-contents"], [529, "module-contents"], [531, "module-contents"], [532, "module-contents"], [533, "module-contents"], [534, "module-contents"], [535, "module-contents"], [536, "module-contents"], [537, "module-contents"], [539, "module-contents"], [540, "module-contents"], [541, "module-contents"], [542, "module-contents"], [543, "module-contents"], [544, "module-contents"], [545, "module-contents"], [546, "module-contents"], [547, "module-contents"], [549, "module-contents"], [550, "module-contents"], [551, "module-contents"], [552, "module-contents"], [554, "module-contents"], [555, "module-contents"], [556, "module-contents"], [557, "module-contents"], [558, "module-contents"], [559, "module-contents"]], "Classes": [[26, "classes"], [39, "classes"], [55, "classes"], [57, "classes"], [60, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [152, "classes"], [154, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [182, "classes"], [183, "classes"], [185, "classes"], [186, "classes"], [188, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [200, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [242, "classes"], [243, "classes"], [245, "classes"], [246, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [279, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [295, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [310, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [321, "classes"], [324, "classes"], [325, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [378, "classes"], [379, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [416, "classes"], [417, "classes"], [418, "classes"], [419, "classes"], [420, "classes"], [422, "classes"], [423, "classes"], [424, "classes"], [425, "classes"], [426, "classes"], [427, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [433, "classes"], [434, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [441, "classes"], [444, "classes"], [445, "classes"], [446, "classes"], [447, "classes"], [448, "classes"], [450, "classes"], [452, "classes"], [453, "classes"], [460, "classes"], [462, "classes"], [465, "classes"], [467, "classes"], [468, "classes"], [469, "classes"], [470, "classes"], [472, "classes"], [473, "classes"], [474, "classes"], [475, "classes"], [479, "classes"], [483, "classes"], [485, "classes"], [486, "classes"], [489, "classes"], [491, "classes"], [495, "classes"], [498, "classes"], [501, "classes"], [502, "classes"], [504, "classes"], [507, "classes"], [508, "classes"], [509, "classes"], [511, "classes"], [515, "classes"], [516, "classes"], [518, "classes"], [519, "classes"], [520, "classes"], [521, "classes"], [523, "classes"], [525, "classes"], [526, "classes"], [527, "classes"], [528, "classes"], [531, "classes"], [532, "classes"], [534, "classes"], [535, "classes"], [536, "classes"], [537, "classes"], [539, "classes"], [540, "classes"], [541, "classes"], [542, "classes"], [543, "classes"], [545, "classes"], [546, "classes"], [549, "classes"], [551, "classes"], [552, "classes"], [554, "classes"], [555, "classes"], [556, "classes"], [557, "classes"], [558, "classes"], [559, "classes"]], "Criterion": [[27, "criterion"]], "Data": [[28, "data"]], "Dataloader": [[29, "dataloader"]], "BaseDataLoader": [[29, "basedataloader"]], "dataloaders": [[29, "dataloaders"]], "Datasets": [[30, "datasets"]], "Transforms": [[31, "transforms"]], "Metric": [[32, "metric"]], "Model": [[33, "model"], [44, "model"], [580, "model"]], "Optimizer": [[34, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[35, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[36, "distillation"], [566, "distillation"], [606, "distillation"]], "MixedPrecision": [[37, "mixedprecision"]], "ModelConversion": [[38, "modelconversion"]], "Neural architecture search (NAS)": [[39, "neural-architecture-search-nas"]], "Package Contents": [[39, "package-contents"], [56, "package-contents"], [77, "package-contents"], [193, "package-contents"], [209, "package-contents"], [221, "package-contents"], [225, "package-contents"], [226, "package-contents"], [229, "package-contents"], [236, "package-contents"], [247, "package-contents"], [259, "package-contents"], [263, "package-contents"], [264, "package-contents"], [266, "package-contents"], [270, "package-contents"], [275, "package-contents"], [282, "package-contents"], [298, "package-contents"], [303, "package-contents"], [304, "package-contents"], [317, "package-contents"], [324, "package-contents"], [328, "package-contents"], [343, "package-contents"], [359, "package-contents"], [364, "package-contents"], [372, "package-contents"], [382, "package-contents"], [425, "package-contents"], [430, "package-contents"], [489, "package-contents"]], "Pruning": [[40, "pruning"], [561, "pruning"], [603, "pruning"], [606, "pruning"]], "Scheduler": [[42, "scheduler"]], "Contrib": [[43, "contrib"]], "Pythonic": [[45, "pythonic"]], "Strategy": [[46, "strategy"]], "Strategies": [[47, "strategies"]], "Utils": [[48, "utils"]], "644ec953a7dc_pruning_support": [[49, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[50, "module-6ece06672ed3_v1_14"]], "Functions": [[50, "functions"], [54, "functions"], [55, "functions"], [62, "functions"], [81, "functions"], [87, "functions"], [88, "functions"], [110, "functions"], [111, "functions"], [113, "functions"], [155, "functions"], [157, "functions"], [184, "functions"], [185, "functions"], [186, "functions"], [189, "functions"], [190, "functions"], [191, "functions"], [193, "functions"], [195, "functions"], [197, "functions"], [200, "functions"], [207, "functions"], [215, "functions"], [217, "functions"], [221, "functions"], [224, "functions"], [225, "functions"], [226, "functions"], [229, "functions"], [231, "functions"], [232, "functions"], [233, "functions"], [234, "functions"], [236, "functions"], [239, "functions"], [241, "functions"], [245, "functions"], [253, "functions"], [255, "functions"], [259, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [266, "functions"], [267, "functions"], [268, "functions"], [270, "functions"], [271, "functions"], [272, "functions"], [273, "functions"], [276, "functions"], [277, "functions"], [279, "functions"], [280, "functions"], [281, "functions"], [282, "functions"], [283, "functions"], [291, "functions"], [295, "functions"], [296, "functions"], [300, "functions"], [305, "functions"], [310, "functions"], [311, "functions"], [312, "functions"], [314, "functions"], [317, "functions"], [318, "functions"], [319, "functions"], [321, "functions"], [322, "functions"], [323, "functions"], [324, "functions"], [325, "functions"], [326, "functions"], [330, "functions"], [334, "functions"], [336, "functions"], [337, "functions"], [340, "functions"], [346, "functions"], [347, "functions"], [349, "functions"], [350, "functions"], [351, "functions"], [352, "functions"], [355, "functions"], [363, "functions"], [368, "functions"], [371, "functions"], [372, "functions"], [374, "functions"], [375, "functions"], [377, "functions"], [378, "functions"], [380, "functions"], [381, "functions"], [391, "functions"], [392, "functions"], [393, "functions"], [395, "functions"], [400, "functions"], [402, "functions"], [403, "functions"], [405, "functions"], [407, "functions"], [410, "functions"], [411, "functions"], [416, "functions"], [419, "functions"], [420, "functions"], [421, "functions"], [432, "functions"], [442, "functions"], [459, "functions"], [463, "functions"], [465, "functions"], [476, "functions"], [477, "functions"], [478, "functions"], [481, "functions"], [484, "functions"], [488, "functions"], [492, "functions"], [494, "functions"], [497, "functions"], [500, "functions"], [502, "functions"], [503, "functions"], [506, "functions"], [512, "functions"], [513, "functions"], [521, "functions"], [524, "functions"], [529, "functions"], [533, "functions"], [541, "functions"], [544, "functions"], [545, "functions"], [549, "functions"], [550, "functions"]], "6f0d0f71d92e_v1_13": [[51, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[52, "module-9e89549a08c8_v1_11"]], "block_mask": [[53, "module-block_mask"]], "env": [[54, "module-env"]], "neural_compressor.adaptor.adaptor": [[55, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[56, "module-neural_compressor.adaptor"]], "Subpackages": [[56, "subpackages"], [65, "subpackages"], [131, "subpackages"], [150, "subpackages"], [151, "subpackages"], [153, "subpackages"], [201, "subpackages"], [226, "subpackages"], [264, "subpackages"], [275, "subpackages"], [292, "subpackages"], [293, "subpackages"], [298, "subpackages"], [303, "subpackages"], [317, "subpackages"], [338, "subpackages"], [359, "subpackages"], [430, "subpackages"], [435, "subpackages"], [449, "subpackages"], [454, "subpackages"], [461, "subpackages"], [489, "subpackages"], [505, "subpackages"], [514, "subpackages"], [522, "subpackages"], [548, "subpackages"]], "Submodules": [[56, "submodules"], [61, "submodules"], [65, "submodules"], [77, "submodules"], [94, "submodules"], [119, "submodules"], [131, "submodules"], [139, "submodules"], [145, "submodules"], [150, "submodules"], [151, "submodules"], [153, "submodules"], [156, "submodules"], [169, "submodules"], [181, "submodules"], [187, "submodules"], [193, "submodules"], [202, "submodules"], [209, "submodules"], [221, "submodules"], [225, "submodules"], [229, "submodules"], [236, "submodules"], [247, "submodules"], [259, "submodules"], [263, "submodules"], [266, "submodules"], [270, "submodules"], [275, "submodules"], [282, "submodules"], [292, "submodules"], [294, "submodules"], [298, "submodules"], [304, "submodules"], [308, "submodules"], [317, "submodules"], [324, "submodules"], [328, "submodules"], [338, "submodules"], [343, "submodules"], [359, "submodules"], [364, "submodules"], [372, "submodules"], [382, "submodules"], [386, "submodules"], [394, "submodules"], [406, "submodules"], [425, "submodules"], [430, "submodules"], [435, "submodules"], [436, "submodules"], [440, "submodules"], [443, "submodules"], [449, "submodules"], [451, "submodules"], [454, "submodules"], [455, "submodules"], [461, "submodules"], [464, "submodules"], [466, "submodules"], [471, "submodules"], [480, "submodules"], [482, "submodules"], [487, "submodules"], [489, "submodules"], [490, "submodules"], [493, "submodules"], [496, "submodules"], [499, "submodules"], [505, "submodules"], [510, "submodules"], [514, "submodules"], [522, "submodules"], [530, "submodules"], [538, "submodules"], [548, "submodules"], [553, "submodules"]], "neural_compressor.adaptor.keras": [[57, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils": [[58, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[59, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[60, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[61, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[62, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[63, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[64, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[65, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[66, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[67, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[68, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[69, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[70, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[71, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[72, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[73, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[74, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[75, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[76, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[77, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[78, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[79, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[80, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[81, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[82, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[83, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[84, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[85, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[86, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[87, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[88, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[89, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[90, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[91, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[92, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[133, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[134, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[135, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[136, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[137, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[138, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[139, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[140, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[141, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[142, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[143, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[144, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[145, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[146, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[147, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[148, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[149, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[150, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[162, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[163, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[164, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[165, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[166, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[167, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[168, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[169, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[170, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[171, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[172, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[173, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[174, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[175, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[176, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[177, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[178, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[179, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[180, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[181, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[182, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[183, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[184, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[185, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[186, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[187, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[188, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[189, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[190, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[191, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[192, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[193, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[194, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[195, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[196, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[197, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[198, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[199, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[200, "module-neural_compressor.config"]], "neural_compressor.contrib": [[201, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[202, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[203, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[204, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[205, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[206, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[207, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[208, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[209, "module-neural_compressor.data.dataloaders"]], "Attributes": [[209, "attributes"], [217, "attributes"], [226, "attributes"], [255, "attributes"], [264, "attributes"], [275, "attributes"], [303, "attributes"], [328, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[210, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[211, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[212, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[213, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[214, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[215, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[216, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[217, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[218, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[219, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[220, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[221, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[222, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[223, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[224, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[225, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[226, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[227, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[228, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[229, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[230, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[231, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[232, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[233, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[234, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[235, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[236, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[237, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[238, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[239, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[240, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[241, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[242, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[243, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[244, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[245, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[246, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[247, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[248, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[249, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[250, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[251, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[252, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[253, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[254, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[255, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[256, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[257, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[258, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[259, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[260, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[261, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[262, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[263, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[264, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[265, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[266, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[267, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[268, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[269, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[270, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[271, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.torch2onnx": [[272, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[273, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[274, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[275, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[276, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[277, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[278, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[279, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[280, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[281, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[282, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[283, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[284, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[285, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[286, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[287, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[288, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[289, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[290, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[291, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[292, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[293, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[294, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[295, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[296, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[297, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "neural_compressor.experimental.nas": [[298, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[299, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[300, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[301, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[302, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[303, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[304, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[305, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[306, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[307, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[308, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[309, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[310, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[311, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[312, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[313, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[314, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[315, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[316, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[317, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[318, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[319, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[320, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[321, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[322, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[323, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[324, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[325, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[326, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[327, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[328, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[329, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[330, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[331, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[332, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[333, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[334, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[335, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[336, "module-neural_compressor.objective"]], "neural_compressor.pruner.criteria": [[337, "module-neural_compressor.pruner.criteria"]], "neural_compressor.pruner": [[338, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[339, "module-neural_compressor.pruner.logger"]], "neural_compressor.pruner.patterns": [[340, "module-neural_compressor.pruner.patterns"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[341, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[342, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[343, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[344, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[345, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[346, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "neural_compressor.pruner.pruners": [[347, "module-neural_compressor.pruner.pruners"]], "neural_compressor.pruner.pruning": [[348, "module-neural_compressor.pruner.pruning"]], "neural_compressor.pruner.regs": [[349, "module-neural_compressor.pruner.regs"]], "neural_compressor.pruner.schedulers": [[350, "module-neural_compressor.pruner.schedulers"]], "neural_compressor.pruner.utils": [[351, "module-neural_compressor.pruner.utils"]], "neural_compressor.quantization": [[352, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[353, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[354, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[355, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[356, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[357, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[358, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[359, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[360, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[361, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[362, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[363, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils": [[364, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[365, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[366, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[367, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.training": [[368, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[369, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[370, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[371, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[372, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[373, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[374, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[375, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[376, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[377, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[378, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[379, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[380, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[381, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[382, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[383, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[384, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[385, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[386, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[387, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[388, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[389, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[390, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[391, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[392, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[393, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[394, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[395, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[396, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[397, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[398, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[399, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[400, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[401, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[402, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[403, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[404, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[405, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[406, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[407, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[408, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[409, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[410, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[411, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[412, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[413, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[414, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[415, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[416, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[417, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[418, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[419, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[420, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[421, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[422, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[423, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[424, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[425, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[426, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[427, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[428, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[429, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[430, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[431, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[432, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[433, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[434, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[435, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[436, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[437, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[438, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[439, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[440, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[441, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[442, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[443, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[444, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[445, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[446, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[447, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[448, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[449, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[450, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[451, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[452, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[453, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[454, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[455, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[456, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[457, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[458, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[459, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[460, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[461, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[462, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[463, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[464, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[465, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[466, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[467, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[468, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[469, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[470, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[471, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[472, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[473, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[474, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[475, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[476, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[477, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[478, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[479, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[480, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[481, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[482, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[483, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[484, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[485, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[486, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[487, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[488, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[489, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[490, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[491, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[492, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[493, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[494, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[495, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[496, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[497, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[498, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[499, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[500, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[501, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[502, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[503, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[504, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[505, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[506, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[507, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[508, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[509, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[510, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[511, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[512, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[513, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[514, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[515, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[516, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[517, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[518, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[519, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[520, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[521, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[522, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[523, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[524, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[525, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[526, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[527, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[528, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[529, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[530, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[531, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[532, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[533, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[534, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[535, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[536, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[537, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[538, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[539, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[540, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[541, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[542, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[543, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[544, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[545, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[546, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[547, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[548, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[549, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[550, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[551, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[552, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[553, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[554, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[555, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[556, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[557, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[558, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[559, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[560, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Bench": [[561, "intel-neural-compressor-bench"]], "Table of Contents": [[561, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[561, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[561, "option-1-install-from-binary"]], "Option 2: Install from Source": [[561, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[561, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[561, "home-screen"]], "Create New Project": [[561, "create-new-project"]], "Predefined Model": [[561, "predefined-model"]], "Custom Model": [[561, "custom-model"]], "Display Model Graph": [[561, "display-model-graph"]], "Project List": [[561, "project-list"]], "Remove Project": [[561, "remove-project"]], "Develop Project": [[561, "develop-project"]], "Optimization Tab": [[561, "optimization-tab"]], "Optimization Table": [[561, "optimization-table"]], "Optimization Wizard": [[561, "optimization-wizard"]], "Editing Optimization Entries": [[561, "editing-optimization-entries"]], "Optimization Details": [[561, "optimization-details"]], "Benchmark Tab": [[561, "benchmark-tab"]], "Benchmark Table": [[561, "benchmark-table"]], "Benchmark Wizard": [[561, "benchmark-wizard"]], "Editing Benchmark Entries": [[561, "editing-benchmark-entries"]], "Benchmark Details": [[561, "benchmark-details"]], "Profiling Tab": [[561, "profiling-tab"]], "Profiling Table": [[561, "profiling-table"]], "Profiling Wizard": [[561, "profiling-wizard"]], "Editing Profiling Entries": [[561, "editing-profiling-entries"]], "Profiling Details": [[561, "profiling-details"]], "Diagnosis Tab": [[561, "diagnosis-tab"]], "Dataset Tab": [[561, "dataset-tab"]], "Dataset List": [[561, "dataset-list"]], "Dataset Wizard": [[561, "dataset-wizard"]], "Dataset Details": [[561, "dataset-details"]], "Custom Dataset": [[561, "custom-dataset"]], "Project Information": [[561, "project-information"]], "System Information": [[561, "system-information"]], "Security": [[561, "security"], [568, "security"]], "Benchmarking": [[562, "benchmarking"]], "Benchmark Support Matrix": [[562, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[562, "get-started-with-benchmark-api"]], "DataLoader": [[563, "dataloader"]], "Supported Framework Dataloader Matrix": [[563, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[563, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[563, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[563, "create-a-user-specific-dataloader"]], "Dataset": [[564, "dataset"]], "Supported Framework Dataset Matrix": [[564, "supported-framework-dataset-matrix"]], "TensorFlow": [[564, "tensorflow"], [578, "tensorflow"], [612, "tensorflow"]], "PyTorch": [[564, "pytorch"], [578, "pytorch"], [608, "pytorch"]], "MXNet": [[564, "mxnet"], [578, "mxnet"], [612, "mxnet"]], "ONNXRT": [[564, "onnxrt"], [578, "onnxrt"], [612, "onnxrt"]], "Get start with Dataset API": [[564, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[564, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[564, "user-specific-dataset"]], "Design": [[565, "design"], [613, "design"], [613, "id1"], [613, "id3"], [613, "id5"], [613, "id7"], [613, "id9"], [613, "id11"], [613, "id13"], [613, "id15"], [613, "id17"]], "Architecture": [[565, "architecture"], [575, "architecture"]], "Workflow": [[565, "workflow"]], "Knowledge Distillation": [[566, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[566, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[566, "self-distillation"]], "Distillation Support Matrix": [[566, "distillation-support-matrix"]], "Get Started with Distillation API": [[566, "get-started-with-distillation-api"]], "Distillation for Quantization": [[567, "distillation-for-quantization"]], "User-defined yaml": [[567, "user-defined-yaml"]], "Distributed Training and Inference (Evaluation)": [[568, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[568, "supported-feature-matrix"], [572, "supported-feature-matrix"], [575, "supported-feature-matrix"], [606, "supported-feature-matrix"], [607, "supported-feature-matrix"], [611, "supported-feature-matrix"], [614, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[568, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[568, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[568, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[568, "horovodrun-execution"]], "PyTorch Examples:": [[568, "pytorch-examples"]], "TensorFlow Examples:": [[568, "tensorflow-examples"]], "Export": [[570, "export"]], "Supported Framework Model Matrix": [[570, "supported-framework-model-matrix"], [580, "supported-framework-model-matrix"]], "FP32 Model Export": [[570, "fp32-model-export"]], "INT8 Model Export": [[570, "int8-model-export"]], "Appendix": [[570, "appendix"]], "Frequently Asked Questions": [[571, "frequently-asked-questions"]], "Common Build Issues": [[571, "common-build-issues"]], "Issue 1:": [[571, "issue-1"]], "Issue 2:": [[571, "issue-2"]], "Issue 3:": [[571, "issue-3"]], "Framework YAML Configuration Files": [[572, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[572, "get-started-with-framework-yaml-files"]], "Incompatible changes between v1.2 and v1.1": [[573, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[573, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[573, "built-in-transform-dataset-metric-apis"]], "Intel\u00ae Neural Compressor Documentation": [[574, "intel-neural-compressor-documentation"]], "Sections": [[574, "sections"]], "Infrastructure of Intel\u00ae Neural Compressor": [[575, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[576, "linux-installation"]], "Option 1 Install from Binary": [[576, "option-1-install-from-binary"], [576, "id2"]], "Option 2 Install from Source": [[576, "option-2-install-from-source"], [576, "id3"]], "Option 3 Install from AI Kit": [[576, "option-3-install-from-ai-kit"]], "Windows Installation": [[576, "windows-installation"]], "Legal Information": [[577, "legal-information"]], "License": [[577, "license"]], "Citation": [[577, "citation"]], "Trademarks": [[577, "trademarks"]], "Metrics": [[578, "metrics"]], "Supported Built-in Metric Matrix": [[578, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[578, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[578, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[578, "build-custom-metric-with-python-api"]], "Mixed Precision": [[579, "mixed-precision"]], "Mixed Precision Support Matrix": [[579, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[579, "get-started-with-mixed-precision-api"]], "Neural Coder": [[581, "neural-coder"], [598, "neural-coder"], [598, "id1"]], "What do we offer?": [[581, "what-do-we-offer"]], "Getting Started!": [[581, "getting-started"], [592, "getting-started"]], "Jupyter Lab Extension": [[581, "jupyter-lab-extension"]], "Python Launcher": [[581, "python-launcher"], [586, "python-launcher"]], "Python API": [[581, "python-api"]], "Contact": [[581, "contact"]], "AWS Amazon SageMaker Support": [[582, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[582, "start-jupyter-lab-3"]], "For SageMaker Studio": [[582, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[582, "for-sagemaker-notebook-instance"]], "Installation Guide": [[582, "installation-guide"]], "BigDL Nano Support": [[583, "bigdl-nano-support"]], "Example": [[583, "example"], [587, "example"], [600, "example"]], "Support Matrix": [[583, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[584, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[584, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[584, "install-numa-controller"]], "Environment Variables": [[584, "environment-variables"]], "Frequency Governers": [[584, "frequency-governers"]], "Neural Coder as Python API": [[585, "neural-coder-as-python-api"]], "Enable": [[585, "enable"]], "Bench": [[585, "bench"]], "SuperBench": [[585, "superbench"]], "Quick-Start": [[586, "quick-start"]], "Launcher Arguments (Optional)": [[586, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[587, "neural-coder-for-quantization"]], "Features Supported": [[587, "features-supported"]], "Models Supported": [[587, "models-supported"]], "Usage": [[587, "usage"], [611, "usage"], [611, "id1"], [613, "usage"], [613, "id2"], [613, "id4"], [613, "id6"], [613, "id8"], [613, "id10"], [613, "id12"], [613, "id14"], [613, "id16"], [613, "id18"]], "PyPI distribution:": [[587, "pypi-distribution"]], "Supported Optimization Features": [[588, "supported-optimization-features"]], "v0.4": [[589, "v0-4"]], "Highlights": [[589, "highlights"]], "Others": [[589, "others"]], "Changelog": [[590, "changelog"], [594, "changelog"]], "neural_compressor_ext_lab": [[591, "neural-compressor-ext-lab"]], "Requirements": [[591, "requirements"], [595, "requirements"]], "Install": [[591, "install"], [595, "install"]], "Uninstall": [[591, "uninstall"], [595, "uninstall"]], "Contributing": [[591, "contributing"], [595, "contributing"]], "Development install": [[591, "development-install"], [595, "development-install"]], "Development uninstall": [[591, "development-uninstall"], [595, "development-uninstall"]], "Packaging the extension": [[591, "packaging-the-extension"], [595, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[592, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[592, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[592, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[592, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[593, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[593, "manual-release"], [596, "manual-release"]], "Python package": [[593, "python-package"], [596, "python-package"]], "NPM package": [[593, "npm-package"], [596, "npm-package"]], "Automated releases with the Jupyter Releaser": [[593, "automated-releases-with-the-jupyter-releaser"], [596, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[593, "publishing-to-conda-forge"], [596, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[595, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[596, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[597, "change-log"]], "[Unreleased]": [[597, "unreleased"]], "Background Introduction": [[598, "background-introduction"]], "Neural Coder Extension in VSCode": [[598, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[598, "neural-coder-extension-usage"]], "1. Open": [[598, "open"]], "2. Search": [[598, "search"]], "3. Setting": [[598, "setting"]], "4. Icon": [[598, "icon"]], "5. optimization (quantization)": [[598, "optimization-quantization"]], "5.1 Enable": [[598, "enable"]], "5.2 Auto": [[598, "auto"]], "Welcome to your VS Code Extension": [[599, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[599, "what-s-in-the-folder"]], "Setup": [[599, "setup"]], "Get up and running straight away": [[599, "get-up-and-running-straight-away"]], "Make changes": [[599, "make-changes"]], "Explore the API": [[599, "explore-the-api"]], "Run tests": [[599, "run-tests"]], "Go further": [[599, "go-further"]], "Single Objective": [[600, "single-objective"]], "Multiple Objectives": [[600, "multiple-objectives"]], "Objective Support Matrix": [[600, "objective-support-matrix"]], "Get Started with Objective API": [[600, "get-started-with-objective-api"]], "Config Single Objective": [[600, "config-single-objective"]], "Config Multiple Objectives": [[600, "config-multiple-objectives"]], "Optimization Orchestration": [[601, "optimization-orchestration"]], "One-shot": [[601, "one-shot"]], "Orchestration Support Matrix": [[601, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[601, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[602, "system-configuration"]], "Neural Network Pruning": [[603, "neural-network-pruning"], [604, "neural-network-pruning"]], "Pruning Patterns": [[603, "pruning-patterns"], [604, "pruning-patterns"]], "Pruning Criteria": [[603, "pruning-criteria"], [604, "pruning-criteria"]], "Pruning Schedule": [[603, "pruning-schedule"], [604, "pruning-schedule"]], "Pruning Support Matrix": [[603, "pruning-support-matrix"]], "Get Started with Pruning API": [[603, "get-started-with-pruning-api"]], "Pruning details": [[604, "pruning-details"]], "Pruning Type": [[604, "pruning-type"]], "Pruning Scope": [[604, "pruning-scope"]], "Sparsity Decay Type": [[604, "sparsity-decay-type"]], "Regularization": [[604, "regularization"]], "Pruning Examples": [[604, "pruning-examples"]], "Reference": [[604, "reference"], [607, "reference"]], "Full Publications/Events (52)": [[605, "full-publications-events-52"]], "2022 (34)": [[605, "id1"]], "2021 (14)": [[605, "id2"]], "2018 - 2020 (4)": [[605, "id3"]], "Pythonic Style Access for Configurations": [[606, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[606, "pythonic-api-for-user-configurations"], [606, "id1"]], "Pythonic API for Framework Configurations": [[606, "pythonic-api-for-framework-configurations"], [606, "id2"]], "Get Started with Pythonic API for Configurations": [[606, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[606, "nas"]], "Quantization Introduction": [[607, "quantization-introduction"]], "Quantization Fundamentals": [[607, "quantization-fundamentals"]], "Quantization Support Matrix": [[607, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[607, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[607, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[607, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[607, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[607, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[607, "quantization-approaches"]], "Quantization Aware Training": [[607, "quantization-aware-training"]], "Accuracy Aware Tuning": [[607, "accuracy-aware-tuning"]], "Get Started": [[607, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[608, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[608, "tensorflow"]], "Release": [[609, "release"]], "Release Notes": [[609, "release-notes"]], "Known Issues": [[609, "known-issues"]], "Incompatible Changes": [[609, "incompatible-changes"]], "SigOpt Strategy": [[610, "sigopt-strategy"]], "Preparation": [[610, "preparation"]], "SigOpt Platform": [[610, "sigopt-platform"]], "Neural Compressor Configuration": [[610, "neural-compressor-configuration"]], "Performance": [[610, "performance"]], "Benefit of SigOpt Strategy": [[610, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[610, "performance-comparison-of-different-strategies"]], "TensorBoard": [[611, "tensorboard"]], "Get Started with TensorBoard": [[611, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[611, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[611, "tensorflow-tensorboard"]], "PyTorch Examples": [[611, "pytorch-examples"]], "TensorFlow Examples": [[611, "tensorflow-examples"]], "Transform": [[612, "transform"]], "Transform Support List": [[612, "transform-support-list"]], "Pytorch": [[612, "pytorch"]], "Tuning Strategies": [[613, "tuning-strategies"]], "Strategy Design": [[613, "strategy-design"]], "Tuning Space": [[613, "tuning-space"]], "Exit Policy": [[613, "exit-policy"]], "Accuracy Criteria": [[613, "accuracy-criteria"]], "Traverse": [[613, "traverse"]], "Traverse Logic": [[613, "traverse-logic"]], "O0": [[613, "o0"]], "Basic": [[613, "basic"]], "MSE": [[613, "mse"]], "MSE_V2": [[613, "mse-v2"]], "HAWQ_V2": [[613, "hawq-v2"]], "Bayesian": [[613, "bayesian"]], "Exhaustive": [[613, "exhaustive"]], "Random": [[613, "random"]], "SigOpt": [[613, "sigopt"]], "TPE": [[613, "tpe"]], "Customize a New Tuning Strategy": [[613, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[614, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[614, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[615, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.10.0": [[615, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch Models with Torch 1.12.1+cpu in PTQ Mode": [[615, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.12.1+cpu in QAT Mode": [[615, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[615, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[615, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet Models with MXNet 1.7.0": [[615, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[615, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[615, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[615, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"bleu (class in neural_compressor.experimental.metric.bleu)": [[26, "neural_compressor.experimental.metric.bleu.BLEU"], [276, "neural_compressor.experimental.metric.bleu.BLEU"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[26, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [276, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "module": [[26, "module-neural_compressor.experimental.metric.bleu"], [49, "module-644ec953a7dc_pruning_support"], [50, "module-6ece06672ed3_v1_14"], [51, "module-6f0d0f71d92e_v1_13"], [52, "module-9e89549a08c8_v1_11"], [53, "module-block_mask"], [54, "module-env"], [55, "module-neural_compressor.adaptor.adaptor"], [56, "module-neural_compressor.adaptor"], [57, "module-neural_compressor.adaptor.keras"], [58, "module-neural_compressor.adaptor.keras_utils"], [59, "module-neural_compressor.adaptor.keras_utils.quantizer"], [60, "module-neural_compressor.adaptor.mxnet"], [61, "module-neural_compressor.adaptor.mxnet_utils"], [62, "module-neural_compressor.adaptor.mxnet_utils.util"], [63, "module-neural_compressor.adaptor.onnxrt"], [64, "module-neural_compressor.adaptor.ox_utils.calibration"], [65, "module-neural_compressor.adaptor.ox_utils"], [66, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [67, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [68, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [69, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [70, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [71, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [72, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [73, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [74, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [75, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [76, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [77, "module-neural_compressor.adaptor.ox_utils.operators"], [78, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [79, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [80, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [81, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [82, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [83, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [84, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [85, "module-neural_compressor.adaptor.ox_utils.operators.split"], [86, "module-neural_compressor.adaptor.ox_utils.quantizer"], [87, "module-neural_compressor.adaptor.ox_utils.util"], [88, "module-neural_compressor.adaptor.pytorch"], [89, "module-neural_compressor.adaptor.query"], [90, "module-neural_compressor.adaptor.tensorflow"], [91, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [92, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [133, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [134, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [135, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [136, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [137, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [138, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [139, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [140, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [141, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [142, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [143, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [144, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [145, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [146, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [147, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [148, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [149, "module-neural_compressor.adaptor.tf_utils.graph_util"], [150, "module-neural_compressor.adaptor.tf_utils"], [151, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [162, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [163, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [164, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [165, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [166, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [167, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [168, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [169, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [170, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [171, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [172, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [173, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [174, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [175, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [176, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [177, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [178, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [179, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [180, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [181, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [182, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [183, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [184, "module-neural_compressor.adaptor.tf_utils.util"], [185, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [186, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [187, "module-neural_compressor.adaptor.torch_utils"], [188, "module-neural_compressor.adaptor.torch_utils.onnx"], [189, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [190, "module-neural_compressor.adaptor.torch_utils.util"], [191, "module-neural_compressor.algorithm.algorithm"], [192, "module-neural_compressor.algorithm.fast_bias_correction"], [193, "module-neural_compressor.algorithm"], [194, "module-neural_compressor.algorithm.weight_correction"], [195, "module-neural_compressor.benchmark"], [196, "module-neural_compressor.conf.config"], [197, "module-neural_compressor.conf.dotdict"], [198, "module-neural_compressor.conf"], [199, "module-neural_compressor.conf.pythonic_config"], [200, "module-neural_compressor.config"], [201, "module-neural_compressor.contrib"], [202, "module-neural_compressor.contrib.strategy"], [203, "module-neural_compressor.contrib.strategy.sigopt"], [204, "module-neural_compressor.contrib.strategy.tpe"], [205, "module-neural_compressor.data.dataloaders.base_dataloader"], [206, "module-neural_compressor.data.dataloaders.dataloader"], [207, "module-neural_compressor.data.dataloaders.default_dataloader"], [208, "module-neural_compressor.data.dataloaders.fetcher"], [209, "module-neural_compressor.data.dataloaders"], [210, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [211, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [212, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [213, "module-neural_compressor.data.dataloaders.sampler"], [214, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [215, "module-neural_compressor.data.datasets.bert_dataset"], [216, "module-neural_compressor.data.datasets.coco_dataset"], [217, "module-neural_compressor.data.datasets.dataset"], [218, "module-neural_compressor.data.datasets.dummy_dataset"], [219, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [220, "module-neural_compressor.data.datasets.imagenet_dataset"], [221, "module-neural_compressor.data.datasets"], [222, "module-neural_compressor.data.datasets.style_transfer_dataset"], [223, "module-neural_compressor.data.filters.coco_filter"], [224, "module-neural_compressor.data.filters.filter"], [225, "module-neural_compressor.data.filters"], [226, "module-neural_compressor.data"], [227, "module-neural_compressor.data.transforms.coco_transform"], [228, "module-neural_compressor.data.transforms.imagenet_transform"], [229, "module-neural_compressor.data.transforms"], [230, "module-neural_compressor.data.transforms.postprocess"], [231, "module-neural_compressor.data.transforms.tokenization"], [232, "module-neural_compressor.data.transforms.transform"], [233, "module-neural_compressor.experimental.benchmark"], [234, "module-neural_compressor.experimental.common.criterion"], [235, "module-neural_compressor.experimental.common.dataloader"], [236, "module-neural_compressor.experimental.common"], [237, "module-neural_compressor.experimental.common.metric"], [238, "module-neural_compressor.experimental.common.model"], [239, "module-neural_compressor.experimental.common.optimizer"], [240, "module-neural_compressor.experimental.common.postprocess"], [241, "module-neural_compressor.experimental.common.torch_utils"], [242, "module-neural_compressor.experimental.component"], [243, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [244, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [245, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [246, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [247, "module-neural_compressor.experimental.data.dataloaders"], [248, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [249, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [250, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [251, "module-neural_compressor.experimental.data.dataloaders.sampler"], [252, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [253, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [254, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [255, "module-neural_compressor.experimental.data.datasets.dataset"], [256, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [257, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [258, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [259, "module-neural_compressor.experimental.data.datasets"], [260, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [261, "module-neural_compressor.experimental.data.filters.coco_filter"], [262, "module-neural_compressor.experimental.data.filters.filter"], [263, "module-neural_compressor.experimental.data.filters"], [264, "module-neural_compressor.experimental.data"], [265, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [266, "module-neural_compressor.experimental.data.transforms"], [267, "module-neural_compressor.experimental.data.transforms.tokenization"], [268, "module-neural_compressor.experimental.data.transforms.transform"], [269, "module-neural_compressor.experimental.distillation"], [270, "module-neural_compressor.experimental.export"], [271, "module-neural_compressor.experimental.export.qlinear2qdq"], [272, "module-neural_compressor.experimental.export.torch2onnx"], [273, "module-neural_compressor.experimental.export.utils"], [274, "module-neural_compressor.experimental.graph_optimization"], [275, "module-neural_compressor.experimental"], [276, "module-neural_compressor.experimental.metric.bleu"], [277, "module-neural_compressor.experimental.metric.bleu_util"], [278, "module-neural_compressor.experimental.metric.coco_label_map"], [279, "module-neural_compressor.experimental.metric.coco_tools"], [280, "module-neural_compressor.experimental.metric.evaluate_squad"], [281, "module-neural_compressor.experimental.metric.f1"], [282, "module-neural_compressor.experimental.metric"], [283, "module-neural_compressor.experimental.metric.metric"], [284, "module-neural_compressor.experimental.mixed_precision"], [285, "module-neural_compressor.experimental.model_conversion"], [286, "module-neural_compressor.experimental.nas.basic_nas"], [287, "module-neural_compressor.experimental.nas.dynas"], [288, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [289, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [290, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [291, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [292, "module-neural_compressor.experimental.nas.dynast"], [293, "module-neural_compressor.experimental.nas.dynast.supernetwork"], [294, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"], [295, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"], [296, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"], [297, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"], [298, "module-neural_compressor.experimental.nas"], [299, "module-neural_compressor.experimental.nas.nas"], [300, "module-neural_compressor.experimental.nas.nas_utils"], [301, "module-neural_compressor.experimental.nas.search_algorithms"], [302, "module-neural_compressor.experimental.pruning"], [303, "module-neural_compressor.experimental.pruning_recipes"], [304, "module-neural_compressor.experimental.pruning_recipes.patterns"], [305, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [306, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [307, "module-neural_compressor.experimental.pruning_v2"], [308, "module-neural_compressor.experimental.pytorch_pruner"], [309, "module-neural_compressor.experimental.pytorch_pruner.logger"], [310, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [311, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [312, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [313, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [314, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [315, "module-neural_compressor.experimental.quantization"], [316, "module-neural_compressor.experimental.scheduler"], [317, "module-neural_compressor"], [318, "module-neural_compressor.metric.bleu"], [319, "module-neural_compressor.metric.bleu_util"], [320, "module-neural_compressor.metric.coco_label_map"], [321, "module-neural_compressor.metric.coco_tools"], [322, "module-neural_compressor.metric.evaluate_squad"], [323, "module-neural_compressor.metric.f1"], [324, "module-neural_compressor.metric"], [325, "module-neural_compressor.metric.metric"], [326, "module-neural_compressor.mix_precision"], [327, "module-neural_compressor.model.base_model"], [328, "module-neural_compressor.model"], [329, "module-neural_compressor.model.keras_model"], [330, "module-neural_compressor.model.model"], [331, "module-neural_compressor.model.mxnet_model"], [332, "module-neural_compressor.model.nets_factory"], [333, "module-neural_compressor.model.onnx_model"], [334, "module-neural_compressor.model.tensorflow_model"], [335, "module-neural_compressor.model.torch_model"], [336, "module-neural_compressor.objective"], [337, "module-neural_compressor.pruner.criteria"], [338, "module-neural_compressor.pruner"], [339, "module-neural_compressor.pruner.logger"], [340, "module-neural_compressor.pruner.patterns"], [341, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"], [342, "module-neural_compressor.pruner.pruner_legacy.group_lasso"], [343, "module-neural_compressor.pruner.pruner_legacy"], [344, "module-neural_compressor.pruner.pruner_legacy.magnitude"], [345, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"], [346, "module-neural_compressor.pruner.pruner_legacy.pruner"], [347, "module-neural_compressor.pruner.pruners"], [348, "module-neural_compressor.pruner.pruning"], [349, "module-neural_compressor.pruner.regs"], [350, "module-neural_compressor.pruner.schedulers"], [351, "module-neural_compressor.pruner.utils"], [352, "module-neural_compressor.quantization"], [353, "module-neural_compressor.strategy.auto_mixed_precision"], [354, "module-neural_compressor.strategy.basic"], [355, "module-neural_compressor.strategy.bayesian"], [356, "module-neural_compressor.strategy.conservative"], [357, "module-neural_compressor.strategy.exhaustive"], [358, "module-neural_compressor.strategy.hawq_v2"], [359, "module-neural_compressor.strategy"], [360, "module-neural_compressor.strategy.mse"], [361, "module-neural_compressor.strategy.mse_v2"], [362, "module-neural_compressor.strategy.random"], [363, "module-neural_compressor.strategy.strategy"], [364, "module-neural_compressor.strategy.utils"], [365, "module-neural_compressor.strategy.utils.tuning_sampler"], [366, "module-neural_compressor.strategy.utils.tuning_space"], [367, "module-neural_compressor.strategy.utils.tuning_structs"], [368, "module-neural_compressor.training"], [369, "module-neural_compressor.utils.collect_layer_histogram"], [370, "module-neural_compressor.utils.constant"], [371, "module-neural_compressor.utils.create_obj_from_config"], [372, "module-neural_compressor.utils"], [373, "module-neural_compressor.utils.kl_divergence"], [374, "module-neural_compressor.utils.load_huggingface"], [375, "module-neural_compressor.utils.logger"], [376, "module-neural_compressor.utils.options"], [377, "module-neural_compressor.utils.pytorch"], [378, "module-neural_compressor.utils.utility"], [379, "module-neural_compressor.ux.components.benchmark.benchmark"], [380, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [381, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [382, "module-neural_compressor.ux.components.benchmark"], [383, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [384, "module-neural_compressor.ux.components.config_generator.config_generator"], [385, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [386, "module-neural_compressor.ux.components.config_generator"], [387, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [388, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [389, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [390, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [391, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [392, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [393, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [394, "module-neural_compressor.ux.components.configuration_wizard"], [395, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [396, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [397, "module-neural_compressor.ux.components.db_manager.db_manager"], [398, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [399, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [400, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [401, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [402, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [403, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [404, "module-neural_compressor.ux.components.db_manager.db_models.example"], [405, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [406, "module-neural_compressor.ux.components.db_manager.db_models"], [407, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [408, "module-neural_compressor.ux.components.db_manager.db_models.model"], [409, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [410, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [411, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [412, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [413, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [414, "module-neural_compressor.ux.components.db_manager.db_models.project"], [415, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [416, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [417, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [418, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [419, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [420, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [421, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [422, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [423, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [424, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [425, "module-neural_compressor.ux.components.db_manager.db_operations"], [426, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [427, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [428, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [429, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [430, "module-neural_compressor.ux.components.db_manager"], [431, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [432, "module-neural_compressor.ux.components.db_manager.utils"], [433, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [434, "module-neural_compressor.ux.components.diagnosis.factory"], [435, "module-neural_compressor.ux.components.diagnosis"], [436, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [437, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [438, "module-neural_compressor.ux.components.diagnosis.op_details"], [439, "module-neural_compressor.ux.components.diagnosis.op_entry"], [440, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [441, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [442, "module-neural_compressor.ux.components.file_browser.file_browser"], [443, "module-neural_compressor.ux.components.file_browser"], [444, "module-neural_compressor.ux.components.graph.attribute"], [445, "module-neural_compressor.ux.components.graph.collapser"], [446, "module-neural_compressor.ux.components.graph.edge"], [447, "module-neural_compressor.ux.components.graph.graph"], [448, "module-neural_compressor.ux.components.graph.graph_reader"], [449, "module-neural_compressor.ux.components.graph"], [450, "module-neural_compressor.ux.components.graph.node"], [451, "module-neural_compressor.ux.components.graph.reader"], [452, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [453, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [454, "module-neural_compressor.ux.components"], [455, "module-neural_compressor.ux.components.jobs_management"], [456, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [457, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [458, "module-neural_compressor.ux.components.jobs_management.request"], [459, "module-neural_compressor.ux.components.manage_workspace"], [460, "module-neural_compressor.ux.components.model.domain"], [461, "module-neural_compressor.ux.components.model"], [462, "module-neural_compressor.ux.components.model.model"], [463, "module-neural_compressor.ux.components.model.model_type_getter"], [464, "module-neural_compressor.ux.components.model.onnxrt"], [465, "module-neural_compressor.ux.components.model.onnxrt.model"], [466, "module-neural_compressor.ux.components.model.pytorch"], [467, "module-neural_compressor.ux.components.model.pytorch.model"], [468, "module-neural_compressor.ux.components.model.repository"], [469, "module-neural_compressor.ux.components.model.shape"], [470, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [471, "module-neural_compressor.ux.components.model.tensorflow"], [472, "module-neural_compressor.ux.components.model.tensorflow.keras"], [473, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [474, "module-neural_compressor.ux.components.model.tensorflow.model"], [475, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [476, "module-neural_compressor.ux.components.model.tensorflow.utils"], [477, "module-neural_compressor.ux.components.model_zoo.download_config"], [478, "module-neural_compressor.ux.components.model_zoo.download_model"], [479, "module-neural_compressor.ux.components.model_zoo.downloader"], [480, "module-neural_compressor.ux.components.model_zoo"], [481, "module-neural_compressor.ux.components.model_zoo.list_models"], [482, "module-neural_compressor.ux.components.names_mapper"], [483, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [484, "module-neural_compressor.ux.components.optimization.execute_optimization"], [485, "module-neural_compressor.ux.components.optimization.factory"], [486, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [487, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [488, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [489, "module-neural_compressor.ux.components.optimization"], [490, "module-neural_compressor.ux.components.optimization.mixed_precision"], [491, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [492, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [493, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [494, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [495, "module-neural_compressor.ux.components.optimization.optimization"], [496, "module-neural_compressor.ux.components.optimization.pruning"], [497, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [498, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [499, "module-neural_compressor.ux.components.optimization.tune"], [500, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [501, "module-neural_compressor.ux.components.optimization.tune.tuning"], [502, "module-neural_compressor.ux.components.optimization.tuning_history"], [503, "module-neural_compressor.ux.components.profiling.execute_profiling"], [504, "module-neural_compressor.ux.components.profiling.factory"], [505, "module-neural_compressor.ux.components.profiling"], [506, "module-neural_compressor.ux.components.profiling.profile_model"], [507, "module-neural_compressor.ux.components.profiling.profiler"], [508, "module-neural_compressor.ux.components.profiling.profiling"], [509, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [510, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [511, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [512, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [513, "module-neural_compressor.ux.inc_bench"], [514, "module-neural_compressor.ux"], [515, "module-neural_compressor.ux.utils.consts"], [516, "module-neural_compressor.ux.utils.environment"], [517, "module-neural_compressor.ux.utils.exceptions"], [518, "module-neural_compressor.ux.utils.executor"], [519, "module-neural_compressor.ux.utils.expiring_dict"], [520, "module-neural_compressor.ux.utils.github_info"], [521, "module-neural_compressor.ux.utils.hw_info"], [522, "module-neural_compressor.ux.utils"], [523, "module-neural_compressor.ux.utils.json_serializer"], [524, "module-neural_compressor.ux.utils.logger"], [525, "module-neural_compressor.ux.utils.parser"], [526, "module-neural_compressor.ux.utils.proc"], [527, "module-neural_compressor.ux.utils.processes"], [528, "module-neural_compressor.ux.utils.singleton"], [529, "module-neural_compressor.ux.utils.status_updates"], [530, "module-neural_compressor.ux.utils.templates"], [531, "module-neural_compressor.ux.utils.templates.metric"], [532, "module-neural_compressor.ux.utils.templates.workdir"], [533, "module-neural_compressor.ux.utils.utils"], [534, "module-neural_compressor.ux.utils.workload.config"], [535, "module-neural_compressor.ux.utils.workload.dataloader"], [536, "module-neural_compressor.ux.utils.workload.evaluation"], [537, "module-neural_compressor.ux.utils.workload.graph_optimization"], [538, "module-neural_compressor.ux.utils.workload"], [539, "module-neural_compressor.ux.utils.workload.mixed_precision"], [540, "module-neural_compressor.ux.utils.workload.model"], [541, "module-neural_compressor.ux.utils.workload.pruning"], [542, "module-neural_compressor.ux.utils.workload.quantization"], [543, "module-neural_compressor.ux.utils.workload.tuning"], [544, "module-neural_compressor.ux.utils.yaml_utils"], [545, "module-neural_compressor.ux.web.communication"], [546, "module-neural_compressor.ux.web.configuration"], [547, "module-neural_compressor.ux.web.exceptions"], [548, "module-neural_compressor.ux.web"], [549, "module-neural_compressor.ux.web.router"], [550, "module-neural_compressor.ux.web.server"], [551, "module-neural_compressor.ux.web.service.benchmark"], [552, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [553, "module-neural_compressor.ux.web.service"], [554, "module-neural_compressor.ux.web.service.model"], [555, "module-neural_compressor.ux.web.service.optimization"], [556, "module-neural_compressor.ux.web.service.profiling"], [557, "module-neural_compressor.ux.web.service.request_data_processor"], [558, "module-neural_compressor.ux.web.service.response_generator"], [559, "module-neural_compressor.ux.web.service.workload"], [560, "module-neural_compressor.version"]], "neural_compressor.experimental.metric.bleu": [[26, "module-neural_compressor.experimental.metric.bleu"], [276, "module-neural_compressor.experimental.metric.bleu"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[26, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [276, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[26, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [276, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[26, "neural_compressor.experimental.metric.bleu.BLEU.result"], [276, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[26, "neural_compressor.experimental.metric.bleu.BLEU.update"], [276, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "644ec953a7dc_pruning_support": [[49, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[50, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[50, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[50, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[51, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[52, "module-9e89549a08c8_v1_11"]], "block_mask": [[53, "module-block_mask"]], "env": [[54, "module-env"]], "run_migrations_offline() (in module env)": [[54, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[54, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[55, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[55, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[55, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[55, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[55, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[55, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[55, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[55, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[55, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[55, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[55, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[55, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[56, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[57, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[57, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[57, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[57, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[57, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[57, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[57, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[57, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[57, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[57, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[57, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[57, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[57, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[57, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[57, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[57, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[57, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils": [[58, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[59, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[60, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[60, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[60, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "get_fuse_patterns() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[60, "neural_compressor.adaptor.mxnet.MXNetQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[60, "neural_compressor.adaptor.mxnet.MXNetQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[60, "neural_compressor.adaptor.mxnet.MXNetQuery.get_op_types"]], "get_precisions() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[60, "neural_compressor.adaptor.mxnet.MXNetQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[60, "neural_compressor.adaptor.mxnet.MXNetQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[60, "neural_compressor.adaptor.mxnet.MXNetQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[60, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[60, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[60, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[60, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[60, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[60, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[60, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[61, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calc_kl_th_dict() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[62, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.calc_kl_th_dict"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[62, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[62, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.namecollector method)": [[62, "neural_compressor.adaptor.mxnet_utils.util.NameCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[62, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.collect_gluon"]], "collect_module() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[62, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_module"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "min_max_dict (neural_compressor.adaptor.mxnet_utils.util.calibdata property)": [[62, "neural_compressor.adaptor.mxnet_utils.util.CalibData.min_max_dict"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[62, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "post_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[62, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.post_batch"]], "post_collect() (neural_compressor.adaptor.mxnet_utils.util.calibdata method)": [[62, "neural_compressor.adaptor.mxnet_utils.util.CalibData.post_collect"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[62, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.pre_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[62, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.pre_batch"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[62, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[63, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[63, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[64, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[64, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[64, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[64, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[64, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "dump_minmax() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[64, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_minmax"]], "dump_tensor() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[64, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_tensor"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[64, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[64, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[65, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[66, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[66, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[66, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.qactivationoperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[66, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize_check"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize_check"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[67, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[67, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[67, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[68, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[68, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.qattentionoperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[68, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.quantize"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[69, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[69, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.qbinaryoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[69, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize_check"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[70, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[70, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.qconcatoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[70, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize_check"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[71, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[71, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.qconvoperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[71, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.quantize"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[72, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "directcastoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[72, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[72, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.cast"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.directcastoperator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[72, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize_check"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[73, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[73, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.qembedlayernormalizationoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[73, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.quantize"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[74, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[74, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[74, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[74, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[74, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[74, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[74, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize_check"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[75, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[75, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[75, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.qglobalaveragepooloperator method)": [[75, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[75, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[75, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[76, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[76, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[76, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.qgemmoperator method)": [[76, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[76, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[76, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[76, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[76, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize_check"]], "neural_compressor.adaptor.ox_utils.operators": [[77, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[78, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[78, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[78, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[78, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[78, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.quantize"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[79, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[79, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[79, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.qmatmuloperator method)": [[79, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[79, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[79, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[79, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.quantize"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[80, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[80, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[80, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[80, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[80, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[80, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[80, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize_check"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[81, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[81, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[81, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[81, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.qoperator method)": [[81, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[81, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[81, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[81, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[81, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[81, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[81, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize_check"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[82, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[82, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[82, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[82, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[82, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[82, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[82, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize_check"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[83, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[83, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[83, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.qpooloperator method)": [[83, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[83, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[83, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[83, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[83, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize_check"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[84, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[84, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[84, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[84, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[84, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[84, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[84, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize_check"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[85, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[85, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[85, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.qsplitoperator method)": [[85, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[85, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[85, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[85, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[85, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.quantize"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "check_opset_version() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.check_opset_version"]], "convert_qdq_to_operator_oriented() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.convert_qdq_to_operator_oriented"]], "dequantize_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dequantize_tensor"]], "dtype_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dtype_cast"]], "get_bias_add_nodes() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.get_bias_add_nodes"]], "insert_qdq() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.insert_qdq"]], "is_valid_quantize_weight() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.is_valid_quantize_weight"]], "merge_dedicated_qdq_pair() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.merge_dedicated_qdq_pair"]], "neural_compressor.adaptor.ox_utils.quantizer": [[86, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantize_bias() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias"]], "quantize_bias_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias_tensor"]], "quantize_inputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_inputs"]], "quantize_model() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_model"]], "quantize_outputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_outputs"]], "quantize_weight_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weight_per_channel"]], "quantize_weights_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weights_per_channel"]], "remove_redundant_pairs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.remove_redundant_pairs"]], "should_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_cast"]], "should_convert() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_convert"]], "should_quantize() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_quantize"]], "tensor_proto_to_array() (neural_compressor.adaptor.ox_utils.quantizer.quantizer static method)": [[86, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.tensor_proto_to_array"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[87, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[87, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[88, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[88, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[88, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[88, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[88, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[88, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[88, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[88, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[89, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[89, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[89, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[89, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[89, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[89, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[89, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[89, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[89, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[90, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[90, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "diagnosis_helper() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.diagnosis_helper"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[90, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_bf16_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[90, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_bf16_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[90, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[90, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_grappler_optimization_cfg() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[90, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_grappler_optimization_cfg"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[90, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[90, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[90, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_output_op_names() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_output_op_names"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[90, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[90, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[90, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[90, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[90, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.train"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[91, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[91, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.bf16_convert"]], "convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[91, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.convert"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[91, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "quantize() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[91, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize"]], "quantize_with_qdq_pattern() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[91, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize_with_qdq_pattern"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[92, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[92, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.bf16_convert"]], "convert_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[92, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.convert_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[92, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "quantize_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[92, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.quantize_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.fusedecomposedbnoptimizer method)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.fusedecomposedinoptimizer method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "get_excluded_node_names() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_excluded_node_names"]], "get_matched_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_matched_nodes"]], "get_optimized_model() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_optimized_model"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[130, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[130, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[132, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[133, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[133, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[134, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "do_transformation_without_calib() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.do_transformation_without_calib"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[134, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[135, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[135, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[135, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[136, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[136, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[136, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[137, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[137, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[137, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[138, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[138, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[138, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[138, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[138, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[138, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[138, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[138, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[138, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[139, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[140, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[140, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[141, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[141, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[141, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[142, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[142, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[142, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[143, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[143, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[143, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[144, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[144, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[144, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[145, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[146, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[146, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[146, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[147, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[147, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[147, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[148, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[148, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[148, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "analysis_rnn_model() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.analysis_rnn_model"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "gen_valid_sampling_log() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.gen_valid_sampling_log"]], "generate_int32_bias_for_conv() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_conv"]], "generate_int32_bias_for_matmul() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_matmul"]], "get_frame_info() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_frame_info"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[149, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[149, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[150, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[162, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[163, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_conv3d_add_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_fusion"]], "apply_conv3d_add_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_relu_fusion"]], "apply_conv3d_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_fusion"]], "apply_conv3d_add_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_relu_fusion"]], "apply_conv3d_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_single_fusion"]], "apply_conv_biasadd_hardswish_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_hardswish_fusion"]], "apply_newly_conv_biasadd_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_fusion"]], "apply_newly_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_relu_fusion"]], "apply_newly_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_fusion"]], "apply_newly_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_relu_fusion"]], "apply_newly_conv_biasadd_swishf32_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_swishf32_fusion"]], "apply_newly_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[164, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_deconv2d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv2d_biasadd_fusion"]], "apply_deconv3d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv3d_biasadd_fusion"]], "apply_single_deconv2d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv2d_fusion"]], "apply_single_deconv3d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv3d_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[165, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[166, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_newly_in_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[166, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_newly_in_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[166, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[166, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[166, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[167, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[168, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[168, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[168, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[168, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[169, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[170, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[170, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "get_quantized_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[170, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[170, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "eightbitize_single_input_tensor_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.eightbitize_single_input_tensor_node"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[171, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "register_transformer() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.register_transformer"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "remove_redundant_quantization() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.remove_redundant_quantization"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[172, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[173, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[173, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[173, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[173, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[174, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[174, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_addn_relu_fusion"]], "apply_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[174, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_fusion"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[174, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[174, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[174, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[174, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[174, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[175, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[175, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[175, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[176, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[176, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[176, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[176, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[176, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[176, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[177, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[177, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[177, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[177, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "generate_quantized_weight_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.generate_quantized_weight_node"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[178, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[179, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[179, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[179, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[180, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[180, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.do_transformation"]], "generate_input_map() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[180, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.generate_input_map"]], "get_node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[180, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.get_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[180, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[180, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.node_name_from_input"]], "parse_input_pb() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[180, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[181, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[182, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[182, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[182, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[183, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[183, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[183, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[184, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[184, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[185, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[185, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[185, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "forward() (neural_compressor.adaptor.torch_utils.bf16_convert.bf16modulewrapper method)": [[185, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper.forward"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[185, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_act_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_traces"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "get_device() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_device"]], "get_fused_mapping() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_fused_mapping"]], "get_params() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_params"]], "get_vthv_weight() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_vtHv_weight"]], "get_weight_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_weight_traces"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "hook_fn_act() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.hook_fn_act"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[186, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "register_act_grad_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.register_act_grad_hooks"]], "remove() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.remove"]], "reset_act_gradient_and_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[186, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils": [[187, "module-neural_compressor.adaptor.torch_utils"]], "datareader (class in neural_compressor.adaptor.torch_utils.onnx)": [[188, "neural_compressor.adaptor.torch_utils.onnx.DataReader"]], "get_next() (neural_compressor.adaptor.torch_utils.onnx.datareader method)": [[188, "neural_compressor.adaptor.torch_utils.onnx.DataReader.get_next"]], "neural_compressor.adaptor.torch_utils.onnx": [[188, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[189, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[189, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[189, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[190, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[190, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[191, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[191, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[191, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[191, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[191, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[191, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[191, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm.algorithm": [[191, "module-neural_compressor.algorithm.algorithm"]], "origin_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[191, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[191, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithm.algorithms class method)": [[191, "neural_compressor.algorithm.algorithm.ALGORITHMS.support_algorithms"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[192, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[192, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithms (class in neural_compressor.algorithm)": [[193, "neural_compressor.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm)": [[193, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[193, "neural_compressor.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithmscheduler property)": [[193, "neural_compressor.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[193, "neural_compressor.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithmscheduler property)": [[193, "neural_compressor.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithmscheduler property)": [[193, "neural_compressor.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm": [[193, "module-neural_compressor.algorithm"]], "origin_model (neural_compressor.algorithm.algorithmscheduler property)": [[193, "neural_compressor.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithmscheduler property)": [[193, "neural_compressor.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithms class method)": [[193, "neural_compressor.algorithm.ALGORITHMS.support_algorithms"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[194, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[194, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[195, "neural_compressor.benchmark.Benchmark"]], "dataloader() (neural_compressor.benchmark.benchmark method)": [[195, "neural_compressor.benchmark.Benchmark.dataloader"]], "fit() (in module neural_compressor.benchmark)": [[195, "neural_compressor.benchmark.fit"]], "metric() (neural_compressor.benchmark.benchmark method)": [[195, "neural_compressor.benchmark.Benchmark.metric"]], "neural_compressor.benchmark": [[195, "module-neural_compressor.benchmark"]], "postprocess() (neural_compressor.benchmark.benchmark method)": [[195, "neural_compressor.benchmark.Benchmark.postprocess"]], "benchmark_conf (class in neural_compressor.conf.config)": [[196, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[196, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[196, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[196, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[196, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[196, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[196, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[196, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[196, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[196, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[196, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[197, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[197, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[197, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[197, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[198, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[199, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[200, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[200, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[200, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[200, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[200, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[200, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[200, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[200, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[200, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[200, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[200, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[200, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[200, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[200, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[200, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[200, "neural_compressor.config.WeightPruningConfig"]], "absolute (neural_compressor.config.accuracycriterion property)": [[200, "neural_compressor.config.AccuracyCriterion.absolute"]], "approach (neural_compressor.config.posttrainingquantconfig property)": [[200, "neural_compressor.config.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.config.quantizationawaretrainingconfig property)": [[200, "neural_compressor.config.QuantizationAwareTrainingConfig.approach"]], "backend (neural_compressor.config.benchmarkconfig property)": [[200, "neural_compressor.config.BenchmarkConfig.backend"]], "check_value() (in module neural_compressor.config)": [[200, "neural_compressor.config.check_value"]], "cores_per_instance (neural_compressor.config.benchmarkconfig property)": [[200, "neural_compressor.config.BenchmarkConfig.cores_per_instance"]], "criterion (neural_compressor.config.accuracycriterion property)": [[200, "neural_compressor.config.AccuracyCriterion.criterion"]], "criterion (neural_compressor.config.distillationconfig property)": [[200, "neural_compressor.config.DistillationConfig.criterion"]], "dtype (neural_compressor.config.exportconfig property)": [[200, "neural_compressor.config.ExportConfig.dtype"]], "dynamic_axes (neural_compressor.config.exportconfig property)": [[200, "neural_compressor.config.ExportConfig.dynamic_axes"]], "example_inputs (neural_compressor.config.exportconfig property)": [[200, "neural_compressor.config.ExportConfig.example_inputs"]], "higher_is_better (neural_compressor.config.accuracycriterion property)": [[200, "neural_compressor.config.AccuracyCriterion.higher_is_better"]], "input_names (neural_compressor.config.exportconfig property)": [[200, "neural_compressor.config.ExportConfig.input_names"]], "inputs (neural_compressor.config.benchmarkconfig property)": [[200, "neural_compressor.config.BenchmarkConfig.inputs"]], "inter_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[200, "neural_compressor.config.BenchmarkConfig.inter_num_of_threads"]], "intra_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[200, "neural_compressor.config.BenchmarkConfig.intra_num_of_threads"]], "iteration (neural_compressor.config.benchmarkconfig property)": [[200, "neural_compressor.config.BenchmarkConfig.iteration"]], "max_trials (neural_compressor.config.tuningcriterion property)": [[200, "neural_compressor.config.TuningCriterion.max_trials"]], "neural_compressor.config": [[200, "module-neural_compressor.config"]], "num_of_instance (neural_compressor.config.benchmarkconfig property)": [[200, "neural_compressor.config.BenchmarkConfig.num_of_instance"]], "objective (neural_compressor.config.tuningcriterion property)": [[200, "neural_compressor.config.TuningCriterion.objective"]], "opset_version (neural_compressor.config.exportconfig property)": [[200, "neural_compressor.config.ExportConfig.opset_version"]], "optimizer (neural_compressor.config.distillationconfig property)": [[200, "neural_compressor.config.DistillationConfig.optimizer"]], "output_names (neural_compressor.config.exportconfig property)": [[200, "neural_compressor.config.ExportConfig.output_names"]], "outputs (neural_compressor.config.benchmarkconfig property)": [[200, "neural_compressor.config.BenchmarkConfig.outputs"]], "quant_format (neural_compressor.config.exportconfig property)": [[200, "neural_compressor.config.ExportConfig.quant_format"]], "random_seed (neural_compressor.config.options property)": [[200, "neural_compressor.config.Options.random_seed"]], "relative (neural_compressor.config.accuracycriterion property)": [[200, "neural_compressor.config.AccuracyCriterion.relative"]], "resume_from (neural_compressor.config.options property)": [[200, "neural_compressor.config.Options.resume_from"]], "strategy (neural_compressor.config.tuningcriterion property)": [[200, "neural_compressor.config.TuningCriterion.strategy"]], "strategy_kwargs (neural_compressor.config.tuningcriterion property)": [[200, "neural_compressor.config.TuningCriterion.strategy_kwargs"]], "teacher_model (neural_compressor.config.distillationconfig property)": [[200, "neural_compressor.config.DistillationConfig.teacher_model"]], "tensorboard (neural_compressor.config.options property)": [[200, "neural_compressor.config.Options.tensorboard"]], "timeout (neural_compressor.config.tuningcriterion property)": [[200, "neural_compressor.config.TuningCriterion.timeout"]], "tolerable_loss (neural_compressor.config.accuracycriterion property)": [[200, "neural_compressor.config.AccuracyCriterion.tolerable_loss"]], "tuning_criterion (neural_compressor.config.posttrainingquantconfig property)": [[200, "neural_compressor.config.PostTrainingQuantConfig.tuning_criterion"]], "warmup (neural_compressor.config.benchmarkconfig property)": [[200, "neural_compressor.config.BenchmarkConfig.warmup"]], "weight_compression (neural_compressor.config.weightpruningconfig property)": [[200, "neural_compressor.config.WeightPruningConfig.weight_compression"]], "workspace (neural_compressor.config.options property)": [[200, "neural_compressor.config.Options.workspace"]], "neural_compressor.contrib": [[201, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[202, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[203, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "create_exp() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[203, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.create_exp"]], "get_acc_target() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[203, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.get_acc_target"]], "neural_compressor.contrib.strategy.sigopt": [[203, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[203, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "params_to_tune_configs() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[203, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.params_to_tune_configs"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[203, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[204, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "add_loss_to_tuned_history_and_find_best() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[204, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.add_loss_to_tuned_history_and_find_best"]], "calculate_loss() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[204, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.calculate_loss"]], "neural_compressor.contrib.strategy.tpe": [[204, "module-neural_compressor.contrib.strategy.tpe"]], "object_evaluation() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[204, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.object_evaluation"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[204, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[204, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[205, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[205, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[205, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[205, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[206, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[206, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[207, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[207, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[207, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[207, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[207, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[208, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[208, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[208, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[208, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[209, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[209, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[210, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[210, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[211, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[211, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[211, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[212, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[212, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[213, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[213, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[213, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[213, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[213, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[214, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[214, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[214, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[214, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[214, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[214, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[215, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[215, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[215, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[215, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[215, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[215, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[215, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[215, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[215, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[215, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[216, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[216, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[216, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[216, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[216, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[217, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[217, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[217, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[217, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[217, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[217, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[217, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[217, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[218, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[218, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[219, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[219, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[219, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[220, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[220, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[220, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[220, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[220, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[220, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[220, "module-neural_compressor.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.data.datasets)": [[221, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[221, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[221, "neural_compressor.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[221, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[221, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[222, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[222, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[223, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[223, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[223, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[224, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[224, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[224, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[224, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[224, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[224, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[224, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[224, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[224, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[225, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[225, "neural_compressor.data.filters.Filter"]], "filter_registry() (in module neural_compressor.data.filters)": [[225, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[225, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[226, "neural_compressor.data.BaseTransform"]], "dataloader (class in neural_compressor.data)": [[226, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[226, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[226, "neural_compressor.data.Datasets"]], "filters (class in neural_compressor.data)": [[226, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[226, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[226, "neural_compressor.data.IterableDataset"]], "postprocess (class in neural_compressor.data)": [[226, "neural_compressor.data.Postprocess"]], "transforms (class in neural_compressor.data)": [[226, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[226, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[226, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[226, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[226, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[226, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[227, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[227, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[228, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[228, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[228, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[228, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[228, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[228, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[228, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[228, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[228, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[228, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[229, "neural_compressor.data.transforms.BaseTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[229, "neural_compressor.data.transforms.Postprocess"]], "transforms (class in neural_compressor.data.transforms)": [[229, "neural_compressor.data.transforms.TRANSFORMS"]], "neural_compressor.data.transforms": [[229, "module-neural_compressor.data.transforms"]], "register() (neural_compressor.data.transforms.transforms method)": [[229, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[229, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[230, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[230, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[231, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[231, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[231, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[231, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[231, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[231, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[231, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[231, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[231, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[231, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[231, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[231, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[231, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.TRANSFORMS"], [232, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[232, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[232, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[232, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[232, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[232, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[232, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[232, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[233, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[233, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[233, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[233, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[233, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[233, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[233, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[233, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[233, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[233, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[233, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[233, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[233, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[233, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[233, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[233, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[233, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[233, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[233, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[233, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[234, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[234, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[234, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[234, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[234, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[234, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[234, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[234, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[234, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[235, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[235, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[236, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[236, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[236, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[236, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[236, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[237, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[237, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[238, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[238, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[239, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[239, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[239, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[239, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[239, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[239, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[239, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[239, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[239, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[239, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[240, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[240, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[241, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[241, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[241, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[242, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[242, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[242, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[242, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[242, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[242, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[242, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[242, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[243, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[243, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[243, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[244, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[245, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[245, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[245, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[245, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[245, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[246, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[246, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[246, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[246, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[247, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[248, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[248, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[249, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[249, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[249, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[250, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[250, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[251, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[251, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[251, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[251, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[251, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[252, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[252, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[252, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[252, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[252, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[252, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[253, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[253, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[253, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[253, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[253, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[253, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[253, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[253, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[253, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[253, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[254, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[254, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[254, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[254, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[254, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[255, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[255, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[255, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[255, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[255, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[255, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[255, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[255, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[256, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[256, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[257, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[257, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[257, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[258, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[258, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[258, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[258, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[258, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[258, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[258, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[259, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[259, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[259, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[259, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[259, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[260, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[260, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[261, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[261, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[261, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[262, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[262, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[262, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[262, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[262, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[262, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[262, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[262, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[262, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[263, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[263, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[263, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[263, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[264, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[264, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[264, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[264, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[264, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[264, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[264, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[264, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[264, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[264, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[264, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[264, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[265, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[265, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[265, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[265, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[265, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[265, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[265, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[265, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[265, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[265, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[266, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[266, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[266, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[266, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[266, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[267, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[267, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[267, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[267, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[267, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[267, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[267, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[267, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[267, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[267, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[267, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[267, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[267, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [268, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[268, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[268, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[268, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[268, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[268, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[268, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[268, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[269, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[269, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[269, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[269, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[269, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[269, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[269, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[269, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[269, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[269, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[269, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[269, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[269, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[269, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[269, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[269, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[269, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[269, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[269, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[269, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[269, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[270, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[270, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[270, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[270, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[271, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[271, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[271, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[272, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[272, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[273, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[273, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[273, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[273, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[274, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[274, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[274, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[274, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[274, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[274, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[274, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[274, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[274, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[274, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[274, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[274, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[275, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[275, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[275, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[275, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[275, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[275, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[275, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[275, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[275, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[275, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[275, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[275, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[275, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[275, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[275, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[275, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[275, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[275, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[275, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[275, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[275, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[275, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[275, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[275, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[275, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[275, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[275, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[275, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[275, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[275, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[275, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[275, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[275, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[275, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[275, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[275, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[275, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[275, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[275, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[275, "neural_compressor.experimental.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning method)": [[275, "neural_compressor.experimental.Pruning.get_sparsity_ratio"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[275, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[275, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[275, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[275, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[275, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[275, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[275, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[275, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[275, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[275, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[275, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[275, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[275, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[275, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[275, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[275, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[275, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[275, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[275, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[275, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[275, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[275, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[275, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[275, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[275, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[275, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[275, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[275, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[275, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[275, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[275, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[275, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[275, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[275, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[275, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[275, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[275, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[275, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[275, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[275, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[275, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[275, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[275, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[275, "neural_compressor.experimental.Component.train_func"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning method)": [[275, "neural_compressor.experimental.Pruning.update_items_for_all_pruners"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[276, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[276, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[276, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[276, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[276, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[276, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[277, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[277, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[278, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[279, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[279, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[279, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[279, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[279, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[279, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[279, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[279, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[279, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[279, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[279, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[279, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[279, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[279, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[280, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[280, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[280, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[280, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[280, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[281, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[281, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[281, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[281, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[281, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[282, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[282, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[282, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[282, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[282, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[282, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[282, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[282, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[282, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[282, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[282, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[283, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[283, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[283, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[283, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[283, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[283, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[283, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[283, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[283, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[283, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[283, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[283, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[283, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[283, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[283, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[283, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[283, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[283, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[283, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[283, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[283, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[283, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[283, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[283, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[283, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[283, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[283, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[283, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[283, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[283, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[283, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[283, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[283, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[283, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[283, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[283, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[283, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[283, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[283, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[283, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[283, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[283, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[283, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[283, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[283, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[283, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[283, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[283, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[283, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[283, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[283, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[283, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[283, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[283, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[283, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[283, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[283, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[283, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[283, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[283, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[283, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[283, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[283, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[283, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[283, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[283, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[283, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[283, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[283, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[283, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[283, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[283, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[283, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[283, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[283, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[283, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[283, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[283, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[283, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[283, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[283, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[283, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[283, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[283, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[283, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[283, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[284, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[284, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[284, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[284, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[285, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[285, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[285, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[285, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[285, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[285, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[285, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[285, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[285, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[285, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[286, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[286, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[286, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[286, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[286, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[286, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[287, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[287, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[287, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[287, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[287, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[287, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[287, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[287, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[287, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[287, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[288, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "transformerltencoding (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[288, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[288, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[288, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[288, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[288, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[288, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[288, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[288, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[288, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[288, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[288, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[288, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[288, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[289, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[289, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[290, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[290, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[290, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[290, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[290, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[290, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "evaluationinterfacetransformerlt (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "transformerltrunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[291, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[292, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[293, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[294, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "multiheadattentionsuper (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[295, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[295, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.forward"]], "get_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[295, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.get_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[295, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "reorder_incremental_state() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[295, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.reorder_incremental_state"]], "set_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[295, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.set_incremental_state"]], "compute_bleu() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[296, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_bleu"]], "compute_latency() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[296, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_latency"]], "compute_macs() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[296, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[296, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "transformerdecoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder"]], "transformerdecoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer"]], "transformerencoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder"]], "transformerencoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer"]], "transformersupernetwork (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerSuperNetwork"]], "extract_features() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.extract_features"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoderlayer method)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.forward"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.max_positions"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.max_positions"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[297, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "output_layer() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.output_layer"]], "reorder_encoder_out() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.reorder_encoder_out"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.upgrade_state_dict_named"]], "basicnas (class in neural_compressor.experimental.nas)": [[298, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[298, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[298, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[298, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[298, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[298, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[298, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[298, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[298, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[298, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[298, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[298, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[298, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[298, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[298, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[298, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[299, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[299, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[299, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[299, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[299, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[299, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[299, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[299, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[299, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[299, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[299, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[299, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[299, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[299, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[299, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[299, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[300, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[300, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[300, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[300, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[301, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[301, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[301, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[301, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[301, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[301, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[301, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[301, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[301, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[301, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[301, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[301, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[301, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[302, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[302, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[302, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[302, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[302, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[302, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[302, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning.pruning method)": [[302, "neural_compressor.experimental.pruning.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning": [[302, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[302, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[302, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[302, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[302, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[302, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[302, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[302, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[302, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[302, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[302, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[302, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[302, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[302, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[302, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[302, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[302, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning.pruning method)": [[302, "neural_compressor.experimental.pruning.Pruning.update_items_for_all_pruners"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[303, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[303, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[303, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[303, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[304, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[304, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[304, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[304, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[305, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[306, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[307, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[307, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[307, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[307, "neural_compressor.experimental.pruning_v2.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning_v2.pruning method)": [[307, "neural_compressor.experimental.pruning_v2.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning_v2.pruning method)": [[307, "neural_compressor.experimental.pruning_v2.Pruning.generate_hooks"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning_v2.pruning method)": [[307, "neural_compressor.experimental.pruning_v2.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning_v2": [[307, "module-neural_compressor.experimental.pruning_v2"]], "on_after_compute_loss() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[307, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[307, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[307, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[307, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[307, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[307, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[307, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[307, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[307, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[307, "neural_compressor.experimental.pruning_v2.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[307, "neural_compressor.experimental.pruning_v2.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning_v2.pruning method)": [[307, "neural_compressor.experimental.pruning_v2.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning_v2.pruning method)": [[307, "neural_compressor.experimental.pruning_v2.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[307, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning_v2.pruning property)": [[307, "neural_compressor.experimental.pruning_v2.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[307, "neural_compressor.experimental.pruning_v2.Pruning.train_distributed"]], "update_config() (neural_compressor.experimental.pruning_v2.pruning method)": [[307, "neural_compressor.experimental.pruning_v2.Pruning.update_config"]], "neural_compressor.experimental.pytorch_pruner": [[308, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[309, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[310, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[310, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[311, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[311, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[311, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[311, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[311, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[311, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[311, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[312, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[312, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[313, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "prepare() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.prepare"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[314, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[314, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[314, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[314, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[314, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[314, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[314, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[314, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[314, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[314, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[315, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[315, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[315, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[315, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[315, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[315, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[315, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[315, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[315, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[315, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[315, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[316, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[316, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[316, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[316, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[316, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[316, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[316, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[317, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[317, "neural_compressor.DistillationConfig"]], "posttrainingquantconfig (class in neural_compressor)": [[317, "neural_compressor.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor)": [[317, "neural_compressor.QuantizationAwareTrainingConfig"]], "weightpruningconfig (class in neural_compressor)": [[317, "neural_compressor.WeightPruningConfig"]], "approach (neural_compressor.posttrainingquantconfig property)": [[317, "neural_compressor.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.quantizationawaretrainingconfig property)": [[317, "neural_compressor.QuantizationAwareTrainingConfig.approach"]], "criterion (neural_compressor.distillationconfig property)": [[317, "neural_compressor.DistillationConfig.criterion"]], "dataloader() (neural_compressor.benchmark method)": [[317, "neural_compressor.Benchmark.dataloader"]], "metric() (neural_compressor.benchmark method)": [[317, "neural_compressor.Benchmark.metric"]], "neural_compressor": [[317, "module-neural_compressor"]], "optimizer (neural_compressor.distillationconfig property)": [[317, "neural_compressor.DistillationConfig.optimizer"]], "postprocess() (neural_compressor.benchmark method)": [[317, "neural_compressor.Benchmark.postprocess"]], "set_random_seed() (in module neural_compressor)": [[317, "neural_compressor.set_random_seed"]], "set_tensorboard() (in module neural_compressor)": [[317, "neural_compressor.set_tensorboard"]], "set_workspace() (in module neural_compressor)": [[317, "neural_compressor.set_workspace"]], "teacher_model (neural_compressor.distillationconfig property)": [[317, "neural_compressor.DistillationConfig.teacher_model"]], "tuning_criterion (neural_compressor.posttrainingquantconfig property)": [[317, "neural_compressor.PostTrainingQuantConfig.tuning_criterion"]], "weight_compression (neural_compressor.weightpruningconfig property)": [[317, "neural_compressor.WeightPruningConfig.weight_compression"]], "bleu (class in neural_compressor.metric.bleu)": [[318, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[318, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[318, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[318, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[318, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[318, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[318, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[318, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[318, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[318, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[318, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[318, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[318, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[319, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[319, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[320, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[321, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[321, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[321, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[321, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[321, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[321, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[321, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[321, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[321, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[322, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[322, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[322, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[322, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[322, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[323, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[323, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[323, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[323, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[323, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[324, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[324, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[324, "neural_compressor.metric.Metric"]], "hvd (neural_compressor.metric.basemetric property)": [[324, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[324, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[324, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[324, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[324, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[324, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[324, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[324, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[324, "neural_compressor.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[325, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[325, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[325, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[325, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[325, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[325, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[325, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[325, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[325, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[325, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[325, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[325, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[325, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[325, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[325, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[325, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[325, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[325, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[325, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[325, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[325, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[325, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[325, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[325, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[325, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[325, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[325, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[325, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[325, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[325, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[325, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[325, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[325, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[325, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[325, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[325, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[325, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[325, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[325, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[325, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[325, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[325, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[325, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[325, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[325, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[325, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[325, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[325, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[325, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[325, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[325, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[325, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[325, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[325, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[325, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[325, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[325, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[325, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[325, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[325, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[325, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[325, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[325, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[325, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[325, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[325, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[325, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[325, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[325, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[325, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[325, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[325, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[325, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[325, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[325, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[325, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[325, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[325, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[325, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[325, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[325, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[325, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[325, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[325, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[325, "neural_compressor.metric.metric.mIOU.update"]], "fit() (in module neural_compressor.mix_precision)": [[326, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[326, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[327, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[327, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[327, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[327, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[327, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[327, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[327, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[328, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[328, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[328, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[328, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[328, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[328, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[328, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[328, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[329, "neural_compressor.model.keras_model.KerasModel"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[329, "neural_compressor.model.keras_model.KerasModel.framework"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[329, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[329, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[329, "module-neural_compressor.model.keras_model"]], "q_config (neural_compressor.model.keras_model.kerasmodel property)": [[329, "neural_compressor.model.keras_model.KerasModel.q_config"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[329, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[330, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[330, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[330, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[331, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[331, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[331, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[331, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[331, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[332, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[332, "module-neural_compressor.model.nets_factory"]], "register() (neural_compressor.model.nets_factory.tfslimnetsfactory method)": [[332, "neural_compressor.model.nets_factory.TFSlimNetsFactory.register"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[333, "neural_compressor.model.onnx_model.ONNXModel"]], "add_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.add_initializer"]], "add_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.add_initializers"]], "add_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.add_node"]], "add_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.add_nodes"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_children() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.get_children"]], "get_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.get_initializer"]], "get_nodes_chain() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.get_nodes_chain"]], "get_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.get_parent"]], "get_parents() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.get_parents"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.graph"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[333, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.initializer"]], "input() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.input"]], "input_name_to_nodes (neural_compressor.model.onnx_model.onnxmodel property)": [[333, "neural_compressor.model.onnx_model.ONNXModel.input_name_to_nodes"]], "ir_version() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.ir_version"]], "large_size (neural_compressor.model.onnx_model.onnxmodel property)": [[333, "neural_compressor.model.onnx_model.ONNXModel.large_size"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[333, "neural_compressor.model.onnx_model.ONNXModel.model"]], "model_path (neural_compressor.model.onnx_model.onnxmodel property)": [[333, "neural_compressor.model.onnx_model.ONNXModel.model_path"]], "neural_compressor.model.onnx_model": [[333, "module-neural_compressor.model.onnx_model"]], "nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.nodes"]], "opset_import() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.opset_import"]], "output() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.output"]], "output_name_to_node (neural_compressor.model.onnx_model.onnxmodel property)": [[333, "neural_compressor.model.onnx_model.ONNXModel.output_name_to_node"]], "q_config (neural_compressor.model.onnx_model.onnxmodel property)": [[333, "neural_compressor.model.onnx_model.ONNXModel.q_config"]], "remove_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.remove_initializer"]], "remove_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.remove_initializers"]], "remove_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.remove_node"]], "remove_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.remove_nodes"]], "remove_unused_constant() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.remove_unused_constant"]], "replace_input_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.replace_input_of_all_nodes"]], "replace_node_input() (neural_compressor.model.onnx_model.onnxmodel static method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.replace_node_input"]], "replace_node_output() (neural_compressor.model.onnx_model.onnxmodel static method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.replace_node_output"]], "replace_output_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.replace_output_of_all_nodes"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "set_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.set_initializer"]], "topological_sort() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.topological_sort"]], "update() (neural_compressor.model.onnx_model.onnxmodel method)": [[333, "neural_compressor.model.onnx_model.ONNXModel.update"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "build_saved_model() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[334, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.build_saved_model"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.estimator_session"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_all_weight_names() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[334, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_all_weight_names"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.get_model_type"]], "get_weight() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[334, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_weight"]], "graph (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_def"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.graph_def"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.graph_session"]], "input_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_node_names"]], "input_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor"]], "input_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor_names"]], "iter_op (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.iter_op"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "model_type (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model_type"]], "name (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.name"]], "neural_compressor.model.tensorflow_model": [[334, "module-neural_compressor.model.tensorflow_model"]], "output_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_node_names"]], "output_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor"]], "output_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor_names"]], "q_config (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.q_config"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[334, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[334, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[334, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.saved_model_session"]], "sess (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.sess"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.slim_session"]], "update_weights() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[334, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.update_weights"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "workspace_path (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.workspace_path"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[335, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[335, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[335, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[335, "neural_compressor.model.torch_model.PyTorchModel.export"]], "export_to_bf16_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[335, "neural_compressor.model.torch_model.PyTorchModel.export_to_bf16_onnx"]], "export_to_fp32_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[335, "neural_compressor.model.torch_model.PyTorchModel.export_to_fp32_onnx"]], "export_to_int8_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[335, "neural_compressor.model.torch_model.PyTorchModel.export_to_int8_onnx"]], "export_to_jit() (neural_compressor.model.torch_model.pytorchmodel method)": [[335, "neural_compressor.model.torch_model.PyTorchModel.export_to_jit"]], "forward() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.forward"]], "fp32_model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.fp32_model"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "generate_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.generate_forward_pre_hook"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[335, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "load_quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[335, "neural_compressor.model.torch_model.PyTorchModel.load_quantized_state_dict"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[335, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[335, "neural_compressor.model.torch_model.PyTorchModel.quantized_state_dict"]], "register_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.register_forward_pre_hook"]], "remove_hooks() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.remove_hooks"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[335, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[335, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "workspace_path (neural_compressor.model.torch_model.ipexmodel property)": [[335, "neural_compressor.model.torch_model.IPEXModel.workspace_path"]], "workspace_path (neural_compressor.model.torch_model.pytorchmodel property)": [[335, "neural_compressor.model.torch_model.PyTorchModel.workspace_path"]], "accuracy (class in neural_compressor.objective)": [[336, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[336, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[336, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[336, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[336, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[336, "neural_compressor.objective.Performance"]], "accuracy_meets() (neural_compressor.objective.multiobjective method)": [[336, "neural_compressor.objective.MultiObjective.accuracy_meets"]], "accuracy_target (neural_compressor.objective.multiobjective property)": [[336, "neural_compressor.objective.MultiObjective.accuracy_target"]], "baseline (neural_compressor.objective.multiobjective property)": [[336, "neural_compressor.objective.MultiObjective.baseline"]], "best_result() (neural_compressor.objective.multiobjective method)": [[336, "neural_compressor.objective.MultiObjective.best_result"]], "compare() (neural_compressor.objective.multiobjective method)": [[336, "neural_compressor.objective.MultiObjective.compare"]], "end() (neural_compressor.objective.accuracy method)": [[336, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[336, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[336, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.multiobjective method)": [[336, "neural_compressor.objective.MultiObjective.end"]], "end() (neural_compressor.objective.objective method)": [[336, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[336, "neural_compressor.objective.Performance.end"]], "evaluate() (neural_compressor.objective.multiobjective method)": [[336, "neural_compressor.objective.MultiObjective.evaluate"]], "model (neural_compressor.objective.objective property)": [[336, "neural_compressor.objective.Objective.model"]], "neural_compressor.objective": [[336, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[336, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[336, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.multiobjective method)": [[336, "neural_compressor.objective.MultiObjective.reset"]], "reset() (neural_compressor.objective.objective method)": [[336, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.multiobjective method)": [[336, "neural_compressor.objective.MultiObjective.result"]], "result() (neural_compressor.objective.objective method)": [[336, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[336, "neural_compressor.objective.Objective.result_list"]], "set_model() (neural_compressor.objective.multiobjective method)": [[336, "neural_compressor.objective.MultiObjective.set_model"]], "start() (neural_compressor.objective.accuracy method)": [[336, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[336, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[336, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.multiobjective method)": [[336, "neural_compressor.objective.MultiObjective.start"]], "start() (neural_compressor.objective.objective method)": [[336, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[336, "neural_compressor.objective.Performance.start"]], "gradientcriterion (class in neural_compressor.pruner.criteria)": [[337, "neural_compressor.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.pruner.criteria)": [[337, "neural_compressor.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.pruner.criteria)": [[337, "neural_compressor.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.pruner.criteria)": [[337, "neural_compressor.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.pruner.criteria)": [[337, "neural_compressor.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.pruner.criteria)": [[337, "neural_compressor.pruner.criteria.get_criterion"]], "neural_compressor.pruner.criteria": [[337, "module-neural_compressor.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[337, "neural_compressor.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.gradientcriterion method)": [[337, "neural_compressor.pruner.criteria.GradientCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[337, "neural_compressor.pruner.criteria.PruningCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.snipcriterion method)": [[337, "neural_compressor.pruner.criteria.SnipCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.snipmomentumcriterion method)": [[337, "neural_compressor.pruner.criteria.SnipMomentumCriterion.on_before_optimizer_step"]], "on_step_begin() (neural_compressor.pruner.criteria.magnitudecriterion method)": [[337, "neural_compressor.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.criteria.pruningcriterion method)": [[337, "neural_compressor.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.pruner.criteria)": [[337, "neural_compressor.pruner.criteria.register_criterion"]], "scores (neural_compressor.pruner.criteria.gradientcriterion attribute)": [[337, "neural_compressor.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.pruner.criteria.magnitudecriterion attribute)": [[337, "neural_compressor.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.pruner.criteria.pruningcriterion attribute)": [[337, "neural_compressor.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipcriterion attribute)": [[337, "neural_compressor.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipmomentumcriterion attribute)": [[337, "neural_compressor.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.pruner": [[338, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[339, "module-neural_compressor.pruner.logger"]], "basepattern (class in neural_compressor.pruner.patterns)": [[340, "neural_compressor.pruner.patterns.BasePattern"]], "m (neural_compressor.pruner.patterns.patternninm attribute)": [[340, "neural_compressor.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.pruner.patterns.patternninm attribute)": [[340, "neural_compressor.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.pruner.patterns)": [[340, "neural_compressor.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.pruner.patterns)": [[340, "neural_compressor.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[340, "neural_compressor.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.pruner.patterns.patternnxm attribute)": [[340, "neural_compressor.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.pruner.patterns.basepattern method)": [[340, "neural_compressor.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternninm method)": [[340, "neural_compressor.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.pruner.patterns.basepattern attribute)": [[340, "neural_compressor.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.pruner.patterns.basepattern method)": [[340, "neural_compressor.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.pruner.patterns.patternninm method)": [[340, "neural_compressor.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[340, "neural_compressor.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.pruner.patterns.basepattern method)": [[340, "neural_compressor.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.pruner.patterns.basepattern method)": [[340, "neural_compressor.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternninm method)": [[340, "neural_compressor.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.pruner.patterns.basepattern method)": [[340, "neural_compressor.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.pruner.patterns)": [[340, "neural_compressor.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.basepattern method)": [[340, "neural_compressor.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternninm method)": [[340, "neural_compressor.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.basepattern method)": [[340, "neural_compressor.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[340, "neural_compressor.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[340, "neural_compressor.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[340, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternninm method)": [[340, "neural_compressor.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.pruner.patterns.basepattern method)": [[340, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[340, "neural_compressor.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.pruner.patterns.basepattern attribute)": [[340, "neural_compressor.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[340, "neural_compressor.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[340, "neural_compressor.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[340, "neural_compressor.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.patterns.basepattern attribute)": [[340, "neural_compressor.pruner.patterns.BasePattern.modules"]], "neural_compressor.pruner.patterns": [[340, "module-neural_compressor.pruner.patterns"]], "pattern (neural_compressor.pruner.patterns.basepattern attribute)": [[340, "neural_compressor.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.pruner.patterns.patternninm method)": [[340, "neural_compressor.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.pruner.patterns.basepattern method)": [[340, "neural_compressor.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.pruner.patterns)": [[340, "neural_compressor.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternninm method)": [[340, "neural_compressor.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternninm method)": [[340, "neural_compressor.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.pruner.patterns.basepattern attribute)": [[340, "neural_compressor.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[340, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.pruner.patterns.basepattern method)": [[340, "neural_compressor.pruner.patterns.BasePattern.update_residual_cnt"]], "gradientsensitivitypruner (class in neural_compressor.pruner.pruner_legacy.gradient_sensitivity)": [[341, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[341, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[341, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[341, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[341, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[341, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[341, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_end"]], "parse_weight_name() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[341, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.parse_weight_name"]], "prune_by_importance() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[341, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_by_importance"]], "prune_weight() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[341, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_weight"]], "update_importance_abs() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[341, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_abs"]], "update_importance_elementwise() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[341, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_elementwise"]], "update_importance_weighted() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[341, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_weighted"]], "grouplassopruner (class in neural_compressor.pruner.pruner_legacy.group_lasso)": [[342, "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[342, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "on_before_optimizer_step() (neural_compressor.pruner.pruner_legacy.group_lasso.grouplassopruner method)": [[342, "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner.on_before_optimizer_step"]], "neural_compressor.pruner.pruner_legacy": [[343, "module-neural_compressor.pruner.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.pruner.pruner_legacy.magnitude)": [[344, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[344, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[344, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[344, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[344, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[344, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[344, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_end"]], "patternlockpruner (class in neural_compressor.pruner.pruner_legacy.pattern_lock)": [[345, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[345, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[345, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[345, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[345, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[345, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[345, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_step_end"]], "update_weights() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[345, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.update_weights"]], "pruner (class in neural_compressor.pruner.pruner_legacy.pruner)": [[346, "neural_compressor.pruner.pruner_legacy.pruner.Pruner"]], "neural_compressor.pruner.pruner_legacy.pruner": [[346, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "on_before_optimizer_step() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_train_end"]], "pruner_registry() (in module neural_compressor.pruner.pruner_legacy.pruner)": [[346, "neural_compressor.pruner.pruner_legacy.pruner.pruner_registry"]], "update_sparsity() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.update_sparsity"]], "basepruner (class in neural_compressor.pruner.pruners)": [[347, "neural_compressor.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.pruner.pruners)": [[347, "neural_compressor.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.pruner.pruners)": [[347, "neural_compressor.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.pruner.pruners)": [[347, "neural_compressor.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[347, "neural_compressor.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.pruner.pruners.progressivepruner method)": [[347, "neural_compressor.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.pruner.pruners.basepruner attribute)": [[347, "neural_compressor.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.pruner.pruners.basicpruner attribute)": [[347, "neural_compressor.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[347, "neural_compressor.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.pruner.pruners.basepruner attribute)": [[347, "neural_compressor.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.pruner.pruners)": [[347, "neural_compressor.pruner.pruners.get_pruner"]], "global_step (neural_compressor.pruner.pruners.basepruner attribute)": [[347, "neural_compressor.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.pruner.pruners.basepruner attribute)": [[347, "neural_compressor.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.pruners.basepruner attribute)": [[347, "neural_compressor.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.pruners.basepruner attribute)": [[347, "neural_compressor.pruner.pruners.BasePruner.modules"]], "neural_compressor.pruner.pruners": [[347, "module-neural_compressor.pruner.pruners"]], "on_after_eval() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[347, "neural_compressor.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.patternlockpruner method)": [[347, "neural_compressor.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[347, "neural_compressor.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[347, "neural_compressor.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[347, "neural_compressor.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.pruners.progressivepruner method)": [[347, "neural_compressor.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.on_train_end"]], "parse_valid_pruner_types() (in module neural_compressor.pruner.pruners)": [[347, "neural_compressor.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.pruner.pruners.basepruner attribute)": [[347, "neural_compressor.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.pruner.pruners.basicpruner attribute)": [[347, "neural_compressor.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.pruner.pruners.progressivepruner method)": [[347, "neural_compressor.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.pruner.pruners.basepruner attribute)": [[347, "neural_compressor.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.pruner.pruners.basicpruner attribute)": [[347, "neural_compressor.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.pruner.pruners)": [[347, "neural_compressor.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.pruner.pruners.basepruner attribute)": [[347, "neural_compressor.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.pruner.pruners.basicpruner attribute)": [[347, "neural_compressor.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.pruner.pruners.basepruner attribute)": [[347, "neural_compressor.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.pruner.pruners.basicpruner method)": [[347, "neural_compressor.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.pruner.pruners.basepruner attribute)": [[347, "neural_compressor.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[347, "neural_compressor.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.pruner.pruners.basepruner method)": [[347, "neural_compressor.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.basicpruner method)": [[347, "neural_compressor.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.patternlockpruner method)": [[347, "neural_compressor.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.pruner.pruners.progressivepruner method)": [[347, "neural_compressor.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "pruning (class in neural_compressor.pruner.pruning)": [[348, "neural_compressor.pruner.pruning.Pruning"]], "config_file_path (neural_compressor.pruner.pruning.pruning attribute)": [[348, "neural_compressor.pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.pruner.pruning.pruning method)": [[348, "neural_compressor.pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.pruner.pruning.pruning attribute)": [[348, "neural_compressor.pruner.pruning.Pruning.model"]], "model (neural_compressor.pruner.pruning.pruning property)": [[348, "id0"]], "neural_compressor.pruner.pruning": [[348, "module-neural_compressor.pruner.pruning"]], "on_after_eval() (neural_compressor.pruner.pruning.pruning method)": [[348, "neural_compressor.pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[348, "neural_compressor.pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruning.pruning method)": [[348, "neural_compressor.pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[348, "neural_compressor.pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruning.pruning method)": [[348, "neural_compressor.pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruning.pruning method)": [[348, "neural_compressor.pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruning.pruning method)": [[348, "neural_compressor.pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruning.pruning method)": [[348, "neural_compressor.pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruning.pruning method)": [[348, "neural_compressor.pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruning.pruning method)": [[348, "neural_compressor.pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.pruner.pruning.pruning attribute)": [[348, "neural_compressor.pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.pruner.pruning.pruning attribute)": [[348, "neural_compressor.pruner.pruning.Pruning.pruners"]], "update_config() (neural_compressor.pruner.pruning.pruning method)": [[348, "neural_compressor.pruner.pruning.Pruning.update_config"]], "basereg (class in neural_compressor.pruner.regs)": [[349, "neural_compressor.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.pruner.regs)": [[349, "neural_compressor.pruner.regs.GroupLasso"]], "alpha (neural_compressor.pruner.regs.grouplasso attribute)": [[349, "neural_compressor.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.pruner.regs)": [[349, "neural_compressor.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.pruner.regs)": [[349, "neural_compressor.pruner.regs.get_reg_type"]], "neural_compressor.pruner.regs": [[349, "module-neural_compressor.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[349, "neural_compressor.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[349, "neural_compressor.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[349, "neural_compressor.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[349, "neural_compressor.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.pruner.regs.grouplasso attribute)": [[349, "neural_compressor.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.pruner.regs)": [[349, "neural_compressor.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.pruner.schedulers)": [[350, "neural_compressor.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.pruner.schedulers)": [[350, "neural_compressor.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.pruner.schedulers)": [[350, "neural_compressor.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.pruner.schedulers.pruningscheduler attribute)": [[350, "neural_compressor.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.pruner.schedulers)": [[350, "neural_compressor.pruner.schedulers.get_scheduler"]], "neural_compressor.pruner.schedulers": [[350, "module-neural_compressor.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.pruner.schedulers)": [[350, "neural_compressor.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.iterativescheduler method)": [[350, "neural_compressor.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.oneshotscheduler method)": [[350, "neural_compressor.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.pruningscheduler method)": [[350, "neural_compressor.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "check_config() (in module neural_compressor.pruner.utils)": [[351, "neural_compressor.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.pruner.utils)": [[351, "neural_compressor.pruner.utils.check_key_validity"]], "neural_compressor.pruner.utils": [[351, "module-neural_compressor.pruner.utils"]], "parse_to_prune() (in module neural_compressor.pruner.utils)": [[351, "neural_compressor.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.pruner.utils)": [[351, "neural_compressor.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.pruner.utils)": [[351, "neural_compressor.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.pruner.utils)": [[351, "neural_compressor.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.pruner.utils)": [[351, "neural_compressor.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.pruner.utils)": [[351, "neural_compressor.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.pruner.utils)": [[351, "neural_compressor.pruner.utils.update_params"]], "fit() (in module neural_compressor.quantization)": [[352, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[352, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[353, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[353, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[353, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[353, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[354, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[354, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[354, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[355, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[355, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[355, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[355, "neural_compressor.strategy.bayesian.acq_max"]], "array_to_params() (neural_compressor.strategy.bayesian.targetspace method)": [[355, "neural_compressor.strategy.bayesian.TargetSpace.array_to_params"]], "bounds (neural_compressor.strategy.bayesian.targetspace property)": [[355, "neural_compressor.strategy.bayesian.TargetSpace.bounds"]], "dim (neural_compressor.strategy.bayesian.targetspace property)": [[355, "neural_compressor.strategy.bayesian.TargetSpace.dim"]], "empty (neural_compressor.strategy.bayesian.targetspace property)": [[355, "neural_compressor.strategy.bayesian.TargetSpace.empty"]], "gen_next_params() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[355, "neural_compressor.strategy.bayesian.BayesianOptimization.gen_next_params"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[355, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "keys (neural_compressor.strategy.bayesian.targetspace property)": [[355, "neural_compressor.strategy.bayesian.TargetSpace.keys"]], "max (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[355, "neural_compressor.strategy.bayesian.BayesianOptimization.max"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[355, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[355, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[355, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "params (neural_compressor.strategy.bayesian.targetspace property)": [[355, "neural_compressor.strategy.bayesian.TargetSpace.params"]], "params_to_array() (neural_compressor.strategy.bayesian.targetspace method)": [[355, "neural_compressor.strategy.bayesian.TargetSpace.params_to_array"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[355, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[355, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[355, "neural_compressor.strategy.bayesian.BayesianOptimization.res"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[355, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "space (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[355, "neural_compressor.strategy.bayesian.BayesianOptimization.space"]], "suggest() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[355, "neural_compressor.strategy.bayesian.BayesianOptimization.suggest"]], "target (neural_compressor.strategy.bayesian.targetspace property)": [[355, "neural_compressor.strategy.bayesian.TargetSpace.target"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[356, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[356, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[356, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[356, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[356, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[357, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[357, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[357, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[358, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[358, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[358, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[359, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[360, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[360, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "neural_compressor.strategy.mse": [[360, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[360, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[361, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[361, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[361, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[362, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[362, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[362, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[363, "neural_compressor.strategy.strategy.TuneStrategy"]], "deploy_config() (neural_compressor.strategy.strategy.tunestrategy method)": [[363, "neural_compressor.strategy.strategy.TuneStrategy.deploy_config"]], "evaluation_result (neural_compressor.strategy.strategy.tunestrategy property)": [[363, "neural_compressor.strategy.strategy.TuneStrategy.evaluation_result"]], "initial_best_acc() (neural_compressor.strategy.strategy.tunestrategy method)": [[363, "neural_compressor.strategy.strategy.TuneStrategy.initial_best_acc"]], "initial_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[363, "neural_compressor.strategy.strategy.TuneStrategy.initial_tuning_cfg"]], "neural_compressor.strategy.strategy": [[363, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[363, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "set_q_func() (neural_compressor.strategy.strategy.tunestrategy method)": [[363, "neural_compressor.strategy.strategy.TuneStrategy.set_q_func"]], "set_tuning_space() (neural_compressor.strategy.strategy.tunestrategy method)": [[363, "neural_compressor.strategy.strategy.TuneStrategy.set_tuning_space"]], "setup_resume() (neural_compressor.strategy.strategy.tunestrategy method)": [[363, "neural_compressor.strategy.strategy.TuneStrategy.setup_resume"]], "show_baseline_info() (neural_compressor.strategy.strategy.tunestrategy method)": [[363, "neural_compressor.strategy.strategy.TuneStrategy.show_baseline_info"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[363, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[363, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[363, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "update_best_op_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[363, "neural_compressor.strategy.strategy.TuneStrategy.update_best_op_tuning_cfg"]], "optuningconfig (class in neural_compressor.strategy.utils)": [[364, "neural_compressor.strategy.utils.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.optuningconfig class method)": [[364, "neural_compressor.strategy.utils.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.optuningconfig method)": [[364, "neural_compressor.strategy.utils.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils": [[364, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[365, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[366, "module-neural_compressor.strategy.utils.tuning_space"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[367, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig class method)": [[367, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig method)": [[367, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[367, "module-neural_compressor.strategy.utils.tuning_structs"]], "compressionmanager (class in neural_compressor.training)": [[368, "neural_compressor.training.CompressionManager"]], "compressionmanager.callbacks (class in neural_compressor.training)": [[368, "neural_compressor.training.CompressionManager.CallBacks"]], "export() (neural_compressor.training.compressionmanager method)": [[368, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[368, "module-neural_compressor.training"]], "on_after_compute_loss() (neural_compressor.training.compressionmanager.callbacks method)": [[368, "neural_compressor.training.CompressionManager.CallBacks.on_after_compute_loss"]], "on_after_optimizer_step() (neural_compressor.training.compressionmanager.callbacks method)": [[368, "neural_compressor.training.CompressionManager.CallBacks.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.training.compressionmanager.callbacks method)": [[368, "neural_compressor.training.CompressionManager.CallBacks.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[368, "neural_compressor.training.CompressionManager.CallBacks.on_epoch_begin"]], "on_epoch_end() (neural_compressor.training.compressionmanager.callbacks method)": [[368, "neural_compressor.training.CompressionManager.CallBacks.on_epoch_end"]], "on_step_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[368, "neural_compressor.training.CompressionManager.CallBacks.on_step_begin"]], "on_step_end() (neural_compressor.training.compressionmanager.callbacks method)": [[368, "neural_compressor.training.CompressionManager.CallBacks.on_step_end"]], "on_train_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[368, "neural_compressor.training.CompressionManager.CallBacks.on_train_begin"]], "on_train_end() (neural_compressor.training.compressionmanager.callbacks method)": [[368, "neural_compressor.training.CompressionManager.CallBacks.on_train_end"]], "prepare_compression() (in module neural_compressor.training)": [[368, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[368, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[369, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[369, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[369, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[370, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[371, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[371, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[371, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[371, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[371, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[371, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[371, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[371, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[371, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[371, "module-neural_compressor.utils.create_obj_from_config"]], "layerhistogramcollector (class in neural_compressor.utils)": [[372, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[372, "neural_compressor.utils.LayerHistogramCollector.collect"]], "debug() (in module neural_compressor.utils)": [[372, "neural_compressor.utils.debug"]], "error() (in module neural_compressor.utils)": [[372, "neural_compressor.utils.error"]], "fatal() (in module neural_compressor.utils)": [[372, "neural_compressor.utils.fatal"]], "info() (in module neural_compressor.utils)": [[372, "neural_compressor.utils.info"]], "log() (in module neural_compressor.utils)": [[372, "neural_compressor.utils.log"]], "neural_compressor.utils": [[372, "module-neural_compressor.utils"]], "warn() (in module neural_compressor.utils)": [[372, "neural_compressor.utils.warn"]], "warning() (in module neural_compressor.utils)": [[372, "neural_compressor.utils.warning"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[373, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[373, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[373, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[373, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[373, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[374, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "from_pretrained() (neural_compressor.utils.load_huggingface.optimizedmodel class method)": [[374, "neural_compressor.utils.load_huggingface.OptimizedModel.from_pretrained"]], "neural_compressor.utils.load_huggingface": [[374, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[374, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[375, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[375, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[375, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[375, "neural_compressor.utils.logger.fatal"]], "get_logger() (neural_compressor.utils.logger.logger method)": [[375, "neural_compressor.utils.logger.Logger.get_logger"]], "info() (in module neural_compressor.utils.logger)": [[375, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[375, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[375, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[375, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[375, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[376, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[376, "neural_compressor.utils.options.onnxrt"]], "load() (in module neural_compressor.utils.pytorch)": [[377, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[377, "module-neural_compressor.utils.pytorch"]], "cpuinfo (class in neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.Statistics"]], "bf16 (neural_compressor.utils.utility.cpuinfo property)": [[378, "neural_compressor.utils.utility.CpuInfo.bf16"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.compute_sparsity"]], "cores_per_socket (neural_compressor.utils.utility.cpuinfo property)": [[378, "neural_compressor.utils.utility.CpuInfo.cores_per_socket"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (neural_compressor.utils.utility.cpuinfo method)": [[378, "neural_compressor.utils.utility.CpuInfo.get_number_of_sockets"]], "get_size() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[378, "module-neural_compressor.utils.utility"]], "print_stat() (neural_compressor.utils.utility.statistics method)": [[378, "neural_compressor.utils.utility.Statistics.print_stat"]], "recover() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.set_workspace"]], "singleton() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[378, "neural_compressor.utils.utility.version1_lte_version2"]], "vnni (neural_compressor.utils.utility.cpuinfo property)": [[378, "neural_compressor.utils.utility.CpuInfo.vnni"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[379, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[379, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[379, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[379, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[379, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[379, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[379, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[379, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[380, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[380, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[380, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[380, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[381, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[381, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[381, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[381, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[381, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[381, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[381, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[382, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[382, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[383, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[383, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[383, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[383, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[383, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[383, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[384, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[384, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[384, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[384, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[384, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[384, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[385, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[385, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[385, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[385, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[385, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[386, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[387, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[387, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[387, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[387, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[387, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[388, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[388, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[388, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[389, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[389, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[389, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_evaluation_config"]], "generate_pruning_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[389, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_pruning_config"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[389, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[390, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[390, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[390, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[390, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[390, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[390, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[391, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[391, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[391, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[391, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[391, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[391, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[391, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[391, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[391, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[391, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[391, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[391, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[392, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[392, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[393, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[393, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[393, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[394, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[395, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[395, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[395, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[395, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[395, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[395, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[395, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[395, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[395, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[395, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[395, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[395, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[395, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[395, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[396, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "generate_tree() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[396, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.generate_tree"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[396, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "parse() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[396, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse"]], "parse_entry() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[396, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse_entry"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[397, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[397, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[397, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[397, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[397, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[397, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[398, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[399, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[400, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[400, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[400, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[401, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[401, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[402, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[402, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[402, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[403, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[403, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[403, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[404, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[404, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[405, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[405, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[405, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[405, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[406, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[407, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[407, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[407, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[407, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[407, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[407, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[408, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[408, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[408, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[408, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[408, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[408, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[408, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[409, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_pruning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_pruning_details"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[410, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[411, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[411, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[411, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[411, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[411, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[411, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[411, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[411, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[412, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[412, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[413, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[414, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[414, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[414, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[414, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[414, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[414, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[414, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[414, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[415, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[415, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[415, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.build_info"]], "delete_pruning_details() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[415, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.delete_pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[415, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[415, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.update"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[416, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[416, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[416, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[416, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[416, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[416, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[416, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[417, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[417, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[417, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[417, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[417, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[417, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[418, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[418, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[418, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[418, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[419, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[420, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[421, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[421, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[421, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[421, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[421, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[421, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[422, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[422, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[422, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[422, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[422, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[422, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[422, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[422, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[422, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[422, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[422, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[422, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[423, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[423, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[424, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[424, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_tuning_details"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_pruning_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.load_pruning_details_config"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[425, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[426, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[426, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_tuning_details"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_pruning_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.load_pruning_details_config"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[427, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[428, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[429, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[429, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[430, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[430, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[430, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[430, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[430, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[430, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[431, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[431, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[432, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[432, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[432, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[432, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[433, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[433, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[433, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[433, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[433, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[433, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[433, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[433, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[433, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[434, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[434, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[434, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[435, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[436, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[437, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[437, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[437, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[438, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[438, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[438, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[438, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[438, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[438, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[439, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[439, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[439, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[440, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[441, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[441, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[441, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[442, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[442, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[443, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[444, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[444, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[445, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[445, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[445, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[446, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[446, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[446, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[446, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[447, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[447, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[447, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[447, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[447, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[447, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[447, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[447, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[447, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[448, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[448, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[448, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[448, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[449, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[450, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[450, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[450, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[451, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[452, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[452, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[452, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[453, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[453, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[453, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[454, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[455, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[456, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[457, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[458, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[459, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[459, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[460, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[460, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[461, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[462, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[462, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[462, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[462, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[462, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[462, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[462, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[462, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[462, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[462, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[462, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[462, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[462, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[462, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[462, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "supports_pruning (neural_compressor.ux.components.model.model.model property)": [[462, "neural_compressor.ux.components.model.model.Model.supports_pruning"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[463, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[463, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[464, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[465, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[465, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[465, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[465, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[465, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[465, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[465, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[465, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[465, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[465, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[465, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[465, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[466, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[467, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[467, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[467, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[467, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[467, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[468, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[468, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[468, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[468, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[468, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[468, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[468, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[469, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[469, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[469, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[470, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[470, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[470, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[470, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[471, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[472, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[472, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[472, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[472, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[472, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[473, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[473, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[473, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[473, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[473, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[473, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[474, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[474, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[474, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[474, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[474, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[474, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[474, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[474, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[474, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[474, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "supports_pruning (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[474, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.supports_pruning"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[475, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[475, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[475, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[476, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[476, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[477, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[477, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[478, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[478, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[479, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[479, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[479, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[479, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[479, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[479, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[479, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[479, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[479, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[480, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[481, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[481, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[481, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[481, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[481, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[481, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[481, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[482, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[483, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[483, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[483, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[483, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[483, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[483, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[483, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[483, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[484, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[484, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[484, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[484, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[484, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[484, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[484, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[485, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[485, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[485, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[486, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[486, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[486, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[486, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[486, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[486, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[486, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[487, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[488, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[488, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[488, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[488, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[488, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[489, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[489, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[490, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[491, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[491, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[491, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[491, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[491, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[491, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[491, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[492, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[492, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[492, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[492, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[492, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[493, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[494, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[494, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[495, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[495, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[495, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[495, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[495, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[495, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[495, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[495, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[495, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[495, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[495, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[495, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[495, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[495, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.pruning": [[496, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[497, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[497, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[497, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[498, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "configuration_data (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[498, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[498, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[498, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.generate_config"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[498, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "optimization_script (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[498, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[498, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.parameters"]], "neural_compressor.ux.components.optimization.tune": [[499, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[500, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[500, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[500, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[500, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[501, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[501, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[501, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[501, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[501, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[501, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[501, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[501, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[501, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[502, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[502, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[502, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[502, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[502, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[502, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[502, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[502, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[502, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[503, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[503, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[503, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[504, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[504, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[504, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[505, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[506, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[506, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[506, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[507, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[507, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[507, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[508, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[508, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[508, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[508, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[508, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[508, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[508, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[508, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[508, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[509, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[509, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[509, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[510, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[511, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[511, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[511, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[511, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[511, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[511, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[511, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[511, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[512, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[512, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[513, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[513, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[513, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[514, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[515, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[515, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[515, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[515, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[515, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[515, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[515, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[515, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[516, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[516, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[516, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[516, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[516, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[517, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[517, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[517, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[517, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[517, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[518, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[518, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[518, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[518, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[518, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[518, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[518, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[518, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[518, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[518, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[518, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[519, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[519, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[519, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[519, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[520, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[520, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[520, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[521, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[521, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[521, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[521, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[521, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[521, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[521, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[521, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[521, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[521, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[521, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[522, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[523, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[523, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[523, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[523, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[524, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[524, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[525, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[525, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[525, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[525, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[525, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[525, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[525, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[525, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[525, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[525, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[525, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[525, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[525, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[525, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[525, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[525, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[525, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[525, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[525, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[525, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[525, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[525, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[526, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[526, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[526, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[526, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[526, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[526, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[526, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[526, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[526, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[526, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[527, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[527, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[527, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[527, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[527, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[528, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[528, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[529, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[529, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[530, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[531, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[531, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[531, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[531, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[531, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[531, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[531, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[531, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[531, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[531, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[531, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[531, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[531, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[531, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[532, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[532, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[532, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[532, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[532, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[533, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[533, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[534, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[534, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[534, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[534, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[535, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[535, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[535, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[535, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[535, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[535, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[535, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[535, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[535, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[535, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[535, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[535, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[536, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[536, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[536, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[536, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[536, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[536, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[536, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "get_label_shift_value() (neural_compressor.ux.utils.workload.evaluation.postprocessschema static method)": [[536, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema.get_label_shift_value"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[536, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[536, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[536, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[536, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[536, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[537, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[537, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[537, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[538, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[539, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[539, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[539, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[540, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[540, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[540, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[540, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[540, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "initialize_pruners() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[541, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.initialize_pruners"]], "neural_compressor.ux.utils.workload.pruning": [[541, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[541, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[541, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "serialize() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach method)": [[541, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize"]], "serialize_pruner() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[541, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize_pruner"]], "set_postprocess_transforms() (neural_compressor.ux.utils.workload.pruning.train method)": [[541, "neural_compressor.ux.utils.workload.pruning.Train.set_postprocess_transforms"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[542, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[542, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[542, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[542, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[542, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[542, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[543, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[543, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[543, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[543, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[543, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[543, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[543, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[543, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[543, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[543, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[543, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[543, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[543, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[543, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[543, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[544, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[544, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[544, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[545, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[545, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[545, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[545, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[545, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[545, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[545, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[545, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[545, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[545, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[545, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[545, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[545, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[546, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[546, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[546, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[546, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[546, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[546, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[546, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[546, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[546, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[546, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[546, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[546, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[546, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[547, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[547, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[548, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[549, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[549, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[549, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[549, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[549, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[549, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[549, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[549, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[549, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[549, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[550, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[550, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[550, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[550, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[550, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[550, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[550, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[550, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[550, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[550, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[550, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[550, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[550, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[551, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[551, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[552, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[552, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[552, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[552, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[552, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[552, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[553, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[554, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[554, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[554, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[555, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[555, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[556, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[556, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[556, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[557, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[557, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[557, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[558, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[558, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[558, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[558, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[558, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[558, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[559, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[559, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[559, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[559, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[559, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[560, "module-neural_compressor.version"]]}})