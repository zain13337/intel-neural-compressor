Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (60)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 153, 167, 173, 174, 177, 294, 335, 377, 430, 456, 459, 466, 469], "mask": [0, 173, 174, 197, 241, 267, 296, 320, 459, 472], "adaptor_registri": [1, 400], "cl": [1, 157, 164, 173, 174, 175, 176, 199, 206, 214, 216, 221, 243, 250, 256, 278, 285, 289, 294, 296, 298, 309, 324, 335, 370, 390], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 339, 341, 342, 343, 344, 346, 347, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 377, 379, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 396, 399, 432, 434, 447, 449, 451, 452, 454, 460], "The": [1, 3, 11, 14, 16, 34, 52, 73, 112, 118, 120, 139, 147, 151, 156, 157, 162, 163, 164, 167, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 197, 198, 199, 200, 201, 205, 206, 214, 216, 219, 221, 224, 226, 229, 230, 231, 241, 242, 243, 244, 245, 249, 250, 256, 257, 262, 264, 265, 266, 268, 269, 271, 273, 274, 275, 277, 278, 280, 281, 283, 284, 285, 286, 289, 291, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 313, 315, 317, 318, 319, 321, 322, 324, 325, 333, 335, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 374, 376, 377, 379, 380, 382, 384, 385, 389, 390, 391, 394, 396, 397, 400, 401, 402, 404, 408, 411, 414, 416, 417, 418, 420, 421, 423, 425, 427, 429, 430, 431, 433, 434, 435, 436, 439, 440, 442, 445, 447, 448, 449, 451, 452, 454, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472], "decor": [1, 16, 34, 66, 67, 69, 147, 157, 173, 174, 176, 214, 221, 256, 271, 278, 285, 289, 294, 296, 298, 309, 312, 324, 335, 370, 373, 390, 396, 397, 400, 469], "us": [1, 13, 16, 34, 42, 43, 47, 48, 69, 102, 104, 115, 140, 149, 151, 156, 162, 164, 167, 171, 173, 174, 176, 178, 179, 181, 182, 185, 186, 195, 196, 197, 198, 199, 200, 201, 204, 213, 214, 215, 216, 221, 229, 230, 239, 240, 241, 242, 243, 244, 245, 248, 255, 256, 260, 261, 262, 264, 265, 267, 271, 272, 273, 278, 285, 286, 289, 291, 294, 296, 297, 298, 299, 300, 303, 306, 309, 312, 313, 317, 318, 320, 324, 335, 352, 357, 358, 362, 365, 367, 370, 373, 374, 377, 380, 381, 382, 383, 390, 394, 395, 396, 397, 400, 416, 418, 420, 421, 422, 423, 425, 427, 429, 431, 432, 434, 435, 436, 437, 438, 439, 441, 442, 445, 447, 449, 451, 452, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472], "regist": [1, 16, 34, 157, 164, 167, 173, 174, 175, 176, 199, 206, 214, 216, 221, 243, 250, 256, 271, 278, 285, 289, 294, 296, 298, 309, 312, 324, 335, 370, 373, 387, 397, 400, 418, 423, 433, 434, 455, 456, 466, 469], "all": [1, 13, 16, 34, 44, 62, 96, 156, 157, 159, 162, 163, 173, 174, 177, 181, 182, 187, 188, 195, 199, 206, 214, 215, 221, 224, 226, 231, 239, 243, 250, 256, 264, 267, 269, 271, 278, 285, 289, 290, 294, 300, 309, 312, 317, 320, 322, 324, 326, 335, 370, 373, 376, 382, 390, 394, 399, 400, 401, 417, 418, 423, 427, 431, 434, 437, 445, 448, 449, 452, 453, 454, 455, 457, 458, 459, 460, 462, 463, 466, 468, 469], "subclass": [1, 16, 34, 157, 173, 174, 176, 192, 196, 199, 206, 214, 221, 236, 240, 243, 250, 256, 271, 278, 285, 289, 294, 296, 298, 309, 312, 324, 335, 370, 373, 400], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 66, 67, 69, 85, 104, 115, 131, 139, 140, 147, 148, 149, 154, 155, 156, 157, 162, 163, 164, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 196, 197, 199, 206, 210, 214, 216, 221, 226, 229, 230, 240, 241, 243, 250, 253, 256, 257, 259, 260, 261, 262, 264, 265, 267, 268, 269, 271, 273, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 289, 291, 294, 295, 296, 297, 298, 299, 303, 309, 313, 315, 317, 318, 320, 321, 322, 324, 325, 329, 333, 335, 352, 357, 358, 362, 370, 374, 376, 377, 379, 382, 386, 387, 389, 390, 396, 417, 418, 421, 423, 430, 433, 434, 448, 454, 455, 459, 462, 465, 466, 468, 469, 471], "framework_specific_info": [1, 3, 11, 14, 44, 46, 400], "base": [1, 13, 16, 34, 45, 46, 85, 104, 115, 119, 121, 131, 143, 149, 153, 156, 157, 163, 167, 182, 187, 190, 195, 197, 199, 206, 214, 224, 231, 234, 239, 241, 243, 250, 256, 271, 277, 279, 285, 286, 289, 291, 296, 306, 309, 313, 324, 326, 333, 334, 335, 367, 370, 374, 397, 399, 400, 401, 418, 422, 423, 427, 434, 435, 442, 443, 445, 454, 458, 459, 462, 465, 467, 469, 472], "framework": [1, 3, 11, 13, 14, 44, 162, 164, 167, 173, 174, 183, 184, 188, 189, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 208, 211, 214, 216, 217, 221, 227, 228, 232, 233, 235, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 254, 256, 262, 271, 272, 299, 307, 313, 324, 325, 326, 327, 329, 368, 374, 382, 399, 400, 401, 420, 423, 424, 428, 429, 430, 431, 433, 434, 435, 459, 460, 462, 464, 467, 468, 469, 470, 471], "layer": [1, 3, 11, 14, 45, 46, 115, 116, 117, 118, 120, 121, 154, 160, 164, 169, 171, 172, 173, 174, 177, 181, 182, 216, 223, 294, 295, 380, 382, 390, 400, 401, 422, 430, 459, 464], "mxnet_util": 2, "util": [2, 12, 17, 104, 109, 110, 138, 141, 148, 149, 150, 155, 166, 168, 181, 182, 223, 263, 265, 295, 305, 316, 318, 350, 355, 366, 401, 402, 423, 434, 437, 462, 469, 470], "ox_util": 2, "oper": [2, 17, 43, 103, 109, 139, 147, 171, 172, 173, 181, 182, 210, 253, 294, 352, 357, 396, 416, 417, 420, 425, 454, 462, 466, 468, 469], "activ": [2, 17, 29, 140, 156, 181, 182, 223, 313, 374, 400, 401, 420, 422, 427, 434, 455, 458, 461, 462, 466, 467, 471], "argmax": [2, 17, 29], "attent": [2, 17, 29, 153, 169, 171, 174, 181, 182, 197, 241, 394, 421, 459], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 146], "conv": [2, 17, 29, 57, 61, 65, 70, 71, 72, 91, 108, 160, 181, 182, 396, 401, 434, 459, 461, 462, 469], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 181, 182, 294], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 181, 182], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 51, 58, 64, 72, 93, 108, 127, 136, 173, 181, 182, 294, 427, 469], "maxpool": [2, 17, 29, 128, 137, 427], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 44, 51, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 80, 84, 87, 90, 91, 92, 93, 95, 104, 106, 108, 122, 123, 124, 130, 132, 133, 134, 135, 140, 142, 145, 147, 148, 149, 155, 156, 160, 171, 181, 182, 306, 313, 314, 352, 357, 363, 365, 367, 374, 375, 384, 390, 400, 401, 420, 427, 434, 435, 459, 462, 463, 464, 466, 467, 469, 471], "pad": [2, 17, 29, 70, 71, 197, 214, 241, 256, 418, 468], "pool": [2, 17, 29], "reduc": [2, 17, 29, 181, 182, 400, 422, 434, 435, 454, 455, 459, 460, 462, 463, 466, 469, 471], "resiz": [2, 17, 29, 197, 198, 210, 214, 241, 242, 253, 256, 418, 468], "split": [2, 17, 29, 43, 81, 213, 214, 255, 256, 396, 466, 468], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 48, 88, 89, 139, 156, 162, 181, 182, 185, 186, 229, 230, 262, 299, 358, 384, 400, 401, 418, 429, 430, 462, 469, 471], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 47, 48, 87, 91, 93, 95, 98, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 148, 149, 151, 154, 156, 160, 162, 163, 181, 182, 185, 186, 210, 217, 224, 229, 230, 253, 261, 262, 263, 273, 300, 306, 312, 316, 363, 365, 367, 379, 380, 384, 389, 390, 400, 406, 417, 418, 423, 424, 427, 429, 430, 433, 436, 437, 442, 444, 445, 448, 457, 460, 464, 467, 468, 469, 470, 471], "smooth_quant": [2, 17, 159, 181, 182, 316, 462, 466], "tf_util": 2, "graph_rewrit": [2, 110], "bf16": [2, 56, 86, 110, 148, 181, 182, 313, 374, 400, 427, 434, 439, 444, 448, 454, 463, 469], "gener": [2, 13, 47, 48, 86, 110, 121, 147, 156, 162, 171, 177, 185, 186, 187, 196, 199, 200, 201, 202, 214, 229, 230, 231, 240, 243, 244, 245, 246, 256, 264, 272, 303, 317, 325, 353, 358, 362, 377, 379, 396, 400, 401, 417, 421, 433, 434, 435, 437, 442, 447, 449, 451, 452, 454, 456, 458, 459, 460, 462, 463, 466, 467, 468, 469], "int8": [2, 18, 19, 43, 86, 110, 122, 123, 124, 130, 132, 133, 134, 135, 142, 147, 161, 162, 181, 182, 210, 253, 259, 260, 261, 313, 315, 374, 376, 389, 390, 396, 400, 401, 416, 418, 422, 427, 434, 435, 439, 442, 444, 445, 448, 454, 461, 462, 463, 464, 465, 466, 467, 468, 471], "onnx": [2, 14, 15, 16, 29, 41, 43, 86, 110, 141, 160, 181, 182, 193, 237, 259, 260, 261, 325, 332, 352, 388, 399, 400, 402, 417, 420, 424, 425, 427, 428, 430, 435, 436, 439, 444, 445, 460, 461, 464, 466, 469], "qdq": [2, 42, 86, 110, 111, 112, 141, 156, 181, 182, 259, 260, 261, 400, 420, 425, 430, 444, 445, 462, 464, 466], "graph_bas": [2, 86, 110], "quantize_graph": [2, 110], "qat": [2, 110, 111, 155, 182, 273, 333, 422, 423, 430, 434, 462], "quantize_graph_bas": [2, 110, 111], "quantize_graph_bn": [2, 110, 111], "quantize_graph_concatv2": [2, 110, 111], "quantize_graph_conv": [2, 110, 111], "quantize_graph_for_intel_cpu": [2, 110, 111], "quantize_graph_matmul": [2, 110, 111], "quantize_graph_pool": [2, 110, 111], "transform_graph": [2, 110], "bias_correct": [2, 110, 144], "graph_transform_bas": [2, 110, 144], "insert_log": [2, 110, 144], "rerange_quantized_concat": [2, 110, 144], "graph_convert": [2, 110], "graph_converter_without_calib": [2, 110], "graph_util": [2, 110], "quantize_graph_common": [2, 110], "smooth_quant_calibr": [2, 110], "smooth_quant_scal": [2, 110], "tf2onnx_convert": [2, 110], "torch_util": [2, 218, 263, 316, 466], "bf16_convert": [2, 50, 86, 110, 150], "hawq_metr": [2, 150], "model_wrapp": [2, 15, 150], "pattern_detector": [2, 150], "symbolic_trac": [2, 150], "tensorflow": [2, 50, 52, 74, 75, 76, 86, 94, 100, 101, 102, 103, 104, 105, 109, 110, 111, 113, 116, 129, 139, 140, 141, 144, 147, 181, 182, 196, 197, 198, 199, 202, 204, 206, 214, 216, 221, 240, 241, 242, 243, 246, 248, 250, 256, 260, 261, 262, 265, 267, 271, 272, 273, 299, 307, 318, 320, 324, 325, 333, 351, 352, 356, 357, 358, 368, 390, 397, 399, 400, 417, 420, 421, 422, 424, 427, 428, 430, 431, 434, 435, 436, 444, 445, 459, 460, 461, 465, 466, 469, 471], "kerasadaptor": 3, "mxnetadaptor": 11, "do": [11, 14, 163, 181, 182, 196, 197, 240, 241, 257, 261, 264, 267, 297, 317, 320, 389, 394, 418, 423, 427, 430, 433, 434, 449, 452, 459, 463, 464, 466, 469], "inspect": [11, 14, 464, 467], "tensor": [11, 13, 14, 15, 16, 43, 69, 104, 147, 149, 156, 167, 173, 174, 175, 182, 214, 256, 259, 261, 294, 296, 306, 333, 367, 390, 396, 401, 417, 418, 420, 459, 462, 464, 467, 468, 469], "dict": [11, 13, 14, 44, 115, 147, 148, 149, 156, 157, 162, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 196, 215, 221, 229, 230, 240, 259, 261, 266, 267, 268, 269, 271, 274, 277, 278, 279, 286, 289, 291, 294, 295, 296, 297, 298, 303, 306, 312, 315, 319, 320, 321, 322, 324, 325, 333, 358, 373, 376, 377, 379, 380, 382, 389, 390, 396, 425, 433, 459, 461, 462, 466, 467, 469], "specif": [11, 14, 42, 45, 103, 115, 162, 177, 181, 182, 197, 198, 199, 200, 204, 206, 221, 241, 242, 243, 244, 248, 250, 273, 280, 281, 283, 284, 285, 324, 358, 387, 394, 397, 400, 417, 420, 421, 427, 429, 433, 434, 435, 436, 437, 441, 442, 444, 448, 454, 456, 459, 461, 469, 471], "configur": [11, 13, 14, 44, 117, 148, 156, 162, 177, 178, 181, 182, 185, 186, 188, 199, 202, 215, 220, 229, 230, 243, 246, 257, 261, 262, 273, 274, 275, 277, 286, 291, 295, 299, 300, 306, 324, 325, 335, 358, 367, 379, 381, 382, 388, 389, 396, 397, 400, 418, 420, 434, 441, 455, 456, 459, 462, 464, 468, 469, 472], "mxnet": [12, 13, 16, 182, 192, 196, 199, 202, 206, 214, 236, 240, 243, 246, 250, 256, 262, 271, 299, 324, 325, 330, 358, 399, 400, 417, 424, 427, 430, 431, 434, 435, 436, 461, 469, 471], "init": [12, 17, 42, 159, 165, 168, 170, 418, 433, 469], "optyp": [13, 181, 182, 259], "enum": 13, "type": [13, 16, 42, 43, 44, 73, 95, 104, 115, 121, 131, 139, 147, 148, 149, 156, 157, 164, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 195, 197, 199, 206, 214, 216, 221, 239, 241, 243, 250, 256, 264, 265, 267, 271, 278, 285, 289, 294, 296, 298, 303, 309, 313, 315, 317, 318, 320, 324, 333, 335, 362, 363, 370, 374, 376, 377, 389, 390, 395, 400, 418, 420, 423, 425, 427, 430, 434, 435, 455, 462, 465, 468, 469, 470, 471], "isiter": 13, "obj": [13, 104, 177, 196, 226, 240, 257, 262, 273, 274, 275, 277, 286, 291, 295, 299, 325, 335, 358, 379, 382, 390], "bool": [13, 42, 140, 147, 155, 156, 173, 181, 182, 197, 199, 210, 214, 241, 243, 253, 256, 261, 265, 271, 294, 312, 318, 324, 373, 377, 389, 390, 417, 418, 433, 461, 468], "check": [13, 66, 67, 104, 147, 156, 177, 188, 199, 243, 259, 295, 389, 390, 395, 399, 420, 423, 431, 438, 440, 442, 449, 452, 453, 464], "whether": [13, 104, 115, 147, 173, 181, 182, 195, 197, 210, 214, 239, 241, 253, 256, 265, 267, 271, 294, 318, 320, 324, 382, 389, 390, 400, 418, 433, 462, 466, 468], "object": [13, 42, 43, 44, 73, 85, 104, 115, 131, 148, 149, 155, 156, 162, 163, 167, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 197, 198, 199, 214, 215, 217, 226, 229, 230, 231, 241, 242, 243, 256, 257, 262, 267, 275, 277, 280, 281, 283, 284, 285, 286, 291, 294, 295, 296, 297, 298, 299, 303, 316, 320, 324, 325, 333, 334, 352, 357, 358, 362, 376, 379, 382, 389, 390, 396, 397, 406, 416, 417, 418, 426, 433, 434, 436, 457, 459, 461, 462, 468, 469, 470, 472], "i": [13, 43, 44, 47, 48, 52, 53, 56, 59, 63, 69, 81, 84, 104, 131, 142, 147, 149, 151, 155, 156, 161, 162, 163, 167, 171, 172, 174, 175, 177, 181, 182, 185, 186, 187, 195, 196, 197, 198, 199, 200, 201, 204, 206, 210, 214, 215, 217, 221, 223, 224, 229, 230, 231, 239, 240, 241, 242, 243, 244, 245, 248, 250, 253, 256, 264, 267, 269, 271, 273, 278, 286, 291, 295, 296, 300, 307, 317, 320, 322, 324, 325, 335, 341, 342, 346, 358, 363, 368, 377, 379, 389, 390, 394, 395, 396, 397, 400, 401, 402, 404, 408, 411, 414, 416, 417, 418, 420, 421, 422, 423, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 447, 448, 449, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472], "iter": [13, 15, 104, 139, 147, 162, 172, 174, 176, 181, 182, 185, 186, 190, 195, 199, 200, 217, 229, 230, 234, 239, 243, 244, 296, 298, 325, 358, 379, 382, 396, 397, 400, 416, 417, 418, 434, 459, 461, 462, 467, 469, 471], "return": [13, 16, 44, 52, 66, 67, 69, 73, 104, 115, 147, 148, 149, 155, 156, 157, 162, 164, 171, 173, 174, 175, 176, 177, 179, 185, 186, 199, 206, 210, 214, 215, 216, 221, 226, 229, 230, 243, 250, 253, 256, 264, 265, 267, 268, 269, 271, 277, 278, 285, 289, 294, 295, 296, 298, 303, 309, 313, 315, 317, 318, 320, 321, 322, 324, 325, 329, 333, 335, 352, 357, 358, 362, 370, 374, 376, 377, 379, 382, 387, 389, 390, 396, 397, 401, 417, 418, 423, 433, 436, 456, 459, 462, 466, 467, 469], "true": [13, 84, 112, 145, 147, 162, 181, 182, 195, 197, 199, 200, 213, 214, 215, 239, 241, 243, 244, 255, 256, 261, 265, 271, 289, 312, 318, 324, 335, 358, 373, 377, 382, 389, 390, 417, 418, 420, 423, 427, 433, 434, 437, 440, 441, 461, 462, 466, 467, 468, 469, 471], "els": [13, 147, 182, 195, 239, 335, 387, 442, 467], "fals": [13, 15, 41, 42, 46, 47, 48, 70, 71, 88, 91, 98, 101, 102, 104, 112, 130, 135, 142, 145, 146, 147, 155, 156, 162, 164, 181, 182, 187, 189, 194, 196, 197, 199, 210, 214, 215, 216, 217, 223, 231, 233, 238, 240, 241, 243, 253, 256, 267, 271, 320, 324, 335, 358, 377, 382, 390, 400, 417, 418, 427, 433, 434, 447, 451, 461, 462, 466, 467, 468, 469, 471], "boolean": 13, "ensure_list": 13, "x": [13, 53, 73, 172, 181, 182, 196, 214, 240, 256, 303, 362, 377, 420, 423, 435, 436, 462, 466, 467, 468, 470], "ensur": [13, 214, 256, 303, 362, 423, 462, 468], "list": [13, 42, 43, 52, 104, 139, 147, 148, 149, 153, 156, 162, 171, 172, 173, 174, 181, 182, 185, 186, 190, 197, 210, 214, 215, 229, 230, 234, 241, 253, 256, 260, 261, 264, 265, 267, 268, 269, 271, 278, 286, 291, 294, 297, 312, 317, 318, 320, 321, 322, 324, 325, 333, 341, 342, 346, 358, 373, 377, 379, 380, 390, 396, 399, 400, 418, 425, 427, 431, 434, 437, 442, 444, 447, 448, 451, 456, 459, 461, 462, 463, 466, 467, 469], "input": [13, 15, 42, 43, 44, 52, 59, 63, 66, 67, 69, 70, 71, 73, 81, 82, 84, 85, 104, 108, 109, 115, 121, 140, 147, 148, 154, 155, 156, 160, 171, 172, 181, 182, 185, 186, 197, 198, 199, 201, 210, 213, 214, 219, 229, 230, 241, 242, 243, 245, 253, 255, 256, 259, 260, 261, 324, 325, 329, 333, 358, 379, 387, 389, 390, 397, 400, 416, 417, 418, 420, 421, 422, 423, 425, 427, 429, 433, 434, 435, 436, 437, 442, 459, 461, 462, 466, 467, 468, 471], "check_mx_vers": 13, "version": [13, 52, 103, 156, 171, 182, 260, 261, 316, 394, 396, 400, 427, 431, 432, 434, 447, 449, 451, 452, 458, 460, 466, 469, 470], "str": [13, 42, 139, 148, 149, 153, 154, 155, 156, 157, 164, 171, 181, 182, 197, 198, 199, 206, 210, 214, 216, 220, 221, 241, 242, 243, 250, 253, 256, 260, 261, 264, 265, 267, 269, 271, 278, 289, 312, 315, 317, 318, 320, 322, 324, 343, 351, 353, 356, 357, 373, 376, 377, 382, 387, 390, 391, 417, 418, 433, 461, 467, 468], "mx": 13, "__version__": 13, "combine_cap": 13, "current": [13, 69, 103, 154, 167, 171, 173, 174, 181, 182, 273, 280, 281, 283, 284, 285, 294, 296, 303, 307, 362, 368, 390, 396, 397, 400, 401, 423, 427, 434, 437, 441, 454, 456, 459, 462, 466, 469], "new": [13, 16, 147, 154, 162, 187, 199, 214, 215, 231, 243, 256, 295, 335, 395, 423, 434, 435, 448, 454, 455, 459, 460, 462, 464, 465, 468, 470, 471], "combin": [13, 156, 181, 182, 185, 186, 210, 224, 229, 230, 253, 325, 358, 379, 390, 396, 400, 430, 434, 457, 460, 462, 463, 468, 469], "capabl": [13, 46, 313, 374, 401, 416, 427, 434, 435, 445, 459, 461, 462, 469, 471], "contain": [13, 66, 67, 69, 73, 138, 147, 149, 156, 162, 163, 171, 173, 174, 176, 177, 181, 182, 185, 186, 197, 198, 199, 229, 230, 241, 242, 243, 257, 261, 262, 267, 268, 269, 273, 286, 289, 291, 294, 295, 296, 297, 298, 299, 320, 321, 322, 325, 358, 379, 382, 389, 418, 421, 430, 433, 455, 459, 467, 469, 470], "make_nc_model": 13, "target": [13, 42, 43, 101, 171, 176, 177, 182, 295, 298, 303, 362, 418, 423, 434, 459, 467, 468, 469, 471], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 47, 48, 49, 51, 52, 53, 54, 55, 65, 73, 85, 98, 99, 101, 102, 103, 104, 130, 135, 141, 148, 156, 171, 181, 182, 197, 210, 213, 214, 241, 253, 255, 256, 260, 267, 273, 295, 313, 320, 374, 377, 396, 434, 435, 439, 462, 463, 466, 468, 469], "symbol": [13, 148, 155, 156, 264, 317, 325, 358, 396, 436], "model": [13, 15, 16, 29, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 117, 139, 140, 141, 147, 148, 149, 151, 153, 154, 155, 156, 160, 162, 163, 169, 171, 174, 176, 177, 181, 182, 185, 186, 193, 196, 197, 199, 214, 215, 218, 219, 226, 229, 230, 237, 240, 241, 243, 256, 257, 259, 260, 261, 262, 263, 271, 272, 273, 274, 277, 280, 281, 283, 284, 285, 286, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 316, 324, 325, 335, 351, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 376, 377, 379, 385, 387, 389, 390, 392, 396, 397, 399, 400, 401, 406, 416, 417, 418, 420, 421, 422, 423, 424, 429, 430, 432, 433, 435, 437, 442, 444, 445, 448, 454, 456, 457, 458, 460, 462, 464, 465, 467, 468, 469, 470, 471], "an": [13, 66, 67, 69, 104, 140, 142, 149, 156, 161, 174, 181, 182, 190, 195, 199, 214, 218, 223, 234, 239, 243, 256, 263, 264, 268, 269, 277, 278, 300, 316, 317, 321, 322, 325, 352, 357, 358, 377, 379, 390, 392, 394, 396, 397, 399, 400, 401, 417, 418, 419, 420, 425, 433, 434, 435, 437, 441, 442, 445, 454, 456, 459, 460, 462, 465, 466, 467, 468, 469], "neural": [13, 149, 162, 163, 173, 181, 182, 209, 210, 211, 214, 215, 218, 221, 224, 253, 254, 256, 258, 263, 270, 271, 273, 286, 291, 294, 297, 299, 300, 305, 311, 316, 323, 324, 325, 329, 336, 358, 365, 366, 372, 387, 392, 395, 400, 401, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 435, 436, 438, 439, 442, 444, 445, 447, 449, 451, 452, 453, 456, 457, 460, 462, 464, 466, 467, 468, 469, 471, 472], "compressor": [13, 162, 163, 173, 181, 182, 209, 210, 211, 214, 215, 218, 221, 224, 253, 254, 256, 258, 263, 270, 271, 273, 294, 297, 299, 300, 305, 311, 316, 323, 324, 325, 329, 336, 358, 366, 372, 387, 392, 395, 397, 400, 401, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 435, 436, 437, 438, 442, 444, 445, 447, 449, 451, 452, 453, 456, 457, 459, 460, 462, 464, 466, 467, 468, 469, 470, 471, 472], "tupl": [13, 104, 147, 156, 182, 185, 186, 210, 214, 229, 230, 253, 256, 261, 312, 325, 358, 373, 379, 418, 433, 434, 462, 468], "symnet": 13, "arg": [13, 52, 104, 197, 198, 199, 241, 242, 243, 294, 303, 362, 377, 385, 386, 418, 423, 434, 443, 462, 466, 467, 468], "aux": 13, "data": [13, 42, 43, 54, 104, 139, 147, 149, 154, 156, 160, 171, 181, 182, 185, 186, 215, 217, 229, 230, 263, 303, 313, 315, 316, 325, 351, 356, 358, 362, 374, 376, 379, 382, 387, 390, 399, 400, 417, 418, 423, 427, 428, 431, 433, 434, 435, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472], "descript": [13, 131, 377, 395, 396, 401, 417, 466], "ncmodel": 13, "fuse": [13, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 95, 130, 135, 155, 156, 160, 396, 466, 467], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 66, 67, 69, 103, 104, 147, 154, 156, 162, 167, 169, 171, 173, 174, 175, 176, 179, 182, 190, 214, 215, 221, 223, 234, 256, 294, 296, 298, 306, 313, 315, 324, 333, 358, 367, 374, 376, 382, 390, 426, 430, 431, 434, 440, 466, 469, 470, 473], "name": [13, 43, 44, 52, 66, 67, 69, 103, 104, 109, 115, 139, 147, 148, 149, 154, 155, 156, 157, 162, 167, 171, 173, 174, 175, 176, 179, 181, 182, 197, 198, 199, 202, 206, 212, 214, 215, 219, 222, 223, 241, 242, 243, 246, 250, 256, 259, 260, 261, 266, 271, 289, 294, 296, 298, 313, 315, 319, 324, 329, 333, 335, 358, 374, 376, 380, 382, 390, 396, 401, 418, 420, 423, 425, 427, 432, 433, 434, 436, 440, 447, 451, 455, 458, 459, 462, 464, 465, 467, 469, 471, 472], "context": [13, 390, 461], "prepare_model_data": 13, "nc_model": [13, 286, 291], "data_x": 13, "prepar": [13, 156, 396, 399, 418, 423, 428, 462], "dataload": [13, 15, 42, 139, 140, 149, 154, 156, 162, 169, 171, 185, 186, 197, 208, 218, 229, 230, 241, 252, 257, 263, 286, 291, 300, 316, 351, 356, 358, 379, 382, 396, 399, 400, 420, 421, 422, 423, 428, 429, 434, 435, 457, 462, 463, 466, 467, 468, 470, 471], "need": [13, 42, 104, 108, 154, 162, 171, 182, 185, 186, 187, 195, 196, 199, 206, 214, 217, 219, 220, 229, 230, 231, 239, 240, 243, 250, 256, 300, 306, 324, 325, 335, 358, 367, 379, 389, 390, 396, 400, 417, 418, 420, 421, 423, 430, 434, 437, 439, 440, 443, 447, 448, 449, 451, 452, 454, 455, 459, 461, 462, 463, 464, 466, 468, 469, 471], "run": [13, 139, 147, 162, 174, 177, 181, 182, 185, 186, 196, 213, 215, 229, 230, 240, 255, 295, 296, 303, 325, 358, 362, 379, 395, 400, 416, 423, 426, 427, 434, 437, 439, 441, 442, 443, 445, 447, 448, 449, 451, 452, 454, 460, 462, 464, 465, 467, 469, 471], "loader": [13, 139, 185, 186, 229, 230, 325, 358, 379, 385, 417, 462], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 104, 181, 182, 187, 197, 199, 217, 231, 241, 243, 267, 277, 278, 313, 320, 352, 357, 374, 377, 382, 394, 397, 400, 418, 436, 447, 449, 451, 452, 455, 462, 465, 467, 469, 470], "exampl": [13, 149, 156, 162, 171, 172, 181, 182, 197, 198, 199, 210, 214, 241, 242, 243, 253, 256, 267, 268, 269, 271, 297, 320, 321, 322, 324, 325, 335, 358, 377, 379, 394, 395, 399, 401, 406, 429, 430, 437, 440, 441, 442, 445, 463, 464, 468, 469, 470, 473], "prepare_dataload": 13, "io": 13, "ndarray_to_devic": 13, "ndarrai": [13, 42, 66, 67, 69, 214, 256, 380, 426, 468], "devic": [13, 78, 88, 89, 90, 91, 92, 93, 96, 106, 130, 135, 146, 171, 172, 181, 182, 417, 421, 434, 435, 437, 440, 445, 454, 461], "is_model_quant": 13, "query_quantizable_nod": 13, "queri": [13, 46, 147, 156, 171, 174, 181, 182, 401, 462], "node": [13, 42, 43, 49, 52, 53, 54, 55, 59, 61, 63, 66, 67, 69, 73, 76, 79, 81, 82, 83, 97, 101, 102, 104, 109, 131, 139, 147, 171, 259, 333, 357, 400, 420, 423, 467, 469], "given": [13, 16, 66, 67, 69, 103, 104, 115, 147, 156, 214, 256, 267, 320, 358, 397, 401, 459, 466, 468], "map": [13, 43, 104, 147, 182, 214, 256, 259, 262, 266, 268, 269, 271, 286, 291, 296, 299, 319, 321, 322, 324, 418, 423, 433, 434, 447, 451, 459, 462], "quantize_sym_model": 13, "qconfig": [13, 467], "accord": [13, 121, 156, 162, 181, 182, 197, 198, 199, 214, 241, 242, 243, 256, 306, 365, 367, 382, 397, 400, 418, 423, 459, 463, 466, 468, 469], "run_forward": 13, "b_filter": 13, "collector": [13, 149, 380], "none": [13, 41, 43, 44, 46, 47, 48, 62, 88, 101, 103, 104, 109, 115, 141, 147, 149, 151, 154, 156, 162, 163, 164, 169, 171, 173, 177, 178, 179, 181, 182, 185, 186, 187, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 210, 214, 215, 216, 217, 224, 226, 229, 230, 231, 233, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 253, 256, 257, 260, 261, 262, 267, 271, 272, 273, 274, 277, 286, 291, 295, 299, 301, 302, 303, 304, 306, 307, 308, 309, 313, 320, 324, 325, 335, 351, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 374, 377, 379, 380, 382, 387, 389, 390, 400, 417, 418, 433, 462, 467, 468, 469], "pre_batch": 13, "post_batch": 13, "forward": [13, 399, 434, 459, 461, 462, 466, 467], "propag": [13, 99], "filter": [13, 197, 198, 199, 200, 201, 202, 204, 208, 241, 242, 243, 244, 245, 246, 248, 252, 263, 316, 390, 401, 418, 430, 459, 467], "which": [13, 42, 54, 82, 109, 149, 154, 167, 171, 172, 173, 174, 176, 177, 181, 182, 197, 198, 199, 210, 215, 241, 242, 243, 253, 264, 269, 278, 280, 281, 283, 284, 285, 289, 294, 295, 296, 298, 303, 317, 322, 324, 329, 335, 358, 362, 390, 394, 396, 397, 400, 401, 417, 418, 420, 421, 423, 426, 427, 430, 433, 434, 435, 436, 438, 442, 445, 448, 454, 455, 457, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471], "batch": [13, 156, 187, 189, 190, 195, 196, 217, 231, 233, 234, 239, 240, 379, 417, 421, 422, 434, 457, 459, 468, 469, 472], "infer": [13, 104, 171, 262, 299, 333, 335, 358, 379, 400, 421, 422, 434, 435, 454, 456, 459, 460, 462, 466, 467, 469], "collect": [13, 16, 43, 212, 214, 217, 219, 220, 222, 256, 269, 271, 322, 324, 380, 390, 462, 467, 469], "inform": [13, 149, 167, 171, 173, 174, 175, 176, 177, 182, 185, 186, 217, 219, 220, 229, 230, 294, 296, 297, 298, 300, 324, 390, 394, 395, 398, 399, 400, 401, 402, 404, 408, 411, 414, 421, 427, 434, 436, 449, 452, 455, 459, 463, 464, 467, 471, 472, 473], "dure": [13, 139, 173, 176, 181, 182, 294, 298, 335, 390, 420, 434, 436, 456, 457, 459, 462, 466, 467, 471], "call": [13, 42, 154, 157, 171, 174, 267, 296, 320, 396, 397, 400, 417, 429, 443, 445, 455, 462, 466, 467, 468], "prior": [13, 87, 469], "after": [13, 77, 156, 169, 173, 174, 181, 182, 197, 210, 214, 217, 241, 253, 256, 296, 363, 377, 390, 397, 418, 420, 421, 422, 425, 430, 433, 434, 447, 448, 451, 455, 456, 457, 459, 462, 463, 465, 466, 467, 468, 469, 472], "count": [13, 397, 418], "int": [13, 16, 42, 43, 104, 139, 147, 153, 156, 169, 181, 182, 196, 197, 198, 210, 214, 240, 241, 242, 253, 256, 260, 261, 265, 267, 271, 278, 318, 320, 324, 343, 352, 357, 377, 390, 417, 418, 433, 434, 461, 468], "make_symbol_block": 13, "gluon": [13, 325, 358, 436], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 147, 148, 156, 400, 401, 469], "quantizable_nod": 13, "strategi": [13, 156, 174, 181, 182, 183, 199, 227, 243, 263, 316, 399, 400, 401, 406, 417, 423, 430, 434, 442, 454, 460, 461, 462, 463, 464, 470, 471], "config": [13, 114, 115, 117, 121, 156, 162, 167, 169, 173, 174, 175, 176, 177, 181, 185, 186, 197, 226, 229, 230, 241, 280, 281, 283, 284, 285, 286, 291, 294, 295, 296, 297, 298, 313, 314, 316, 325, 352, 357, 374, 375, 377, 379, 382, 389, 390, 397, 399, 401, 406, 416, 417, 420, 421, 422, 423, 425, 428, 430, 433, 434, 435, 436, 457, 459, 461, 462, 463, 465, 467, 469], "tune": [13, 44, 162, 181, 182, 185, 186, 197, 199, 229, 230, 241, 243, 262, 299, 301, 302, 303, 304, 306, 307, 308, 309, 312, 313, 314, 315, 325, 335, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 379, 390, 400, 417, 418, 420, 423, 430, 432, 434, 435, 454, 456, 459, 460, 463, 464, 465, 467, 471], "from": [13, 43, 44, 60, 66, 67, 69, 104, 147, 154, 156, 162, 163, 164, 167, 173, 174, 175, 176, 177, 181, 182, 185, 186, 187, 190, 194, 197, 198, 199, 200, 201, 202, 204, 209, 210, 216, 217, 220, 229, 230, 231, 234, 238, 241, 242, 243, 244, 245, 246, 248, 253, 257, 259, 260, 261, 264, 267, 268, 269, 273, 278, 294, 295, 296, 298, 313, 315, 317, 320, 321, 322, 325, 333, 335, 358, 374, 376, 377, 379, 382, 389, 390, 394, 396, 397, 400, 401, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 428, 430, 433, 435, 436, 437, 441, 442, 443, 445, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 142, 161, 181, 182, 187, 189, 190, 194, 195, 196, 217, 231, 233, 234, 238, 239, 240, 384, 399, 417, 421, 431, 449, 452, 460, 462, 464, 466, 470, 472], "depend": [13, 185, 186, 215, 229, 230, 325, 358, 379, 395, 426, 427, 461, 462, 469], "algorithm": [13, 156, 178, 264, 271, 279, 316, 317, 324, 382, 384, 397, 400, 401, 421, 422, 427, 430, 443, 448, 459, 462, 467, 471], "set": [13, 43, 56, 95, 104, 114, 147, 154, 156, 162, 177, 179, 181, 182, 185, 186, 187, 197, 199, 202, 214, 215, 220, 221, 229, 230, 231, 241, 243, 246, 256, 267, 273, 286, 291, 295, 300, 320, 324, 325, 333, 357, 358, 377, 379, 387, 390, 394, 397, 416, 417, 418, 421, 423, 425, 427, 429, 430, 431, 433, 434, 435, 437, 439, 441, 455, 459, 461, 462, 465, 466, 469, 471], "kl": [13, 16, 181, 182, 380, 384, 401, 427, 434, 469, 471], "minmax": [13, 16, 401, 427, 462, 471], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 158, 380, 384, 433], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 96, 103, 154, 160, 164, 173, 174, 181, 182, 185, 186, 196, 197, 199, 206, 210, 214, 216, 217, 218, 221, 226, 229, 230, 240, 241, 243, 250, 253, 256, 263, 271, 273, 278, 294, 296, 300, 307, 313, 316, 324, 325, 329, 335, 358, 368, 374, 377, 379, 382, 384, 390, 392, 399, 434, 437, 442, 445, 448, 454, 460, 463, 465, 469, 470], "amp": [13, 437, 444, 458], "wrap": [13, 104, 115, 164, 216, 267, 320, 396, 423, 449, 452], "dataiterload": 13, "data_it": [13, 171], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 380], "8001": [13, 380], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 114, 157, 158, 160, 161, 174, 274, 277, 328, 330, 332, 333, 334, 400, 401, 431, 436, 447, 449, 451, 452, 455, 460, 465, 469], "up": [13, 99, 174, 214, 256, 295, 423, 424, 427, 430, 445, 449, 452, 454, 460, 461, 462, 465, 468, 469, 471], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_qlinearopsadaptor": [14, 400], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 139], "white_nod": 15, "backend": [15, 41, 42, 45, 160, 181, 182, 183, 184, 188, 189, 193, 197, 198, 200, 201, 202, 203, 204, 208, 211, 214, 220, 221, 227, 228, 232, 233, 235, 237, 241, 242, 244, 245, 246, 247, 248, 252, 254, 256, 272, 307, 325, 326, 327, 329, 368, 396, 401, 420, 423, 429, 430, 434, 435, 443, 461, 468, 471], "cpuexecutionprovid": [15, 41, 42, 435, 462], "reduce_rang": [15, 41, 42, 181, 182, 401, 461], "augment": 15, "dump": [15, 162, 261, 390, 462, 464, 467], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 390], "percentil": [16, 139], "99": [16, 466, 472], "999": [16, 471, 472], "option": [16, 104, 173, 181, 182, 185, 186, 197, 214, 229, 230, 241, 256, 260, 261, 267, 273, 294, 300, 313, 316, 320, 324, 325, 358, 374, 377, 379, 383, 390, 401, 417, 418, 427, 431, 434, 448, 459, 462, 465, 468, 469, 471], "number": [16, 66, 67, 104, 139, 156, 169, 173, 181, 182, 195, 198, 210, 214, 239, 242, 253, 256, 268, 269, 271, 294, 303, 321, 322, 324, 352, 357, 362, 377, 382, 390, 416, 417, 418, 423, 433, 459, 462, 465, 468, 469], "bin": [16, 390, 426], "histogram": [16, 380, 390, 467], "valu": [16, 43, 54, 66, 67, 69, 88, 89, 104, 142, 147, 156, 161, 162, 167, 171, 172, 174, 177, 178, 179, 181, 182, 185, 186, 197, 200, 201, 210, 214, 215, 229, 230, 241, 244, 245, 253, 256, 267, 271, 295, 303, 306, 313, 320, 324, 325, 358, 362, 367, 374, 377, 379, 380, 382, 390, 396, 401, 418, 420, 427, 433, 434, 435, 440, 456, 459, 461, 462, 464, 466, 468, 469, 471], "default": [16, 96, 147, 177, 179, 181, 182, 185, 186, 189, 197, 198, 199, 210, 214, 229, 230, 233, 241, 242, 243, 253, 256, 260, 261, 264, 273, 295, 315, 317, 324, 333, 376, 382, 390, 396, 400, 417, 418, 427, 430, 431, 433, 434, 435, 442, 445, 447, 451, 456, 459, 461, 462, 463, 465, 466, 468, 469, 471], "float": [16, 43, 139, 140, 149, 173, 174, 175, 177, 181, 182, 197, 210, 241, 253, 265, 267, 268, 269, 296, 318, 320, 321, 322, 377, 387, 390, 418, 433, 461, 462, 466, 468], "A": [16, 53, 73, 74, 102, 115, 139, 140, 147, 156, 163, 167, 171, 173, 174, 175, 176, 177, 181, 182, 199, 214, 217, 219, 220, 226, 243, 256, 257, 264, 267, 268, 269, 271, 274, 277, 278, 279, 286, 289, 291, 294, 295, 296, 297, 298, 303, 317, 320, 321, 322, 324, 325, 329, 333, 362, 379, 390, 417, 418, 424, 427, 433, 434, 436, 447, 448, 451, 454, 459, 460, 462, 466, 468, 469, 471], "between": [16, 42, 142, 161, 174, 181, 182, 214, 256, 268, 271, 321, 324, 352, 357, 390, 396, 400, 401, 420, 421, 430, 433, 434, 445, 462, 464, 465, 466, 468, 469], "0": [16, 43, 52, 89, 104, 147, 156, 158, 160, 164, 169, 181, 182, 187, 189, 194, 196, 197, 200, 201, 204, 210, 214, 216, 217, 231, 233, 238, 240, 241, 244, 245, 248, 253, 256, 261, 262, 271, 278, 286, 291, 299, 324, 335, 358, 363, 377, 396, 417, 418, 421, 423, 425, 426, 427, 431, 432, 433, 434, 435, 440, 442, 447, 451, 458, 459, 461, 462, 464, 465, 466, 467, 468, 469, 471], "100": [16, 162, 181, 182, 199, 243, 377, 416, 418, 423, 429, 434, 461, 462, 466, 468, 469, 471, 472], "klcalibr": 16, "128": [16, 197, 200, 201, 214, 241, 244, 245, 256, 418, 434, 462, 468], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 455], "ep": [16, 161, 435], "0001": [16, 181, 182, 421, 434, 461], "smooth": [16, 139, 140, 147, 154, 160, 181, 182, 312, 459], "discret": [16, 469], "mai": [16, 147, 280, 281, 283, 284, 285, 377, 394, 395, 399, 420, 425, 426, 432, 435, 447, 451, 458, 460, 462, 469], "have": [16, 73, 82, 140, 147, 172, 173, 174, 195, 217, 239, 264, 267, 294, 296, 317, 320, 324, 358, 376, 377, 394, 395, 401, 417, 418, 420, 423, 427, 432, 433, 434, 435, 437, 454, 456, 459, 462, 466, 469, 470], "been": [16, 173, 174, 264, 294, 296, 317, 395, 397, 401, 421, 434, 435, 454, 466], "normal": [16, 33, 214, 256, 269, 322, 434, 456, 466, 468], "1": [16, 42, 43, 53, 73, 88, 104, 108, 112, 145, 147, 154, 156, 158, 160, 161, 162, 164, 174, 181, 182, 187, 189, 194, 196, 197, 198, 200, 201, 204, 205, 210, 214, 215, 216, 217, 231, 233, 238, 240, 241, 242, 244, 245, 248, 249, 253, 256, 262, 267, 268, 269, 271, 286, 291, 296, 299, 300, 320, 321, 322, 324, 335, 358, 377, 382, 394, 396, 399, 400, 401, 417, 418, 420, 421, 425, 427, 428, 431, 433, 435, 438, 440, 456, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471], "replac": [16, 154, 269, 322, 423, 434, 445, 464], "zero": [16, 43, 174, 177, 214, 256, 296, 390, 399, 459, 462, 466, 468, 469], "multipli": 16, "scale": [16, 43, 99, 140, 142, 154, 156, 160, 161, 210, 214, 253, 256, 462, 465, 466, 468, 469], "factor": [16, 140, 458, 466, 472], "take": [16, 173, 182, 185, 186, 190, 214, 219, 229, 230, 234, 256, 294, 303, 324, 325, 358, 362, 379, 394, 396, 397, 417, 420, 421, 427, 434, 454, 459, 462, 463, 468, 469, 471], "correspond": [16, 149, 171, 174, 181, 182, 197, 241, 264, 267, 271, 317, 320, 324, 382, 390, 400, 427, 434, 459, 461, 462, 465, 466, 469], "amount": 16, "off": [16, 66, 67, 69, 395], "non": [16, 295, 390, 396, 420, 458, 469], "ref": [16, 147], "http": [16, 149, 167, 173, 174, 197, 199, 241, 243, 264, 265, 267, 268, 269, 294, 296, 297, 317, 318, 320, 321, 322, 324, 358, 396, 399, 418, 420, 428, 431, 432, 434, 443, 449, 452, 464], "hanj": 16, "c": [16, 73, 199, 243, 418, 426, 431, 469], "illinoi": 16, "edu": [16, 199, 243, 418], "cs412": 16, "bk3": 16, "diverg": [16, 380, 384, 401, 421, 469], "pdf": 16, "github": [16, 149, 173, 197, 241, 264, 265, 268, 269, 294, 297, 317, 318, 321, 322, 324, 358, 395, 418, 420, 424, 431, 432, 434, 443, 449, 452, 464], "com": [16, 149, 173, 197, 241, 264, 265, 268, 269, 294, 297, 317, 318, 321, 322, 324, 358, 394, 399, 418, 420, 428, 431, 432, 434, 437, 443, 464, 465, 472], "apach": [16, 432], "incub": 16, "blob": [16, 149, 173, 264, 265, 268, 269, 294, 317, 318, 321, 322, 324, 358, 434, 443], "master": [16, 173, 264, 265, 268, 269, 294, 297, 317, 318, 321, 322, 324, 358, 434, 469], "python": [16, 74, 147, 199, 218, 243, 263, 316, 377, 390, 392, 395, 396, 418, 420, 423, 426, 431, 434, 439, 445, 448, 454, 460, 468], "contrib": [16, 263, 316], "py": [16, 147, 149, 162, 174, 181, 182, 265, 267, 268, 269, 296, 318, 320, 321, 322, 377, 396, 400, 420, 423, 431, 434, 439, 441, 442, 443, 449, 452, 462, 464, 467], "microsoft": [16, 400], "onnxruntim": [16, 181, 182, 193, 199, 206, 237, 243, 250, 272, 352, 400, 430, 431, 435, 461], "main": [16, 174, 221, 297, 396, 417, 420, 423, 434, 441, 443, 455, 459, 462], "tool": [16, 147, 260, 390, 399, 400, 434, 447, 451, 459, 460, 462], "arrai": [16, 43, 147, 214, 256, 267, 278, 320, 390, 468], "small": [16, 66, 67, 68, 365, 397, 459, 469], "probabl": [16, 181, 182, 384], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 86, 100, 110], "removableactivationoper": 18, "remov": [18, 43, 55, 56, 59, 73, 79, 82, 83, 84, 95, 97, 139, 169, 174, 269, 322, 394, 395, 434, 447, 451, 459, 467], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 104, 115, 147, 164, 174, 185, 186, 194, 197, 216, 229, 230, 238, 241, 295, 296, 313, 358, 374, 379, 397, 401, 418, 433, 453, 459, 462, 466, 469], "qoper": [18, 34, 181, 182], "format": [18, 43, 52, 147, 181, 182, 197, 198, 199, 241, 242, 243, 261, 267, 273, 313, 320, 374, 377, 401, 418, 423, 425, 433, 434, 435, 436, 437, 462, 464], "float16activationoper": 18, "float16": [18, 21, 43, 418], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 147, 271, 324, 426, 433, 449, 452, 464], "binaryoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 61, 66, 120, 396, 466], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 139, 147, 314, 375], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "q_config": [41, 261, 400], "mode": [41, 42, 43, 44, 109, 154, 206, 250, 267, 313, 320, 333, 374, 387, 390, 400, 420, 430, 447, 451, 462, 463, 469], "static": [41, 42, 46, 154, 160, 171, 182, 313, 358, 374, 400, 401, 420, 425, 430, 434, 437, 442, 443, 444, 445, 448, 454, 466, 469, 472], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 78, 130, 135, 142, 156, 161, 181, 182, 185, 186, 229, 230, 260, 261, 271, 306, 313, 324, 363, 367, 374, 382, 389, 390, 399, 400, 401, 420, 427, 428, 433, 434, 435, 444, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472], "add_qdq_pair_to_weight": [41, 181, 182, 462], "optypes_to_exclude_output_qu": [41, 181, 182, 462], "dedicated_qdq_pair": [41, 181, 182, 462], "smoothquant": [42, 154, 156, 160, 399, 460, 470], "onnxrt": [42, 43, 197, 199, 206, 214, 241, 243, 250, 256, 271, 324, 351, 388, 400, 417, 420, 435, 462], "get_quant_dequant_output": 42, "input_data": [42, 417], "output_data": 42, "loss": [42, 164, 181, 182, 216, 262, 271, 286, 291, 299, 324, 379, 420, 421, 422, 423, 424, 433, 434, 435, 445, 457, 459, 462, 466, 469, 471], "output": [42, 43, 52, 56, 58, 73, 97, 104, 109, 147, 156, 171, 172, 173, 179, 181, 182, 185, 186, 219, 223, 229, 230, 260, 261, 264, 294, 317, 324, 325, 333, 358, 379, 385, 386, 390, 396, 400, 421, 422, 423, 425, 427, 429, 433, 434, 436, 445, 454, 455, 457, 459, 461, 462, 464, 466, 467, 468, 469, 471], "numpi": [42, 43, 66, 67, 69, 104, 147, 214, 256, 267, 278, 320, 426, 468], "7": [42, 162, 181, 182, 335, 401, 416, 426, 427, 431, 434, 459, 462, 464, 466, 469, 472], "bit": [42, 181, 182, 401, 422, 435, 460, 462, 466], "execut": [42, 43, 52, 162, 174, 181, 182, 296, 300, 302, 357, 358, 359, 361, 379, 382, 389, 390, 420, 421, 422, 434, 435, 439, 440, 447, 448, 451, 454, 455, 457, 459, 462, 465, 469, 472], "provid": [42, 43, 101, 104, 109, 171, 185, 186, 214, 229, 230, 256, 262, 267, 286, 291, 299, 300, 320, 325, 358, 379, 383, 385, 397, 399, 400, 401, 416, 417, 420, 422, 423, 424, 430, 431, 433, 434, 435, 436, 437, 441, 445, 448, 454, 455, 459, 461, 462, 467, 469, 470, 471, 472], "make_sub_graph": 42, "opset": [42, 101, 103, 104, 182, 260, 261, 425], "ir_vers": 42, "thi": [42, 44, 85, 109, 131, 138, 142, 146, 149, 156, 161, 163, 169, 171, 173, 174, 175, 176, 181, 182, 185, 186, 196, 197, 198, 199, 200, 201, 202, 204, 214, 217, 223, 224, 229, 230, 240, 241, 242, 243, 244, 245, 246, 248, 256, 264, 267, 268, 269, 271, 280, 281, 283, 284, 285, 286, 291, 294, 296, 298, 299, 300, 303, 306, 317, 320, 321, 322, 324, 325, 335, 358, 362, 367, 377, 379, 389, 390, 394, 395, 396, 397, 400, 401, 417, 418, 421, 422, 423, 425, 426, 427, 430, 432, 433, 434, 435, 436, 437, 439, 440, 442, 443, 445, 447, 449, 451, 452, 453, 454, 455, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470], "quant_dequant_data": 42, "qtype": [42, 43, 400], "3": [42, 147, 174, 182, 199, 214, 243, 256, 267, 320, 377, 396, 397, 399, 417, 418, 421, 423, 425, 427, 428, 431, 433, 434, 435, 437, 441, 445, 447, 451, 456, 461, 462, 464, 465, 466, 468, 469, 472], "scheme": [42, 43, 156, 400, 401, 417, 427, 445, 469, 471], "sym": [42, 43, 401, 427, 462, 471], "dequant": [42, 43, 56, 87, 90, 91, 92, 93, 95, 149, 156, 390, 396, 466, 467], "asym": [42, 43, 401, 427, 471], "ortsmoothqu": 42, "fake": [42, 112, 154, 160, 376, 434, 462, 466], "channel": [42, 43, 142, 154, 160, 161, 169, 172, 173, 181, 182, 210, 214, 253, 256, 294, 400, 401, 430, 431, 437, 439, 444, 459, 468, 472], "For": [42, 160, 171, 172, 173, 182, 199, 214, 243, 256, 268, 269, 271, 294, 297, 321, 322, 324, 325, 358, 394, 396, 398, 400, 401, 421, 422, 423, 425, 427, 430, 437, 439, 440, 442, 445, 459, 463, 466, 467, 469, 471, 472], "more": [42, 147, 154, 160, 173, 214, 256, 294, 397, 398, 399, 418, 421, 423, 425, 428, 430, 431, 434, 435, 437, 445, 449, 452, 456, 457, 459, 463, 466, 469, 470, 472], "detail": [42, 154, 160, 171, 214, 256, 390, 391, 394, 395, 399, 401, 421, 427, 428, 429, 433, 434, 435, 437, 445, 454, 459, 464, 465, 467, 469, 470, 472], "pleas": [42, 149, 154, 160, 167, 173, 174, 181, 182, 197, 198, 199, 202, 241, 242, 243, 246, 294, 296, 297, 324, 358, 377, 396, 397, 398, 399, 400, 416, 418, 422, 423, 425, 431, 433, 435, 437, 438, 442, 445, 459, 462, 463, 464, 465, 466, 470], "refer": [42, 149, 154, 160, 167, 173, 174, 177, 181, 182, 197, 241, 264, 265, 271, 294, 296, 297, 317, 318, 324, 358, 377, 396, 400, 416, 417, 418, 420, 422, 423, 425, 429, 431, 432, 433, 434, 435, 437, 442, 445, 456, 461, 464, 468, 469], "accur": [42, 154, 160, 466], "effici": [42, 154, 160, 397, 417, 421, 437, 457, 460, 466, 469], "post": [42, 96, 97, 154, 160, 174, 182, 185, 186, 229, 230, 358, 394, 399, 400, 420, 422, 423, 425, 430, 431, 437, 443, 454, 459, 460, 466, 467, 469], "train": [42, 55, 79, 154, 160, 163, 174, 181, 182, 185, 186, 197, 199, 214, 224, 229, 230, 241, 243, 256, 257, 273, 296, 316, 358, 382, 397, 399, 400, 406, 418, 420, 421, 422, 425, 430, 435, 437, 443, 454, 457, 459, 460, 465, 466, 469, 471], "larg": [42, 154, 160, 399, 417, 421, 434, 459, 460, 466, 472], "languag": [42, 154, 160, 264, 317, 394, 399, 425, 459, 460, 466], "2": [42, 43, 52, 73, 104, 108, 154, 158, 160, 162, 173, 174, 181, 182, 198, 215, 242, 267, 269, 271, 296, 303, 320, 322, 324, 335, 362, 377, 396, 400, 417, 418, 420, 421, 425, 427, 430, 431, 432, 433, 435, 456, 458, 459, 462, 464, 465, 466, 468, 469, 470], "spiq": [42, 154, 160, 466], "free": [42, 154, 160, 174, 185, 186, 229, 230, 358, 394, 399, 443, 448, 456, 465, 466], "per": [42, 43, 154, 160, 162, 181, 182, 215, 384, 400, 401, 417, 458, 463, 472], "we": [42, 43, 66, 67, 69, 73, 85, 142, 154, 160, 161, 162, 171, 173, 174, 181, 182, 196, 215, 217, 240, 264, 267, 317, 320, 365, 394, 396, 400, 401, 417, 420, 423, 425, 427, 433, 434, 441, 442, 445, 449, 452, 454, 455, 456, 457, 459, 461, 462, 464, 465, 466, 467, 469, 470], "onli": [42, 52, 62, 69, 85, 108, 114, 142, 154, 160, 161, 162, 173, 174, 181, 182, 197, 215, 217, 221, 241, 273, 294, 296, 307, 358, 368, 377, 390, 399, 400, 401, 416, 417, 420, 421, 423, 426, 427, 434, 435, 442, 455, 459, 460, 461, 462, 466, 467, 469, 471], "inplac": [42, 154], "mean": [42, 154, 173, 174, 181, 182, 210, 214, 253, 256, 269, 271, 294, 306, 322, 324, 367, 396, 401, 417, 420, 423, 427, 433, 434, 440, 459, 462, 466, 468, 469, 471], "weight": [42, 43, 59, 60, 121, 140, 142, 147, 149, 154, 161, 167, 172, 173, 174, 175, 181, 182, 294, 296, 313, 324, 358, 365, 374, 390, 391, 400, 401, 420, 422, 427, 429, 434, 456, 459, 461, 462, 466, 467, 469, 471], "chang": [42, 95, 142, 154, 161, 174, 176, 181, 182, 296, 298, 365, 390, 395, 417, 423, 426, 432, 434, 437, 447, 448, 451, 454, 459, 467, 468, 469], "you": [42, 154, 181, 182, 195, 197, 239, 241, 296, 324, 358, 395, 396, 417, 418, 420, 423, 431, 432, 433, 435, 437, 439, 440, 442, 447, 451, 454, 455, 459, 462, 464, 465, 466, 467, 470], "can": [42, 142, 149, 154, 161, 171, 172, 173, 174, 176, 181, 182, 185, 186, 196, 199, 214, 215, 217, 229, 230, 240, 243, 256, 267, 269, 271, 294, 296, 298, 320, 322, 324, 325, 335, 358, 379, 390, 396, 397, 399, 400, 401, 416, 417, 418, 420, 421, 422, 423, 425, 427, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 447, 448, 449, 451, 452, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472], "recov": [42, 154, 390, 400, 422, 466], "helper": [43, 44, 109, 115, 147, 156, 197, 198, 199, 213, 241, 242, 243, 255, 259, 260, 261, 333, 388], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 101, 104, 181, 182, 200, 201, 210, 214, 244, 245, 253, 256, 401, 418, 420, 425, 427, 437, 461, 462, 466, 467, 468, 471], "its": [43, 59, 95, 147, 149, 171, 174, 182, 193, 199, 214, 237, 243, 256, 259, 265, 266, 296, 303, 318, 319, 362, 394, 418, 421, 432, 433, 435, 445, 447, 451, 454, 455, 458, 459, 465, 468, 469], "string": [43, 44, 115, 147, 162, 164, 171, 173, 174, 175, 176, 177, 178, 181, 182, 199, 216, 221, 243, 257, 262, 264, 267, 273, 274, 275, 277, 278, 286, 291, 294, 295, 296, 297, 298, 299, 317, 320, 329, 333, 382, 387, 390, 433, 466, 468], "represent": [43, 394, 396, 422, 459, 462], "quanttyp": 43, "repres": [43, 173, 174, 175, 177, 199, 204, 243, 248, 267, 269, 271, 320, 322, 324, 394, 401, 418, 425, 459, 462, 469], "make_quant_nod": 43, "make": [43, 104, 142, 161, 173, 174, 176, 195, 239, 294, 296, 298, 390, 394, 395, 400, 416, 417, 427, 433, 434, 442, 447, 451, 454, 462, 463, 465, 466, 469], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 182], "dequantizelinear": 43, "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 73, 197, 241, 418, 433, 459, 466, 469], "transpos": [43, 72, 173, 214, 256, 260, 294, 468], "split_shared_bia": 43, "share": [43, 81, 97, 108, 140, 426, 427, 466, 469], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 435, 437, 445, 463], "cast_tensor": 43, "tensorproto": [43, 104], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 147, 149, 156, 210, 214, 253, 256, 264, 267, 268, 269, 271, 317, 320, 321, 322, 324, 338, 358, 365, 379, 389, 390, 394, 397, 399, 417, 420, 421, 423, 430, 432, 433, 434, 442, 443, 454, 455, 456, 459, 460, 462, 465, 466, 467, 468, 469, 470, 472], "quantize_data_with_scale_zero": 43, "zero_point": 43, "point": [43, 210, 253, 268, 269, 278, 303, 321, 322, 362, 390, 433, 454, 462, 466, 468, 469], "To": [43, 267, 320, 335, 395, 401, 418, 420, 423, 435, 438, 441, 447, 449, 451, 452, 461, 463, 464, 466, 469, 471], "pack": [43, 60], "comput": [43, 104, 149, 156, 264, 265, 268, 269, 271, 317, 318, 321, 322, 324, 379, 390, 417, 422, 425, 433, 434, 435, 437, 448, 459, 460, 462, 466, 469], "linear": [43, 160, 169, 171, 172, 173, 174, 177, 181, 182, 294, 396, 421, 425, 434, 459, 466, 469], "transform": [43, 49, 142, 144, 145, 146, 153, 174, 197, 198, 199, 200, 201, 202, 204, 206, 208, 241, 242, 243, 244, 245, 246, 248, 250, 252, 263, 316, 396, 397, 418, 421, 422, 423, 424, 428, 434, 437, 442, 443, 444, 445, 459, 460, 463, 466, 467, 469, 471, 472], "when": [43, 52, 63, 69, 147, 172, 174, 177, 181, 182, 197, 198, 206, 214, 241, 242, 250, 256, 265, 295, 296, 318, 358, 379, 394, 397, 417, 418, 434, 445, 447, 448, 451, 455, 459, 462, 466, 468, 469], "uint8": [43, 210, 253, 267, 315, 320, 376, 400, 418, 427, 461, 462, 468, 471], "rmin": [43, 462], "rmax": [43, 462], "m": [43, 149, 173, 181, 182, 294, 421, 431, 437, 439, 442, 445, 449, 452, 459, 472], "where": [43, 181, 182, 267, 271, 320, 324, 376, 390, 401, 420, 421, 447, 451, 455, 466, 467], "max": [43, 103, 142, 161, 181, 182, 214, 256, 268, 269, 303, 321, 322, 362, 390, 399, 420, 431, 434, 459, 462, 466, 468, 469], "ab": [43, 167, 174, 296, 462, 466], "np": [43, 214, 256, 303, 362, 423, 468, 469], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 59, 156, 167, 173, 177, 182, 200, 201, 244, 245, 268, 269, 294, 296, 306, 321, 322, 367, 380, 390, 418, 433, 434, 445, 456, 459, 462, 465, 466, 469, 471], "quantize_data": 43, "add": [43, 51, 63, 108, 118, 147, 177, 181, 182, 197, 199, 221, 241, 243, 295, 313, 374, 390, 395, 396, 401, 417, 418, 423, 425, 427, 433, 434, 449, 452, 465, 467, 469, 470], "necessari": [43, 394, 397, 436, 455, 459, 465, 469], "intermedi": [43, 149, 164, 181, 182, 216, 396, 430, 462], "trasnform": 43, "full": [43, 197, 198, 199, 241, 242, 243, 390, 399, 418, 420, 426, 432, 455, 459, 464], "equat": [43, 269, 271, 322, 324, 462, 466], "r": [43, 142, 161, 420, 431, 455, 458, 462, 472], "": [43, 104, 142, 147, 161, 171, 172, 173, 174, 178, 179, 181, 182, 196, 199, 213, 214, 215, 217, 219, 226, 240, 243, 255, 256, 269, 294, 296, 322, 324, 325, 329, 358, 387, 390, 394, 397, 401, 420, 421, 423, 425, 427, 430, 434, 435, 442, 445, 447, 451, 454, 457, 458, 459, 460, 461, 462, 464, 465, 466, 469, 470, 471], "q": [43, 106, 108, 130, 466], "z": [43, 421, 466], "real": [43, 200, 217, 244, 423, 460, 462], "origin": [43, 154, 156, 171, 174, 177, 182, 197, 214, 215, 241, 256, 280, 281, 283, 284, 285, 295, 296, 315, 363, 376, 390, 395, 418, 442, 459, 462, 468, 469, 471], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 147], "new_dtyp": 43, "cast": [43, 56, 463, 468], "info": [43, 156, 173, 177, 212, 217, 222, 294, 329, 386, 390, 396, 420, 436], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 390], "low": [43, 185, 186, 200, 201, 229, 230, 244, 245, 262, 272, 299, 325, 400, 416, 418, 423, 434, 435, 460, 462, 466, 469], "high": [43, 200, 201, 244, 245, 418, 420, 431, 460, 469], "attribute_to_kwarg": 43, "attribut": [43, 82, 103, 104, 147, 156, 171, 174, 178, 179, 182, 390, 400, 417, 427, 429, 434, 461, 471], "kwarg": [43, 104, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 134, 136, 169, 181, 182, 199, 212, 214, 219, 222, 243, 256, 312, 314, 324, 325, 326, 328, 330, 332, 333, 334, 358, 373, 375, 377, 379, 385, 386, 389, 390, 417], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 66, 67, 69, 104, 147, 271, 278, 303, 324, 362, 390, 400, 420, 440, 447, 451, 454, 455, 465, 467, 469], "item": [43, 177, 179, 181, 182, 213, 255, 295, 313, 374, 423, 459, 466, 469], "trt_env_setup": 43, "environ": [43, 162, 215, 394, 416, 447, 451, 454, 469], "variabl": [43, 162, 175, 181, 182, 199, 215, 243, 303, 362, 431, 459, 469], "tensorrt": [43, 435, 462], "get_ops_recurs": 44, "prefix": [44, 147, 148, 155, 162, 437, 442, 467], "graph_info": 44, "templateadaptor": 44, "tampl": 44, "dictionari": [44, 66, 67, 69, 147, 148, 149, 156, 178, 179, 181, 182, 213, 255, 267, 274, 277, 279, 320, 390], "yaml": [44, 177, 178, 179, 182, 185, 186, 197, 199, 215, 229, 230, 241, 243, 257, 262, 273, 274, 275, 277, 286, 291, 299, 300, 389, 390, 400, 401, 429, 433, 434, 456, 461, 467, 468], "file": [44, 104, 147, 156, 159, 177, 178, 181, 182, 185, 186, 197, 198, 199, 202, 213, 214, 220, 223, 229, 230, 241, 242, 243, 246, 255, 256, 257, 262, 267, 273, 274, 275, 277, 286, 291, 295, 297, 299, 300, 320, 325, 335, 341, 342, 346, 358, 389, 390, 397, 400, 401, 423, 426, 429, 432, 433, 434, 436, 440, 449, 452, 453, 454, 455, 456, 461, 462, 467, 468], "pytorchadaptor": 44, "api": [44, 69, 74, 109, 225, 262, 267, 299, 312, 313, 320, 324, 358, 373, 374, 377, 390, 395, 396, 402, 404, 408, 411, 414, 420, 425, 430, 434, 439, 443, 444, 445, 464, 465, 469, 473], "pytorch_ipexadaptor": 44, "intel": [44, 173, 218, 221, 258, 263, 270, 271, 294, 297, 305, 311, 316, 323, 324, 336, 358, 366, 372, 392, 394, 395, 397, 398, 400, 401, 418, 419, 421, 422, 424, 425, 427, 428, 432, 435, 436, 437, 442, 444, 445, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 469, 470, 471], "extens": [44, 390, 397, 399, 400, 427, 430, 431, 434, 435, 436, 438, 443, 444, 445, 449, 452, 453, 459, 460, 462, 466, 469, 470, 471], "ipex": [44, 151, 156, 181, 182, 430, 434, 435, 439, 443, 444, 466, 472], "pytorch_fxadaptor": 44, "fx": [44, 156, 181, 307, 368, 430, 435, 443, 444, 460, 462, 463, 472], "graph": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 129, 131, 135, 138, 141, 142, 144, 145, 146, 147, 171, 196, 240, 262, 326, 333, 357, 396, 400, 418, 421, 423, 429, 436, 437, 462, 463, 467], "querybackendcap": [45, 400], "defin": [45, 85, 149, 152, 171, 173, 174, 175, 176, 181, 182, 185, 186, 229, 230, 274, 275, 277, 278, 279, 286, 291, 294, 295, 296, 298, 325, 358, 379, 389, 394, 397, 400, 417, 418, 421, 422, 427, 430, 433, 434, 455, 457, 459, 462, 465, 466, 467, 469, 471], "interfac": [45, 85, 112, 178, 262, 286, 291, 299, 300, 382, 430, 434, 445, 458, 462, 464], "each": [45, 140, 147, 149, 181, 182, 195, 199, 202, 210, 214, 239, 243, 246, 253, 256, 265, 267, 268, 269, 306, 318, 320, 321, 322, 367, 390, 395, 400, 401, 418, 420, 421, 422, 427, 434, 439, 445, 448, 454, 456, 459, 465, 466, 467, 468, 469, 470], "adapt": [45, 394, 399, 418, 445, 460], "should": [45, 53, 114, 115, 163, 169, 171, 174, 181, 182, 185, 186, 195, 197, 199, 214, 219, 229, 230, 239, 241, 243, 256, 265, 318, 324, 325, 358, 377, 379, 390, 396, 397, 400, 401, 418, 421, 423, 433, 434, 440, 449, 452, 454, 456, 459, 462, 468, 469, 471], "implement": [45, 109, 142, 146, 185, 186, 192, 195, 196, 197, 199, 229, 230, 236, 239, 240, 241, 243, 264, 317, 325, 335, 358, 365, 379, 401, 417, 418, 433, 434, 445, 455, 459, 462, 464, 467, 469, 471], "inherit": [45, 163, 164, 174, 176, 181, 194, 214, 216, 224, 238, 256, 296, 298, 397, 400, 418], "own": [45, 73, 195, 214, 239, 256, 335, 397, 417, 418, 430, 433, 456, 465, 470], "tensorflowadaptor": 46, "stock": [46, 443, 466], "spr": 46, "tensorflow_itexadaptor": 46, "itex": [46, 108, 181, 182, 260, 435, 462, 466], "tensorflowqueri": [46, 400], "local_config_fil": 46, "performance_onli": [46, 47, 48, 106, 130, 135, 146, 181, 434], "itex_mod": [46, 47, 88, 106, 130, 135], "quant_mod": [46, 313, 374, 401], "graphconvert": 47, "qt_config": 47, "recip": [47, 171, 181, 182, 262, 299, 434, 466, 469], "int8_sequ": 47, "fp32_op": [47, 49, 106], "bf16_op": [47, 49, 106, 463], "data_load": [47, 48, 400], "fake_qu": [47, 87, 106, 130, 135], "qdq_enabl": 47, "new_api": [47, 48, 70, 71, 76, 78, 91, 98, 130, 135, 142], "use_bf16": [47, 48, 181, 461], "without": [48, 89, 147, 174, 214, 256, 296, 315, 376, 394, 421, 423, 434, 445, 459, 460, 461, 469, 470], "graphconverterwithoutcalib": 48, "recover_config": 48, "rewrit": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 226], "bf16convert": [49, 463], "biasadd": [51, 58, 63, 65, 108, 427], "convertaddtobiasaddoptim": 51, "conv2d": [51, 58, 59, 60, 64, 65, 70, 124, 134, 142, 401, 420, 425, 427, 466, 467, 469], "addv2": [51, 68, 427], "layout": 52, "convertlayoutoptim": 52, "optim": [52, 73, 74, 78, 79, 115, 117, 171, 174, 178, 181, 182, 218, 224, 226, 262, 263, 279, 299, 303, 316, 362, 379, 380, 387, 390, 397, 399, 416, 420, 421, 422, 423, 427, 428, 430, 431, 434, 436, 437, 439, 441, 442, 445, 448, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 471], "nchw": 52, "nhwc": 52, "It": [52, 163, 173, 185, 186, 223, 229, 230, 269, 271, 278, 294, 299, 306, 322, 324, 325, 358, 363, 367, 379, 400, 401, 420, 421, 434, 440, 443, 448, 454, 455, 459, 462, 464, 465, 469, 471], "exist": [52, 162, 179, 215, 333, 425, 433, 441, 469], "4": [52, 162, 173, 174, 181, 182, 206, 209, 210, 214, 250, 253, 256, 264, 265, 267, 317, 318, 320, 377, 394, 400, 401, 416, 423, 424, 427, 430, 431, 433, 434, 442, 458, 459, 462, 466, 468, 469, 472], "abov": [52, 400, 401, 421, 459, 462, 466, 469], "graph_def": [52, 147, 260, 325, 333, 357, 358], "leakyrelu": [53, 466], "convertleakyreluoptim": 53, "below": [53, 65, 73, 181, 182, 300, 324, 358, 395, 396, 399, 400, 401, 417, 420, 421, 423, 429, 433, 437, 439, 447, 448, 451, 454, 456, 457, 459, 461, 462, 465, 466, 467, 469, 470], "subgraph": [53, 65, 104, 155, 469], "mul": [53, 64, 65, 68, 160, 425, 466], "maximum": [53, 173, 174, 181, 182, 197, 214, 241, 256, 265, 296, 303, 318, 362, 401, 418, 420, 434, 459, 462, 468], "note": [53, 173, 267, 307, 320, 368, 397, 401, 420, 423, 425, 427, 431, 434, 439, 442, 447, 451, 454, 459, 462, 466, 467, 469, 470, 471, 472], "coeffici": [53, 459], "less": [53, 147, 181, 182, 390, 416, 421, 434, 459], "than": [53, 147, 197, 214, 241, 256, 390, 397, 399, 416, 418, 429, 456, 457, 459, 462, 465, 468, 469], "convers": [53, 182, 273, 400, 434, 435, 462, 463, 466], "valid": [53, 66, 67, 104, 174, 177, 181, 182, 199, 243, 267, 295, 296, 320, 333, 395, 397, 399, 400, 418, 420, 421, 424, 427, 430, 432, 434, 445, 459, 462, 464], "nan": 54, "random": [54, 147, 181, 182, 210, 214, 253, 256, 263, 279, 303, 305, 316, 362, 366, 390, 395, 397, 434, 461, 468, 471], "convertnantorandom": 54, "const": [54, 55, 62, 63, 66, 67, 69, 81, 97], "consist": [54, 62, 395, 396, 466, 469], "placehold": [55, 195, 239], "convertplaceholdertoconst": 55, "rerewrit": 56, "dequantizecastoptim": 56, "b16": 56, "dilat": 57, "contract": 57, "dilatedcontract": 57, "spacetobatchnd": 57, "batchtospacend": 57, "pattern": [57, 58, 60, 77, 95, 106, 107, 108, 130, 135, 156, 166, 168, 171, 172, 174, 175, 178, 181, 182, 199, 243, 263, 284, 285, 287, 292, 296, 313, 316, 374, 400, 418, 427, 430, 434, 455, 457, 461, 466, 469, 472], "inject": [58, 434], "dummi": [58, 171, 200, 201, 244, 245, 271, 324, 399, 418, 428, 433, 434], "injectdummybiasaddoptim": 58, "fusion": [58, 60, 69, 77, 108, 125, 126, 127, 130, 131, 132, 136, 396, 400, 427], "expanddim": 59, "expanddimsoptim": 59, "next": [59, 190, 234, 377, 397, 401, 417, 461, 469], "featch": 60, "reshap": [60, 66, 67, 72, 466], "fetchweightfromreshapeoptim": 60, "handl": [60, 147, 154, 160, 386, 396, 398, 417, 466], "fold": [61, 62, 261, 427, 466], "foldbatchnormnodesoptim": 61, "graphfoldconstantoptim": 62, "sequenc": [62, 104, 172, 173, 181, 182, 197, 213, 214, 241, 255, 256, 265, 269, 294, 318, 322, 400, 418, 427, 459, 468], "self": [62, 171, 181, 182, 335, 400, 417, 418, 430, 433, 465, 467, 469], "supported_op_typ": 62, "fusebiasaddandaddoptim": 63, "second": [63, 172, 181, 182, 197, 241, 363, 390, 420, 434, 447, 451, 455, 466, 469, 471], "columnwis": 64, "fusecolumnwisemuloptim": 64, "depthwiseconv2dn": [64, 70, 124, 134, 427], "math": [65, 462], "fuseconvwithmathoptim": 65, "elimin": 65, "sub": [65, 156, 162, 171, 215, 397, 469], "realdiv": [65, 68], "decompos": [66, 67], "fusedecomposedbnoptim": 66, "input_graph_def": [66, 67, 69], "node_name_from_input": [66, 67, 69], "node_nam": [66, 67, 69, 147, 333, 343], "strip": [66, 67, 69, 82, 83, 147, 467], "port": [66, 67, 69], "other": [66, 67, 69, 154, 160, 196, 240, 269, 322, 333, 394, 395, 396, 401, 420, 427, 430, 432, 434, 436, 456, 458, 459, 462, 466, 468, 469, 472], "underli": [66, 67, 69], "node_from_map": [66, 67, 69], "node_map": [66, 67, 69], "pull": [66, 67, 69], "def": [66, 67, 69, 185, 186, 229, 230, 358, 377, 379, 396, 400, 417, 418, 421, 422, 423, 433, 434, 462, 466, 467, 469], "entri": [66, 67, 69, 149, 221, 262, 300, 390, 432], "index": [66, 67, 69, 104, 162, 182, 190, 195, 199, 234, 239, 243, 278, 390, 418, 433, 455, 466], "everi": [66, 67, 69, 173, 174, 181, 182, 294, 296, 400, 417, 442, 447, 451, 469], "identifi": [66, 67, 69, 267, 320, 333, 459], "want": [66, 67, 69, 171, 181, 182, 195, 197, 239, 241, 296, 363, 379, 396, 400, 417, 418, 423, 434, 442, 454, 455, 456, 465, 467, 469], "nodedef": [66, 67, 69], "rais": [66, 67, 69, 104, 173, 174, 177, 267, 294, 295, 296, 320, 325, 377, 399, 459, 460], "valueerror": [66, 67, 69, 267, 320, 377, 426], "If": [66, 67, 69, 73, 162, 181, 182, 185, 186, 199, 214, 229, 230, 243, 256, 295, 325, 358, 377, 379, 395, 396, 416, 417, 418, 423, 431, 432, 433, 434, 440, 448, 449, 452, 454, 456, 462, 465, 466, 467, 468, 469], "isn": [66, 67, 69], "t": [66, 67, 69, 142, 161, 173, 181, 182, 214, 217, 256, 269, 322, 396, 400, 420, 421, 423, 434, 435, 455, 459, 462, 469, 471], "present": [66, 67, 69, 420, 460, 466], "values_from_const": [66, 67, 69], "node_def": [66, 67, 69], "extract": [66, 67, 69, 147, 171, 199, 243, 315, 376, 418], "ha": [66, 67, 69, 73, 173, 174, 215, 264, 294, 296, 317, 377, 395, 397, 400, 401, 417, 425, 430, 434, 435, 440, 454, 459, 461, 462, 463, 465, 466, 469], "access": [66, 67, 69, 178, 179, 182, 385, 390, 449, 452], "valid_reshape_input": [66, 67], "reshape_in0_ndef": [66, 67], "reshape_in1_ndef": [66, 67], "ar": [66, 67, 104, 156, 173, 174, 181, 182, 197, 214, 241, 256, 267, 271, 278, 294, 295, 296, 300, 302, 303, 320, 324, 359, 361, 362, 376, 377, 382, 389, 390, 394, 395, 396, 397, 399, 400, 417, 418, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 440, 442, 445, 448, 454, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "bypass_reshap": [66, 67], "input_node_map": [66, 67], "input_nam": [66, 67, 101, 141, 182, 260, 261, 425], "get_const_dim_count": [66, 67], "dimens": [66, 67, 104, 189, 214, 233, 256, 418, 421, 468], "instancenorm": [67, 466], "fusedecomposedinoptim": 67, "gelu": 68, "fusegeluoptim": 68, "sqrt": [68, 420], "erf": 68, "samll": 69, "layernorm": [69, 466], "fuselayernormoptim": 69, "remap": 69, "smaller": [69, 214, 256, 421, 434, 459, 468], "case": [69, 73, 162, 182, 196, 213, 214, 215, 240, 255, 256, 262, 286, 291, 299, 335, 401, 417, 421, 422, 423, 427, 429, 433, 438, 442, 454, 455, 456, 459, 460, 462, 464, 468, 470, 471, 472], "fusedbatcnormv3": 69, "And": [69, 396, 416, 434, 440, 466], "further": [69, 182, 394, 435, 436, 437, 439, 448, 454, 462], "restrict": [69, 181, 182, 459, 465], "2d": [69, 466], "3d": [69, 460, 466], "kera": [69, 115, 171, 177, 182, 199, 206, 221, 243, 250, 328, 333, 417, 423, 436, 444, 445, 472], "fusepadwithconv2doptim": 70, "excluded_op_nam": [70, 71, 178, 181, 182, 434, 459], "cfg": [70, 71, 156, 178, 313, 374, 382, 401], "itex_qdq_mod": [70, 71], "conv3d": [70, 124], "fusepadwithfp32conv2doptim": 71, "fusetransposereshapeoptim": 72, "cse": [73, 97], "graphcseoptim": 73, "introduc": [73, 395, 400, 401, 427, 434, 462, 464, 466, 470], "ident": [73, 79, 172, 394, 421], "three": [73, 177, 197, 241, 302, 359, 361, 396, 400, 431, 435, 448, 457, 462, 463, 465, 466, 467], "d": [73, 156, 421, 429, 455, 472], "those": [73, 306, 367, 390, 420, 421, 422, 429, 434, 435, 457, 459, 462, 469], "child": [73, 467], "b1": 73, "c1c2": 73, "d1": [73, 390], "c1": 73, "c2": 73, "memori": [73, 262, 286, 291, 299, 335, 390, 417, 422, 434, 435, 437, 456, 459, 462, 466, 469], "bound": [73, 162, 214, 256, 267, 303, 320, 362, 433, 468], "like": [73, 95, 97, 147, 171, 177, 182, 185, 186, 187, 199, 229, 230, 231, 243, 262, 271, 296, 299, 300, 324, 333, 358, 379, 395, 396, 397, 400, 420, 421, 422, 430, 442, 457, 459, 462, 464, 466, 469], "relu": [73, 77, 108, 396, 427, 466, 467], "relu6": [73, 427], "updat": [73, 156, 167, 173, 177, 296, 324, 358, 387, 426, 433, 434, 440, 445, 448, 458, 459, 466, 469, 470, 472], "graphdef": [73, 147, 333, 357, 436], "grappler": [74, 427], "grappleroptim": 74, "input_output_nam": 74, "opt_cfg": 74, "wrapper": [74, 101, 102, 103, 104, 121, 139, 148, 164, 196, 214, 216, 217, 219, 220, 226, 240, 256, 267, 271, 320, 324, 329, 333, 463], "leverag": [74, 397, 399, 421, 425, 437, 454, 457, 462, 469], "built": [74, 183, 184, 188, 193, 197, 198, 203, 205, 207, 208, 210, 211, 214, 219, 221, 227, 228, 232, 235, 237, 241, 242, 247, 249, 251, 252, 253, 254, 256, 300, 324, 327, 335, 358, 379, 397, 400, 418, 423, 434, 447, 451, 456, 462, 468, 469, 471], "convert_add_to_biasadd": [75, 86, 110], "convert_layout": [75, 86, 110], "convert_leakyrelu": [75, 86, 110], "convert_nan_to_random": [75, 86, 110], "convert_placeholder_to_const": [75, 86, 110], "dequantize_cast_optim": [75, 86, 110], "dilated_contract": [75, 86, 110], "dummy_biasadd": [75, 86, 110], "expanddims_optim": [75, 86, 110], "fetch_weight_from_reshap": [75, 86, 110], "fold_batch_norm": [75, 86, 110], "fold_const": [75, 86, 110], "fuse_biasadd_add": [75, 86, 110], "fuse_column_wise_mul": [75, 86, 110], "fuse_conv_with_math": [75, 86, 110], "fuse_decomposed_bn": [75, 86, 110], "fuse_decomposed_in": [75, 86, 110], "fuse_gelu": [75, 86, 110], "fuse_layer_norm": [75, 86, 110], "fuse_pad_with_conv": [75, 86, 110], "fuse_pad_with_fp32_conv": [75, 86, 110], "fuse_reshape_transpos": [75, 86, 110], "graph_cse_optim": [75, 86, 110], "grappler_pass": [75, 86, 110], "insert_print_nod": [75, 86, 110], "move_squeeze_after_relu": [75, 86, 110], "pre_optim": [75, 86, 110], "remove_training_nod": [75, 86, 110], "rename_batch_norm": [75, 86, 110], "split_shared_input": [75, 86, 110], "strip_equivalent_nod": [75, 86, 110, 147], "strip_unused_nod": [75, 86, 110, 147], "switch_optim": [75, 86, 110], "insert": [76, 104, 106, 108, 112, 145, 154, 160, 396, 417, 430, 434, 437, 459, 462, 463, 466, 467], "print": [76, 149, 171, 271, 324, 377, 390, 423, 433, 434, 459, 466, 469], "insertprintminmaxnod": 76, "pre_node_nam": 76, "post_node_nam": 76, "pass": [76, 147, 162, 324, 358, 390, 396, 400, 416, 418, 421, 422, 423, 429, 433, 434, 455, 459, 461, 462, 463, 466, 471], "sampl": [76, 181, 182, 190, 195, 197, 198, 199, 210, 214, 234, 239, 241, 242, 243, 253, 256, 271, 278, 303, 324, 362, 397, 417, 418, 424, 430, 455, 462, 468, 469, 471, 472], "move": [77, 396, 461, 464], "squeez": [77, 396], "movesqueezeafterreluoptim": 77, "match": [77, 101, 171, 267, 268, 320, 321, 421, 455], "pre": [78, 115, 171, 185, 186, 197, 229, 230, 241, 325, 358, 379, 418, 421, 422, 434, 442, 459, 460, 462, 467, 469], "entranc": [78, 188], "preoptim": 78, "removetrainingnodesoptim": 79, "protected_nod": 79, "types_to_splic": 79, "checknumer": 79, "stopgradi": 79, "renam": [80, 464], "fusedbatchnorm": 80, "fusedbatchnormv2": 80, "renamebatchnormoptim": 80, "splitsharedinputoptim": 81, "equival": [82, 466], "stripequivalentnodesoptim": 82, "output_node_nam": [82, 83, 130, 131, 135, 147], "same": [82, 140, 147, 174, 182, 197, 214, 241, 256, 267, 320, 390, 400, 401, 416, 417, 418, 421, 423, 427, 434, 438, 442, 447, 451, 458, 459, 461, 462, 466, 467, 468, 469], "unus": [83, 147], "stripunusednodesoptim": 83, "input_node_nam": [83, 130, 135, 147], "switch": [84, 437, 467], "switchoptim": 84, "condit": [84, 197, 198, 199, 214, 241, 242, 243, 256, 302, 359, 361, 418, 432, 468, 469], "graphrewriterbas": 85, "abstract": [85, 163, 214, 256, 257, 262, 299, 400, 401, 429], "freeze_fake_qu": [86, 94, 110], "freeze_valu": [86, 94, 110], "freeze_value_without_calib": [86, 94, 110], "fuse_conv_redundant_dequant": [86, 94, 110], "fuse_conv_requant": [86, 94, 110], "fuse_matmul_redundant_dequant": [86, 94, 110], "fuse_matmul_requant": [86, 94, 110], "meta_op_optim": [86, 94, 110], "post_hostconst_convert": [86, 94, 110], "post_quantized_op_cs": [86, 94, 110], "rnn_convert": [86, 94, 110], "scale_propag": [86, 94, 110], "onnx_graph": [86, 100, 110], "onnx_schema": [86, 100, 110], "tf2onnx_util": [86, 100, 110], "insert_qdq_pattern": [86, 105, 110], "merge_duplicated_qdq": [86, 105, 110], "share_qdq_y_pattern": [86, 105, 110], "freez": [87, 88, 89, 437, 459], "fakequ": 87, "freezefakequantopoptim": 87, "follow": [87, 109, 172, 199, 243, 264, 267, 317, 320, 394, 395, 396, 397, 400, 401, 417, 418, 421, 422, 423, 425, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 447, 451, 457, 459, 461, 462, 466, 467, 469], "freezevaluetransform": 88, "max_min_data": [88, 89], "postfix": [88, 89], "tensor_data": [88, 390, 391], "th": [88, 89], "gpu": [88, 89, 96, 181, 182, 399, 416, 430, 434, 435, 439, 445, 454, 461, 462], "freezevaluewithoutcalibtransform": 89, "95": [89, 271, 324, 433, 466, 472], "quantizedconv": [90, 91], "quantizeddeconv": 90, "redund": [90, 92], "fuseconvredundantdequantizetransform": 90, "cpu": [90, 91, 92, 93, 181, 182, 390, 399, 416, 430, 434, 435, 437, 439, 445, 454, 458, 460, 461, 462, 463, 467], "_quantizedconv": 90, "_quantizeddeconv": 90, "successor": [90, 91, 92, 93], "requant": [91, 93, 467], "fuseconvrequantizetransform": 91, "quantizedmatmul": [92, 93], "fusematmulredundantdequantizetransform": 92, "_quantizedmatmul": [92, 93], "fusematmulrequantizedequantizetransform": 93, "quantizedmatmulwithbiasanddequant": 93, "fusematmulrequantizetransform": 93, "fusematmulrequantizedequantizenewapitransform": 93, "fusematmulrequantizenewapitransform": 93, "newapi": 93, "meta": [95, 460], "metainfochangingmemopoptim": 95, "metaop": 95, "With": [95, 335, 396, 399, 400, 401, 417, 434, 442, 447, 451, 455, 456, 459, 460, 465, 466, 469, 472], "better": [95, 181, 182, 185, 186, 229, 230, 278, 325, 358, 379, 422, 433, 435, 459, 460, 462, 465, 469], "perform": [95, 139, 162, 175, 181, 182, 197, 209, 210, 215, 241, 253, 262, 286, 291, 299, 306, 324, 335, 358, 363, 367, 396, 397, 400, 416, 418, 419, 420, 422, 424, 425, 430, 431, 433, 434, 435, 436, 437, 439, 443, 445, 448, 454, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 469, 471, 472], "hostconst": 96, "posthostconstconvert": 96, "just": [96, 187, 212, 214, 217, 219, 220, 222, 231, 256, 335, 397, 434, 444, 448, 454, 457, 462, 466, 468, 469], "postcseoptim": 97, "duplic": [97, 107, 303, 362], "quantizev2": 97, "decreas": [97, 459], "size": [97, 173, 189, 190, 196, 199, 205, 210, 214, 233, 234, 240, 243, 249, 253, 256, 294, 335, 390, 394, 417, 418, 423, 426, 434, 454, 455, 456, 459, 466, 468, 471, 472], "rnn": 98, "quantizedrnnconvert": 98, "calibration_data": [98, 106], "rnn_detail": 98, "scalepropagationtransform": 99, "direct": [99, 173, 294, 459], "export": [100, 182, 263, 267, 316, 320, 399, 428, 440, 455, 467, 470], "onnxgraph": 101, "output_shap": 101, "extra_opset": 101, "output_nam": [101, 141, 182, 260, 261, 425], "is_subgraph": 101, "graph_nam": 101, "manipul": [101, 102], "onnxnod": 102, "skip_convers": 102, "schema": 103, "onnxopschema": 103, "domain": [103, 104, 181, 182, 459, 469], "since_vers": 103, "get_schema": 103, "max_inclusive_opset_vers": 103, "within": [103, 174, 262, 267, 299, 320, 333, 352, 357, 394, 396, 401, 435, 447, 451, 454, 460, 466, 469], "get_max_supported_opset_vers": 103, "packag": [103, 400, 426, 431, 454, 455, 460, 464, 469], "set_nam": 104, "find_opset": 104, "assert_error": 104, "bool_val": 104, "error_msg": 104, "error": [104, 149, 271, 306, 324, 367, 386, 420, 433, 438, 466, 469], "messag": [104, 145, 469], "map_numpy_to_onnx_dtyp": 104, "np_dtype": 104, "map_onnx_to_numpy_typ": 104, "onnx_typ": 104, "add_port_to_nam": 104, "nr": 104, "get_tensorflow_node_attr": 104, "pars": [104, 156, 197, 198, 210, 214, 241, 242, 253, 256, 341, 342, 346, 401, 468], "get_tensorflow_tensor_shap": 104, "shape": [104, 147, 173, 200, 201, 210, 214, 244, 245, 253, 256, 267, 320, 399, 418, 427, 428, 434, 466, 468], "get_tensorflow_node_shape_attr": 104, "attr": [104, 147, 171], "map_tensorflow_dtyp": 104, "get_tensorflow_tensor_data": 104, "convert_tensorflow_tensor_to_onnx": 104, "read_tensorflow_node_attr": 104, "read": [104, 147, 202, 214, 246, 256, 295, 418, 463, 465], "infer_onnx_shape_dtyp": 104, "opset_vers": [104, 141, 182, 260, 261, 425], "input_shap": [104, 201, 245, 418], "input_dtyp": 104, "sometim": [104, 396, 420, 462], "so": [104, 214, 256, 376, 396, 400, 420, 426, 430, 435, 440, 442, 462, 463, 466, 467, 468, 470], "make_onnx_shap": 104, "seqtyp": 104, "tensor_dtyp": 104, "around": 104, "signifi": 104, "make_onnx_inputs_output": 104, "elem_typ": 104, "text": [104, 213, 214, 255, 256, 264, 269, 297, 317, 322, 425, 432, 443, 459, 460, 466, 468, 472], "datatyp": [104, 156, 463, 469], "save_protobuf": 104, "path": [104, 147, 156, 171, 177, 178, 197, 198, 199, 214, 241, 242, 243, 256, 257, 260, 261, 262, 273, 274, 275, 277, 286, 291, 295, 297, 299, 300, 313, 325, 333, 357, 358, 374, 387, 390, 396, 397, 400, 418, 420, 423, 429, 433, 434, 435, 436, 440, 443, 454, 457, 468, 471], "as_text": 104, "save": [104, 177, 181, 182, 199, 226, 243, 260, 261, 300, 333, 358, 379, 380, 385, 390, 396, 400, 429, 434, 435, 436, 438, 442, 447, 451, 457, 462, 466], "protobuf": 104, "is_onnx_domain": 104, "is_list_or_tupl": 104, "are_shapes_equ": 104, "src": [104, 455], "dest": 104, "equal": [104, 142, 147, 161, 377, 390, 459], "get_subgraphs_from_onnx": 104, "model_proto": 104, "over": [104, 199, 243, 271, 324, 424, 428, 430, 433, 445, 454, 461, 466, 469], "df": 104, "initialize_name_count": 104, "avoid": [104, 197, 241, 396, 467], "conflict": [104, 426], "counter": 104, "make_nam": 104, "get_index_from_strided_slice_of_shap": 104, "outputs_to_valu": 104, "stride": [104, 214, 256, 468], "slice": 104, "compute_const_folding_using_tf": 104, "g": [104, 173, 181, 182, 421, 424, 428, 437, 442, 459, 464, 466, 469], "const_node_valu": 104, "graph_output": 104, "constant": [104, 261, 263, 303, 305, 311, 316, 362, 366, 372, 383, 417, 427, 468], "tf": [104, 115, 147, 171, 177, 196, 197, 198, 199, 214, 240, 241, 242, 243, 256, 331, 333, 423, 436, 460, 463, 468], "generategraphwithqdqpattern": 106, "op_wise_config": [106, 130, 135], "quantized_nod": 106, "dq": [106, 108, 130, 466], "pair": [106, 181, 182, 417, 434, 435, 464], "befor": [106, 108, 160, 173, 174, 176, 181, 182, 197, 241, 294, 296, 298, 395, 401, 417, 418, 421, 422, 423, 426, 427, 431, 434, 449, 452, 462, 465, 467, 469], "merg": [107, 189, 233, 313, 374, 449, 452, 467, 469], "mergeduplicatedqdqoptim": 107, "y": [108, 181, 182, 214, 256, 303, 362, 420, 426, 440, 466, 468], "shareqdqforitexypatternoptim": 108, "one": [108, 109, 114, 156, 162, 173, 174, 176, 214, 224, 256, 264, 267, 271, 273, 294, 297, 298, 317, 320, 324, 397, 400, 421, 422, 423, 427, 430, 431, 433, 434, 435, 437, 438, 442, 443, 445, 447, 448, 451, 454, 455, 456, 457, 459, 461, 462, 464, 466, 468, 469], "enabl": [108, 149, 174, 181, 182, 296, 401, 423, 431, 435, 437, 439, 442, 443, 445, 458, 459, 460, 469], "break": [108, 423, 434], "graphanalyz": 109, "extend_engin": 109, "analyz": [109, 171, 333, 465, 466, 467], "under": [109, 181, 182, 199, 243, 389, 397, 418, 432, 433, 434, 437, 442, 443, 454, 457, 459, 466, 467, 469], "singleton": [109, 390], "specifi": [109, 156, 162, 181, 182, 185, 186, 214, 215, 229, 230, 256, 262, 267, 271, 274, 277, 286, 291, 299, 300, 320, 324, 325, 358, 377, 379, 389, 390, 401, 423, 427, 433, 434, 442, 456, 461, 468, 469, 471], "graphrewriterhelp": 109, "encapsul": [109, 185, 186, 229, 230, 325, 358, 379, 436], "quantize_lay": [110, 111, 113], "fake_quant": [110, 111, 113], "quantize_config": [110, 111, 113], "quantize_help": [110, 111, 113], "quantize_wrapp": [110, 111, 113], "fuse_qdq_bn": [110, 111, 129], "fuse_qdq_concatv2": [110, 111, 129], "fuse_qdq_conv": [110, 111, 129], "fuse_qdq_deconv": [110, 111, 129], "fuse_qdq_in": [110, 111, 129], "fuse_qdq_matmul": [110, 111, 129], "fuse_qdq_pool": [110, 111, 129], "optimize_qdq": [110, 111, 129], "optimize_lay": [111, 113, 116], "quantize_layer_add": [111, 113, 116], "quantize_layer_bas": [111, 113, 116], "quantize_layer_bn": [111, 113, 116], "fakequantizebas": 112, "abc": [112, 269, 322, 400, 467, 469], "appli": [112, 125, 126, 127, 130, 132, 136, 163, 174, 224, 265, 318, 394, 401, 434, 437, 439, 445, 454, 457, 459, 462, 463, 465, 466, 469, 470, 471], "fakequant": 112, "per_channel": [112, 401, 427, 462, 471], "num_bit": [112, 156, 466], "8": [112, 181, 182, 213, 255, 396, 427, 431, 459, 460, 466, 469, 472], "channel_axi": [112, 158, 161], "symmetr": [112, 401, 462, 468, 469], "narrow_rang": 112, "quantizeconfig": [114, 115], "custom": [114, 162, 300, 324, 335, 389, 416, 421, 422, 437, 459, 465], "There": [114, 300, 302, 359, 361, 420, 421, 427, 430, 434, 437, 466, 469, 471], "instanc": [114, 115, 162, 181, 182, 185, 186, 215, 229, 230, 268, 269, 271, 274, 277, 280, 281, 283, 284, 285, 303, 315, 321, 322, 324, 325, 358, 362, 376, 379, 387, 390, 394, 396, 400, 416, 434, 439, 445, 469, 471, 472], "global": [114, 173, 181, 182, 280, 281, 283, 284, 285, 294, 390, 396, 434, 459, 461, 469], "class": [115, 152, 156, 278, 325, 358, 396, 397, 417, 418, 421, 433, 434, 445, 456, 457, 462, 464, 467, 469, 471], "init_quantize_config": 115, "quantize_recip": 115, "begin": [115, 174, 296, 417, 421, 422, 434, 459, 469], "process": [115, 139, 149, 162, 173, 174, 176, 177, 181, 182, 185, 186, 197, 198, 199, 210, 214, 215, 229, 230, 241, 242, 243, 253, 256, 294, 296, 298, 302, 303, 325, 358, 359, 361, 362, 379, 389, 390, 397, 400, 401, 417, 418, 421, 422, 423, 425, 434, 438, 457, 459, 462, 466, 467, 468, 471], "model_nam": [115, 181, 182], "special": [115, 171, 335, 396, 417, 433, 434, 456, 459, 470], "decid": [115, 181, 182, 265, 296, 318, 400, 434, 462, 464, 469], "qat_clone_funct": 115, "leav": [115, 448], "quantizewrapp": [115, 121], "wrapped_lay": 115, "config_quantizable_lay": 117, "quantizelayeradd": 118, "quantizelay": 119, "quantizelayerbas": 119, "quantizelayerbatchnorm": 120, "quantizewrapperbas": 121, "fusedbatchnormv3": [122, 132], "fusenodestartwithfusedbatchnormv3": [122, 132], "_quantizedfusedbatchnorm": 122, "concatv2": [123, 133, 146, 427], "fusenodestartwithconcatv2": [123, 133], "quantizedconcatv2": [123, 133], "fusenodestartwithconv2d": [124, 134], "conv2dbackpropinput": 125, "conv3dbackpropinputv2": 125, "fusenodestartwithdeconv2d": 125, "fusedinstancenorm": 126, "fusenodestartwithfusedinstancenorm": 126, "batchmatmul": 127, "batchmatmulv2": 127, "fusenodestartwithmatmul": [127, 136], "avgpool": [128, 137, 427], "fusenodestartwithpool": [128, 137], "optimizeqdqgraph": 130, "input_graph": [130, 135, 142, 353, 357, 400], "op_wise_sequ": [130, 135], "quantizegraph": 131, "quantizegraphbas": 131, "quantizenodebas": 131, "quantizegraphforintel": 135, "common": [138, 182, 212, 263, 273, 277, 278, 279, 316, 382, 394, 418, 422, 423, 425, 429, 431, 434, 462, 466], "herlper": 138, "quantizegraphhelp": 138, "sever": [138, 176, 214, 256, 298, 397, 420, 421, 422, 430, 434, 435, 447, 451, 459, 461, 466, 468, 469, 471], "staticmethod": 138, "function": [138, 181, 182, 185, 186, 198, 229, 230, 242, 274, 277, 286, 291, 396, 397, 400, 401, 416, 417, 421, 422, 425, 429, 430, 431, 433, 434, 435, 445, 455, 459, 462, 464, 465, 466, 467, 469, 470], "smoothquantcalibr": 139, "dataset": [139, 140, 156, 185, 186, 187, 189, 190, 194, 195, 196, 208, 217, 229, 230, 231, 233, 234, 238, 239, 240, 252, 263, 267, 268, 269, 271, 300, 316, 320, 321, 322, 324, 325, 358, 379, 382, 397, 399, 400, 417, 423, 428, 433, 434, 442, 459, 462, 464, 466, 469, 471, 472], "outlier": [139, 420, 466], "ignor": [139, 390, 418, 466], "smoothquantscal": 140, "alpha": [140, 160, 167, 175, 462], "scales_per_op": 140, "method": [140, 142, 156, 175, 181, 182, 190, 195, 196, 197, 199, 206, 214, 217, 234, 239, 240, 241, 243, 250, 256, 277, 278, 279, 313, 374, 376, 382, 383, 385, 386, 396, 397, 399, 417, 418, 420, 421, 422, 433, 434, 457, 459, 462, 463, 466, 468, 469], "individu": [140, 173, 294, 352, 357, 394, 459, 466], "tensorflowqdqtoonnxqdqconvert": 141, "shape_overrid": 141, "inputs_as_nchw": [141, 260], "default_opset_vers": 141, "bia": [142, 181, 182, 467], "correct": [142, 161, 177, 181, 182, 267, 268, 269, 271, 295, 320, 321, 322, 324, 394, 437], "biascorrect": 142, "fp32_graph": 142, "weight_empir": 142, "Will": [142, 421, 430], "our": [142, 156, 181, 182, 397, 399, 425, 434, 455, 465, 470], "task": [142, 197, 204, 241, 248, 271, 324, 418, 421, 422, 425, 430, 433, 434, 459, 466], "close": [142, 161], "w_int8": [142, 161], "u": [142, 161, 399, 437], "w_fp32": [142, 161], "varianc": [142, 161, 420], "ratio": [142, 161, 173, 174, 177, 181, 182, 210, 214, 253, 256, 296, 418, 434, 459, 468, 472], "differ": [142, 157, 161, 164, 174, 181, 182, 190, 199, 214, 216, 234, 243, 256, 262, 271, 277, 279, 288, 299, 324, 335, 384, 394, 396, 397, 417, 418, 420, 421, 423, 424, 429, 430, 433, 434, 436, 447, 451, 456, 459, 462, 466, 467, 468, 469], "wise": [142, 161, 181, 182, 303, 306, 362, 363, 367, 430, 459, 467, 469, 471], "minim": [142, 161, 303, 362, 401, 421, 424, 433, 434, 447, 451, 459, 462, 469], "round": [142, 161, 462, 466], "scale_c": [142, 161], "shift": [142, 161, 210, 253, 455, 468], "notic": [142, 161, 215, 432, 435, 464], "first": [142, 161, 172, 179, 181, 182, 197, 241, 267, 313, 320, 363, 374, 390, 396, 397, 400, 401, 418, 420, 431, 435, 439, 448, 449, 452, 455, 461, 462, 463, 465, 466, 467, 469, 471], "empir": [142, 161], "solut": [142, 161, 399, 400, 426, 439, 443, 448, 460, 464, 466, 469, 470], "don": [142, 161, 173, 181, 182, 396, 459, 469], "min": [142, 161, 390, 420, 459, 462, 466, 468, 469], "graphtransform": 143, "graphtransformbas": 143, "input_pb": [143, 145, 146], "log": [145, 162, 171, 341, 342, 346, 386, 396, 445, 465, 467, 469], "insertlog": 145, "node_name_list": 145, "show_nam": 145, "show_op": 145, "first_n": 145, "summar": [145, 421], "1024": [145, 199, 243, 440], "dump_fp32": 145, "rerang": 146, "rerangequantizedconcat": 146, "rerange_quant": 146, "version1_lt_version2": [147, 390], "version1": [147, 390], "version2": [147, 390], "version1_gt_version2": [147, 390], "greater": [147, 390, 459, 469], "version1_eq_version2": [147, 390], "version1_gte_version2": [147, 390], "version1_lte_version2": [147, 390], "disable_random": 147, "seed": [147, 181, 182, 279, 390, 434, 471], "disabl": [147, 181, 182, 394, 454, 463], "read_graph": 147, "in_graph": 147, "in_graph_is_binari": 147, "write_graph": 147, "out_graph_def": 147, "out_graph_fil": 147, "write": [147, 206, 250, 390, 423, 429, 434, 437, 467], "is_ckpt_format": 147, "model_path": [147, 420], "ckpt": [147, 325, 333, 358, 472], "folder": [147, 199, 204, 243, 248, 325, 358, 389, 418, 442, 447, 451, 467], "is_saved_model_format": 147, "saved_model": [147, 273], "get_estimator_graph": 147, "estim": [147, 271, 324, 333, 469], "input_fn": [147, 333], "get_tensor_by_nam": 147, "try_cnt": 147, "consid": [147, 271, 324, 394, 421, 455, 469], "import": [147, 162, 181, 182, 273, 325, 335, 358, 377, 379, 390, 396, 397, 399, 401, 416, 417, 418, 420, 421, 422, 423, 425, 428, 433, 434, 435, 436, 437, 441, 443, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470], "scope": [147, 434], "onc": [147, 176, 221, 298, 302, 359, 361, 401, 417, 454, 459, 460, 469, 472], "both": [147, 182, 394, 397, 400, 422, 434, 438, 459, 461, 462, 466, 469], "compat": [147, 333, 423, 436, 449, 452, 454, 464], "v1": [147, 209, 210, 253, 268, 269, 271, 321, 322, 324, 333, 423, 425, 426, 433, 436, 459, 464, 465, 472], "suffix": 147, "time": [147, 181, 182, 214, 256, 271, 303, 324, 335, 362, 390, 417, 420, 423, 426, 434, 442, 444, 447, 451, 454, 455, 456, 459, 460, 462, 465, 467, 468, 469], "got": [147, 426, 467], "iterator_sess_run": 147, "sess": [147, 333], "iter_op": 147, "feed_dict": [147, 196, 240], "output_tensor": [147, 333], "measur": [147, 215, 325, 384, 397, 400, 416, 420, 421, 433, 434, 467, 469], "integr": [147, 164, 216, 400, 434, 455], "session": [147, 196, 240, 333, 434, 467], "makeiter": 147, "feed": [147, 196, 240, 421, 459], "end": [147, 174, 181, 182, 197, 213, 214, 241, 255, 256, 296, 302, 359, 361, 400, 401, 421, 422, 427, 431, 434, 448, 456, 459, 467, 468, 469], "predict": [147, 214, 219, 256, 264, 268, 269, 271, 317, 321, 322, 324, 358, 397, 421, 433, 445, 466, 467, 468], "pred": [147, 271, 324, 433], "collate_tf_pr": 147, "collat": [147, 156, 417], "tbe": 147, "get_input_output_node_nam": 147, "fix_ref_type_of_graph_def": 147, "fix": [147, 174, 197, 241, 296, 395, 418, 441, 459, 466, 469], "strip_unused_lib": 147, "offici": [147, 264, 268, 269, 317, 321, 322, 394, 466], "r1": 147, "15": [147, 427, 431, 472], "branch": 147, "get_graph_def": 147, "auto_input_output": 147, "get_model_input_shap": 147, "inout": 147, "get_tensor_val_from_graph_nod": 147, "graph_node_name_map": 147, "kei": [147, 149, 154, 171, 174, 177, 179, 181, 182, 278, 295, 333, 377, 380, 382, 390, 399, 460, 467, 469], "val": [147, 177, 199, 202, 243, 246, 295, 420, 434], "tensor_v": 147, "int8_node_name_revers": 147, "revers": 147, "tf_diagnosis_help": 147, "fp32_model": [147, 149, 156, 390, 400], "quan_model": 147, "save_path": [147, 260, 261, 400, 436], "diagnosi": [147, 181, 182, 434, 464, 470], "generate_feed_dict": 147, "input_tensor": [147, 333], "get_weight_from_input_tensor": 147, "input_tensor_nam": [147, 333], "associ": [147, 267, 320], "quant": [147, 156, 181, 182, 313, 374, 396, 434, 462], "search": [147, 171, 174, 178, 185, 186, 229, 230, 262, 264, 274, 277, 278, 279, 299, 303, 317, 362, 399, 430, 433, 437, 438, 448, 460, 467, 469, 470], "look": [147, 174, 399, 400, 401, 427, 433, 471], "sq_weight_tensor": 147, "sq_weights_nod": 147, "two": [147, 149, 162, 172, 173, 174, 176, 199, 204, 215, 243, 248, 267, 294, 298, 300, 307, 320, 368, 390, 396, 397, 417, 418, 421, 423, 425, 427, 434, 435, 462, 463, 465, 469, 471], "torch": [148, 149, 150, 152, 153, 154, 155, 156, 160, 171, 172, 173, 174, 178, 181, 182, 226, 261, 325, 358, 389, 396, 399, 401, 402, 421, 423, 425, 434, 435, 436, 437, 442, 445, 462, 466, 467], "bf16modulewrapp": 148, "bf16modul": 148, "mix": [148, 151, 181, 182, 301, 313, 325, 360, 374, 399, 400, 406, 430, 437, 443, 444, 445, 470], "precis": [148, 151, 181, 182, 185, 186, 229, 230, 262, 269, 271, 272, 299, 301, 313, 322, 324, 325, 335, 360, 363, 374, 390, 399, 400, 406, 416, 422, 423, 427, 430, 437, 443, 444, 445, 460, 461, 462, 466, 469, 470], "mixed_precision_model": 148, "bf16_symbolic_trac": 148, "fx_sub_module_list": 148, "trace": [148, 149, 155, 156, 171, 181, 182, 261, 365, 396, 444, 469], "_description_": 148, "hessian": [149, 365, 469], "awar": [149, 163, 182, 224, 273, 294, 365, 379, 400, 401, 422, 423, 425, 430, 454, 457, 469], "node_collector": 149, "hook": [149, 163, 174, 223, 224, 286, 291, 382, 421, 422, 434, 459, 466, 467], "record": [149, 156, 164, 197, 198, 199, 205, 216, 223, 241, 242, 243, 249, 390, 418, 465, 467, 469], "hessiantrac": 149, "q_model": [149, 182, 273, 358, 396, 399, 417, 418, 420, 423, 425, 428, 429, 433, 434, 436, 462, 463], "criterion": [149, 163, 165, 166, 167, 173, 174, 181, 182, 218, 221, 263, 316, 421, 422, 434, 459, 462, 469, 471], "yao": 149, "zhewei": 149, "et": [149, 466], "al": [149, 466], "pyhessian": 149, "network": [149, 167, 173, 296, 365, 397, 421, 422, 425, 434, 458, 460, 462, 466, 469], "through": [149, 185, 186, 229, 230, 324, 325, 358, 399, 416, 427, 429, 430, 433, 440, 456, 457, 459, 461, 462, 466], "len": [149, 182, 214, 256, 418, 423, 468], "2020": 149, "ieee": [149, 435, 466], "intern": [149, 313, 374, 417, 418, 433, 459], "confer": [149, 459, 466], "big": [149, 420], "dong": 149, "zhen": 149, "hawq": [149, 365, 469], "v2": [149, 365, 423, 425, 426, 431, 443, 464, 469, 470, 472], "advanc": [149, 181, 182, 394, 399, 406, 462, 471], "system": [149, 162, 215, 390, 416, 440], "33": [149, 472], "18518": 149, "18529": 149, "openvinotoolkit": 149, "nncf": 149, "develop": [149, 335, 395, 396, 431, 434, 435, 437, 443, 454, 459, 460, 463, 465], "hessian_trac": 149, "compare_weight": 149, "float_dict": 149, "ani": [149, 267, 269, 312, 320, 322, 352, 357, 373, 377, 387, 390, 394, 395, 399, 401, 423, 437, 442, 455, 459, 465], "quantized_dict": 149, "compar": [149, 271, 324, 390, 422, 433, 459, 462, 465, 467, 469], "being": [149, 267, 320, 401], "wt_compare_dict": 149, "float_model": 149, "state_dict": [149, 423, 467], "qmodel": 149, "compute_error": 149, "state": [149, 172, 401, 440, 459], "weight_dict": 149, "hawq_top": 149, "enable_act": 149, "modul": [150, 152, 276, 282, 292, 293, 396, 417, 421, 430, 433, 434, 436, 459, 461, 463, 467, 470], "ipex_mixed_precis": 151, "example_input": [151, 154, 156, 181, 182, 261, 425], "nn": [152, 154, 156, 171, 172, 174, 181, 182, 226, 261, 325, 358, 389, 396, 421, 434, 436, 466, 467], "detector": 153, "transformerbasedmodelblockpatterndetector": 153, "pattern_lst": 153, "block_pattern": 153, "detect": [153, 156, 171, 181, 182, 267, 271, 320, 324, 329, 396, 437, 444, 445, 459, 469], "ffn": [153, 174], "get_modul": 154, "set_modul": [154, 156], "new_modul": [154, 156], "torchsmoothqu": [154, 466], "q_func": [154, 185, 186, 229, 230, 301, 302, 303, 304, 306, 307, 308, 309, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 400, 434, 469], "traced_model": [154, 155], "whose": [154, 160, 173, 295, 429, 466, 469], "could": [154, 160, 173, 185, 186, 199, 229, 230, 243, 300, 325, 358, 379, 394, 396, 422, 434, 457, 459, 462, 466, 470], "absorb": [154, 160], "later": [154, 160, 467], "graphtrac": 154, "trace_and_fuse_sub_graph": 155, "is_qat": 155, "get_embedding_contigu": 156, "embed": [156, 459], "contigu": 156, "is_fused_modul": 156, "_propagate_qconfig_help": 156, "collate_torch_pr": 156, "fetch": [156, 159, 190, 234, 418], "collate_result": 156, "input2tupl": 156, "append_attr": 156, "fx_model": 156, "fx_white_list": 156, "append": [156, 300, 303, 362, 396, 422, 434, 457], "graphmodul": [156, 396, 463], "addit": [156, 182, 379, 401, 421, 448, 464, 469], "dir": [156, 197, 241, 389, 418, 426, 429], "generate_activation_observ": 156, "observ": [156, 401, 465, 467, 469], "what": [156, 174, 195, 239, 324, 358, 379, 394], "check_cfg_and_qconfig": 156, "op_infos_from_cfg": 156, "output_tensor_ids_op_nam": 156, "paser_cfg": 156, "ops_nam": 156, "get_quantizable_ops_from_cfg": 156, "input_tensor_ids_op_nam": 156, "update_sq_scal": 156, "ipex_config_path": 156, "smoothquant_scale_info": 156, "ipex_config": 156, "json": [156, 198, 214, 242, 256, 418, 436, 455, 468], "temporari": [156, 390, 394], "auto_copi": 156, "fetch_modul": 156, "op_nam": [156, 178, 181, 182, 314, 375, 390, 391, 434, 459, 467], "simple_infer": 156, "get_example_input": 156, "example_inp": 156, "get_fallback_ord": 156, "confidence_batch": [156, 469], "fallback": [156, 306, 307, 365, 367, 368, 425, 435, 463, 469], "requantize_cfg": 156, "fall": 156, "back": [156, 214, 220, 256, 420, 454], "order": [156, 264, 265, 300, 303, 306, 315, 317, 318, 362, 367, 376, 396, 420, 433, 461, 466, 467, 469], "confid": 156, "ordered_op": 156, "get_mse_order_per_fp32": 156, "mse": [156, 181, 182, 263, 271, 305, 316, 324, 358, 366, 390, 420, 433, 461, 464], "influenc": [156, 459], "last": [156, 167, 177, 181, 182, 417, 435, 437, 439, 444, 448, 462, 466], "fallback_ord": 156, "get_mse_order_per_int8": 156, "get_torch_vers": 156, "match_datatype_pattern": 156, "calculate_quant_min_max": 156, "unsign": [156, 315, 376, 401], "qmin": 156, "qmax": 156, "get_depth": 156, "depth": [156, 421, 463], "get_dict_at_depth": 156, "target_depth": 156, "nest": [156, 179], "get_element_under_depth": 156, "ops_lst": 156, "get_op_type_by_nam": 156, "quantizable_op": 156, "algorithm_registri": 157, "algorithm_typ": 157, "locat": [157, 177, 214, 256, 423, 440, 447, 451, 454, 462, 464, 468, 471], "registr": [157, 199, 206, 214, 243, 250, 256, 289], "algorithmschedul": 157, "conf": [157, 162, 163, 182, 185, 186, 215, 229, 230, 273, 280, 281, 283, 284, 285, 286, 291, 301, 302, 303, 304, 306, 307, 308, 309, 313, 325, 335, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 374, 377, 379, 396, 397, 399, 401, 416, 421, 428, 429, 434, 435, 436, 457, 462, 463, 465, 466, 469], "control": [157, 181, 182, 396, 434, 459, 469], "phase": [157, 397, 434, 459, 462, 463, 469], "fastbiascorrect": [158, 161], "fast_bias_correct": [159, 181, 182, 316, 462], "weight_correct": [159, 181, 182, 316, 462], "5": [160, 164, 181, 182, 201, 210, 216, 245, 253, 271, 324, 358, 400, 418, 425, 427, 433, 434, 458, 459, 461, 462, 466, 468, 469, 471, 472], "kernel": [160, 181, 182, 400, 458, 469], "futur": [160, 185, 186, 217, 229, 230, 430, 434, 445, 470], "weightcorrect": 161, "1e": [161, 466, 471], "05": [161, 182, 271, 324, 433, 466, 472], "evalu": [162, 163, 173, 181, 185, 186, 197, 215, 229, 230, 241, 257, 264, 267, 268, 269, 271, 273, 317, 320, 321, 322, 324, 325, 335, 358, 379, 382, 397, 400, 418, 421, 422, 429, 430, 433, 434, 435, 437, 443, 445, 448, 454, 456, 459, 462, 465, 467, 469, 471], "set_env_var": [162, 215], "env_var": [162, 215], "overwrite_exist": [162, 215], "env": [162, 215, 426], "alreadi": [162, 199, 213, 215, 243, 255, 400, 418, 430, 449, 452, 469], "param": [162, 187, 215, 221, 231, 271, 303, 324, 362, 390, 400, 436, 469], "set_all_env_var": [162, 215], "physic": [162, 215, 394, 416], "core": [162, 181, 182, 215, 416, 432, 447, 451, 458, 472], "get_architectur": [162, 215], "architectur": [162, 215, 274, 277, 399, 416, 421, 434, 459, 460, 470], "get_threads_per_cor": [162, 215], "thread": [162, 181, 182, 215, 352, 357, 417, 458], "get_thread": [162, 215], "get_physical_id": [162, 215], "socket": [162, 215, 390, 458, 472], "get_core_id": [162, 215], "id": [162, 213, 215, 255, 264, 266, 267, 268, 269, 317, 319, 320, 321, 322, 433, 465, 469], "get_bounded_thread": [162, 215], "core_id": [162, 215], "bind": [162, 215], "run_inst": 162, "b_dataload": [162, 181, 182, 416, 434], "b_func": [162, 416], "benchmarkconfig": [162, 181, 182, 416, 420, 434], "accuraci": [162, 177, 181, 182, 185, 186, 229, 230, 257, 262, 271, 286, 291, 299, 324, 325, 335, 358, 363, 377, 379, 387, 396, 399, 401, 417, 418, 420, 422, 423, 424, 425, 433, 434, 445, 454, 456, 457, 459, 460, 461, 464, 465, 466, 467, 470, 471, 472], "goal": [162, 257, 262, 286, 291, 299, 325, 358, 417, 457, 462, 469], "prefer": [162, 262, 299, 358, 459], "space": [162, 174, 181, 182, 185, 186, 229, 230, 262, 269, 274, 277, 278, 279, 299, 303, 306, 313, 322, 325, 358, 362, 367, 374, 394, 395, 397, 400, 401, 459, 462, 471], "etc": [162, 163, 213, 255, 257, 262, 269, 286, 291, 299, 322, 325, 358, 389, 421, 430, 459, 465, 469], "user": [162, 171, 174, 177, 181, 182, 185, 186, 199, 202, 206, 214, 215, 221, 226, 229, 230, 243, 246, 250, 256, 262, 286, 291, 297, 299, 300, 324, 325, 335, 358, 363, 379, 390, 396, 397, 400, 401, 406, 416, 417, 421, 422, 425, 427, 430, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 448, 454, 456, 457, 459, 460, 462, 463, 464, 466, 467, 468, 469, 473], "generate_prefix": 162, "core_list": 162, "command": [162, 215, 379, 420, 423, 437, 439, 442, 447, 451, 455], "numactl": [162, 426, 440, 448], "call_on": 162, "cmd": [162, 455], "log_fil": [162, 351, 356], "window": [162, 416, 454, 455], "config_inst": 162, "raw_cmd": 162, "multi": [162, 169, 171, 174, 267, 320, 324, 358, 397, 417, 418, 430, 434, 456, 459, 462, 469], "trigger": [162, 174, 296, 395], "raw": [162, 198, 202, 205, 242, 246, 249, 306, 367, 433, 469], "summary_benchmark": 162, "summari": [162, 379, 420, 449, 452, 458, 467], "profil": [162, 316], "benchmark_with_raw_cmd": 162, "commend": 162, "fit_with_raw_cmd": 162, "cores_per_inst": [162, 181, 182, 416, 434, 461], "num_of_inst": [162, 181, 182, 416, 434, 461], "test": [162, 181, 182, 214, 256, 395, 399, 420, 431, 472], "fit": [162, 173, 181, 182, 303, 325, 358, 362, 377, 379, 396, 399, 416, 417, 418, 420, 423, 428, 429, 433, 434, 435, 436, 459, 462, 463], "pb": [162, 181, 182, 325, 333, 358, 399, 416, 423, 428, 434, 436, 467, 472], "eval_dataload": [162, 181, 182, 185, 186, 229, 230, 300, 301, 302, 303, 304, 306, 307, 308, 309, 325, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 379, 399, 416, 428, 429, 433, 434, 462, 469], "compon": [163, 257, 263, 300, 316, 396, 420, 423, 431, 432, 437, 454, 457, 458], "quantizationawaretrainingcallback": 163, "pruningcallback": 163, "distillationcallback": 163, "basecallback": 163, "design": [163, 196, 219, 224, 240, 324, 363, 397, 399, 434, 442, 445, 459, 462, 470], "mainli": [163, 176, 224, 298, 434, 459, 462], "prune": [163, 167, 168, 169, 172, 173, 174, 175, 176, 177, 181, 182, 224, 225, 263, 280, 281, 283, 284, 285, 289, 291, 292, 294, 295, 296, 298, 300, 316, 390, 399, 423, 424, 427, 428, 430, 457, 460, 470, 471], "distil": [163, 166, 181, 182, 216, 223, 224, 263, 316, 399, 424, 428, 430, 457, 470, 471], "In": [163, 173, 174, 175, 182, 196, 224, 240, 267, 294, 296, 320, 335, 394, 396, 397, 399, 400, 417, 418, 420, 421, 422, 423, 433, 434, 444, 447, 448, 451, 456, 457, 459, 462, 463, 465, 466, 467, 468, 469, 470], "adaptor": [163, 181, 182, 315, 376, 382, 399, 401, 430, 463, 464, 466, 467, 470], "deriv": [163, 167, 173, 174, 175, 176, 257, 294, 296, 298], "pipelin": [163, 257, 274, 275, 300, 422, 434, 457], "knowledg": [163, 164, 181, 182, 216, 257, 422, 424, 428, 430, 434, 436, 471], "transfer": [163, 204, 248, 257, 418, 421, 422, 434, 466], "teacher": [163, 181, 182, 257, 421, 422, 434, 472], "student": [163, 181, 182, 197, 223, 241, 257, 418, 421, 422, 472], "distillation_conf": [163, 178, 257], "_epoch_ran": [163, 257], "integ": [163, 173, 174, 181, 182, 257, 267, 271, 278, 294, 296, 320, 324, 377, 400, 401, 462, 466, 469], "indic": [163, 181, 182, 190, 195, 197, 234, 239, 241, 257, 267, 278, 320, 396, 417, 426, 467], "how": [163, 167, 173, 174, 181, 182, 214, 256, 257, 294, 395, 396, 398, 400, 417, 418, 421, 422, 423, 429, 433, 434, 448, 449, 452, 453, 454, 459, 462, 466, 468, 469, 470, 471], "much": [163, 167, 181, 182, 214, 256, 257, 421, 448, 466, 468], "epoch": [163, 174, 257, 296, 379, 417, 421, 422, 423, 434, 457, 459, 471], "ran": [163, 257], "eval_frequ": [163, 257], "frequenc": [163, 174, 181, 182, 257, 296, 434, 458, 459, 471], "term": [163, 174, 175, 257, 395, 421, 432, 433, 456, 457, 469], "best_scor": [163, 257], "best": [163, 214, 256, 257, 262, 299, 306, 367, 394, 397, 431, 437, 443, 454, 456, 462, 468, 469], "metric": [163, 181, 182, 185, 186, 218, 229, 230, 257, 262, 263, 278, 286, 291, 299, 300, 316, 325, 358, 379, 382, 397, 400, 418, 420, 423, 434, 435, 462, 465, 467, 469, 470, 471, 472], "best_model": [163, 257], "found": [163, 257, 399, 421, 435, 442, 466, 469, 472], "critet": [164, 216], "includ": [164, 167, 171, 173, 175, 181, 182, 197, 199, 206, 214, 216, 241, 243, 250, 256, 262, 272, 294, 299, 377, 390, 394, 395, 400, 401, 417, 418, 420, 431, 432, 433, 434, 437, 440, 443, 448, 459, 462, 463, 467, 469], "tensorflowknowledgedistillationloss": [164, 216], "pytorchknowledgedistillationloss": [164, 216, 434], "pytorchintermediatelayersknowledgedistillationloss": [164, 216], "tensorflowcriterion": [164, 216], "pytorchcriterion": [164, 216], "criterion_registri": [164, 216], "criterion_typ": [164, 216], "registry_criterion": [164, 216], "knowledgedistillationframework": [164, 216], "student_model": [164, 182, 216, 434], "teacher_model": [164, 181, 182, 216, 421, 422, 434], "knowledgedistillationloss": [164, 216, 434, 471], "temperatur": [164, 181, 182, 216, 434, 471], "loss_typ": [164, 181, 182, 216, 434, 471], "ce": [164, 181, 182, 216, 434, 471], "loss_weight": [164, 181, 182, 216, 434, 471], "pytorchknowledgedistillationlosswrapp": [164, 216], "param_dict": [164, 216, 221], "tensorflowknowledgedistillationlosswrapp": [164, 216], "tensorflowknowledgedistillationlossextern": [164, 216], "intermediatelayersknowledgedistillationloss": [164, 216], "layer_map": [164, 182, 216, 421], "add_origin_loss": [164, 182, 216], "pytorch": [164, 167, 171, 173, 174, 181, 182, 196, 197, 199, 202, 206, 214, 216, 221, 223, 240, 241, 243, 246, 250, 256, 261, 262, 271, 272, 292, 294, 297, 299, 307, 316, 324, 325, 334, 358, 368, 383, 390, 396, 397, 399, 400, 401, 417, 421, 422, 424, 427, 430, 431, 434, 435, 436, 437, 439, 442, 443, 444, 445, 454, 459, 460, 461, 464, 466, 469, 471], "pytorchintermediatelayersknowledgedistillationlosswrapp": [164, 216], "selfknowledgedistillationloss": [164, 216], "selfknowledg": [164, 216], "pytorchselfknowledgedistillationloss": [164, 216], "pytorchselfknowledgedistillationlosswrapp": [164, 216], "pruner": [166, 263, 280, 281, 282, 283, 284, 286, 291, 292, 294, 297, 316, 434, 459, 471], "model_slim": [166, 168, 174], "auto_slim": [166, 168, 170], "pattern_analyz": [166, 168, 170], "weight_slim": [166, 168, 170, 174], "criteria": [166, 168, 181, 182, 262, 286, 291, 294, 296, 299, 396, 454, 466], "reg": [166, 168, 174], "schedul": [166, 168, 174, 175, 181, 182, 263, 292, 296, 316, 434, 457], "callback": [166, 286, 291, 379, 382, 396, 434, 457, 459, 462], "register_criterion": 167, "registri": [167, 173, 174, 175, 176, 294, 296, 298, 397], "get_criterion": 167, "pruningcriterion": 167, "about": [167, 390, 394, 417, 434, 463, 469, 470, 472], "module_nam": [167, 174, 175, 296, 390], "store": [167, 171, 174, 175, 181, 182, 199, 243, 289, 296, 429], "score": [167, 173, 174, 181, 182, 264, 265, 267, 268, 269, 271, 296, 317, 318, 320, 321, 322, 324, 365, 382, 396, 433, 456, 459, 465, 469], "magnitudecriterion": 167, "magnitud": [167, 181, 182, 263, 271, 282, 316, 324, 430, 459], "criterion_class": 167, "determin": [167, 173, 174, 181, 182, 384, 394, 396, 459, 462, 466], "gradientcriterion": 167, "gradient": [167, 280, 430, 434, 459, 472], "absolut": [167, 181, 182, 271, 324, 433, 434, 458, 459, 462, 469], "snipcriterion": 167, "snip": [167, 181, 182, 296, 430, 459, 472], "product": [167, 399, 430, 435, 437, 438, 454, 458, 460, 462, 465, 469], "singl": [167, 176, 181, 182, 190, 197, 214, 234, 241, 256, 267, 296, 298, 320, 324, 358, 396, 418, 420, 431, 459], "shot": [167, 174, 176, 224, 296, 298, 397, 430, 434, 459, 460], "connect": [167, 296, 454, 458, 459, 465], "sensit": [167, 280, 296, 430, 459], "arxiv": [167, 174, 296, 459, 466], "org": [167, 174, 267, 296, 320, 395, 396, 420, 431, 449, 452], "1810": [167, 296], "02340": [167, 296], "snipmomentumcriterion": 167, "snip_momentum": [167, 181, 182, 434, 459], "momentum": [167, 296, 430, 434, 459, 471], "mechan": [167, 459, 465, 470], "preserv": 167, "step": [167, 173, 174, 176, 181, 182, 294, 296, 298, 379, 401, 420, 421, 422, 423, 425, 434, 449, 452, 454, 457, 459, 461, 463, 465, 466, 467, 469], "beta": 167, "snipmomentumblockcriterion": 167, "snip_momentum_block": 167, "retrainfreecriterion": 167, "retrain_fre": [167, 174], "auto": [169, 171, 181, 182, 301, 316, 360, 366, 390, 396, 437, 440, 442, 444, 445, 459, 462], "slim": [169, 170, 171, 267, 320, 331, 333, 436, 459], "round_multipli": 169, "32": [169, 423, 429, 458, 466, 472], "spars": [169, 174, 296, 418, 460], "automat": [169, 171, 172, 181, 182, 199, 202, 209, 210, 243, 246, 253, 262, 272, 299, 396, 399, 416, 418, 430, 434, 435, 437, 439, 442, 443, 445, 447, 448, 449, 451, 452, 454, 457, 459, 462, 466, 468, 469], "model_slim_ffn2": 169, "some": [169, 171, 181, 182, 197, 241, 295, 401, 418, 420, 425, 431, 433, 434, 456, 459, 462, 463, 466, 467, 469, 470], "part": [169, 174, 294, 296, 396, 431, 435, 449, 452, 459, 466, 470], "perman": [169, 394, 459], "obtain": [169, 171, 174, 175, 177, 295, 396, 459, 465, 466, 469], "acceler": [169, 421, 434, 437, 445, 454, 459, 460, 463, 466, 469], "directli": [169, 181, 182, 196, 240, 267, 271, 295, 320, 324, 433, 434, 441, 459, 461, 462, 467], "sprase": 169, "multipl": [169, 181, 182, 183, 184, 188, 189, 197, 198, 200, 201, 202, 203, 204, 208, 211, 214, 221, 227, 228, 232, 233, 235, 241, 242, 244, 245, 246, 247, 248, 252, 254, 256, 272, 325, 326, 327, 329, 335, 416, 418, 425, 434, 457, 459, 465, 466, 469], "model_slim_mha": 169, "parse_auto_slim_config": 169, "ffn2_sparsiti": 169, "mha_spars": 169, "generate_ffn2_pruning_config": 169, "consecut": [169, 171, 172, 459], "generate_mha_pruning_config": 169, "head": [169, 171, 173, 174, 177, 459], "get_attribut": 171, "level": [171, 363, 377, 386, 394, 466, 469], "descent": 171, "get_common_modul": 171, "layer1": [171, 181, 182, 434, 459, 462], "layer2": [171, 434, 459, 462], "nearest": [171, 214, 256, 468], "father": 171, "print_iter": 171, "recipesearch": 171, "searcher": [171, 279], "root": [171, 197, 198, 199, 202, 241, 242, 243, 246, 271, 324, 418, 423, 433, 434, 471], "levelwis": 171, "wai": [171, 198, 199, 202, 242, 243, 246, 397, 401, 417, 418, 420, 433, 434, 437, 440, 455, 457, 459, 462, 466, 469, 471], "huggingfac": [171, 174, 197, 241, 385, 418, 424, 428, 442, 443, 444, 445, 466], "bert": [171, 182, 193, 196, 197, 214, 237, 240, 241, 256, 399, 418, 421, 433, 442, 459, 468, 472], "recipe_sampl": 171, "bertattent": 171, "dens": [171, 176, 181, 182, 298, 459, 472], "infom": [171, 217], "basic": [171, 173, 181, 182, 213, 255, 263, 274, 294, 305, 309, 312, 316, 366, 370, 373, 379, 430, 431, 434, 461, 465], "searching_result": 171, "jitbasicsearch": 171, "placeholder_shap": 171, "placeholder_dtyp": 171, "By": [171, 181, 182, 264, 317, 399, 401, 433, 436, 447, 448, 451, 460, 469], "jit": [171, 181, 437, 439, 444, 466, 467], "script": [171, 264, 265, 268, 269, 317, 318, 321, 322, 423, 430, 437, 441, 444, 445, 448, 460], "them": [171, 197, 241, 396, 401, 417, 420, 425, 427, 429, 457, 459, 469], "static_graph": 171, "flatten_static_graph": 171, "target_lay": 171, "linear2linearsearch": 171, "target_op_lut": 171, "lookup": 171, "tabl": [171, 174, 390, 401, 420, 425, 472], "code": [171, 185, 186, 215, 229, 230, 273, 297, 300, 358, 379, 396, 399, 400, 401, 418, 421, 422, 423, 429, 430, 432, 433, 437, 439, 441, 442, 443, 445, 448, 454, 456, 457, 459, 460, 461, 462, 465, 466, 467, 468], "current_pattern": 171, "statu": [171, 387, 394, 417, 456, 459], "selfmhasearch": 171, "classifierheadsearch": 171, "final": [171, 174, 177, 296, 434, 440, 456, 459, 462, 464, 469], "classifi": [171, 177, 197, 241, 271, 324, 418, 421], "classifierheadsearchertf": 171, "squeezer": 172, "postcompressionutil": 172, "librari": [172, 218, 263, 316, 352, 392, 395, 399, 431, 434, 435, 439, 448, 454, 460, 462], "relat": [172, 175, 257, 267, 286, 291, 294, 320, 382, 401, 437, 459, 471], "linearcompress": 172, "root_linear": 172, "target_linear": 172, "also": [172, 196, 199, 214, 240, 243, 256, 264, 317, 324, 335, 358, 395, 397, 400, 401, 417, 420, 424, 428, 430, 433, 434, 437, 442, 447, 448, 451, 454, 455, 456, 459, 460, 462, 463, 466, 469], "while": [172, 174, 177, 296, 303, 362, 400, 418, 424, 430, 435, 437, 442, 454, 461, 462, 466], "hidden": [172, 173, 294, 400], "structur": [172, 174, 181, 182, 296, 314, 375, 430, 453, 455, 459, 462, 467, 470, 472], "layer_1": 172, "act_fn": 172, "layer_2": 172, "linearcompressioniter": 172, "linear_pattern": 172, "register_pattern": [173, 294], "sure": [173, 174, 176, 294, 296, 298, 416], "get_pattern": [173, 294], "assertionerror": [173, 174, 177, 294, 295, 296, 325], "basepattern": [173, 175], "unit": [173, 294, 395, 459], "e": [173, 181, 182, 394, 421, 424, 428, 437, 442, 443, 447, 451, 459, 466, 469], "4x1": [173, 181, 182, 290, 434, 459, 472], "is_glob": [173, 294], "local": [173, 181, 182, 294, 390, 447, 451, 459, 465], "contrast": [173, 294, 468], "keep_mask_lay": 173, "invalid_lay": 173, "max_sparsity_ratio_per_op": [173, 174, 178, 181, 182, 434, 459], "sparsiti": [173, 174, 176, 177, 181, 182, 296, 298, 390, 399, 418, 430, 434, 470, 472], "reach": [173, 176, 181, 182, 298, 395, 399, 417, 459, 469], "min_sparsity_ratio_per_op": [173, 178, 181, 182, 434, 459], "minimum": [173, 181, 182, 401, 420, 434, 445, 459, 469], "target_spars": [173, 178, 181, 182, 434, 459, 461, 471], "patternnxm": [173, 294], "nxm": [173, 174, 181, 182, 290, 294, 459], "kept": [173, 294], "block_siz": [173, 294], "height": [173, 210, 214, 253, 256, 294, 423, 468, 471], "width": [173, 210, 214, 253, 256, 294, 423, 459, 462, 468, 471], "vertic": [173, 214, 256, 294, 468], "becaus": [173, 174, 214, 256, 294, 396, 462, 466, 468, 469], "patternninm": [173, 294], "n": [173, 181, 182, 198, 214, 242, 256, 265, 294, 318, 377, 401, 418, 420, 421, 459, 462, 466, 468], "out": [173, 181, 182, 197, 198, 199, 241, 242, 243, 262, 294, 299, 395, 396, 399, 418, 437, 442, 447, 448, 449, 451, 452, 454, 459, 461, 462], "continu": [173, 267, 294, 320, 397, 434, 455, 459, 470], "doc": [173, 181, 182, 294, 312, 313, 324, 358, 373, 374, 377, 390, 433, 434, 449, 452], "md": [173, 181, 182, 294, 324, 358, 423, 462], "element": [173, 177, 195, 239, 267, 294, 320, 390, 418, 430, 433, 459, 466], "patternmha": 173, "mha": [173, 174], "register_prun": [174, 296], "parse_valid_pruner_typ": 174, "get_prun": [174, 296], "cuurent": [174, 296], "baseprun": 174, "current_sparsity_ratio": [174, 296], "global_step": [174, 296], "total": [174, 214, 256, 271, 296, 324, 418, 420, 459, 468], "start_step": [174, 178, 181, 182, 296, 434, 459, 461], "end_step": [174, 178, 181, 182, 296, 434, 459, 461], "pruning_frequ": [174, 178, 181, 182, 434, 459], "target_sparsity_ratio": [174, 296], "show": [174, 390, 394, 421, 423, 434, 440, 455, 466, 469, 470], "basicprun": 174, "arrang": [174, 198, 199, 202, 242, 243, 246, 418, 459], "proce": 174, "regul": 174, "patternlockprun": [174, 284, 296], "parent": [174, 176, 290, 296, 298, 467], "blockmaskprun": 174, "grad": 174, "retrainfreeprun": 174, "pruner_class": 174, "rearrang": 174, "fast": [174, 181, 182, 399, 460], "retrain": [174, 422, 459], "effect": [174, 399, 400, 460], "2204": 174, "09656": 174, "progressiveprun": 174, "interpol": [174, 214, 256, 433, 459, 468], "fine": [174, 197, 241, 418, 440, 459, 460, 462], "grain": [174, 459, 460, 469], "improv": [174, 395, 434, 437, 454, 455, 459, 460, 462, 463, 469, 470, 472], "ad": [174, 197, 241, 264, 303, 317, 362, 401, 420, 435, 437, 442, 445, 449, 452, 459, 467], "interv": [174, 459], "multiheadattentionprun": 174, "mha_modul": 174, "partial": [174, 459, 462], "qkv": 174, "feedward": 174, "simultan": [174, 437, 457, 461], "qkv_name": 174, "query_layer_nam": 174, "key_layer_nam": 174, "value_layer_nam": 174, "ffn_name": 174, "attention_ffn_nam": 174, "mha_nam": 174, "keep": [174, 177, 295, 363, 396, 400, 453, 454, 464], "qkv_modul": 174, "ffn_modul": 174, "mha_compress": 174, "mhacompress": 174, "critic": [174, 394], "modifi": [174, 199, 226, 243, 357, 396, 401, 423, 427, 459, 471], "linear_lay": 174, "independ": [174, 352, 357, 401], "length": [174, 181, 182, 197, 214, 241, 256, 267, 320, 399, 418, 433, 460, 462, 468], "4x": [174, 397, 462], "subsequ": [174, 437, 454], "head_mask": 174, "mha_head_s": 174, "similar": [174, 434, 461, 466, 469, 471], "mha_scor": 174, "regular": [175, 264, 295, 317], "register_reg": 175, "regulariz": 175, "get_reg_typ": 175, "get_reg": 175, "basereg": 175, "grouplasso": 175, "coeff": 175, "group": [175, 281, 430, 459, 467, 468, 469, 472], "lasso": [175, 281, 430, 459], "select": [175, 182, 197, 241, 396, 397, 430, 431, 454, 459, 462, 467, 469], "reg_term": 175, "coeffient": 175, "register_schedul": [176, 298], "get_schedul": [176, 298], "pruningschedul": 176, "gradual": [176, 298, 459], "oneshotschedul": [176, 298], "iterativeschedul": [176, 298], "get_sparsity_ratio": 177, "elementwise_over_matmul_gemm_conv": 177, "elementwise_over_al": 177, "blockwise_over_matmul_gemm_conv": 177, "get_sparsity_ratio_tf": 177, "check_config": [177, 295], "prune_config": [177, 295], "everyth": [177, 295, 442], "reset_none_to_default": 177, "undefin": [177, 295], "update_param": 177, "process_weight_config": 177, "global_config": [177, 280, 281, 283, 284, 285], "local_config": [177, 181, 182, 280, 281, 283, 284, 285], "default_config": 177, "pruners_info": 177, "process_yaml_config": 177, "check_key_valid": 177, "template_config": 177, "user_config": 177, "process_and_check_config": [177, 295], "process_config": [177, 295], "parse_last_linear": 177, "often": [177, 417, 421, 457, 459], "act": [177, 195, 239, 394], "might": [177, 396, 469], "caus": [177, 417, 438, 459], "drop": [177, 267, 295, 320, 434, 435, 448, 459, 472], "parse_last_linear_tf": 177, "parse_to_prun": [177, 295], "parse_to_prune_tf": 177, "generate_pruner_config": 177, "dotdict": [177, 178, 182, 335, 390], "prunerv2": 178, "pruning_typ": [178, 181, 182, 434, 459], "pruning_scop": [178, 181, 182, 434, 459], "sparsity_decay_typ": [178, 181, 182, 434, 459], "pruning_op_typ": [178, 181, 182, 434, 459], "reg_typ": 178, "criterion_reduce_typ": 178, "resume_from_pruned_checkpoint": 178, "similiar": 178, "cfg_fname": 178, "parser": 178, "quantization_conf": 178, "pruning_conf": 178, "graph_optimization_conf": [178, 262], "mixedprecision_conf": 178, "benchmark_conf": 178, "nasconfig": [178, 182, 275, 277, 397], "approach": [178, 181, 182, 274, 275, 277, 396, 397, 399, 418, 421, 430, 434, 442, 454, 460, 461, 469, 471], "search_spac": [178, 182, 274, 277, 278, 279], "search_algorithm": [178, 182, 263, 276, 316, 397], "na": [178, 182, 263, 316, 329, 430], "procedur": [178, 397, 459], "defaultconf": 178, "instead": [178, 179, 182, 196, 240, 390, 440, 442, 445, 459], "notat": [178, 179, 182, 390], "deep_get": [179, 335], "dot": [179, 435, 462], "eg": [179, 199, 243, 418, 461], "person": [179, 394, 460], "john": 179, "deep": [179, 399, 400, 417, 430, 431, 434, 435, 437, 439, 442, 443, 445, 448, 454, 460, 462, 469, 470, 472], "deep_set": [179, 335], "sex": [179, 394], "male": 179, "pythonic_config": 180, "random_se": [181, 182, 303, 362, 434, 471], "1978": [181, 182], "workspac": [181, 182, 389, 390, 436], "default_workspac": [181, 182], "resume_from": [181, 182, 390], "tensorboard": [181, 182, 382, 390, 400, 434], "set_random_se": [181, 182, 390], "set_workspac": [181, 182, 390], "set_resume_from": [181, 182, 390], "set_tensorboard": [181, 182, 390], "directori": [181, 182, 198, 199, 242, 243, 333, 385, 387, 389, 390, 418, 423, 426, 447, 449, 451, 452, 467], "histori": [181, 182, 389, 390, 454, 469], "nc_workspac": [181, 182], "datetim": [181, 182], "now": [181, 182, 214, 256, 396, 397, 401, 418, 423, 445, 461, 468, 469], "strftime": [181, 182], "d_": [181, 182], "h": [181, 182, 214, 256, 423, 468], "resum": [181, 182, 185, 186, 229, 230, 301, 302, 304, 307, 308, 309, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370], "wa": [181, 182, 400, 434, 460, 469], "flag": [181, 182, 265, 318, 420], "visual": [181, 182, 399, 445, 454, 465, 467, 469, 470], "displai": [181, 182, 312, 313, 373, 374, 390, 454], "2022": [181, 182, 399, 432, 466], "workspace_path": [181, 182], "accuracycriterion": [181, 182, 434, 469], "higher_is_bett": [181, 182, 324, 358, 469, 471], "rel": [181, 182, 335, 434, 461, 469, 471, 472], "tolerable_loss": [181, 182, 434, 469], "01": [181, 182, 434, 458, 461, 469, 471, 472], "higher": [181, 182, 185, 186, 229, 230, 278, 325, 358, 379, 396, 420, 421, 425, 433, 459, 462, 465], "accept": [181, 182, 377, 394, 416, 417], "accuracy_criterion": [181, 182, 335, 434, 456, 461, 469, 471], "avail": [181, 182, 329, 402, 404, 408, 411, 414, 424, 426, 428, 430, 447, 451, 458, 459, 469, 472], "warmup": [181, 182, 416, 434, 461], "inter_num_of_thread": [181, 182, 352, 357, 434, 461], "intra_num_of_thread": [181, 182, 352, 357, 434, 461], "benchmark": [181, 182, 217, 263, 300, 316, 335, 390, 399, 406, 436, 437, 441, 445, 448, 454, 469, 470, 471, 472], "empti": [181, 182, 440], "onnxrt_trt_ep": [181, 182, 435, 462], "onnxrt_cuda_ep": [181, 182, 435, 462], "inter": [181, 182, 195, 199, 239, 243], "intra": [181, 182], "quantizationconfig": 181, "post_training_static_qu": [181, 418, 434, 461, 469], "calibration_sampling_s": [181, 182, 434], "op_type_dict": [181, 182, 401, 461, 462, 469], "op_name_dict": [181, 182, 420, 434, 462, 469], "strategy_kwarg": [181, 182, 465, 469], "timeout": [181, 182, 434, 461, 469, 471], "max_trial": [181, 182, 434, 469], "quant_level": [181, 182, 469], "posttrainingquantconfig": [181, 182, 358, 396, 399, 401, 417, 420, 425, 428, 433, 434, 436, 462, 463, 465, 466, 469], "quantizationawaretrainingconfig": [181, 182, 379, 396, 422, 425, 434, 462, 463, 469], "requir": [181, 182, 188, 300, 333, 357, 396, 400, 416, 417, 420, 422, 423, 427, 434, 435, 436, 438, 448, 454, 458, 459, 462, 464, 465, 466, 467, 469, 471], "cv": [181, 182, 459], "object_detect": [181, 182, 267, 320], "nlp": [181, 182, 297, 442, 459, 462], "recommendation_system": [181, 182], "explicitli": [181, 182, 429, 459], "overrid": [181, 182, 390], "quantiztaion": [181, 182], "smooth_quant_arg": [181, 182, 462, 466], "gemm_to_matmul": [181, 182, 462], "graph_optimization_level": [181, 182, 461, 462], "disable_al": [181, 182, 461], "enable_bas": [181, 182], "enable_extend": [181, 182], "enable_al": [181, 182], "first_conv_or_matmul_quant": [181, 182, 462], "last_conv_or_matmul_quant": [181, 182, 462], "pre_post_process_quant": [181, 182, 462], "preprocess": [181, 182, 197, 214, 241, 256, 382, 423, 468], "postprocess": [181, 182, 208, 211, 214, 218, 256, 263, 316, 324, 358, 382, 400, 434, 467, 468], "vaild": [181, 182], "dedic": [181, 182], "quant_format": [181, 182, 261, 425], "constraint": [181, 182, 262, 299, 434, 459, 465, 469, 471], "conv1": [181, 182, 462, 471], "tuning_strategi": [181, 182], "guarante": [181, 182, 434], "models": [181, 182, 335, 434, 456, 461], "footprint": [181, 182, 262, 286, 291, 299, 335, 422, 434, 456, 459, 461], "earli": [181, 182, 434, 462, 469, 471], "stop": [181, 182, 434, 469, 470, 471], "field": [181, 182, 199, 243, 267, 320, 396, 400, 401, 423, 434, 465, 469, 471], "exit": [181, 182, 302, 359, 361, 434, 471], "excluded_precis": [181, 182, 463], "exclud": [181, 182, 400, 463], "conserv": [181, 182, 316, 366], "use_distributed_tun": 181, "weightpruningconfig": [181, 182, 226, 434, 457, 459], "pruning_config": [181, 182, 434], "9": [181, 182, 396, 431, 434, 459, 461, 466, 469, 471], "98": [181, 182, 434, 459, 461, 472], "exp": [181, 182, 434, 459], "link": [181, 182, 197, 241, 324, 358, 418, 425, 447, 451, 454, 472], "90": [181, 182, 471, 472], "magnitude_progress": [181, 182], "snip_progress": [181, 182], "snip_momentum_progress": [181, 182], "pattern_lock": [181, 182, 263, 282, 316], "most": [181, 182, 271, 324, 420, 434, 435, 459, 462, 466, 469], "feasibl": [181, 182], "situat": [181, 182, 423, 459], "unstructur": [181, 182, 290, 430, 459, 472], "8x1": [181, 182], "channelx1": [181, 182, 459], "1xchannel": [181, 182, 459], "itrex": [181, 182], "start": [181, 182, 214, 256, 267, 320, 363, 431, 468, 469, 470, 473], "togeth": [181, 182, 214, 256, 421, 431, 441, 460, 467, 468], "sort": [181, 182, 306, 367, 420, 469], "sinc": [181, 182, 262, 264, 286, 291, 299, 317, 421, 425, 431, 433, 448, 454, 457, 464], "lead": [181, 182, 421, 434, 435, 459, 466], "increas": [181, 182, 419, 430, 437, 454, 469], "cube": [181, 182, 459], "6": [181, 182, 399, 427, 462, 466, 469, 472], "update_config": [181, 182], "10": [181, 182, 199, 243, 303, 362, 399, 416, 418, 425, 431, 434, 459, 461, 468, 469, 472], "knowledgedistillationlossconfig": [181, 182, 421, 422, 434, 457], "hyperparamet": [181, 182, 312, 465, 466, 469], "entropi": [181, 182, 469], "groundtruth": [181, 182, 267, 320], "label": [181, 182, 185, 186, 197, 199, 200, 201, 202, 205, 210, 214, 219, 229, 230, 241, 243, 244, 245, 246, 249, 253, 256, 264, 266, 271, 317, 319, 324, 325, 358, 379, 396, 417, 418, 420, 433, 434, 462, 468], "tpye": [181, 182], "sum": [181, 182, 271, 324, 420, 421], "distillationconfig": [181, 182, 379, 421, 422, 434, 457], "prepare_compress": [181, 182, 379, 396, 421, 422, 434, 457, 459, 462], "criterion_conf": [181, 182], "d_conf": [181, 182, 422, 434, 457], "compression_manag": [181, 182, 379, 396, 421, 422, 434, 457, 459, 462], "sgd": [181, 182, 221, 421, 434, 461, 471], "learning_r": [181, 182, 434, 461, 471], "callabl": [181, 182, 269, 322, 379, 417], "featur": [181, 182, 197, 198, 210, 214, 241, 242, 253, 256, 395, 399, 416, 417, 419, 421, 434, 435, 436, 437, 441, 442, 445, 454, 459, 460, 464, 468], "altern": [181, 182, 358], "distil_loss": [181, 182, 434], "crossentropyloss": [181, 182, 216, 421, 434], "lr": [181, 182, 421, 423, 434], "tuningcriterion": [182, 434, 456, 465, 469], "tuning_criterion": [182, 434, 456, 465, 469], "dynam": [182, 187, 231, 261, 313, 374, 400, 417, 421, 425, 430, 434, 437, 442, 443, 444, 445, 448, 454, 460, 469, 472], "ptq": [182, 358, 396, 420, 423, 430, 434, 462, 466, 467, 469], "tri": [182, 469], "meet": [182, 188, 300, 302, 359, 361, 396, 456, 460, 461, 462, 467, 469], "bayesian": [182, 263, 279, 305, 316, 366, 397, 461], "mse_v2": [182, 263, 305, 316, 366], "hawq_v2": [182, 316, 366], "exhaust": [182, 263, 279, 305, 316, 366, 461], "docstr": [182, 377], "copi": [182, 295, 390, 417], "deepcopi": 182, "model_origin": [182, 358, 463], "qat_op_name_dict": 182, "intermediatelayersknowledgedistillationlossconfig": [182, 421], "relationship": 182, "student_layer_nam": 182, "student_layer_output_process": 182, "teacher_layer_nam": 182, "teacher_layer_output_process": 182, "desir": [182, 210, 214, 253, 256, 401, 468], "either": [182, 267, 320, 438, 442, 457, 461, 462], "serv": [182, 333], "numer": [182, 271, 324, 401, 435, 460, 462], "abbrevi": 182, "layer_nam": 182, "l1": 182, "selfknowledgedistillationlossconfig": [182, 421, 434], "student1_layer_name1": 182, "teacher_layer_name1": 182, "student2_layer_name1": 182, "student1_layer_name2": 182, "teacher_layer_name2": 182, "student2_layer_name2": 182, "soft": 182, "l2": [182, 459], "hard": [182, 417, 420], "resblock": 182, "deepst": 182, "fc": 182, "02": [182, 466, 472], "mixedprecisionconfig": [182, 325, 377, 434, 435], "mixedprecis": [182, 272, 434], "doesn": [182, 214, 256, 400, 423, 434, 435, 455, 471], "fp16": [182, 313, 374, 462], "won": [182, 462], "work": [182, 262, 299, 398, 417, 421, 449, 452, 459, 463, 464, 466, 467], "mix_precis": [182, 316, 377, 434, 435], "converted_model": [182, 325, 434, 435], "exportconfig": 182, "14": [182, 260, 261, 425, 431, 466, 472], "dynamic_ax": [182, 261, 425], "qlinear": [182, 199, 206, 243, 250, 271, 324, 400, 425, 444, 472], "ax": [182, 261], "onnxqlinear2qdqconfig": 182, "onnxqlinear2qdq": 182, "torch2onnxconfig": [182, 425], "torch2onnx": [182, 258, 263, 316], "qdq_op_fp32_bia": 182, "qdq_op_int32_bia": 182, "qdq_op_fp32_bias_qdq": 182, "resnet50": [182, 399, 420, 423, 425, 435, 437, 441, 459, 462, 465, 472], "int8_onnx_config": [182, 425], "randn": [182, 425], "224": [182, 210, 253, 399, 418, 423, 425, 428, 434, 437, 468, 471, 472], "batch_siz": [182, 187, 189, 194, 195, 196, 197, 198, 217, 231, 233, 238, 239, 240, 241, 242, 261, 397, 417, 418, 423, 425, 429, 434, 437, 462], "tf2onnxconfig": [182, 425], "tf2onnx": [182, 258, 263, 316], "keyword": 182, "argument": [182, 377, 397, 420], "output_graph": 182, "42": [182, 279, 458, 472], "dyna": [182, 263, 276, 316, 397, 430, 461], "sigopt": [183, 184, 227, 228, 263, 316, 460], "tpe": [183, 184, 227, 228, 263, 316], "sigopttunestrategi": [185, 229], "q_dataload": [185, 186, 229, 230, 301, 302, 303, 304, 306, 307, 308, 309, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 429, 469], "eval_func": [185, 186, 229, 230, 300, 301, 302, 303, 304, 306, 307, 308, 309, 325, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 377, 379, 396, 417, 418, 420, 421, 422, 423, 434, 462, 463, 469, 471], "eval_metr": [185, 186, 325, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 379, 433, 462], "q_hook": [185, 186, 229, 230, 301, 302, 303, 304, 306, 307, 308, 309, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370], "hpo": [185, 229], "mandatori": [185, 186, 229, 230, 358, 434, 471], "yield": [185, 186, 195, 217, 229, 230, 239, 303, 325, 358, 362, 377, 379, 417, 462, 469], "_": [185, 186, 229, 230, 358, 396, 397, 400, 417, 420, 421, 423, 425, 427, 434, 435, 436, 437, 443, 447, 449, 451, 452, 456, 459, 462, 464, 465, 466, 467, 469, 471], "well": [185, 186, 229, 230, 325, 358, 379, 397, 399, 418, 459, 462, 464, 466, 471], "taken": [185, 186, 229, 230, 325, 358, 379, 462], "reserv": [185, 186, 229, 230], "abl": [185, 186, 229, 230, 325, 358, 379, 445, 454, 462], "tuner": [185, 186, 229, 230, 262, 299, 325, 358, 379, 462], "scalar": [185, 186, 229, 230, 325, 358, 379, 433, 462], "pseudo": [185, 186, 229, 230, 358, 379, 467], "someth": [185, 186, 199, 229, 230, 243, 358, 379], "fefin": [186, 230], "tpetunestrategi": [186, 230], "basedatalod": [187, 231], "basedataload": [187, 192, 194, 231, 236, 238], "last_batch": [187, 189, 194, 196, 217, 231, 233, 238, 240], "rollov": [187, 189, 194, 196, 217, 231, 233, 238, 240, 417], "collate_fn": [187, 189, 190, 194, 196, 217, 231, 233, 234, 238, 240, 418], "sampler": [187, 189, 191, 194, 196, 217, 231, 233, 235, 238, 240, 252, 263, 312, 373, 417, 423], "batch_sampl": [187, 189, 194, 196, 217, 231, 233, 238, 240], "num_work": [187, 189, 194, 196, 217, 231, 233, 238, 240, 434, 462], "pin_memori": [187, 189, 194, 196, 217, 231, 233, 238, 240], "shuffl": [187, 189, 194, 196, 217, 231, 233, 238, 240, 417, 434, 462], "_generate_dataload": [187, 231], "check_dataload": 188, "default_col": [189, 233], "outer": [189, 233], "defaultdataload": [189, 196, 233, 240], "definit": [190, 195, 234, 239], "style": [190, 204, 234, 248, 377, 395, 418, 429], "drop_last": [190, 195, 234, 239], "iterablefetch": [190, 234], "indexfetch": [190, 234], "base_dataload": [191, 235, 252, 263], "default_dataload": [191, 235, 252, 263], "fetcher": [191, 235, 252, 263], "mxnet_dataload": [191, 235, 252, 263], "onnxrt_dataload": [191, 235, 252, 263, 351], "pytorch_dataload": [191, 235, 252, 263], "tensorflow_dataload": [191, 235, 252, 263, 356], "mxnetdataload": [192, 236], "onnxrtbertdataload": [193, 237], "varient": [193, 237], "onnxrtdataload": [193, 237, 351], "pytorchdataload": [194, 238], "data_sourc": [195, 239, 382], "__iter__": [195, 199, 239, 243, 417, 418, 434], "matter": [195, 239, 463], "iterablesampl": [195, 239], "squential": [195, 239], "your": [195, 197, 239, 241, 395, 417, 418, 420, 423, 432, 434, 437, 440, 441, 442, 447, 448, 449, 451, 452, 454, 459, 465, 467, 469, 470], "clear": [195, 239, 400, 427, 433, 434], "iterabledataset": [195, 199, 239, 243], "try": [195, 239, 396, 420, 459, 462, 466, 469], "indexdataset": [195, 239], "__getitem__": [195, 199, 214, 239, 243, 256, 418, 434], "__len__": [195, 199, 239, 243, 418], "retriev": [195, 239], "sequentialsampl": [195, 239], "sequenti": [195, 239, 300, 302, 359, 361, 469], "batchsampl": [195, 239], "tfdatadataload": [196, 240], "tensorflow1": [196, 240], "coupl": [196, 240], "satisfi": [196, 240, 420, 431], "usag": [196, 240, 267, 273, 300, 320, 377, 418, 423, 424, 437, 445, 456, 461, 468], "tf1": [196, 240, 436], "although": [196, 240, 465], "tensorflowbertdataload": [196, 240], "tensorflowmodelzoobertdataload": [196, 240], "zoo": [196, 214, 240, 256, 399, 424, 428, 472], "tensorflowdataload": [196, 240, 356], "pytorchbertdataset": [197, 241], "model_typ": [197, 241, 390, 418], "construct": [197, 200, 201, 204, 212, 217, 219, 220, 222, 241, 244, 245, 248, 324, 329, 333, 376, 382, 394, 401, 418, 423, 459, 469], "tensordataset": [197, 241, 418], "repo": [197, 241, 393, 418, 424, 447, 449, 451, 452, 473], "todo": [197, 200, 241, 244, 267, 313, 320, 374], "easi": [197, 241, 299, 425, 434, 460, 462, 465], "load": [197, 213, 214, 241, 255, 256, 325, 333, 358, 389, 390, 417, 447, 451, 455, 461, 462, 466], "squad": [197, 214, 241, 256, 268, 269, 271, 321, 322, 324, 418, 433, 459, 468, 472], "distilbert": [197, 241, 399, 418, 435, 460, 472], "xlnet": [197, 241, 418], "xlm": [197, 241, 418, 472], "101": [197, 241, 271, 324, 433, 466, 472], "2043": [197, 241], "2001": [197, 241], "onnxrtbertdataset": [197, 241], "data_dir": [197, 241, 418], "model_name_or_path": [197, 241, 418, 434, 442, 443], "max_seq_length": [197, 214, 241, 256, 418, 468], "do_lower_cas": [197, 213, 214, 241, 255, 256, 418, 468], "mrpc": [197, 241, 271, 324, 418, 433, 442, 459, 469, 472], "dynamic_length": [197, 241, 418], "shortcut": [197, 241, 418], "token": [197, 208, 211, 214, 241, 252, 254, 256, 263, 264, 265, 316, 317, 318, 385, 418, 433, 434, 465, 466, 468, 469], "longer": [197, 214, 241, 256, 418, 468], "truncat": [197, 214, 241, 256, 418, 468], "shorter": [197, 214, 241, 256, 418, 468], "lowercas": [197, 241, 418], "choic": [197, 241, 400, 418, 433, 466], "qqp": [197, 241, 418, 433, 472], "qnli": [197, 241, 418, 433, 472], "rte": [197, 241, 418, 433, 472], "st": [197, 241, 418, 433], "cola": [197, 241, 418, 433, 472], "mnli": [197, 241, 418, 433, 472], "wnli": [197, 241, 418, 433, 472], "mobilebert": [197, 241, 418, 421, 472], "roberta": [197, 241, 418, 472], "uncas": [197, 214, 241, 256, 418, 468, 472], "load_and_cache_exampl": [197, 241], "cach": [197, 241, 426, 462], "convert_examples_to_featur": [197, 214, 241, 256], "max_length": [197, 241], "label_list": [197, 241, 271, 324], "output_mod": [197, 241], "classif": [197, 214, 241, 256, 271, 297, 324, 421, 425, 433, 443, 459, 460], "pad_token": [197, 241], "pad_token_segment_id": [197, 241], "mask_padding_with_zero": [197, 241], "inputfeatur": [197, 214, 241, 256], "properti": [197, 241, 376, 432, 458], "input_id": [197, 214, 241, 256, 434], "vocabulari": [197, 213, 214, 241, 255, 256, 468], "attention_mask": [197, 241, 434], "usual": [197, 241, 420, 421, 457, 459, 462, 466], "NOT": [197, 241, 427], "token_type_id": [197, 241, 434], "segment": [197, 241, 265, 267, 318, 320], "portion": [197, 241], "problem": [197, 241, 271, 324, 433, 435, 455], "regress": [197, 241, 420], "seq_length": [197, 241], "tensorflowbertdataset": [197, 241], "label_fil": [197, 214, 241, 256, 418, 468], "tfrecord": [197, 198, 199, 241, 242, 243, 418], "guid": [197, 241, 396, 399, 418, 421, 431, 437, 445, 454, 473], "parsedecodebert": [197, 241], "tensorflowmodelzoobertdataset": [197, 198, 241, 242], "num_cor": [197, 198, 202, 241, 242, 246, 418], "28": [197, 198, 202, 241, 242, 246, 418, 472], "coco": [198, 205, 209, 242, 249, 267, 271, 320, 324, 433, 459], "parsedecodecoco": [198, 242], "cocorecorddataset": [198, 242], "interleav": [198, 242, 418], "parallel": [198, 242, 352, 357, 418, 434, 469], "cocoraw": [198, 242, 418], "img_dir": [198, 242, 418], "val2017": [198, 242, 418], "anno_dir": [198, 242, 418], "annot": [198, 242, 267, 320, 377, 401, 418, 433, 459, 469], "instances_val2017": [198, 242, 418], "jpg": [198, 202, 204, 242, 246, 248, 418], "imag": [198, 199, 202, 204, 210, 214, 242, 243, 246, 248, 253, 256, 267, 320, 418, 423, 425, 459, 461, 466, 467, 468, 472], "coconpi": [198, 242, 418], "npy_dir": [198, 242, 418], "npy": [198, 242, 418], "tensorflowdataset": [199, 243], "pytorchdataset": [199, 243], "mxnetdataset": [199, 243], "onnxrtqldataset": [199, 243], "onnxrtitdataset": [199, 243], "IT": [199, 206, 243, 250, 460], "pytorchmxnetwrapdataset": [199, 243], "datafunc": [199, 243], "pytorchmxnetwrapfunct": [199, 214, 243, 256], "framework_dataset": [199, 243], "convent": [199, 243, 267, 320, 421], "imageclassifi": [199, 243], "choos": [199, 243, 430, 442, 464, 466, 469, 471], "tensorflow_itex": [199, 202, 204, 206, 243, 246, 248, 250, 461], "onnxrt_qdq": [199, 206, 243, 250, 461], "onnxrt_qlinearop": [199, 206, 214, 243, 250, 256, 461], "onnxrt_integerop": [199, 206, 214, 243, 250, 256, 461], "pytorch_ipex": [199, 206, 243, 250, 434, 461, 471], "pytorch_fx": [199, 206, 243, 250, 434, 461], "dataset_registri": [199, 243], "dataset_typ": [199, 243], "dataset_format": [199, 243], "data_format": [199, 210, 243, 253], "raw_imag": [199, 243], "overwrit": [199, 243, 447, 451], "download_url": [199, 243], "url": [199, 243, 432], "filenam": [199, 243, 390, 418], "md5": [199, 243], "download": [199, 243, 418, 420, 431, 464], "address": [199, 243, 394, 435, 460], "gen_bar_updat": [199, 243], "progress": [199, 243, 448, 454, 459, 462], "bar": [199, 243, 399, 454, 460], "check_integr": [199, 243], "fpath": [199, 243], "checksum": [199, 243], "calculate_md5": [199, 243], "chunk_siz": [199, 243], "cifar10": [199, 243, 418], "cifar100": [199, 243, 418], "databas": [199, 243], "otherwis": [199, 214, 243, 256, 390, 394, 418, 449, 452, 461, 468], "www": [199, 243, 418, 472], "toronto": [199, 243, 418], "kriz": [199, 243, 418], "cifar": [199, 243, 418, 472], "tar": [199, 243, 418, 420, 449, 452], "gz": [199, 243, 418, 420, 449, 452], "manual": [199, 243, 418, 437, 443, 445, 448], "subset": [199, 202, 243, 246, 418], "internet": [199, 243, 418], "put": [199, 243, 418, 421], "again": [199, 243, 418, 463], "pytorchcifar10": [199, 243], "mxnetcifar10": [199, 243], "tensorflowcifar10": [199, 243], "pytorchcifar100": [199, 243], "mxnetcifar100": [199, 243], "tensorflowcifar100": [199, 243], "mnist": [199, 243, 418, 423], "nation": [199, 243, 394], "institut": [199, 243], "standard": [199, 214, 243, 256, 420, 425, 433, 468, 469], "technologi": [199, 243, 434, 458], "fashionmnist": [199, 243, 418], "npz": [199, 243, 418], "idx1": [199, 243, 418], "ubyt": [199, 243, 418], "idx3": [199, 243, 418], "t10k": [199, 243, 418], "pytorchmnist": [199, 243], "mxnetmnist": [199, 243], "tensorflowmnist": [199, 243], "pytorchfashionmnist": [199, 243], "mxnetfashionmnist": [199, 243], "tensorflowfashionmnist": [199, 243], "imagefold": [199, 243, 418, 423, 434], "expect": [199, 243, 394, 395, 426, 454, 462, 469], "subfold": [199, 243], "belong": [199, 243, 329, 462], "class_1": [199, 243, 418], "xxx": [199, 243, 395, 418, 434], "png": [199, 243, 418], "xxy": [199, 243, 418], "xxz": [199, 243, 418], "class_n": [199, 243, 418], "123": [199, 243, 418, 468], "nsdf3": [199, 243, 418], "asd932_": [199, 243, 418], "categori": [199, 243, 266, 319, 416, 418, 444], "mxnetimagefold": [199, 243], "tensorflowtfrecorddataset": [199, 243], "tensorflowimagerecord": [199, 243], "imagenet": [199, 202, 210, 243, 246, 253, 397, 420, 434, 443, 459, 467, 468, 471, 472], "000": [199, 243, 399, 418], "001": [199, 243, 418, 423, 466, 471], "099": [199, 243, 418], "tensorflowvocrecord": [199, 243], "pascal": [199, 243], "voc": [199, 243, 271, 324], "2012": [199, 243], "00000": [199, 243], "00004": [199, 243], "00001": [199, 243], "00003": [199, 243], "dummydataset": [200, 201, 244, 245], "127": [200, 201, 244, 245, 418, 462, 466], "float32": [200, 201, 214, 244, 245, 256, 267, 320, 400, 416, 418, 434, 462, 466, 468], "rang": [200, 201, 214, 244, 245, 256, 377, 379, 399, 400, 401, 418, 420, 421, 422, 423, 434, 457, 459, 462, 466, 468], "stand_norm": [200, 201, 244, 245, 418], "dummy_v2": [201, 245, 418], "sparse_dummy_v2": [201, 245, 418], "label_shap": [201, 245, 418], "sparsedummydataset": [201, 245], "dense_shap": [201, 245, 418], "sparse_ratio": [201, 245, 418], "imagenetraw": [202, 246, 418], "data_path": [202, 246, 418], "image_list": [202, 246, 418], "img1": [202, 246, 418], "img2": [202, 246, 418], "imgx": [202, 246, 418], "val_map": [202, 246, 418], "txt": [202, 246, 418, 420, 431], "pytorchimagenetraw": [202, 246], "mxnetimagenetraw": [202, 246], "tensorflowimagenetraw": [202, 246], "inteltensorflow": [202, 204, 246, 248, 431], "tensorflowimagenetdataset": [202, 246], "onnxrtimagenetdataset": [202, 246], "bert_dataset": [203, 208, 247, 252, 263, 316], "coco_dataset": [203, 208, 247, 252, 263, 316], "dummy_dataset": [203, 208, 247, 252, 263, 316], "dummy_dataset_v2": [203, 208, 247, 252, 263, 316], "imagenet_dataset": [203, 208, 247, 252, 263, 316], "style_transfer_dataset": [203, 208, 247, 252, 263, 316], "styletransferdataset": [204, 248], "content_fold": [204, 248, 418], "style_fold": [204, 248, 418], "crop_ratio": [204, 248, 418], "resize_shap": [204, 248, 418], "256": [204, 210, 248, 253, 418, 423, 434, 468], "image_format": [204, 248, 418], "holder": [204, 248, 418], "labelbalancecocorecordfilt": [205, 249], "balanc": [205, 249, 458, 466], "labelbalancecocorawfilt": [205, 249], "tensorflowfilt": [206, 250], "onnxrtqlfilt": [206, 250], "onnxrtitfilt": [206, 250], "pytorchfilt": [206, 250], "mxnetfilt": [206, 250], "filter_registri": [206, 250], "filter_typ": [206, 250], "__call__": [206, 250], "coco_filt": [207, 208, 251, 252, 263, 316], "imagenet_transform": [208, 211, 252, 254, 263, 316], "parsedecodecocotransform": 209, "decod": [209, 210, 253, 264, 317, 433, 468], "quantizedinput": [210, 253, 468], "labelshift": [210, 253, 468], "label_shift": [210, 253, 468], "parsedecodeimagenet": [210, 253, 468], "proto": [210, 214, 253, 256, 468], "parsedecodeimagenettransform": [210, 253], "tensorflowresizecropimagenettransform": [210, 253], "random_crop": [210, 253, 468], "resize_sid": [210, 253, 468], "resize_method": [210, 253], "bilinear": [210, 214, 253, 256, 468], "random_flip_left_right": [210, 253, 468], "mean_valu": [210, 253, 468], "channels_last": [210, 253, 437], "subpixel": [210, 253], "rgb": [210, 253], "seri": [210, 253, 399, 431, 434, 468], "applic": [210, 253, 401, 425, 437, 454, 460, 466, 467, 468, 470], "crop": [210, 214, 253, 256, 418, 468], "flip": [210, 214, 253, 256, 468], "left": [210, 214, 253, 256, 448, 454, 466, 468], "right": [210, 253, 267, 320, 394, 396, 454, 466, 468], "std": [210, 214, 253, 256, 434, 468], "bilinearimagenettransform": [210, 253], "central_fract": [210, 253, 468], "875": [210, 253, 468], "fraction": [210, 253, 468], "onnxbilinearimagenettransform": [210, 253], "onnxresizecropimagenettransform": [210, 253], "std_valu": [210, 253], "229": [210, 253, 434, 472], "225": [210, 253, 434, 472], "resizewithaspectratio": [210, 253], "87": [210, 253, 472], "inter_pol": [210, 253], "cv2": [210, 253], "inter_area": [210, 253], "aspect": [210, 214, 253, 256, 468], "postprocess_cl": [212, 222, 434], "user_postprocess": [212, 222], "convert_to_unicod": [213, 255], "unicod": [213, 255], "assum": [213, 255, 267, 278, 320, 400, 427, 454], "utf": [213, 255], "load_vocab": [213, 255], "vocab_fil": [213, 214, 255, 256, 468], "convert_by_vocab": [213, 255], "vocab": [213, 255], "whitespace_token": [213, 255], "whitespac": [213, 255, 269, 322], "clean": [213, 255, 395, 434], "piec": [213, 255, 264, 317, 433], "fulltoken": [213, 255], "tokenzi": [213, 255], "basictoken": [213, 255], "punctuat": [213, 255, 264, 269, 317, 322], "lower": [213, 214, 255, 256, 269, 322, 363, 422, 459, 460, 462, 466, 468, 469], "wordpiecetoken": [213, 255], "unk_token": [213, 255], "unk": [213, 255], "max_input_chars_per_word": [213, 255], "200": [213, 255, 396, 469], "wordpiec": [213, 214, 255, 256, 468], "concat_gener": [214, 256], "inc": [214, 256, 394, 399, 437, 444, 454, 460, 461, 464, 469], "tensorflowtransform": [214, 256], "mxnettransform": [214, 256], "pytorchtransform": [214, 256], "onnxrtqltransform": [214, 256], "onnxrtittransform": [214, 256], "transform_registri": [214, 256], "transform_typ": [214, 256], "basetransform": [214, 256], "tensorflowwrapfunct": [214, 256], "transform_func": [214, 256], "pytorchmxnettransform": [214, 256], "get_torchvision_map": [214, 256], "torchvis": [214, 256, 424, 428, 437, 443], "composetransform": [214, 256], "transform_list": [214, 256, 468], "compos": [214, 256, 382, 468], "croptoboundingbox": [214, 256, 468], "offset_height": [214, 256, 468], "offset_width": [214, 256, 468], "target_height": [214, 256, 468], "target_width": [214, 256, 468], "box": [214, 256, 267, 271, 320, 324, 396, 433, 437, 448, 454, 467, 468, 469], "coordin": [214, 256, 303, 362, 468, 469], "top": [214, 256, 262, 271, 286, 291, 299, 324, 433, 454, 468], "corner": [214, 256, 400, 401, 468], "horizont": [214, 256, 468], "mxnetcroptoboundingbox": [214, 256], "onnxrtcroptoboundingbox": [214, 256], "tensorflowcroptoboundingbox": [214, 256], "resizewithratio": [214, 256, 468], "min_dim": [214, 256, 468], "800": [214, 256, 468], "max_dim": [214, 256, 468], "1365": [214, 256, 468, 472], "constant_valu": [214, 256], "longest": [214, 256, 468], "side": [214, 256, 418, 448, 468], "exce": [214, 256, 468], "tensorflowresizewithratio": [214, 256], "perm": [214, 256, 468], "permut": [214, 256, 468], "tensorflowtranspos": [214, 256], "mxnettranspos": [214, 256], "pytorchtranspos": [214, 256], "randomverticalflip": [214, 256, 468], "randomli": [214, 256, 279, 303, 362, 397, 466, 468, 469], "tensorflowrandomverticalflip": [214, 256], "randomhorizontalflip": [214, 256, 434, 468], "tensorflowrandomhorizontalflip": [214, 256], "toarrai": [214, 256, 468], "pil": [214, 256, 468], "casttftransform": [214, 256], "castonnxtransform": [214, 256], "castpytorchtransform": [214, 256], "centercroptftransform": [214, 256], "center": [214, 256, 398, 399, 431, 468, 469], "paddedcentercroptransform": [214, 256], "crop_pad": [214, 256], "resizetftransform": [214, 256], "bicub": [214, 256, 468], "resizepytorchtransform": [214, 256], "randomcroptftransform": [214, 256], "randomresizedcroppytorchtransform": [214, 256], "08": [214, 256, 468, 472], "randomresizedcropmxnettransform": [214, 256], "randomresizedcroptftransform": [214, 256], "normalizetftransform": [214, 256], "rescal": [214, 256, 468], "deviat": [214, 256, 420, 468], "broadcast": [214, 256, 423, 468], "rescalekeraspretraintransform": [214, 256], "rescaletftransform": [214, 256], "rescaletransform": [214, 256], "alignimagechanneltransform": [214, 256], "dim": [214, 256, 466, 468], "align": [214, 256, 394, 468], "w": [214, 256, 459, 466, 468], "must": [214, 256, 267, 320, 395, 396, 416, 417, 431, 462, 468], "pytorchalignimagechannel": [214, 256], "tondarraytransform": [214, 256], "resizemxnettransform": [214, 256], "resizetransform": [214, 256], "cropresizetftransform": [214, 256], "boundari": [214, 256, 468], "area": [214, 256, 267, 320, 433, 468], "pytorchcropresizetransform": [214, 256], "mxnetcropresizetransform": [214, 256], "cropresizetransform": [214, 256], "centercroptransform": [214, 256], "mxnetnormalizetransform": [214, 256], "pytorchnormalizetransform": [214, 256], "normalizetransform": [214, 256], "randomcroptransform": [214, 256], "randomresizedcroptransform": [214, 256], "get_final_text": [214, 256], "pred_text": [214, 256], "orig_text": [214, 256], "project": [214, 256, 393, 394, 395, 460, 465, 469, 473], "squadexampl": [214, 256], "qas_id": [214, 256], "question_text": [214, 256], "doc_token": [214, 256], "orig_answer_text": [214, 256], "start_posit": [214, 256], "end_posit": [214, 256], "is_imposs": [214, 256], "simpl": [214, 256, 431, 434, 465, 466, 469], "answer": [214, 256, 268, 269, 321, 322, 394, 459, 468, 472], "posit": [214, 256, 394, 433, 437], "unique_id": [214, 256], "example_index": [214, 256], "doc_span_index": [214, 256], "token_to_orig_map": [214, 256], "token_is_max_context": [214, 256], "input_mask": [214, 256, 434], "segment_id": [214, 256, 434], "read_squad_exampl": [214, 256], "input_fil": [214, 256], "doc_strid": [214, 256, 468], "max_query_length": [214, 256, 468], "output_fn": [214, 256], "inputbatch": [214, 256], "collecttransform": [214, 256], "10833": [214, 256], "tfsquadv1posttransform": [214, 256], "n_best_siz": [214, 256, 468], "20": [214, 256, 458, 466, 468, 471, 472], "384": [214, 256, 468], "64": [214, 256, 397, 466, 468, 472], "max_answer_length": [214, 256, 468], "30": [214, 256, 424, 428, 430, 466, 468, 472], "nbest_predict": [214, 256, 468], "question": [214, 256, 268, 269, 321, 322, 394, 395, 400, 431, 437, 459, 466, 468, 472], "anoth": [214, 256, 264, 273, 317, 390, 420, 421, 447, 451, 468, 469], "long": [214, 256, 426, 468], "document": [214, 256, 377, 395, 401, 406, 423, 435, 439, 449, 452, 453, 464, 468, 470], "chunk": [214, 256, 468], "tfmodelzoocollecttransform": [214, 256], "tfsquadv1modelzooposttransform": [214, 256], "squadv1": [214, 256, 468], "see": [214, 256, 264, 317, 394, 396, 398, 432, 434, 447, 448, 451, 454, 455, 466, 467, 469, 472], "parsedecodevoctransform": [214, 256], "conf_fname_or_obj": [215, 224, 257, 262, 272, 273, 274, 275, 277, 286, 291, 299], "thei": [215, 377, 394, 421, 427, 434, 442, 456], "possibl": [215, 420, 457, 459, 463, 469], "unnecessari": [215, 434], "tensorflowcrossentropyloss": 216, "pytorchcrossentropyloss": 216, "tensorflowsparsecategoricalcrossentropi": 216, "sparsecategoricalcrossentropyloss": 216, "setter": 217, "calib_dataload": [217, 300, 358, 396, 399, 417, 418, 420, 428, 429, 433, 434, 462, 463], "reason": [217, 394, 417, 467, 469], "know": [217, 423, 464], "known": [217, 303, 362, 434, 467, 469], "open": [218, 263, 316, 382, 392, 394, 399, 425, 426, 434, 449, 452, 455, 460], "metric_cl": [219, 324, 358, 434], "user_metr": [219, 324, 358], "alwai": [219, 267, 320, 324, 358, 420, 433, 434], "recommend": [219, 324, 400, 418, 427, 445, 448, 453, 455, 459, 461, 469], "set_backend": 220, "tensorflowoptim": 221, "pytorchoptim": 221, "optimizer_registri": 221, "optimizer_typ": 221, "cross": [221, 271, 324, 429, 469], "tensorflowsgd": 221, "tensorflowadamw": 221, "tensorflow_addon": 221, "adamw": 221, "tensorflowadam": 221, "adam": [221, 471], "pytorchsgd": 221, "record_output": 223, "output_process": 223, "help": [223, 273, 436, 437, 443, 454, 469, 470], "get_activ": 223, "f": [226, 421, 423, 462, 466], "pickle_modul": 226, "pickle_protocol": 226, "_use_new_zipfile_seri": 226, "prepare_prun": [226, 459], "opt": [226, 399, 442, 466, 469], "tensorflowimagefold": 243, "qlinear2qdq": [258, 263, 316], "qlinearop": [259, 420, 430, 445, 462], "check_model": 259, "modelproto": [259, 325, 436], "onnx_qlinear_to_qdq": 259, "input_name_to_nod": 259, "destin": [259, 273], "tf_to_fp32_onnx": 260, "tf_to_int8_onnx": 260, "int8_model": [260, 400], "torch_to_fp32_onnx": 261, "pt_model": 261, "do_constant_fold": 261, "verbos": [261, 303, 362], "torch_to_int8_onnx": 261, "_quantiz": 261, "achiev": [262, 299, 425, 434, 457, 459, 460, 462, 467, 469], "across": [262, 272, 299, 325, 419, 434, 459, 466, 469], "variou": [262, 272, 299, 325, 401, 430, 437, 459, 461], "dl": [262, 272, 286, 291, 299, 325, 420, 429, 441, 454, 460], "bring": [262, 299, 448, 466], "unifi": [262, 299, 400, 401, 417, 429, 430, 433, 434, 436], "vari": [262, 286, 291, 299, 458, 459, 466, 472], "roc": [262, 271, 286, 291, 299, 324], "flexibl": [262, 286, 291, 299, 421, 459], "via": [262, 286, 291, 299, 394, 423, 430, 434, 437, 454, 459], "popular": [263, 316, 392, 399, 400, 421, 424, 425, 428, 434, 459, 462, 469, 470], "compress": [263, 286, 291, 316, 335, 379, 392, 399, 406, 421, 430, 434, 454, 456, 457, 459, 460, 462, 466, 470, 472], "techniqu": [263, 316, 392, 399, 430, 434, 437, 457, 459, 461, 462, 470, 471, 472], "bleu": [263, 265, 270, 316, 318, 323, 433, 459], "bleu_util": [263, 270, 316, 323], "coco_label_map": [263, 270, 316, 323], "coco_tool": [263, 270, 316, 323], "evaluate_squad": [263, 270, 316, 323], "f1": [263, 268, 270, 271, 316, 321, 323, 324, 423, 433, 434, 465, 472], "basic_na": [263, 276, 316], "nas_util": [263, 276, 316], "pruner_legaci": [263, 316], "gradient_sensit": [263, 282, 316], "group_lasso": [263, 282, 316], "pruning_recip": [263, 316], "tile_pattern": [263, 287, 288], "pytorch_prun": [263, 316], "logger": [263, 292, 316, 380, 383, 390], "prune_util": [263, 292, 316], "tuning_sampl": [263, 305, 311, 316, 366, 372], "tuning_spac": [263, 305, 311, 312, 314, 316, 366, 372, 373, 375], "tuning_struct": [263, 305, 311, 312, 313, 316, 366, 372, 373, 374], "auto_mixed_precis": [263, 305, 316, 366], "graph_optim": [263, 316], "mixed_precis": [263, 316, 325, 434], "model_convers": [263, 316], "pruning_v2": [263, 316], "unicoderegex": [264, 317], "hoc": [264, 317], "hack": [264, 317], "recogn": [264, 317, 469], "nondigit_punct_r": [264, 317], "compil": [264, 317, 434, 458], "express": [264, 317, 394], "preced": [264, 317, 466], "digit": [264, 317, 390, 460], "punct_nondigit_r": [264, 317], "symbol_r": [264, 317], "bleu_token": [264, 317], "mose": [264, 317], "smt": [264, 317], "mosesdecod": [264, 317], "mteval": [264, 317], "v14": [264, 317], "pl": [264, 317], "l954": [264, 317], "l983": [264, 317], "bilingu": [264, 317], "understudi": [264, 317], "qualiti": [264, 317], "machin": [264, 317, 425, 431, 440, 454, 460, 466, 467], "translat": [264, 265, 317, 318, 459, 469], "natur": [264, 317, 425], "approxim": [264, 265, 317, 318, 433], "glue": [264, 271, 317, 324, 418, 433, 434, 443], "word": [264, 317, 433, 459], "ngram": [264, 317, 433], "breviti": [264, 265, 317, 318, 433], "penalti": [264, 265, 317, 318, 433], "doe": [264, 317, 376, 417, 418, 433, 434, 464, 468], "beam": [264, 317, 433], "tensor2tensor": [265, 318], "bleu_hook": [265, 318], "compute_bleu": [265, 318], "reference_corpu": [265, 318], "translation_corpu": [265, 318], "max_ord": [265, 318], "use_bp": [265, 318], "against": [265, 318], "gram": [265, 318], "bleu_scor": [265, 318], "third": [267, 320, 432], "parti": [267, 320, 432, 462], "pycocotool": [267, 320, 426, 431], "noth": [267, 320, 469], "thu": [267, 320, 434, 459, 462], "cannot": [267, 320, 396, 426, 467], "jonathanhuang": [267, 320], "image_id": [267, 320, 433], "encod": [267, 320, 468], "invok": [267, 320], "groundtruth_dict": [267, 320], "exportgroundtruthtococo": [267, 320], "groundtruth_boxes_list": [267, 320], "groundtruth_classes_list": [267, 320], "max_num_class": [267, 320], "output_path": [267, 320], "detections_list": [267, 320], "exportdetectionstococo": [267, 320], "detection_boxes_list": [267, 320], "detection_scores_list": [267, 320], "detection_classes_list": [267, 320], "cocowrapp": [267, 320], "loadannot": [267, 320], "cocoevalwrapp": [267, 320], "agnostic_mod": [267, 320], "computemetr": [267, 320], "detection_typ": [267, 320], "bbox": [267, 320, 396, 433], "hold": [267, 303, 320, 362, 418], "iou_typ": [267, 320], "iou_thr": [267, 271, 320, 324, 433], "map_point": [267, 271, 320, 324, 433], "cocoev": [267, 320], "mscoco": [267, 320], "Then": [267, 320, 420, 447, 449, 451, 452, 466, 469], "exportsingleimagegroundtruthtococo": [267, 320], "next_annotation_id": [267, 320], "category_id_set": [267, 320], "groundtruth_box": [267, 320], "groundtruth_class": [267, 320], "groundtruth_mask": [267, 320], "groundtruth_is_crowd": [267, 320], "ingest": [267, 320], "here": [267, 320, 377, 418, 423, 424, 425, 427, 428, 433, 442, 449, 452, 454, 462, 464, 465, 472], "ones": [267, 320, 459], "exportsingleimagedetectionstococo": [267, 320], "uniqu": [267, 300, 320, 462], "assign": [267, 320, 390, 423, 461, 469], "num_gt_box": [267, 320], "num_detect": [267, 271, 320, 324, 433, 434, 471], "image_height": [267, 320], "image_width": [267, 320], "detection_mask": [267, 320], "crowd": [267, 320], "insid": [267, 320, 421, 422, 455, 459, 469], "exportsingleimagedetectionboxestococo": [267, 320], "detection_box": [267, 320, 434, 471], "detection_scor": [267, 320, 434, 471], "detection_class": [267, 320, 434, 471], "exporsingleimagedetectionboxestococo": [267, 320], "exportsingleimagedetectionmaskstococo": [267, 320], "allenai": [268, 269, 321, 322], "bi": [268, 269, 321, 322], "att": [268, 269, 321, 322], "flow": [268, 269, 321, 322, 396, 397, 434], "f1_score": [268, 269, 321, 322], "ground_truth": [268, 269, 321, 322], "ground": [268, 269, 321, 322], "truth": [268, 269, 321, 322], "metric_max_over_ground_truth": [268, 269, 321, 322], "metric_fn": [268, 269, 321, 322], "exact_match_scor": [268, 321], "exact": [268, 321], "averag": [268, 269, 271, 321, 322, 324, 433, 434, 469], "articl": [268, 269, 321, 322], "paragraph": [268, 269, 321, 322], "qa": [268, 269, 321, 322], "cantain": [268, 269, 321, 322], "normalize_answ": [269, 322], "extra": [269, 322, 434], "newlin": [269, 322, 390], "tab": [269, 322, 454, 467], "harmon": [269, 271, 322, 324], "recal": [269, 271, 322, 324], "answer_start": [269, 322], "177": [269, 322], "denver": [269, 322], "bronco": [269, 322], "nfl": [269, 322], "team": [269, 322, 394, 463], "afc": [269, 322], "super": [269, 322, 397], "bowl": [269, 322], "50": [269, 322, 397, 466, 472], "56be4db0acb8001400a502ec": [269, 322], "form": [269, 322, 420, 421, 454], "percentag": [269, 322, 471], "tensorflowmetr": [271, 324], "maintain": [271, 324, 394, 395, 399, 436, 437, 449, 452, 464], "pytorchmetr": [271, 324], "mxnetmetr": [271, 324], "onnxrtqlmetr": [271, 324], "onnxrtitmetr": [271, 324], "metric_registri": [271, 324], "metric_typ": [271, 324], "decorator_metr": [271, 324], "basemetr": [271, 324, 358], "single_output": [271, 324], "hvd": [271, 324, 423], "wrappytorchmetr": [271, 324], "wrapmxnetmetr": [271, 324], "wraponnxrtmetr": [271, 324], "proport": [271, 324], "were": [271, 324, 440, 459], "pred_list": [271, 324], "pytorchloss": [271, 324], "mae": [271, 324, 433], "compare_label": [271, 324, 358, 433], "actual": [271, 324, 423, 466], "rmse": [271, 324, 433, 469], "squar": [271, 306, 324, 367, 420, 433, 466, 469], "tensorflowtopk": [271, 324], "k": [271, 324, 358, 433], "among": [271, 324, 448, 466], "outcom": [271, 324], "num_correct": [271, 324], "num_sampl": [271, 324], "generaltopk": [271, 324], "cocomapv2": [271, 324, 433], "anno_path": [271, 324, 433], "map_kei": [271, 324], "detectionboxes_precis": [271, 324], "output_index_map": [271, 324, 433], "tensorflowmap": [271, 324], "tensorflowcocomap": [271, 324], "tensorflowvocmap": [271, 324], "squadf1": [271, 324, 433], "miou": [271, 324], "num_class": [271, 324], "21": [271, 324, 442, 443, 460, 466, 472], "iou": [271, 324], "intersect": [271, 324, 400, 433], "union": [271, 324, 379, 433], "onnxrtglu": [271, 324], "dlrm": [271, 324], "modelconvers": 273, "typic": [273, 300, 397, 399, 422, 424, 428, 459, 472], "basicna": 274, "model_build": [274, 277], "conf_fnam": 274, "nasbas": [277, 397], "nas_registri": 278, "nas_method": 278, "create_search_space_pool": 278, "idx": [278, 418], "enumer": [278, 379, 400, 421, 422, 423, 434, 457, 459, 467], "find_pareto_front": 278, "pareto": [278, 397], "front": [278, 397], "n_point": 278, "n_metric": 278, "n_pareto_point": 278, "gridsearch": 279, "grid": [279, 397], "whole": [279, 401, 462], "randomsearch": 279, "bayesianoptimizationsearch": 279, "gradientsensitivityprun": 280, "pytorchmodel": [280, 281, 283, 284, 285, 334], "overwritten": [280, 281, 283, 284, 285, 442], "grouplassoprun": 281, "legaci": 282, "basicmagnitudeprun": 283, "lock": [284, 285, 430, 457, 459], "pruner_registri": 285, "clase": 285, "pruningconf": [286, 291], "tfpruningcallback": [286, 291], "input_model": [286, 291, 436, 467], "pure": [286, 291, 459], "pattern_registri": 289, "pattern_typ": 289, "patternbas": 289, "mask_shap": [289, 290], "is_contigu": 289, "tile": 290, "tilepatternbas": 290, "tilepattern_1x1": 290, "1x1": [290, 421, 434, 459], "tilepattern_2x2": 290, "2x2": [290, 466], "tilepattern_1x16": 290, "1x16": 290, "tilepattern_4x1": 290, "tilepattern_1x2": 290, "1x2": [290, 466], "reset_non_value_to_default": 295, "obejct": 295, "parse_not_to_prun": 295, "update_frequency_on_step": [296, 461], "max_sparsity_ratio_per_lay": [296, 461], "magnitudeprun": 296, "snipprun": 296, "snipmomentumprun": 296, "moreoev": 296, "least": [297, 434, 459, 469], "templat": [297, 434, 459], "tree": [297, 313, 374], "huggingface_model": 297, "eager": [297, 357, 423, 430, 462, 463, 467, 472], "config_file_path": 297, "pruner_info": 297, "quantconf": 299, "server": [300, 454], "seper": 300, "opt_model": [300, 434], "fulli": [300, 434, 462, 466], "train_func": [300, 379, 423, 434, 462], "automixedprecisiontunestrategi": [301, 360], "basictunestrategi": [302, 361], "stage": [302, 307, 359, 361, 368, 421, 459, 467, 469], "polici": [302, 306, 359, 361, 367, 394, 399, 458, 471, 473], "bayesiantunestrategi": [303, 362], "acq_max": [303, 362], "ac": [303, 362], "gp": [303, 362], "y_max": [303, 362], "n_warmup": [303, 362], "10000": [303, 362, 459], "n_iter": [303, 362], "acquisit": [303, 362], "gaussian": [303, 362, 469], "relev": [303, 362, 401], "limit": [303, 362, 390, 399, 420, 421, 464, 467], "acq": [303, 362], "randomst": [303, 362], "scipi": [303, 362], "x_max": [303, 362], "targetspac": [303, 362], "pbound": [303, 362], "9527": [303, 362, 434, 471], "allow": [303, 362, 421, 423, 433, 434, 435, 461, 466, 469, 471], "bayesianoptim": [303, 362], "exhaustivetunestrategi": [304, 364], "msetunestrategi": [306, 367], "mse_v2tunestrategi": [307, 368], "revert": [307, 315, 368, 376, 469], "randomtunestrategi": [308, 369], "strategy_registri": [309, 370, 469], "tunestrategi": [309, 370, 469], "tuningsamplerregistri": [312, 373], "tuningsampl": [312, 373], "tuningord": [312, 373], "Not": [312, 313, 373, 374, 390, 397], "tuningspac": [312, 313, 373, 374], "tuning_order_lst": [312, 373], "initial_op_tuning_cfg": [312, 373], "modelwisetuningsampl": [312, 373], "tuning_items_prior": [312, 373], "op_dtype_dict": [312, 373], "optuningconfig": [312, 313, 314, 373, 374, 375], "optypewisetuningsampl": [312, 373], "opwisetuningsampl": [312, 373], "fallbacktuningsampl": [312, 373], "op_dtyp": [312, 373], "accumul": [312, 373, 469], "skip_first": [312, 373], "smoothquantsampl": 312, "tuningitem": [313, 374], "item_typ": [313, 374], "pattern_to_intern": [313, 374], "default_dtyp": [313, 374], "pattern_to_path": [313, 374], "quant_mode_from_pattern": [313, 374], "internal_pattern": [313, 374], "initial_tuning_cfg_with_quant_mod": [313, 374], "op_name_typ": [313, 374], "step1": [313, 374], "step2": [313, 374], "complet": [313, 374, 400, 462, 469, 471, 472], "step3": [313, 374], "step4": [313, 374], "step5": [313, 374], "op_quant_mod": [314, 375], "ordereddefaultdict": [315, 376], "extract_data_typ": [315, 376], "data_typ": [315, 376], "sign": [315, 376, 395, 401, 462, 465], "reverted_data_typ": [315, 376], "signed_flag": [315, 376], "get_adaptor_nam": [315, 376], "experiment": [316, 351, 356, 397, 418, 422, 423, 425, 434, 459, 461, 464, 468], "base_model": [316, 327], "keras_model": [316, 327], "mxnet_model": [316, 327], "nets_factori": [316, 327], "onnx_model": [316, 327, 351], "tensorflow_model": [316, 327, 356], "torch_model": [316, 327], "collect_layer_histogram": [316, 383], "create_obj_from_config": [316, 383], "kl_diverg": [316, 383], "load_huggingfac": [316, 383, 434], "neural_insights_util": [316, 383], "weights_detail": [316, 383], "sub_class": [324, 358], "register_customer_metr": 324, "mani": [324, 358, 417, 431, 469, 471], "tell": [324, 358, 461], "topk": [324, 358, 423, 433, 434, 462], "matrix": [324, 358, 399, 445, 470], "frozen": [325, 333, 358, 436], "savedmodel": [325, 333, 358, 472], "chould": 325, "onnx_ml_pb2": [325, 436], "hybirdblock": [325, 358], "paramt": [325, 379], "basemodel": 326, "plai": [326, 460, 466], "role": [326, 466], "kerasmodel": 328, "get_model_fwk_nam": 329, "fwk": 329, "mxnetmodel": 330, "net": 331, "factori": [331, 338, 340, 345, 348, 350, 355], "tfslimnetsfactori": 331, "onnxmodel": [332, 351], "get_model_typ": 333, "validate_graph_nod": 333, "validate_and_inference_input_output": 333, "output_tensor_nam": 333, "graph_sess": 333, "graph_def_sess": 333, "frozen_pb_sess": 333, "load_saved_model": 333, "saved_model_tag": 333, "signatur": 333, "saved_model_dir": 333, "tag": [333, 466, 467], "metagraphdef": 333, "keras_sess": 333, "slim_sess": 333, "checkpoint_sess": 333, "estimator_sess": 333, "saved_model_sess": 333, "tensorflowbasemodel": [333, 356], "tensorflowsavedmodelmodel": 333, "tensorflowqatmodel": 333, "tensorflowcheckpointmodel": 333, "checkpoint": [333, 389, 436], "tensorflowmodel": 333, "pytorchbasemodel": 334, "pytorchfxmodel": 334, "ipexmodel": 334, "driven": [335, 399, 434, 454, 456, 467], "objective_registri": 335, "objective_custom_registri": 335, "obj_cl": 335, "eural_compressor": 335, "objective_cl": 335, "user_object": 335, "__class__": 335, "__name__": 335, "objective_cfg": 335, "usr_cfg": 335, "user_obj_cfg": 335, "easili": [335, 400, 438, 442, 454, 456, 466], "peak": [335, 456], "multiobject": 335, "metric_criterion": 335, "metric_weight": 335, "obj_criterion": 335, "obj_weight": 335, "is_measur": 335, "parserfactori": 337, "onnxrtparserfactori": 339, "onnxprofilingpars": 341, "respons": [341, 342, 346, 462], "profilingpars": 342, "profilingresult": 343, "total_execution_tim": 343, "accelerator_execution_tim": 343, "cpu_execution_tim": 343, "op_run": 343, "op_defin": 343, "tensorflowparserfactori": 344, "tensorflowprofilingpars": 346, "profilerfactori": [347, 349, 354], "create_onnx_config": 352, "ort": 352, "sessionopt": 352, "delete_assign": 357, "create_tf_config": 357, "tf_modul": 357, "configproto": 357, "set_eager_execut": 357, "calib_func": [358, 463], "entir": [358, 379, 396, 401, 459, 466], "autotunestrategi": 359, "conservativetunestrategi": 363, "o0": [363, 469], "who": [363, 394], "hawq_v2tunestrategi": 365, "made": [365, 400, 462, 464, 469], "impact": [365, 464, 469], "tunestrategymeta": 370, "metaclass": 370, "lowerbitssampl": 373, "blockfallbacktuningsampl": 373, "op_block_lst": 373, "target_dtyp": 373, "build_slave_faker_model": 376, "slave": [376, 469], "virtual": [376, 460], "fun": 377, "attribute1": 377, "module_debug_level1": 377, "debug": [377, 386, 420, 447, 451, 455, 469, 470], "function1": 377, "param1": 377, "param2": 377, "parameter1": 377, "parameter2": 377, "o": [377, 431, 439, 458, 466], "function2": 377, "pep": 377, "484": 377, "output_model": [377, 434, 467], "function3": 377, "section": [377, 401, 420, 421, 422, 454, 459, 461, 471], "restructuredtext": 377, "liter": 377, "attributeerror": 377, "except": [377, 390], "generator1": 377, "example_gener": 377, "exampleclass": 377, "param3": 377, "public": [377, 394, 449, 452], "attr1": 377, "attr2": 377, "attr5": 377, "api_doc_exampl": 378, "loop": [379, 396, 397, 401, 427, 465, 469], "compressionmanag": 379, "uesd": 379, "deal": 379, "pruningconfig": 379, "orchestr": [379, 399, 430, 470], "on_train_begin": [379, 396, 421, 422, 434, 457, 459, 462], "train_loop": [379, 434, 457], "on_epoch_begin": [379, 382, 421, 422, 434, 457], "on_step_begin": [379, 382, 421, 422, 434, 457, 459], "on_after_compute_loss": [379, 421, 422, 434, 457], "backward": [379, 421, 422, 423, 434, 457, 459, 462, 464], "on_before_optimizer_step": [379, 421, 422, 434, 457, 459], "on_step_end": [379, 382, 421, 422, 434, 457], "on_epoch_end": [379, 382, 421, 422, 434, 457], "on_train_end": [379, 421, 422, 434, 457, 459, 462], "path_to_sav": 379, "manag": [379, 382, 434, 437, 438, 448], "top1": [379, 433, 459, 462, 472], "callbacks_list": 379, "layerhistogramcollector": 380, "layer_tensor": 380, "include_lay": 380, "get_func_from_config": 382, "func_dict": 382, "get_preprocess": 382, "get_metr": 382, "get_postprocess": 382, "get_algorithm": 382, "algo": 382, "create_dataset": 382, "cfg_preprocess": 382, "cfg_filter": 382, "create_dataload": 382, "dataloader_cfg": 382, "create_eval_func": 382, "postprocess_cfg": 382, "fp32_baselin": [382, 400], "baselin": [382, 465, 467], "create_train_func": 382, "train_cfg": 382, "Their": 382, "auxiliari": 383, "pretrain": [385, 437, 443], "optimizedmodel": 385, "from_pretrain": [385, 434], "save_for_huggingface_upstream": [385, 434], "output_dir": [385, 434, 442, 443], "msg": 386, "fatal": 386, "warn": 386, "warin": 386, "alia": [386, 390, 439, 444], "insight": [387, 399, 420, 464, 469, 470], "register_neural_insights_workload": 387, "workload_loc": [387, 390], "workload_mod": 387, "workload": [387, 390, 460], "uuid": 387, "update_neural_insights_workload": 387, "workload_uuid": 387, "update_neural_insights_workload_accuracy_data": 387, "baseline_accuraci": 387, "optimized_accuraci": 387, "is_int8_model": 389, "checkpoint_dir": 389, "history_cfg": 389, "best_configur": 389, "best_model_weight": 389, "pt": [389, 436, 460, 462, 463], "snapshot": 389, "cfg_from_fil": 390, "yaml_fil": [390, 418, 423], "lazyimport": 390, "lazi": 390, "till": [390, 469], "decorat": 390, "time_limit": 390, "get_siz": 390, "seen": [390, 400], "recurs": 390, "compute_spars": 390, "fault_tolerant_fil": 390, "equal_dict": 390, "d2": 390, "compare_kei": 390, "ignore_kei": 390, "cpuinfo": 390, "dump_elapsed_tim": [390, 400], "customized_msg": 390, "elaps": 390, "combine_histogram": 390, "old_hist": 390, "old": [390, 434, 464], "get_tensor_histogram": 390, "get_all_fp32_data": 390, "get_tuning_histori": 390, "tuning_history_path": 390, "num": [390, 417], "offlin": [390, 394, 434, 462, 466], "str2arrai": 390, "dequantize_weight": 390, "weight_tensor": 390, "min_filter_tensor": 390, "max_filter_tensor": 390, "scale_info": 390, "captureoutputtofil": 390, "tmp_file_path": 390, "stream": 390, "sy": [390, 440], "stderr": 390, "captur": 390, "statist": [390, 391], "header": [390, 426], "field_nam": 390, "output_handl": 390, "printer": 390, "global_st": 390, "load_data_from_pkl": 390, "pkl": 390, "dump_data_to_loc": 390, "show_memory_info": 390, "hint": 390, "dump_class_attr": 390, "compare_object": 390, "obj1": 390, "obj2": 390, "ignore_attr": 390, "comparison": [390, 464, 467], "alias_param": 390, "param_nam": 390, "param_alia": 390, "alias": 390, "print_tabl": 390, "column_map": 390, "table_entri": 390, "titl": [390, 432, 455, 469], "insert_newlin": 390, "prettyt": 390, "column": [390, 466], "func": [390, 462, 471], "handler": [390, 469], "row": [390, 420, 466], "decim": 390, "get_tensors_info": 390, "get_weights_detail": 390, "weightdetail": 390, "dump_tabl": 390, "filepath": 390, "file_typ": 390, "csv": [390, 397], "dump_table_to_csv": 390, "get_number_of_socket": 390, "platform": [390, 399, 430, 437, 445, 460, 462, 472], "opentri": 390, "activation_min": 390, "activation_max": 390, "print_op_list": 390, "get_op_list": 390, "minmax_file_path": 390, "input_model_tensor": 390, "optimized_model_tensor": 390, "activation_min_max": 390, "calculate_ms": 390, "mse_metric_gap": 390, "fp32_tensor": 390, "dequantize_tensor": 390, "euclidean": [390, 421], "distanc": [390, 421], "weightsdetail": 391, "input_tensor_data": 391, "optimized_tensor_data": 391, "weightsstatist": 391, "welcom": [393, 394, 395, 399, 473], "interest": [394, 399, 467], "foster": 394, "particip": 394, "commun": 394, "harass": 394, "experi": [394, 437, 465, 466, 469], "everyon": 394, "regardless": 394, "ag": 394, "bodi": 394, "ethnic": 394, "characterist": 394, "gender": 394, "educ": 394, "socio": 394, "econom": 394, "appear": [394, 448, 454], "race": 394, "religion": 394, "sexual": 394, "orient": 394, "behavior": [394, 395, 400, 401, 427, 436, 467, 469, 471], "contribut": [394, 399, 459], "inclus": 394, "Being": 394, "respect": [394, 427, 459, 466, 471], "viewpoint": 394, "gracefulli": 394, "focus": [394, 400], "empathi": 394, "toward": [394, 421], "member": [394, 400], "unaccept": 394, "imageri": 394, "unwelcom": 394, "troll": 394, "insult": 394, "derogatori": 394, "comment": [394, 418, 433, 434, 468], "polit": 394, "attack": 394, "privat": 394, "publish": [394, 432, 435, 455, 466], "electron": 394, "explicit": 394, "permiss": 394, "inappropri": 394, "profession": 394, "clarifi": 394, "appropri": [394, 466], "fair": 394, "action": [394, 449, 452], "edit": 394, "reject": 394, "commit": [394, 395], "wiki": 394, "issu": [394, 395, 398, 431, 462, 467], "ban": 394, "temporarili": 394, "deem": 394, "threaten": 394, "offens": 394, "harm": 394, "mail": 394, "social": [394, 460], "media": [394, 460], "account": [394, 465, 469], "appoint": 394, "onlin": [394, 465], "event": [394, 467], "abus": 394, "report": [394, 395, 465], "contact": [394, 464, 465], "complaint": 394, "review": [394, 395], "investig": 394, "circumst": [394, 461], "oblig": 394, "confidenti": 394, "regard": [394, 463], "incid": 394, "separ": [394, 429, 432, 457, 461], "good": [394, 462, 469], "faith": 394, "face": [394, 399, 406, 437, 441, 460, 464], "repercuss": 394, "leadership": 394, "faq": [394, 399], "page": [394, 395], "send": 395, "view": [395, 399, 424, 445, 454, 464], "pylint": 395, "flake8": 395, "autopep8": 395, "cover": [395, 425, 429, 460], "would": [395, 434, 459, 462, 466], "adopt": [395, 437, 459, 460, 466], "certif": 395, "agre": 395, "j": [395, 399, 466, 472], "bug": 395, "jira": 395, "ticket": 395, "potenti": [395, 397, 420], "risk": 395, "pr": [395, 433, 449, 452, 464], "reproduc": 395, "hardwar": [395, 399, 400, 421, 430, 434, 454, 458, 459, 460, 461], "submit": [395, 460], "intend": 395, "safe": 395, "collabor": [395, 439, 445], "adher": 395, "toolkit": [396, 431, 437, 445, 460, 470], "tracer": 396, "resolv": [396, 398], "floatfunct": 396, "cat": [396, 425, 440], "done": [396, 421, 422, 438, 454, 459, 462], "10004": [396, 397, 400, 417, 421, 422, 427, 430, 435, 457, 461, 471], "neural_compressor": [396, 397, 399, 401, 416, 417, 418, 420, 421, 422, 423, 425, 428, 429, 433, 434, 435, 436, 456, 457, 459, 461, 462, 463, 464, 465, 466, 468, 469, 471], "eval": [396, 417, 420, 437, 462, 467], "fail": [396, 425], "conduct": [396, 434, 442, 454, 469, 470], "imper": 396, "therefor": [396, 434, 459, 462, 464, 466], "lot": [396, 466], "As": [396, 417, 421, 433, 434, 448, 459, 469], "failur": 396, "successfulli": [396, 423, 460], "suggest": [396, 465], "traceabl": 396, "proxi": 396, "tutori": [396, 445, 460, 470], "prototyp": 396, "html": [396, 399, 449, 452], "highlight": 396, "untrac": 396, "ssd": [396, 425, 472], "resnet34": [396, 472], "r34": 396, "bboxes_labels_scor": 396, "prob": 396, "45": [396, 466, 472], "max_output": 396, "zip": 396, "dbox": 396, "dlabel": 396, "dscore": 396, "decode_singl": 396, "autom": [397, 437, 454, 455, 466], "artifici": 397, "ann": 397, "par": 397, "outperform": 397, "hand": 397, "propos": [397, 400, 421, 435, 466], "lie": 397, "predictor": 397, "shown": [397, 417, 420, 421, 433, 434, 448, 456, 457, 459, 466, 469], "figur": [397, 447, 448, 451], "popul": 397, "inner": 397, "evolutionari": 397, "cycl": 397, "until": [397, 469], "conclud": 397, "met": [397, 427, 462, 467], "yet": [397, 449, 452, 455], "simplest": [397, 440], "launcher": [397, 399, 421, 422, 445, 470], "agent": 397, "nsga2": 397, "supernet": 397, "ofa_mbv3_d234_e346_k357_w1": 397, "acc": [397, 459, 467, 472], "mac": [397, 455], "num_ev": 397, "250": [397, 459], "results_csv_path": 397, "search_result": 397, "dataset_path": 397, "ilsvrc2012": 397, "aim": [397, 399, 437, 459, 466, 469, 470], "mobilenetv3": 397, "lt": [397, 418, 458, 472], "wmt": 397, "en": 397, "de": 397, "guidelin": [398, 399], "mainstream": [399, 470], "learn": [399, 400, 417, 418, 425, 429, 430, 431, 434, 435, 437, 439, 442, 443, 445, 448, 449, 452, 454, 459, 460, 462, 466, 467, 469, 470], "runtim": [399, 400, 402, 417, 420, 424, 427, 430, 435, 439, 444, 445, 461, 464], "workflow": [399, 401, 420, 421, 425, 431, 435, 449, 452, 467, 470], "particular": [399, 459], "wide": [399, 424, 435, 459, 462, 472], "xeon": [399, 431, 432, 435, 458, 460, 462, 463, 472], "scalabl": [399, 431, 435, 458, 460, 462, 463, 472], "processor": [399, 435, 458, 460, 462, 463, 472], "flex": [399, 431], "amd": [399, 430, 431, 472], "arm": [399, 430, 431, 472], "nvidia": [399, 430, 431, 472], "bloom": [399, 466], "176b": [399, 466], "7b": [399, 466], "stabl": [399, 431, 459, 460], "diffus": [399, 460, 472], "gpt": [399, 459, 466, 472], "hub": [399, 424, 428, 445], "hug": [399, 460], "vision": [399, 425, 441, 466], "coder": [399, 430, 438, 439, 442, 445, 448, 460], "cloud": [399, 460], "marketplac": [399, 455, 460], "googl": [399, 435, 460], "amazon": [399, 437, 445], "web": [399, 467], "servic": [399, 454, 458], "azur": [399, 460], "softwar": [399, 432, 458, 459, 460, 464], "alibaba": [399, 444, 451, 452, 460], "tencent": [399, 460], "taco": [399, 460], "ai": [399, 437, 460, 463, 470], "ecosystem": [399, 460], "lightn": [399, 444], "pip": [399, 420, 423, 426, 428, 431, 439, 442, 447, 449, 451, 452, 464], "wget": [399, 420, 426, 428], "storag": [399, 428, 433, 466], "googleapi": [399, 428], "v1_6": [399, 428], "mobilenet_v1_1": [399, 428], "0_224_frozen": [399, 428], "overview": 399, "jupyterlab": [399, 437, 443, 445, 447, 451, 470], "studio": [399, 445, 454, 470], "topic": 399, "innov": [399, 445, 460], "blog": [399, 460], "medium": [399, 460], "netflix": [399, 460], "2023": [399, 466, 472], "enhanc": [399, 437, 460, 463], "apr": [399, 460], "still": [399, 434, 460, 462, 463], "mlperf": [399, 460, 472], "5x": [399, 460], "neurip": [399, 460], "oct": [399, 460], "quala": [399, 460], "minilm": [399, 460, 472], "releas": [399, 431, 443, 445, 447, 451, 453, 472, 473], "legal": [399, 473], "secur": [399, 458, 460, 473], "idea": [399, 459, 466, 469], "feel": 399, "bridg": [400, 430], "vanilla": [400, 430], "abcadaptor": 400, "__init__": [400, 417, 418, 433, 469], "query_fw_cap": [400, 401], "query_fused_pattern": 400, "he": 400, "besid": [400, 421], "describ": [400, 401, 420, 427, 467], "past": 400, "mainten": 400, "difficult": [400, 466], "abil": [400, 418, 427, 466], "modif": [400, 427, 442], "fragment": 400, "scenario": [400, 416, 421, 434, 459], "granular": [400, 401, 427, 430, 440, 462, 466, 471], "semant": [400, 427], "mla": [400, 435, 462], "becom": [400, 425, 459], "explor": 400, "inspect_tensor": 400, "op_list": [400, 467], "iteration_list": 400, "inspect_typ": 400, "save_to_disk": 400, "quantization_cfg": 400, "set_tensor": 400, "tensor_dict": 400, "diagnosis_help": 400, "explain": [401, 420, 466], "let": [401, 427, 442, 459, 461, 471], "overal": [401, 471], "diagram": [401, 420, 469], "illustr": [401, 422, 469], "sequencediagram": 401, "autonumb": 401, "travers": [401, 469], "drive": [401, 458], "previou": [401, 434, 459, 464, 466, 467, 469, 470], "extend": 401, "uint4": 401, "asymmetr": [401, 462, 469], "per_tensor": [401, 427, 462, 471], "kullback": [401, 421], "leibler": [401, 421], "pytorch_cpu": 401, "1_11_capabl": 401, "cap_s8_1_11": 401, "conv1d": 401, "cap_s8_1_11_conv1d": 401, "per_channel_symmetr": 401, "addition": [401, 423, 469], "per_tensor_symmetr": 401, "One": [401, 418, 423, 430, 459, 460, 469], "due": [401, 425, 459, 462, 466, 467], "nativ": 401, "simul": 401, "with_arg": 401, "qscheme": 401, "torch_dtyp": 401, "quant_min": 401, "quant_max": 401, "outlin": 401, "instruct": [401, 421, 431, 435, 449, 452, 460, 461, 462], "accommod": 401, "incorpor": [401, 422, 469], "linux": [416, 426, 448, 454], "x86_64": 416, "aarch64": 416, "encount": 417, "consum": 417, "previous": 417, "lack": [417, 426], "faster": [417, 419, 425, 460, 469, 472], "treat": 417, "Of": 417, "getitem": 417, "fn": 417, "evenli": 417, "divid": [417, 466, 469], "discard": 417, "throw": 417, "awai": 417, "draw": [417, 465, 469], "worker": [417, 434, 462], "subprocess": 417, "pin": [417, 447, 451], "reshuffl": 417, "manner": [417, 421, 436], "newdataload": 417, "customis": [417, 418, 433], "ensp": [418, 468], "imagerecord": [418, 423, 471], "image_nam": 418, "cocorecord": 418, "gt": [418, 466, 468], "int32": 418, "int64": 418, "offer": 418, "style_transf": 418, "content": 418, "tfrecorddataset": 418, "labelbal": 418, "300": 418, "16": [418, 466, 472], "helloworld": [418, 435, 468], "aid": 419, "deploy": [419, 437, 454, 466], "infrastructur": 419, "gap": [420, 436], "diagnos": 420, "gui": [420, 430, 459], "termin": [420, 447, 448, 451], "repeat": [420, 469], "durat": [420, 465], "git": [420, 426, 431], "clone": [420, 431, 447, 451], "cd": [420, 423, 431], "setup": [420, 427, 431, 449, 452, 459], "ilsvr2012": 420, "caff": 420, "berkeleyvis": 420, "caffe_ilsvrc12": 420, "xvzf": 420, "image_recognit": [420, 467], "resnet50_torchvis": 420, "ptq_static": 420, "resnet50_v1": [420, 423, 434], "dataset_loc": [420, 467], "label_path": 420, "quantiti": 420, "vec": 420, "mu": 420, "frac": [420, 466], "sigma": 420, "var": 420, "happen": 420, "dispers": 420, "trust": 420, "rule": [420, 437, 459], "v0": [420, 467], "cg": [420, 467], "conv0": [420, 467], "expens": [421, 434, 469], "deploi": [421, 434, 469], "power": [421, 434, 448, 458, 460], "mobil": [421, 434, 472], "produc": 421, "logit": 421, "softmax": 421, "l": [421, 467, 469], "kd": 421, "patient": 421, "compact": [421, 434, 440, 459], "agnost": 421, "resourc": [421, 469], "convolut": [421, 460], "ia": 421, "attach": [421, 434, 466], "shallow": 421, "deepest": 421, "deeper": 421, "paper": [421, 459, 466], "10006": [421, 422], "student_output": [421, 422], "student_loss": [421, 422], "training_func_for_nc": [421, 422], "distil_loss_conf": 421, "accordingli": [421, 445], "promis": [422, 434, 459], "huge": [422, 459], "heavi": 422, "light": 422, "booster": 422, "degrad": [422, 459, 469], "novel": [422, 437, 448, 454], "place": [422, 431, 459, 467], "comb": 422, "distillation_criterion": [422, 434, 457], "q_conf": 422, "horovod": 423, "instal": [423, 426, 428, 437, 439, 442, 445, 449, 452, 454, 455, 458, 473], "builtin": 423, "program": [423, 432, 437, 454], "enable_eager_execut": 423, "yaml_file_path": 423, "pre_process": 423, "simpli": [423, 436, 437, 439, 442, 454], "evaluation_result": 423, "evaluation_time_cost": 423, "partit": [423, 459], "distributedsampl": 423, "train_sampl": 423, "train_dataset": [423, 462], "num_replica": 423, "rank": 423, "train_load": 423, "train_kwarg": 423, "adadelta": 423, "distributedoptim": 423, "named_paramet": 423, "broadcast_paramet": 423, "root_rank": 423, "broadcast_optimizer_st": 423, "set_epoch": 423, "batch_idx": 423, "zero_grad": [423, 434, 459], "nll_loss": 423, "log_interv": 423, "0f": 423, "tloss": 423, "6f": 423, "dry_run": 423, "test_func": 423, "host": 423, "num_of_process": 423, "002": 423, "ssh": [423, 454], "prompt": 423, "readm": 423, "exactli": [423, 438], "recognit": [423, 425, 459, 467], "line": [423, 430, 437, 442, 443, 467], "resizecropimagenet": [423, 468], "realiz": [423, 456, 463, 465], "tow": 423, "node1": 423, "node2": 423, "TO": [423, 439], "your_node1_nam": 423, "your_node2_nam": 423, "resnet50_fp32_pretrained_model": 423, "nc_resnet50_v1": 423, "resnet": [423, 472], "varieti": [424, 461, 469], "demonstr": [424, 437, 467], "10k": [424, 428], "speedup": [424, 430, 462], "2x": [424, 430, 458], "vnni": [424, 430, 461, 462], "exchang": 425, "hope": 425, "inc_model": [425, 436], "fp32_onnx_config": 425, "verifi": 425, "vgg16": [425, 472], "mobilenet": [425, 465, 472], "rcnn": 425, "torchscript": [425, 466], "unsupport": [425, 434, 459], "add_relu": 425, "conv1d_relu": 425, "conv2d_relu": 425, "group_norm": 425, "hardswish": 425, "instance_norm": 425, "layer_norm": 425, "leaky_relu": 425, "sigmoid": 425, "toolchain": 426, "bare": 426, "metal": 426, "sudo": [426, 440], "apt": [426, 431, 440, 448], "python3": 426, "dev": [426, 447, 451], "distutil": 426, "essenti": 426, "libgl1": 426, "mesa": 426, "glx": 426, "libglib2": 426, "ln": 426, "sf": 426, "usr": 426, "incompat": 426, "88": [426, 465, 472], "80": [426, 466, 467, 472], "pyobject": 426, "reinstal": 426, "importerror": 426, "libgl": 426, "No": [426, 434, 458, 460], "yum": [426, 431], "opencv": [426, 448], "conda": [426, 431, 440, 448, 464], "13": [426, 431, 464, 466], "pend": 426, "sqlalchemi": 426, "27": [426, 472], "alemb": 426, "forg": [426, 431], "quick": [427, 435, 470, 471], "friendli": [427, 434, 466, 470, 471], "dive": [427, 470], "unless": 427, "purpos": [427, 435, 454, 461, 462], "syntax": 427, "go": [427, 449, 452, 461, 468], "up1": 427, "up2": 427, "valid_mixed_precis": 427, "addn": 427, "grappler_optim": 427, "constfold": 427, "arithmet": 427, "debug_stripp": 427, "major": [429, 462, 466], "concept": [429, 465, 470], "rather": 429, "custom_metr": 429, "refin": [429, 459], "These": 430, "broad": [430, 443, 470], "420": 430, "geomean": 430, "snippet": 430, "upload": [430, 449, 452], "click": [430, 437, 438, 445, 448, 454, 460, 467], "button": [430, 448, 454], "dispatch": 430, "qintegerop": [430, 462], "plan": 430, "oneapi": [431, 460, 470], "analyt": [431, 460, 470], "success": 431, "11": [431, 433, 435, 466, 469], "frequent": 431, "ask": 431, "pypi": [431, 449, 452], "nightli": 431, "consolid": 431, "latest": [431, 460, 464], "eas": [431, 439, 460], "along": [431, 459], "streamlin": 431, "scienc": 431, "websit": 431, "anaconda": 431, "suit": [431, 455, 467], "esri": 431, "formerli": 431, "skylak": 431, "cascad": 431, "lake": [431, 435, 460], "cooper": [431, 435, 460], "ic": [431, 460], "sapphir": 431, "rapid": 431, "hbm": 431, "arctic": 431, "sound": 431, "pont": 431, "vecchio": 431, "cento": 431, "ubuntu": [431, 458], "22": [431, 472], "04": [431, 458, 472], "fortensorflow": 431, "forpytorch": 431, "12": [431, 472], "tf_enable_onednn_opt": 431, "onednn": [431, 435, 462], "newer": 431, "copyright": 432, "subject": 432, "accompani": [432, 469], "research": [432, 466], "wish": 432, "bibtex": 432, "misc": 432, "author": 432, "feng": 432, "tian": 432, "hanwen": 432, "haihao": [432, 459], "shen": [432, 459], "suyu": 432, "chen": 432, "howpublish": 432, "year": 432, "logo": [432, 458], "atom": 432, "phi": 432, "pentium": 432, "vtune": 432, "corpor": [432, 458], "subsidiari": [432, 458], "brand": [432, 458], "claim": [432, 458], "popularli": 433, "industri": [433, 460], "label_map": 433, "decis": 433, "ap": 433, "curv": 433, "turn": [433, 448], "target_boxes_num": 433, "str_label": 433, "int_label": 433, "inturn": 433, "cocomap": 433, "vocmap": 433, "categor": 433, "multiclass": 433, "multilabel": 433, "newmetr": 433, "reset": 433, "reflect": [433, 458, 468], "new_metr": 433, "deliv": [434, 460, 464], "conveni": 434, "upgrad": 434, "veri": [434, 455, 462, 469, 470], "speed": [434, 445, 459, 460, 462, 469], "fundament": 434, "comprehens": [434, 470], "kind": 434, "resort": 434, "automodelforsequenceclassif": 434, "autotoken": 434, "val_dataset": [434, 462], "val_dataload": [434, 462], "ping_memori": [434, 462], "formul": 434, "effort": 434, "written": 434, "onnxrt_integ": [434, 471], "onnxrt_qlinear": [434, 471], "image_tensor": [434, 471], "post_training_dynamic_qu": [434, 461, 469], "1000": [434, 471], "2000": 434, "sampling_s": [434, 471], "model_wis": [434, 471], "op_dict": 434, "op_wis": [434, 467, 471], "sigopt_api_token": [434, 465, 469], "sigopt_project_id": [434, 465, 469], "sigopt_experiment_nam": [434, 465, 469], "demo": 434, "600": [434, 472], "training_arg": 434, "emul": [434, 462], "trainer": [434, 445], "briefli": [434, 466], "maxim": [434, 459, 469], "pruning_func": 434, "num_train_epoch": [434, 459], "train_dataload": [434, 459, 462], "n_gpu": 434, "gradient_accumulation_step": 434, "clip_grad_norm_": 434, "max_grad_norm": 434, "rate": [434, 459, 462], "start_epoch": [434, 461, 471], "end_epoch": [434, 461, 471], "97": [434, 466, 472], "newli": [434, 459], "on_after_optimizer_step": [434, 459], "layer3": [434, 459], "lr_schedul": [434, 459], "weight_decai": [434, 471], "0004": 434, "nesterov": [434, 471], "randomresizedcrop": [434, 468], "totensor": [434, 468], "485": 434, "456": 434, "406": 434, "nepoch": 434, "cnt": 434, "loss_sum": 434, "iter_bar": 434, "tqdm": 434, "desc": 434, "teacher_logit": 434, "train_fun": 434, "training_func": 434, "recent": [434, 435], "growth": [434, 435, 459], "complex": [434, 435, 459], "significantli": [434, 435, 459, 469], "bandwidth": [434, 435], "exit_polici": [434, 471], "determinist": 434, "arbitrari": [434, 457], "meaning": [434, 457], "reli": [434, 466], "prune_conf": 434, "quantization_aware_training_conf": 434, "aforement": 434, "inset": 434, "p_conf": [434, 457], "ssd_mobilenet_v1": 434, "benchmarkconf": 434, "half": [435, 445], "sixteen": 435, "launch": [435, 455], "3rd": [435, 460, 462, 463], "gen": [435, 460, 462, 463], "codenam": 435, "boost": [435, 438, 454, 459, 460], "x86": 435, "avx512": [435, 462], "vcvtne2ps2bf16": 435, "vcvtneps2bf16": 435, "vdpbf16p": 435, "fbgemm": [435, 462], "tensorrtexecutionprovid": [435, 462], "cudaexecutionprovid": [435, 462], "cuda": [435, 437, 439, 462], "avx512_bf16": 435, "plu": 435, "resnet18": [435, 439, 472], "persist": 436, "brought": [436, 438, 445, 462], "tf2": 436, "h5": 436, "hybridblock": 436, "0000": 436, "saved_result": 436, "simplifi": [437, 448, 454, 459], "acquir": 437, "analysi": [437, 454, 459, 465], "heurist": [437, 454], "great": 437, "facilit": 437, "autocast": 437, "my_model": 437, "no_grad": 437, "memory_format": 437, "112": [437, 472], "rand": [437, 466], "plugin": [437, 455], "aw": [437, 445, 460, 472], "sagemak": [437, 445], "inlin": [437, 442, 445], "neural_cod": [437, 439, 441, 442, 443, 445], "bench": 437, "superbench": 437, "enjoi": [438, 442, 445], "rebuild": [438, 447, 451], "reload": [438, 455], "modern": 439, "democrat": [439, 460], "programm": [439, 445, 454], "nano_bf16_channels_last": 439, "nano_bf16_ipex_channels_last": 439, "nano_bf16_ipex": 439, "nano_bf16": 439, "nano_fp32_channels_last": 439, "nano_fp32_ipex_channels_last": 439, "nano_fp32_ipex": 439, "nano_gpu_to_cpu": 439, "nano_int8": 439, "nano_jit_bf16_channels_last": 439, "nano_jit_bf16_ipex_channels_last": 439, "nano_jit_bf16_ipex": 439, "nano_jit_bf16": 439, "nano_jit_fp32_channels_last": 439, "nano_jit_fp32_ipex_channels_last": 439, "nano_jit_fp32_ipex": 439, "nano_jit_fp32": 439, "nano_onnxruntime_fp32": 439, "nano_onnxruntime_int8_qlinear": 439, "openvino": 439, "nano_openvino_fp32": 439, "nano_openvino_int8": 439, "bc": [440, 448], "conda_prefix": 440, "echo": 440, "tradit": [440, 459], "libjemalloc": 440, "libiomp5": 440, "home": 440, "lib": 440, "ld_preload": 440, "malloc_conf": 440, "oversize_threshold": 440, "background_thread": 440, "metadata_thp": 440, "dirty_decay_m": 440, "9000000000": 440, "muzzy_decay_m": 440, "kmp_affin": 440, "kmp_blocktim": 440, "dnnl_primitive_cache_capac": 440, "cpufreq": 440, "scaling_governor": 440, "powersav": 440, "tee": 440, "pytorch_jit_script": [441, 444], "pytorch_channels_last": [441, 444], "run_bench": 441, "patch": [441, 454], "patch_path": 441, "your_patch_path": 441, "sweep": 441, "sweep_object": 441, "bench_config": 441, "bench_featur": 441, "sai": 442, "run_glu": [442, 443], "requisit": 442, "task_nam": [442, 443], "do_ev": [442, 443], "remain": 442, "itself": 442, "run_glue_optim": 442, "static_ipex": 442, "auto_qu": 443, "v4": [443, 472], "albert": [443, 472], "sst2": 443, "alexnet": [443, 472], "pytorch_amp": 444, "optimize_for_infer": 444, "pytorch_jit_trac": 444, "pytorch_jit_script_ofi": 444, "pytorch_jit_trace_ofi": 444, "torchdynamo": 444, "pytorch_torchdynamo_jit_script": 444, "pytorch_torchdynamo_jit_trac": 444, "pytorch_torchdynamo_jit_script_ofi": 444, "pytorch_torchdynamo_jit_trace_ofi": 444, "pytorch_inc_bf16": 444, "pytorch_inc_static_quant_fx": 444, "pytorch_inc_static_quant_ipex": 444, "pytorch_inc_dynamic_qu": 444, "pytorch_ipex_fp32": 444, "pytorch_ipex_bf16": 444, "pytorch_ipex_int8_static_qu": 444, "pytorch_ipex_int8_dynamic_qu": 444, "blade": 444, "disc": 444, "pytorch_aliblad": 444, "pytorch_lightning_bf16_cpu": 444, "tensorflow_amp": 444, "keras_amp": 444, "tensorflow_inc": 444, "keras_inc": 444, "onnx_inc_static_quant_qlinear": 444, "onnx_inc_static_quant_qdq": 444, "onnx_inc_dynamic_qu": 444, "optimum": [444, 445], "pytorch_inc_huggingface_optimum_stat": 444, "pytorch_inc_huggingface_optimum_dynam": 444, "intel_extension_for_transform": 444, "bigdl": [444, 445], "nano": [444, 445], "nano_": 444, "inc_auto": 444, "delight": 445, "announc": 445, "v": [445, 454, 459, 469, 471], "500": 445, "jupyt": [445, 447, 448, 451], "isa": 445, "adjust": [445, 462, 466], "xpu": 445, "delta": 445, "acc_delta": 445, "int8_acc": 445, "fp32_acc": 445, "ext": [447, 449, 451, 452, 453], "lab": [447, 448, 449, 451, 452], "nodej": [447, 451], "jlpm": [447, 451], "yarn": [447, 451], "npm": [447, 448, 451], "lieu": [447, 451], "labextens": [447, 448, 451], "typescript": [447, 451], "watch": [447, 451], "immedi": [447, 451, 459], "refresh": [447, 451], "browser": [447, 451], "wait": [447, 451, 454], "rebuilt": [447, 451], "easier": [447, 451, 454, 460], "symlink": [447, 451], "down": 448, "finish": 448, "enter": [448, 454], "blank": 448, "cell": 448, "gain": [448, 457, 460], "mkl": 448, "jemalloc": 448, "pip3": 448, "headless": 448, "pyproject": [449, 452], "toml": [449, 452], "twine": [449, 452], "whl": [449, 452], "dist": [449, 452], "sdist": [449, 452], "bdist_wheel": [449, 452], "deprec": [449, 452, 464, 468], "frontend": [449, 452], "login": [449, 452, 465], "repositori": [449, 452], "cut": [449, 452], "fork": [449, 452], "admin_github_token": [449, 452], "pypi_token": [449, 452], "npm_token": [449, 452], "secret": [449, 452], "panel": [449, 452, 454], "draft": [449, 452], "changelog": [449, 452, 453], "pkg": [449, 452], "bot": [449, 452], "pick": [449, 452, 455], "feedstock": [449, 452], "hatch": 452, "notabl": 453, "vscode": [453, 455], "daili": 454, "give": [454, 469], "advantag": [454, 459, 461, 469], "remot": 454, "re": 454, "market": 454, "uninstal": 454, "fill": [454, 465, 468, 469], "upper": 454, "sidebar": 454, "hover": 454, "track": [454, 465], "argpars": 454, "pop": 454, "diff": 454, "manifest": 455, "declar": 455, "palett": 455, "registercommand": 455, "amodio": 455, "tsl": 455, "matcher": 455, "dbaeumer": 455, "eslint": 455, "press": 455, "f5": 455, "ctrl": [455, 472], "hello": 455, "world": 455, "breakpoint": 455, "consol": 455, "relaunch": 455, "toolbar": 455, "node_modul": 455, "viewlet": 455, "dropdown": 455, "runner": 455, "startup": 455, "bundl": 455, "multi_object": 456, "benefit": 457, "instanti": 457, "platinum": [458, 472], "8358": 458, "manufactur": 458, "m50cyp2sbstd": 458, "bio": 458, "se5c620": 458, "86b": 458, "0005": 458, "2202160810": 458, "microcod": 458, "0xd000332": 458, "irq": 458, "60ghz": 458, "6chz": 458, "turbo": 458, "perf": 458, "512gb": 458, "16x32gb": 458, "ddr4": 458, "3200": 458, "mt": 458, "nic": 458, "1x": 458, "ethernet": 458, "100mb": 458, "i350": 458, "gigabit": 458, "intel_ssdsckkb48": 458, "447": 458, "1g": 458, "publicli": 458, "degre": 458, "mark": 458, "trademark": 458, "neuron": 459, "art": 459, "grown": 459, "unpreced": 459, "increasingli": 459, "crucial": 459, "stand": [459, 469], "delet": 459, "commonli": 459, "salient": 459, "shrink": 459, "contextu": 459, "howev": [459, 466], "scene": 459, "haven": 459, "color": 459, "lowest": [459, 469], "formula": [459, 466], "emsp": 459, "downstream": 459, "finetun": 459, "prone": 459, "larger": [459, 466], "co": 459, "discourag": 459, "push": [459, 466], "penal": 459, "parameter": 459, "exemplifi": 459, "complement": 459, "fortieth": 459, "miss": [459, 462], "pruner2": 459, "mention": 459, "readi": 459, "hesit": 459, "sst": [459, 472], "25": [459, 466, 472], "63": [459, 466, 472], "24": [459, 466, 469, 472], "35": [459, 472], "flan": 459, "t5": 459, "english": 459, "romanian": 459, "404": [459, 472], "381": 459, "yolov5": 459, "75": [459, 466, 472], "2x1": [459, 472], "801": 459, "7895": 459, "signific": [459, 460, 466], "reduct": [459, 471], "namhoon": 459, "lee": 459, "thalaiyasingam": 459, "ajanthan": 459, "philip": 459, "torr": 459, "2019": 459, "zafrir": 459, "ofir": 459, "ariel": 459, "larei": 459, "boudoukh": 459, "mosh": 459, "wasserblat": 459, "preprint": [459, 466], "2111": 459, "05754": 459, "2021": 459, "heterogen": 460, "mar": 460, "busi": 460, "jan": 460, "amx": 460, "4th": [460, 462], "mleffici": 460, "dec": 460, "wechat": 460, "deepen": 460, "foundat": 460, "intellig": 460, "vmware": 460, "applianc": 460, "bitnami": 460, "nov": 460, "sota": 460, "few": [460, 469], "plug": 460, "twitter": 460, "linkedin": 460, "zone": 460, "land": 460, "gcp": 460, "pat": 460, "keynot": 460, "intelon": 460, "sep": 460, "chines": 460, "aug": 460, "purif": 460, "sacrif": 460, "jun": 460, "partner": 460, "feb": 460, "joint": 460, "msft": 460, "bilibili": 460, "gestalt": 460, "ml": 460, "doubl": 460, "reconstruct": 460, "abound": 460, "lpot": [460, 464], "nextplatform": 460, "cern": 460, "gan": 460, "3dgan": 460, "iml": 460, "workshop": 460, "asplo": 460, "18": [460, 472], "highli": 460, "intelcaff": 460, "aris": 461, "henc": 461, "onnxrt_qoper": 461, "quant_aware_train": 461, "weight_compress": [461, 471], "initial_spars": [461, 471], "prune_typ": [461, 471], "basic_magnitud": [461, 471], "update_frequ": 461, "prune_domain": 461, "tile_pattern_1x1": 461, "invent": 462, "int4": 462, "cost": 462, "On": 462, "theoret": 462, "affin": 462, "zeropoint": 462, "255": [462, 466], "overflow": 462, "solv": [462, 464], "unseen": 462, "enough": 462, "peopl": 462, "mimic": 462, "fact": 462, "ultim": 462, "pain": 462, "lossi": 462, "chart": [462, 465, 467], "understand": [462, 467, 470], "philosophi": 462, "request": 462, "neither": 462, "nor": 462, "val_load": 462, "avg": 462, "themselv": 462, "ON": 463, "forc": 463, "postposttrainingquantconfig": 463, "bf16wrapper": 463, "retrac": 463, "site": 464, "assist": 464, "sed": 464, "your_script": 464, "backbon": 465, "interact": 465, "sigopt_experiment_id": 465, "nc": [465, 469], "certain": 465, "suffici": 465, "ordinari": 465, "capac": 465, "receiv": 465, "latenc": [465, 469], "8266": 465, "8372": 465, "2132": 465, "83": [465, 466, 472], "7495": 465, "8299": 465, "8294": 465, "85": [465, 466, 472], "0837": 465, "8291": 465, "4469": 465, "llm": 466, "gigant": 466, "systemat": 466, "quantif": 466, "migrat": [466, 470], "difficulti": 466, "mathemat": 466, "allevi": 466, "coarsest": 466, "finer": [466, 469], "matric": 466, "similarli": 466, "finest": 466, "consumpt": 466, "why": [466, 467], "suppos": 466, "6839": 466, "4741": 466, "7451": 466, "9301": 466, "1742": 466, "6835": 466, "q_min": 466, "q_max": 466, "clip": 466, "zp": 466, "q_x": 466, "clamp_": 466, "round_": 466, "w_q": 466, "00296431384049356": 466, "59": [466, 472], "172": 466, "192": 466, "w_dq": 466, "1220": 466, "0500": 466, "1430": 466, "2570": 466, "1890": 466, "mseloss": 466, "1983354538679123": 466, "6848": 466, "4743": 466, "7440": 466, "9308": 466, "1749": 466, "385297635664756e": 466, "07": [466, 471, 472], "affect": 466, "quantize_per_channel": 466, "x_tmp": 466, "detach": 466, "keepdim": 466, "dequantize_per_channel": 466, "0029": [466, 472], "0036": 466, "162": [466, 472], "48": [466, 472], "72": [466, 472], "93": [466, 472], "207": [466, 472], "139": [466, 472], "6837": 466, "4734": 466, "1751": 466, "6821": 466, "637690492221736e": 466, "6376e": 466, "3852e": 466, "cdot": 466, "quantize_per_tensor_absmax": 466, "n_bit": 466, "div_": 466, "0806": 466, "7589": 466, "6038": 466, "3815": 466, "5040": 466, "7174": 466, "5444": 466, "5826": 466, "7772": 466, "5555": 466, "3740": 466, "3253": 466, "0698": 466, "1381": 466, "5972": 466, "0086": 466, "0737": 466, "8298": 466, "6883": 466, "2991": 466, "1601": 466, "6506": 466, "8246": 466, "3924": 466, "3845": 466, "8768": 466, "w_scale": 466, "x_q": 466, "x_scale": 466, "84": [466, 472], "120": 466, "0059755356051027775": 466, "89": [466, 472], "119": [466, 472], "57": [466, 472], "91": [466, 472], "006533813662827015": 466, "y_q": 466, "17509": 466, "7608": 466, "4055": 466, "16599": 466, "21020": 466, "10016": 466, "9860": 466, "22444": 466, "y_dq": 466, "6836": 466, "2970": 466, "1583": 466, "6481": 466, "8207": 466, "3911": 466, "3850": 466, "8763": 466, "though": 466, "prove": 466, "simplic": 466, "middl": 466, "denot": 466, "fp1": 466, "fp2": 466, "subsect": [466, 471], "even": 466, "suppress": 466, "straightforward": 466, "intuit": 466, "x1": [466, 469], "x2": [466, 469], "herebi": 466, "recalcul": 466, "sq": 466, "overhead": 466, "stai": 466, "hardtanh": 466, "t5norm": 466, "llamanorm": 466, "groupnorm": 466, "lambada": 466, "sweet": 466, "spot": 466, "region": 466, "bigscienc": 466, "560m": 466, "65": [466, 472], "44": [466, 472], "66": [466, 472], "76": [466, 472], "1b7": 466, "71": [466, 472], "43": [466, 472], "67": [466, 472], "78": [466, 468, 472], "56": [466, 472], "58": [466, 472], "55": [466, 472], "3b": 466, "73": [466, 472], "69": [466, 472], "74": [466, 472], "7b1": 466, "77": [466, 472], "46": [466, 472], "17": [466, 472], "82": [466, 472], "52": [466, 472], "facebook": 466, "125m": 466, "41": [466, 472], "70": [466, 472], "94": [466, 468, 472], "79": [466, 467, 472], "60": [466, 472], "81": [466, 472], "26": [466, 472], "39": [466, 472], "68": [466, 468, 472], "eleutherai": 466, "6b": 466, "29": [466, 472], "96": [466, 472], "jason": 466, "wei": 466, "emerg": 466, "transact": 466, "yvinec": 466, "edouard": 466, "proceed": 466, "cvf": 466, "winter": 466, "xiui": 466, "2209": 466, "13325": 466, "xiao": 466, "guangxuan": 466, "2211": 466, "10438": 466, "discov": 467, "valuabl": 467, "instrument": 467, "writer": 467, "_pre_eval_hook": 467, "_post_eval_hook": 467, "submodul": 467, "whitelist": 467, "_recordingobserv": 467, "output_tensors_dict": 467, "current_it": 467, "get_tensor_valu": 467, "_observer_forward_hook": 467, "activation_post_process": 467, "_add_observer_": 467, "named_children": 467, "leaf": 467, "add_modul": 467, "register_forward_hook": 467, "dump_tim": 467, "summarywrit": 467, "_acc": 467, "tune_": 467, "add_graph": 467, "get_observer_dict": 467, "observer_dict": 467, "is_quant": 467, "add_histogram": 467, "shell": 467, "bind_al": 467, "logdir_spec": 467, "tune_0_acc0": 467, "tune_1": 467, "tune_1_acc0": 467, "four": 467, "baseline_acc_0": 467, "776": 467, "tune_1_acc_0": 467, "095": 467, "runs_v3": 467, "run_tuning_dump_tensor": 467, "sh": 467, "inceptionv3": 467, "skip": [467, 469], "bash": 467, "run_tun": 467, "topologi": 467, "inception_v3": 467, "inceptionv3_fp32_pretrained_model": 467, "nc_inceptionv3": 467, "inceptionv3_dump_tensor": 467, "poor": 467, "eightbit": 467, "disappear": 467, "centercrop": 468, "randomcrop": 468, "cropres": 468, "decodeimag": 468, "jpeg": 468, "encodejp": 468, "alignimagechannel": 468, "116": 468, "103": 468, "017": 468, "bilinearimagenet": [468, 471], "topilimag": 468, "padding_mod": 468, "border": 468, "pixel": 468, "edg": 468, "colorjitt": 468, "bright": 468, "satur": 468, "hue": 468, "jitter": 468, "tondarrai": 468, "quickli": [469, 470], "human": 469, "concret": 469, "aggress": 469, "classic": 469, "flowchart": 469, "htmllabel": 469, "td": 469, "classdef": 469, "itemstyl": 469, "cce5ff": 469, "stroke": 469, "99ccff": 469, "s1": 469, "s2": 469, "s3": 469, "s4": 469, "s5": 469, "s6": 469, "s7": 469, "nbsp": 469, "subgraphstyl": 469, "ffffff": 469, "At": 469, "attempt": 469, "post_training_auto_qu": 469, "trial": 469, "increment": 469, "primari": 469, "ii": 469, "highest": 469, "spent": 469, "hawq_v2_loss": 469, "model_loss": 469, "black": 469, "come": 469, "compli": 469, "posterior": 469, "focu": 469, "short": 469, "never": 469, "loglevel": 469, "endlessli": 469, "perspect": 469, "smbo": 469, "appl": 469, "surrog": 469, "quantil": 469, "densiti": 469, "parzen": 469, "greatest": 469, "hour": 469, "dai": 469, "next_tune_cfg": 469, "overridden": 469, "cluster": 469, "seamlessli": 469, "mpi": 469, "replic": 469, "replica": 469, "fed": 469, "synchron": 469, "mpirun": 469, "number_of_process": 469, "run_cmd": 469, "abctunestrategi": 469, "familiar": 470, "notebook": 470, "introduct": 470, "organ": 471, "logic": 471, "mobilenet_v1": 471, "hyper": 471, "40": [471, 472], "06": [471, 472], "beta_1": 471, "beta_2": 471, "epsilon": 471, "sparsecategoricalcrossentropi": 471, "sum_over_batch_s": 471, "from_logit": 471, "54": [471, 472], "19": [471, 472], "week": 472, "8380": 472, "visit": 472, "performancethroughput": 472, "sec": 472, "86": 472, "00": 472, "170": 472, "82x": 472, "92": 472, "85x": 472, "61": 472, "83x": 472, "densenet": 472, "121": 472, "274": 472, "148": 472, "161": 472, "132": 472, "39x": 472, "169": 472, "38": 472, "36": 472, "191": 472, "31": 472, "118": 472, "61x": 472, "cnn": 472, "incept": 472, "37": 472, "84x": 472, "resnet101": 472, "21x": 472, "70x": 472, "51": 472, "14x": 472, "34": 472, "955": 472, "328": 472, "91x": 472, "709": 472, "282": 472, "51x": 472, "v3": 472, "337": 472, "09": 472, "160": 472, "11x": 472, "438": 472, "204": 472, "223": 472, "105": 472, "12x": 472, "10x": 472, "47": 472, "1347": 472, "439": 472, "07x": 472, "1192": 472, "492": 472, "42x": 472, "412": 472, "376": 472, "662": 472, "397": 472, "66x": 472, "299": 472, "23": 472, "154": 472, "93x": 472, "476": 472, "227": 472, "fashion": 472, "2734": 472, "1299": 472, "498": 472, "178": 472, "79x": 472, "427": 472, "173": 472, "47x": 472, "resnetv2": 472, "194": 472, "146": 472, "33x": 472, "237": 472, "187": 472, "27x": 472, "152": 472, "155": 472, "38x": 472, "302": 472, "215": 472, "40x": 472, "03": 472, "346": 472, "312": 472, "277": 472, "60x": 472, "273": 472, "31x": 472, "18x": 472, "53x": 472, "24x": 472, "219": 472, "vgg19": 472, "193": 472, "11506": 472, "9665": 472, "19x": 472, "xception": 472, "262": 472, "137": 472, "barthez": 472, "143": 472, "02x": 472, "20x": 472, "209": 472, "08x": 472, "221": 472, "stsb": 472, "218": 472, "16x": 472, "62": 472, "57x": 472, "55x": 472, "56x": 472, "53": 472, "89x": 472, "blendcnn": 472, "4885": 472, "3715": 472, "camembert": 472, "206": 472, "09x": 472, "deberta": 472, "125": 472, "366": 472, "197": 472, "399": 472, "flaubert": 472, "592": 472, "385": 472, "54x": 472, "wikitext": 472, "hubert": 472, "446": 472, "181": 472, "46x": 472, "layoutlm": 472, "longform": 472, "49": 472, "mbart": 472, "625": 472, "451": 472, "lvwerra": 472, "pegasu": 472, "samsum": 472, "peleenet": 472, "402": 472, "29x": 472, "pokemon": 472, "275": 472, "334": 472, "48x": 472, "reform": 472, "crime": 472, "punish": 472, "153": 472, "06x": 472, "657": 472, "327": 472, "01x": 472, "812": 472, "344": 472, "36x": 472, "360": 472, "23x": 472, "resnext101": 472, "32x8d": 472, "182": 472, "squeezebert": 472, "195": 472, "150": 472, "30x": 472, "75x": 472, "transfo": 472, "xl": 472, "41x": 472, "wave2vec2": 472, "22x": 472, "102": 472, "00x": 472, "115": 472, "17x": 472, "yolo": 472, "232": 472, "28x": 472, "664": 472, "329": 472, "832": 472, "338": 472, "433": 472, "164": 472, "63x": 472, "836": 472, "1396": 472, "463": 472, "90x": 472, "159": 472, "32x": 472, "968": 472, "473": 472, "05x": 472, "958": 472, "477": 472, "arcfac": 472, "126": 472, "78x": 472, "298": 472, "124": 472, "624": 472, "254": 472, "45x": 472, "caffenet": 472, "1432": 472, "540": 472, "65x": 472, "1460": 472, "357": 472, "265": 472, "35x": 472, "86x": 472, "524": 472, "duc": 472, "efficientnet": 472, "1211": 472, "758": 472, "856": 472, "762": 472, "emot": 472, "ferplu": 472, "925": 472, "694": 472, "fcn": 472, "25x": 472, "googlenet": 472, "771": 472, "571": 472, "763": 472, "579": 472, "hf": 472, "156": 472, "multilingu": 472, "99x": 472, "199": 472, "104": 472, "73x": 472, "449": 472, "74x": 472, "l12": 472, "h384": 472, "466": 472, "247": 472, "88x": 472, "l6": 472, "523": 472, "354": 472, "183": 472, "107": 472, "spanbert": 472, "208": 472, "795": 472, "780": 472, "591": 472, "515": 472, "15x": 472, "2370": 472, "1526": 472, "2216": 472, "1506": 472, "2078": 472, "1028": 472, "1762": 472, "76x": 472, "mobilenetv2": 472, "2615": 472, "1645": 472, "59x": 472, "2461": 472, "1674": 472, "766": 472, "431": 472, "77x": 472, "575": 472, "430": 472, "34x": 472, "747": 472, "564": 472, "594": 472, "590": 472, "643": 472, "253": 472, "shufflenet": 472, "2354": 472, "1461": 472, "1850": 472, "1368": 472, "squeezenet": 472, "2484": 472, "1912": 472, "2526": 472, "1911": 472, "710": 472, "549": 472, "622": 472, "497": 472, "652": 472, "507": 472, "573": 472, "470": 472, "527": 472, "396": 472, "68x": 472, "tini": 472, "647": 472, "514": 472, "26x": 472, "ultrafac": 472, "314": 472, "50x": 472, "304": 472, "316": 472, "315": 472, "zfnet": 472, "462": 472, "268": 472, "72x": 472, "465": 472, "62x": 472, "436": 472, "270": 472, "429": 472, "92x": 472, "94x": 472, "331": 472, "242": 472, "37x": 472, "98x": 472, "taskdataset": 472, "accuracyspars": 472, "ratiospars": 472, "commentsbalancedor": 472, "unbalanc": 472, "mini": 472, "answeringsquad": 472, "87f1": 472, "momentumunbalanc": 472, "momentumbalanc": 472, "90f1": 472, "59f1": 472, "23f1": 472, "classificationmrpc": 472, "52f1": 472, "26f1": 472, "classificationsst": 472, "61accuraci": 472, "recognitionimagenet": 472, "95top1": 472, "v5s6": 472, "detectioncoco": 472, "ap0": 472, "6ap0": 472, "393": 472, "584": 472, "34f1": 472, "lassounbalanc": 472, "classificationmnli": 472, "mm": 472, "allbalanc": 472, "32accuraci": 472, "sensitivitybalanc": 472, "classificationqqp": 472, "classificationqnli": 472, "54accuraci": 472, "em": 472, "7965": 472, "wideresnet40": 472, "9522": 472, "8178": 472, "0213": 472, "8235": 472, "027": 472, "5494": 472, "7153": 472, "5540": 472, "0046": 472, "5523": 472, "vgg": 472, "bn": 472, "7022": 472, "7415": 472, "7025": 472, "0003": 472, "wip": 472, "6739": 472, "7399": 472, "6845": 472, "0106": 472, "7034": 472, "8382": 472, "bilstm": 472, "8314": 472, "9403": 472, "9048": 472, "0734": 472, "7323": 472, "8256": 472, "8084": 472, "8814": 472, "7442": 472, "8371": 472, "0119": 472, "0115": 472, "tinybert": 472, "8018": 472, "8044": 472, "8363": 472, "8411": 472, "8025": 472, "8074": 472, "0007": 472, "0030": 472, "8626": 472, "8213": 472, "9091": 472, "8782": 472, "8684": 472, "8259": 472, "0058": 472, "distilroberta": 472, "6057": 472, "6455": 472, "6187": 472, "0130": 472, "c6i": 472, "2xlarg": 472, "c6a": 472, "c6g": 472, "a100cuda": 472, "executionprovid": 472}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [316, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [159, 0, 0, "-", "algorithm"], [162, 0, 0, "-", "benchmark"], [166, 0, 0, "-", "compression"], [180, 0, 0, "-", "conf"], [182, 0, 0, "-", "config"], [183, 0, 0, "-", "contrib"], [208, 0, 0, "-", "data"], [263, 0, 0, "-", "experimental"], [323, 0, 0, "-", "metric"], [325, 0, 0, "-", "mix_precision"], [327, 0, 0, "-", "model"], [335, 0, 0, "-", "objective"], [336, 0, 0, "-", "profiling"], [358, 0, 0, "-", "quantization"], [366, 0, 0, "-", "strategy"], [378, 0, 0, "-", "template"], [379, 0, 0, "-", "training"], [383, 0, 0, "-", "utils"], [392, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [44, 0, 0, "-", "pytorch"], [45, 0, 0, "-", "query"], [46, 0, 0, "-", "tensorflow"], [110, 0, 0, "-", "tf_utils"], [150, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[44, 1, 1, "", "PyTorchAdaptor"], [44, 1, 1, "", "PyTorch_FXAdaptor"], [44, 1, 1, "", "PyTorch_IPEXAdaptor"], [44, 1, 1, "", "TemplateAdaptor"], [44, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[45, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[46, 1, 1, "", "TensorFlowAdaptor"], [46, 1, 1, "", "TensorflowQuery"], [46, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[47, 0, 0, "-", "graph_converter"], [48, 0, 0, "-", "graph_converter_without_calib"], [86, 0, 0, "-", "graph_rewriter"], [109, 0, 0, "-", "graph_util"], [111, 0, 0, "-", "quantize_graph"], [138, 0, 0, "-", "quantize_graph_common"], [139, 0, 0, "-", "smooth_quant_calibration"], [140, 0, 0, "-", "smooth_quant_scaler"], [141, 0, 0, "-", "tf2onnx_converter"], [144, 0, 0, "-", "transform_graph"], [147, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[50, 0, 0, "-", "bf16"], [75, 0, 0, "-", "generic"], [85, 0, 0, "-", "graph_base"], [94, 0, 0, "-", "int8"], [100, 0, 0, "-", "onnx"], [105, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[51, 0, 0, "-", "convert_add_to_biasadd"], [52, 0, 0, "-", "convert_layout"], [53, 0, 0, "-", "convert_leakyrelu"], [54, 0, 0, "-", "convert_nan_to_random"], [55, 0, 0, "-", "convert_placeholder_to_const"], [56, 0, 0, "-", "dequantize_cast_optimizer"], [57, 0, 0, "-", "dilated_contraction"], [58, 0, 0, "-", "dummy_biasadd"], [59, 0, 0, "-", "expanddims_optimizer"], [60, 0, 0, "-", "fetch_weight_from_reshape"], [61, 0, 0, "-", "fold_batch_norm"], [62, 0, 0, "-", "fold_constant"], [63, 0, 0, "-", "fuse_biasadd_add"], [64, 0, 0, "-", "fuse_column_wise_mul"], [65, 0, 0, "-", "fuse_conv_with_math"], [66, 0, 0, "-", "fuse_decomposed_bn"], [67, 0, 0, "-", "fuse_decomposed_in"], [68, 0, 0, "-", "fuse_gelu"], [69, 0, 0, "-", "fuse_layer_norm"], [70, 0, 0, "-", "fuse_pad_with_conv"], [71, 0, 0, "-", "fuse_pad_with_fp32_conv"], [72, 0, 0, "-", "fuse_reshape_transpose"], [73, 0, 0, "-", "graph_cse_optimizer"], [74, 0, 0, "-", "grappler_pass"], [76, 0, 0, "-", "insert_print_node"], [77, 0, 0, "-", "move_squeeze_after_relu"], [78, 0, 0, "-", "pre_optimize"], [79, 0, 0, "-", "remove_training_nodes"], [80, 0, 0, "-", "rename_batch_norm"], [81, 0, 0, "-", "split_shared_input"], [82, 0, 0, "-", "strip_equivalent_nodes"], [83, 0, 0, "-", "strip_unused_nodes"], [84, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, 1, 1, "", "FuseDecomposedBNOptimizer"], [66, 2, 1, "", "bypass_reshape"], [66, 2, 1, "", "get_const_dim_count"], [66, 2, 1, "", "node_from_map"], [66, 2, 1, "", "node_name_from_input"], [66, 2, 1, "", "valid_reshape_inputs"], [66, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, 1, 1, "", "FuseDecomposedINOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, 1, 1, "", "FuseLayerNormOptimizer"], [69, 2, 1, "", "node_from_map"], [69, 2, 1, "", "node_name_from_input"], [69, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[87, 0, 0, "-", "freeze_fake_quant"], [88, 0, 0, "-", "freeze_value"], [89, 0, 0, "-", "freeze_value_without_calib"], [90, 0, 0, "-", "fuse_conv_redundant_dequantize"], [91, 0, 0, "-", "fuse_conv_requantize"], [92, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [93, 0, 0, "-", "fuse_matmul_requantize"], [95, 0, 0, "-", "meta_op_optimizer"], [96, 0, 0, "-", "post_hostconst_converter"], [97, 0, 0, "-", "post_quantized_op_cse"], [98, 0, 0, "-", "rnn_convert"], [99, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [93, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, 0, 0, "-", "onnx_graph"], [102, 0, 0, "-", "onnx_node"], [103, 0, 0, "-", "onnx_schema"], [104, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, 1, 1, "", "OnnxOpSchema"], [103, 2, 1, "", "get_max_supported_opset_version"], [103, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, 1, 1, "", "SeqType"], [104, 2, 1, "", "add_port_to_name"], [104, 2, 1, "", "are_shapes_equal"], [104, 2, 1, "", "assert_error"], [104, 2, 1, "", "compute_const_folding_using_tf"], [104, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [104, 2, 1, "", "find_opset"], [104, 2, 1, "", "get_index_from_strided_slice_of_shape"], [104, 2, 1, "", "get_subgraphs_from_onnx"], [104, 2, 1, "", "get_tensorflow_node_attr"], [104, 2, 1, "", "get_tensorflow_node_shape_attr"], [104, 2, 1, "", "get_tensorflow_tensor_data"], [104, 2, 1, "", "get_tensorflow_tensor_shape"], [104, 2, 1, "", "infer_onnx_shape_dtype"], [104, 2, 1, "", "initialize_name_counter"], [104, 2, 1, "", "is_list_or_tuple"], [104, 2, 1, "", "is_onnx_domain"], [104, 2, 1, "", "make_onnx_inputs_outputs"], [104, 2, 1, "", "make_onnx_shape"], [104, 2, 1, "", "map_numpy_to_onnx_dtype"], [104, 2, 1, "", "map_onnx_to_numpy_type"], [104, 2, 1, "", "map_tensorflow_dtype"], [104, 2, 1, "", "read_tensorflow_node_attrs"], [104, 2, 1, "", "save_protobuf"], [104, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, 0, 0, "-", "insert_qdq_pattern"], [107, 0, 0, "-", "merge_duplicated_qdq"], [108, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, 1, 1, "", "GraphAnalyzer"], [109, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[113, 0, 0, "-", "qat"], [129, 0, 0, "-", "qdq"], [131, 0, 0, "-", "quantize_graph_base"], [132, 0, 0, "-", "quantize_graph_bn"], [133, 0, 0, "-", "quantize_graph_concatv2"], [134, 0, 0, "-", "quantize_graph_conv"], [135, 0, 0, "-", "quantize_graph_for_intel_cpu"], [136, 0, 0, "-", "quantize_graph_matmul"], [137, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, 0, 0, "-", "fake_quantize"], [114, 0, 0, "-", "quantize_config"], [115, 0, 0, "-", "quantize_helper"], [116, 0, 0, "-", "quantize_layers"], [121, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, 1, 1, "", "FakeQuantize"], [112, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, 2, 1, "", "init_quantize_config"], [115, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, 0, 0, "-", "optimize_layer"], [118, 0, 0, "-", "quantize_layer_add"], [119, 0, 0, "-", "quantize_layer_base"], [120, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, 1, 1, "", "QuantizeWrapper"], [121, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[122, 0, 0, "-", "fuse_qdq_bn"], [123, 0, 0, "-", "fuse_qdq_concatv2"], [124, 0, 0, "-", "fuse_qdq_conv"], [125, 0, 0, "-", "fuse_qdq_deconv"], [126, 0, 0, "-", "fuse_qdq_in"], [127, 0, 0, "-", "fuse_qdq_matmul"], [128, 0, 0, "-", "fuse_qdq_pooling"], [130, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, 1, 1, "", "QuantizeGraphBase"], [131, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, 0, 0, "-", "bias_correction"], [143, 0, 0, "-", "graph_transform_base"], [145, 0, 0, "-", "insert_logging"], [146, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[147, 2, 1, "", "collate_tf_preds"], [147, 2, 1, "", "disable_random"], [147, 2, 1, "", "fix_ref_type_of_graph_def"], [147, 2, 1, "", "generate_feed_dict"], [147, 2, 1, "", "get_estimator_graph"], [147, 2, 1, "", "get_graph_def"], [147, 2, 1, "", "get_input_output_node_names"], [147, 2, 1, "", "get_model_input_shape"], [147, 2, 1, "", "get_tensor_by_name"], [147, 2, 1, "", "get_tensor_val_from_graph_node"], [147, 2, 1, "", "get_weight_from_input_tensor"], [147, 2, 1, "", "int8_node_name_reverse"], [147, 2, 1, "", "is_ckpt_format"], [147, 2, 1, "", "is_saved_model_format"], [147, 2, 1, "", "iterator_sess_run"], [147, 2, 1, "", "read_graph"], [147, 2, 1, "", "strip_equivalent_nodes"], [147, 2, 1, "", "strip_unused_nodes"], [147, 2, 1, "", "tf_diagnosis_helper"], [147, 2, 1, "", "version1_eq_version2"], [147, 2, 1, "", "version1_gt_version2"], [147, 2, 1, "", "version1_gte_version2"], [147, 2, 1, "", "version1_lt_version2"], [147, 2, 1, "", "version1_lte_version2"], [147, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[148, 0, 0, "-", "bf16_convert"], [149, 0, 0, "-", "hawq_metric"], [151, 0, 0, "-", "mixed_precision"], [152, 0, 0, "-", "model_wrapper"], [153, 0, 0, "-", "pattern_detector"], [154, 0, 0, "-", "smooth_quant"], [155, 0, 0, "-", "symbolic_trace"], [156, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, 1, 1, "", "BF16ModuleWrapper"], [148, 2, 1, "", "Convert"], [148, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[149, 1, 1, "", "HessianTrace"], [149, 1, 1, "", "Node_collector"], [149, 2, 1, "", "compare_weights"], [149, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[151, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[153, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[154, 1, 1, "", "GraphTrace"], [154, 1, 1, "", "TorchSmoothQuant"], [154, 2, 1, "", "get_module"], [154, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[155, 2, 1, "", "symbolic_trace"], [155, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[156, 2, 1, "", "append_attr"], [156, 2, 1, "", "auto_copy"], [156, 2, 1, "", "calculate_quant_min_max"], [156, 2, 1, "", "check_cfg_and_qconfig"], [156, 2, 1, "", "collate_torch_preds"], [156, 2, 1, "", "fetch_module"], [156, 2, 1, "", "generate_activation_observer"], [156, 2, 1, "", "get_depth"], [156, 2, 1, "", "get_dict_at_depth"], [156, 2, 1, "", "get_element_under_depth"], [156, 2, 1, "", "get_embedding_contiguous"], [156, 2, 1, "", "get_example_input"], [156, 2, 1, "", "get_fallback_order"], [156, 2, 1, "", "get_mse_order_per_fp32"], [156, 2, 1, "", "get_mse_order_per_int8"], [156, 2, 1, "", "get_op_type_by_name"], [156, 2, 1, "", "get_quantizable_ops_from_cfgs"], [156, 2, 1, "", "get_torch_version"], [156, 2, 1, "", "input2tuple"], [156, 2, 1, "", "is_fused_module"], [156, 2, 1, "", "match_datatype_pattern"], [156, 2, 1, "", "paser_cfgs"], [156, 2, 1, "", "set_module"], [156, 2, 1, "", "simple_inference"], [156, 2, 1, "", "update_sq_scale"]], "neural_compressor.algorithm": [[157, 0, 0, "-", "algorithm"], [158, 0, 0, "-", "fast_bias_correction"], [160, 0, 0, "-", "smooth_quant"], [161, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[157, 1, 1, "", "ALGORITHMS"], [157, 1, 1, "", "Algorithm"], [157, 1, 1, "", "AlgorithmScheduler"], [157, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[158, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[160, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[161, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[162, 2, 1, "", "benchmark_with_raw_cmd"], [162, 2, 1, "", "call_one"], [162, 2, 1, "", "config_instance"], [162, 2, 1, "", "fit"], [162, 2, 1, "", "generate_prefix"], [162, 2, 1, "", "get_architecture"], [162, 2, 1, "", "get_bounded_threads"], [162, 2, 1, "", "get_core_ids"], [162, 2, 1, "", "get_physical_ids"], [162, 2, 1, "", "get_threads"], [162, 2, 1, "", "get_threads_per_core"], [162, 2, 1, "", "profile"], [162, 2, 1, "", "run_instance"], [162, 2, 1, "", "set_all_env_var"], [162, 2, 1, "", "set_env_var"], [162, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[163, 0, 0, "-", "callbacks"], [165, 0, 0, "-", "distillation"], [168, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[163, 1, 1, "", "BaseCallbacks"], [163, 1, 1, "", "DistillationCallbacks"], [163, 1, 1, "", "PruningCallbacks"], [163, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[163, 3, 1, "", "_epoch_ran"], [163, 3, 1, "", "best_model"], [163, 3, 1, "", "best_score"], [163, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[164, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[164, 1, 1, "", "Criterions"], [164, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [164, 1, 1, "", "KnowledgeDistillationFramework"], [164, 1, 1, "", "KnowledgeDistillationLoss"], [164, 1, 1, "", "PyTorchCriterions"], [164, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [164, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [164, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [164, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [164, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [164, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [164, 1, 1, "", "SelfKnowledgeDistillationLoss"], [164, 1, 1, "", "TensorflowCriterions"], [164, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [164, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [164, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [164, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[167, 0, 0, "-", "criteria"], [170, 0, 0, "-", "model_slim"], [173, 0, 0, "-", "patterns"], [174, 0, 0, "-", "pruners"], [175, 0, 0, "-", "regs"], [176, 0, 0, "-", "schedulers"], [177, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[167, 1, 1, "", "GradientCriterion"], [167, 1, 1, "", "MagnitudeCriterion"], [167, 1, 1, "", "PruningCriterion"], [167, 1, 1, "", "RetrainFreeCriterion"], [167, 1, 1, "", "SnipCriterion"], [167, 1, 1, "", "SnipMomentumBlockCriterion"], [167, 1, 1, "", "SnipMomentumCriterion"], [167, 2, 1, "", "get_criterion"], [167, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[167, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[167, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[167, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[167, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[167, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[167, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[167, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[169, 0, 0, "-", "auto_slim"], [171, 0, 0, "-", "pattern_analyzer"], [172, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[169, 2, 1, "", "generate_ffn2_pruning_config"], [169, 2, 1, "", "generate_mha_pruning_config"], [169, 2, 1, "", "model_slim"], [169, 2, 1, "", "model_slim_ffn2"], [169, 2, 1, "", "model_slim_mha"], [169, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[171, 1, 1, "", "ClassifierHeadSearcher"], [171, 1, 1, "", "ClassifierHeadSearcherTF"], [171, 1, 1, "", "JitBasicSearcher"], [171, 1, 1, "", "Linear2LinearSearcher"], [171, 1, 1, "", "RecipeSearcher"], [171, 1, 1, "", "SelfMHASearcher"], [171, 2, 1, "", "get_attributes"], [171, 2, 1, "", "get_common_module"], [171, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[171, 3, 1, "", "device"], [171, 3, 1, "", "flatten_static_graph"], [171, 3, 1, "", "model"], [171, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[171, 3, 1, "", "device"], [171, 3, 1, "", "flatten_static_graph"], [171, 3, 1, "", "model"], [171, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[171, 3, 1, "", "device"], [171, 3, 1, "", "flatten_static_graph"], [171, 3, 1, "", "model"], [171, 3, 1, "", "searching_results"], [171, 3, 1, "", "static_graph"], [171, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[171, 3, 1, "", "current_pattern"], [171, 3, 1, "", "device"], [171, 3, 1, "", "flatten_static_graph"], [171, 3, 1, "", "model"], [171, 3, 1, "", "searching_results"], [171, 3, 1, "", "static_graph"], [171, 3, 1, "", "target_layers"], [171, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[171, 3, 1, "", "model"], [171, 3, 1, "", "recipe"], [171, 3, 1, "", "searching_results"], [171, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[171, 3, 1, "", "device"], [171, 3, 1, "", "flatten_static_graph"], [171, 3, 1, "", "model"], [171, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[172, 1, 1, "", "LinearCompression"], [172, 1, 1, "", "LinearCompressionIterator"], [172, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[172, 3, 1, "", "device"], [172, 3, 1, "", "layer_1"], [172, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[172, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[173, 1, 1, "", "BasePattern"], [173, 1, 1, "", "PatternMHA"], [173, 1, 1, "", "PatternNInM"], [173, 1, 1, "", "PatternNxM"], [173, 2, 1, "", "get_pattern"], [173, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[173, 3, 1, "", "config"], [173, 3, 1, "", "invalid_layers"], [173, 3, 1, "", "is_global"], [173, 3, 1, "", "keep_mask_layers"], [173, 3, 1, "", "max_sparsity_ratio_per_op"], [173, 3, 1, "", "min_sparsity_ratio_per_op"], [173, 3, 1, "", "modules"], [173, 3, 1, "", "pattern"], [173, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternMHA": [[173, 3, 1, "", "M"], [173, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[173, 3, 1, "", "M"], [173, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[173, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[174, 1, 1, "", "BasePruner"], [174, 1, 1, "", "BasicPruner"], [174, 1, 1, "", "BlockMaskPruner"], [174, 1, 1, "", "MultiheadAttentionPruner"], [174, 1, 1, "", "PatternLockPruner"], [174, 1, 1, "", "ProgressivePruner"], [174, 1, 1, "", "RetrainFreePruner"], [174, 2, 1, "", "get_pruner"], [174, 2, 1, "", "parse_valid_pruner_types"], [174, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[174, 3, 1, "", "config"], [174, 3, 1, "", "current_sparsity_ratio"], [174, 3, 1, "", "end_step"], [174, 3, 1, "", "global_step"], [174, 3, 1, "", "masks"], [174, 3, 1, "", "max_sparsity_ratio_per_op"], [174, 3, 1, "", "modules"], [174, 3, 1, "", "pattern"], [174, 3, 1, "", "pruning_frequency"], [174, 3, 1, "", "scheduler"], [174, 3, 1, "", "scores"], [174, 3, 1, "", "start_step"], [174, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[174, 3, 1, "", "criterion"], [174, 3, 1, "", "pattern"], [174, 3, 1, "", "reg"], [174, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[174, 3, 1, "", "criterion"], [174, 3, 1, "", "pattern"], [174, 3, 1, "", "reg"], [174, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner": [[174, 3, 1, "", "head_masks"], [174, 3, 1, "", "linear_layers"], [174, 3, 1, "", "mha_compressions"], [174, 3, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[174, 3, 1, "", "criterion"], [174, 3, 1, "", "pattern"], [174, 3, 1, "", "reg"], [174, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[175, 1, 1, "", "BaseReg"], [175, 1, 1, "", "GroupLasso"], [175, 2, 1, "", "get_reg"], [175, 2, 1, "", "get_reg_type"], [175, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[175, 3, 1, "", "alpha"], [175, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[176, 1, 1, "", "IterativeScheduler"], [176, 1, 1, "", "OneshotScheduler"], [176, 1, 1, "", "PruningScheduler"], [176, 2, 1, "", "get_scheduler"], [176, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[176, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[177, 2, 1, "", "check_config"], [177, 2, 1, "", "check_key_validity"], [177, 2, 1, "", "generate_pruner_config"], [177, 2, 1, "", "get_sparsity_ratio"], [177, 2, 1, "", "get_sparsity_ratio_tf"], [177, 2, 1, "", "parse_last_linear"], [177, 2, 1, "", "parse_last_linear_tf"], [177, 2, 1, "", "parse_to_prune"], [177, 2, 1, "", "parse_to_prune_tf"], [177, 2, 1, "", "process_and_check_config"], [177, 2, 1, "", "process_config"], [177, 2, 1, "", "process_weight_config"], [177, 2, 1, "", "process_yaml_config"], [177, 2, 1, "", "reset_none_to_default"], [177, 2, 1, "", "update_params"]], "neural_compressor.conf": [[178, 0, 0, "-", "config"], [179, 0, 0, "-", "dotdict"], [181, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[178, 1, 1, "", "Benchmark_Conf"], [178, 1, 1, "", "Conf"], [178, 1, 1, "", "DefaultConf"], [178, 1, 1, "", "Distillation_Conf"], [178, 1, 1, "", "Graph_Optimization_Conf"], [178, 1, 1, "", "MixedPrecision_Conf"], [178, 1, 1, "", "NASConfig"], [178, 1, 1, "", "PrunerV2"], [178, 1, 1, "", "Pruning_Conf"], [178, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[179, 1, 1, "", "DotDict"], [179, 2, 1, "", "deep_get"], [179, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[181, 1, 1, "", "AccuracyCriterion"], [181, 1, 1, "", "BenchmarkConfig"], [181, 1, 1, "", "DistillationConfig"], [181, 1, 1, "", "KnowledgeDistillationLossConfig"], [181, 1, 1, "", "Options"], [181, 1, 1, "", "QuantizationConfig"], [181, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[182, 1, 1, "", "AccuracyCriterion"], [182, 1, 1, "", "BenchmarkConfig"], [182, 1, 1, "", "DistillationConfig"], [182, 1, 1, "", "DotDict"], [182, 1, 1, "", "ExportConfig"], [182, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [182, 1, 1, "", "Keras"], [182, 1, 1, "", "KnowledgeDistillationLossConfig"], [182, 1, 1, "", "MXNet"], [182, 1, 1, "", "MixedPrecisionConfig"], [182, 1, 1, "", "NASConfig"], [182, 1, 1, "", "ONNX"], [182, 1, 1, "", "ONNXQlinear2QDQConfig"], [182, 1, 1, "", "Options"], [182, 1, 1, "", "PostTrainingQuantConfig"], [182, 1, 1, "", "PyTorch"], [182, 1, 1, "", "QuantizationAwareTrainingConfig"], [182, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [182, 1, 1, "", "TF2ONNXConfig"], [182, 1, 1, "", "TensorFlow"], [182, 1, 1, "", "Torch2ONNXConfig"], [182, 1, 1, "", "TuningCriterion"], [182, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[184, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[185, 0, 0, "-", "sigopt"], [186, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[185, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[186, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[191, 0, 0, "-", "dataloaders"], [203, 0, 0, "-", "datasets"], [207, 0, 0, "-", "filters"], [211, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[187, 0, 0, "-", "base_dataloader"], [188, 0, 0, "-", "dataloader"], [189, 0, 0, "-", "default_dataloader"], [190, 0, 0, "-", "fetcher"], [192, 0, 0, "-", "mxnet_dataloader"], [193, 0, 0, "-", "onnxrt_dataloader"], [194, 0, 0, "-", "pytorch_dataloader"], [195, 0, 0, "-", "sampler"], [196, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[187, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[188, 1, 1, "", "DataLoader"], [188, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[189, 1, 1, "", "DefaultDataLoader"], [189, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[190, 1, 1, "", "Fetcher"], [190, 1, 1, "", "IndexFetcher"], [190, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[192, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[193, 1, 1, "", "ONNXRTBertDataLoader"], [193, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[194, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[195, 1, 1, "", "BatchSampler"], [195, 1, 1, "", "IterableSampler"], [195, 1, 1, "", "Sampler"], [195, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[196, 1, 1, "", "TFDataDataLoader"], [196, 1, 1, "", "TensorflowBertDataLoader"], [196, 1, 1, "", "TensorflowDataLoader"], [196, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[197, 0, 0, "-", "bert_dataset"], [198, 0, 0, "-", "coco_dataset"], [199, 0, 0, "-", "dataset"], [200, 0, 0, "-", "dummy_dataset"], [201, 0, 0, "-", "dummy_dataset_v2"], [202, 0, 0, "-", "imagenet_dataset"], [204, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[197, 1, 1, "", "InputFeatures"], [197, 1, 1, "", "ONNXRTBertDataset"], [197, 1, 1, "", "ParseDecodeBert"], [197, 1, 1, "", "PytorchBertDataset"], [197, 1, 1, "", "TensorflowBertDataset"], [197, 1, 1, "", "TensorflowModelZooBertDataset"], [197, 2, 1, "", "convert_examples_to_features"], [197, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[198, 1, 1, "", "COCONpy"], [198, 1, 1, "", "COCORaw"], [198, 1, 1, "", "COCORecordDataset"], [198, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[199, 1, 1, "", "CIFAR10"], [199, 1, 1, "", "CIFAR100"], [199, 1, 1, "", "Dataset"], [199, 1, 1, "", "Datasets"], [199, 1, 1, "", "FashionMNIST"], [199, 1, 1, "", "ImageFolder"], [199, 1, 1, "", "IterableDataset"], [199, 1, 1, "", "MNIST"], [199, 1, 1, "", "MXNetCIFAR10"], [199, 1, 1, "", "MXNetCIFAR100"], [199, 1, 1, "", "MXNetDatasets"], [199, 1, 1, "", "MXNetFashionMNIST"], [199, 1, 1, "", "MXNetImageFolder"], [199, 1, 1, "", "MXNetMNIST"], [199, 1, 1, "", "ONNXRTITDatasets"], [199, 1, 1, "", "ONNXRTQLDatasets"], [199, 1, 1, "", "PyTorchDatasets"], [199, 1, 1, "", "PytorchCIFAR10"], [199, 1, 1, "", "PytorchCIFAR100"], [199, 1, 1, "", "PytorchFashionMNIST"], [199, 1, 1, "", "PytorchMNIST"], [199, 1, 1, "", "PytorchMxnetWrapDataset"], [199, 1, 1, "", "PytorchMxnetWrapFunction"], [199, 1, 1, "", "Tensorflow"], [199, 1, 1, "", "TensorflowCIFAR10"], [199, 1, 1, "", "TensorflowCIFAR100"], [199, 1, 1, "", "TensorflowDatasets"], [199, 1, 1, "", "TensorflowFashionMNIST"], [199, 1, 1, "", "TensorflowImageRecord"], [199, 1, 1, "", "TensorflowMNIST"], [199, 1, 1, "", "TensorflowTFRecordDataset"], [199, 1, 1, "", "TensorflowVOCRecord"], [199, 2, 1, "", "calculate_md5"], [199, 2, 1, "", "check_integrity"], [199, 2, 1, "", "dataset_registry"], [199, 2, 1, "", "download_url"], [199, 4, 1, "", "framework_datasets"], [199, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[200, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[201, 1, 1, "", "DummyDataset"], [201, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[202, 1, 1, "", "ImagenetRaw"], [202, 1, 1, "", "MXNetImagenetRaw"], [202, 1, 1, "", "ONNXRTImagenetDataset"], [202, 1, 1, "", "PytorchImagenetRaw"], [202, 1, 1, "", "TensorflowImagenetDataset"], [202, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[204, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[205, 0, 0, "-", "coco_filter"], [206, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[205, 1, 1, "", "LabelBalanceCOCORawFilter"], [205, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[206, 1, 1, "", "FILTERS"], [206, 1, 1, "", "Filter"], [206, 1, 1, "", "MXNetFilters"], [206, 1, 1, "", "ONNXRTITFilters"], [206, 1, 1, "", "ONNXRTQLFilters"], [206, 1, 1, "", "PyTorchFilters"], [206, 1, 1, "", "TensorflowFilters"], [206, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[209, 0, 0, "-", "coco_transform"], [210, 0, 0, "-", "imagenet_transform"], [212, 0, 0, "-", "postprocess"], [213, 0, 0, "-", "tokenization"], [214, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[209, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[210, 1, 1, "", "BilinearImagenetTransform"], [210, 1, 1, "", "LabelShift"], [210, 1, 1, "", "ONNXResizeCropImagenetTransform"], [210, 1, 1, "", "OnnxBilinearImagenetTransform"], [210, 1, 1, "", "ParseDecodeImagenet"], [210, 1, 1, "", "ParseDecodeImagenetTransform"], [210, 1, 1, "", "QuantizedInput"], [210, 1, 1, "", "ResizeWithAspectRatio"], [210, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[212, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[213, 1, 1, "", "BasicTokenizer"], [213, 1, 1, "", "FullTokenizer"], [213, 1, 1, "", "WordpieceTokenizer"], [213, 2, 1, "", "convert_by_vocab"], [213, 2, 1, "", "convert_to_unicode"], [213, 2, 1, "", "load_vocab"], [213, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[214, 1, 1, "", "AlignImageChannelTransform"], [214, 1, 1, "", "BaseTransform"], [214, 1, 1, "", "CastONNXTransform"], [214, 1, 1, "", "CastPyTorchTransform"], [214, 1, 1, "", "CastTFTransform"], [214, 1, 1, "", "CenterCropTFTransform"], [214, 1, 1, "", "CenterCropTransform"], [214, 1, 1, "", "CollectTransform"], [214, 1, 1, "", "ComposeTransform"], [214, 1, 1, "", "CropResizeTFTransform"], [214, 1, 1, "", "CropResizeTransform"], [214, 1, 1, "", "CropToBoundingBox"], [214, 1, 1, "", "InputFeatures"], [214, 1, 1, "", "MXNetCropResizeTransform"], [214, 1, 1, "", "MXNetCropToBoundingBox"], [214, 1, 1, "", "MXNetNormalizeTransform"], [214, 1, 1, "", "MXNetTransforms"], [214, 1, 1, "", "MXNetTranspose"], [214, 1, 1, "", "NormalizeTFTransform"], [214, 1, 1, "", "NormalizeTransform"], [214, 1, 1, "", "ONNXRTCropToBoundingBox"], [214, 1, 1, "", "ONNXRTITTransforms"], [214, 1, 1, "", "ONNXRTQLTransforms"], [214, 1, 1, "", "PaddedCenterCropTransform"], [214, 1, 1, "", "ParseDecodeVocTransform"], [214, 1, 1, "", "PyTorchAlignImageChannel"], [214, 1, 1, "", "PyTorchCropResizeTransform"], [214, 1, 1, "", "PyTorchNormalizeTransform"], [214, 1, 1, "", "PyTorchTransforms"], [214, 1, 1, "", "PyTorchTranspose"], [214, 1, 1, "", "PytorchMxnetTransform"], [214, 1, 1, "", "PytorchMxnetWrapFunction"], [214, 1, 1, "", "RandomCropTFTransform"], [214, 1, 1, "", "RandomCropTransform"], [214, 1, 1, "", "RandomHorizontalFlip"], [214, 1, 1, "", "RandomResizedCropMXNetTransform"], [214, 1, 1, "", "RandomResizedCropPytorchTransform"], [214, 1, 1, "", "RandomResizedCropTFTransform"], [214, 1, 1, "", "RandomResizedCropTransform"], [214, 1, 1, "", "RandomVerticalFlip"], [214, 1, 1, "", "RescaleKerasPretrainTransform"], [214, 1, 1, "", "RescaleTFTransform"], [214, 1, 1, "", "RescaleTransform"], [214, 1, 1, "", "ResizeMXNetTransform"], [214, 1, 1, "", "ResizePytorchTransform"], [214, 1, 1, "", "ResizeTFTransform"], [214, 1, 1, "", "ResizeTransform"], [214, 1, 1, "", "ResizeWithRatio"], [214, 1, 1, "", "SquadExample"], [214, 1, 1, "", "TFModelZooCollectTransform"], [214, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [214, 1, 1, "", "TFSquadV1PostTransform"], [214, 1, 1, "", "TRANSFORMS"], [214, 1, 1, "", "TensorflowCropToBoundingBox"], [214, 1, 1, "", "TensorflowRandomHorizontalFlip"], [214, 1, 1, "", "TensorflowRandomVerticalFlip"], [214, 1, 1, "", "TensorflowResizeWithRatio"], [214, 1, 1, "", "TensorflowTransform"], [214, 1, 1, "", "TensorflowTransforms"], [214, 1, 1, "", "TensorflowTranspose"], [214, 1, 1, "", "TensorflowWrapFunction"], [214, 1, 1, "", "ToArray"], [214, 1, 1, "", "ToNDArrayTransform"], [214, 1, 1, "", "Transforms"], [214, 1, 1, "", "Transpose"], [214, 2, 1, "", "convert_examples_to_features"], [214, 2, 1, "", "get_final_text"], [214, 2, 1, "", "get_torchvision_map"], [214, 2, 1, "", "read_squad_examples"], [214, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[215, 0, 0, "-", "benchmark"], [218, 0, 0, "-", "common"], [224, 0, 0, "-", "component"], [225, 0, 0, "-", "compression"], [227, 0, 0, "-", "contrib"], [252, 0, 0, "-", "data"], [257, 0, 0, "-", "distillation"], [258, 0, 0, "-", "export"], [262, 0, 0, "-", "graph_optimization"], [270, 0, 0, "-", "metric"], [272, 0, 0, "-", "mixed_precision"], [273, 0, 0, "-", "model_conversion"], [276, 0, 0, "-", "nas"], [282, 0, 0, "-", "pruner_legacy"], [286, 0, 0, "-", "pruning"], [287, 0, 0, "-", "pruning_recipes"], [291, 0, 0, "-", "pruning_v2"], [292, 0, 0, "-", "pytorch_pruner"], [299, 0, 0, "-", "quantization"], [300, 0, 0, "-", "scheduler"], [305, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[215, 1, 1, "", "Benchmark"], [215, 2, 1, "", "get_architecture"], [215, 2, 1, "", "get_bounded_threads"], [215, 2, 1, "", "get_core_ids"], [215, 2, 1, "", "get_physical_ids"], [215, 2, 1, "", "get_threads"], [215, 2, 1, "", "get_threads_per_core"], [215, 2, 1, "", "set_all_env_var"], [215, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[216, 0, 0, "-", "criterion"], [217, 0, 0, "-", "dataloader"], [219, 0, 0, "-", "metric"], [220, 0, 0, "-", "model"], [221, 0, 0, "-", "optimizer"], [222, 0, 0, "-", "postprocess"], [223, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[216, 1, 1, "", "Criterions"], [216, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [216, 1, 1, "", "KnowledgeDistillationFramework"], [216, 1, 1, "", "KnowledgeDistillationLoss"], [216, 1, 1, "", "PyTorchCriterions"], [216, 1, 1, "", "PyTorchCrossEntropyLoss"], [216, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [216, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [216, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [216, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [216, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [216, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [216, 1, 1, "", "SelfKnowledgeDistillationLoss"], [216, 1, 1, "", "TensorFlowCrossEntropyLoss"], [216, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [216, 1, 1, "", "TensorflowCriterions"], [216, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [216, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [216, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [216, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[217, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[219, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[220, 1, 1, "", "Model"], [220, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[221, 1, 1, "", "Optimizers"], [221, 1, 1, "", "PyTorchOptimizers"], [221, 1, 1, "", "PyTorchSGD"], [221, 1, 1, "", "TensorFlowAdam"], [221, 1, 1, "", "TensorFlowAdamW"], [221, 1, 1, "", "TensorFlowSGD"], [221, 1, 1, "", "TensorflowOptimizers"], [221, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[222, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[223, 2, 1, "", "get_activation"], [223, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[224, 1, 1, "", "Component"]], "neural_compressor.experimental.compression": [[226, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[226, 2, 1, "", "prepare_pruning"], [226, 2, 1, "", "save"]], "neural_compressor.experimental.contrib": [[228, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[229, 0, 0, "-", "sigopt"], [230, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[229, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[230, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[235, 0, 0, "-", "dataloaders"], [247, 0, 0, "-", "datasets"], [251, 0, 0, "-", "filters"], [254, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[231, 0, 0, "-", "base_dataloader"], [232, 0, 0, "-", "dataloader"], [233, 0, 0, "-", "default_dataloader"], [234, 0, 0, "-", "fetcher"], [236, 0, 0, "-", "mxnet_dataloader"], [237, 0, 0, "-", "onnxrt_dataloader"], [238, 0, 0, "-", "pytorch_dataloader"], [239, 0, 0, "-", "sampler"], [240, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[231, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[233, 1, 1, "", "DefaultDataLoader"], [233, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[234, 1, 1, "", "Fetcher"], [234, 1, 1, "", "IndexFetcher"], [234, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[236, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[237, 1, 1, "", "ONNXRTBertDataLoader"], [237, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[238, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[239, 1, 1, "", "BatchSampler"], [239, 1, 1, "", "IterableSampler"], [239, 1, 1, "", "Sampler"], [239, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[240, 1, 1, "", "TFDataDataLoader"], [240, 1, 1, "", "TensorflowBertDataLoader"], [240, 1, 1, "", "TensorflowDataLoader"], [240, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[241, 0, 0, "-", "bert_dataset"], [242, 0, 0, "-", "coco_dataset"], [243, 0, 0, "-", "dataset"], [244, 0, 0, "-", "dummy_dataset"], [245, 0, 0, "-", "dummy_dataset_v2"], [246, 0, 0, "-", "imagenet_dataset"], [248, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[241, 1, 1, "", "InputFeatures"], [241, 1, 1, "", "ONNXRTBertDataset"], [241, 1, 1, "", "ParseDecodeBert"], [241, 1, 1, "", "PytorchBertDataset"], [241, 1, 1, "", "TensorflowBertDataset"], [241, 1, 1, "", "TensorflowModelZooBertDataset"], [241, 2, 1, "", "convert_examples_to_features"], [241, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[242, 1, 1, "", "COCONpy"], [242, 1, 1, "", "COCORaw"], [242, 1, 1, "", "COCORecordDataset"], [242, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[243, 1, 1, "", "CIFAR10"], [243, 1, 1, "", "CIFAR100"], [243, 1, 1, "", "Dataset"], [243, 1, 1, "", "Datasets"], [243, 1, 1, "", "FashionMNIST"], [243, 1, 1, "", "ImageFolder"], [243, 1, 1, "", "IterableDataset"], [243, 1, 1, "", "MNIST"], [243, 1, 1, "", "MXNetCIFAR10"], [243, 1, 1, "", "MXNetCIFAR100"], [243, 1, 1, "", "MXNetDatasets"], [243, 1, 1, "", "MXNetFashionMNIST"], [243, 1, 1, "", "MXNetImageFolder"], [243, 1, 1, "", "MXNetMNIST"], [243, 1, 1, "", "ONNXRTITDatasets"], [243, 1, 1, "", "ONNXRTQLDatasets"], [243, 1, 1, "", "PyTorchDatasets"], [243, 1, 1, "", "PytorchCIFAR10"], [243, 1, 1, "", "PytorchCIFAR100"], [243, 1, 1, "", "PytorchFashionMNIST"], [243, 1, 1, "", "PytorchMNIST"], [243, 1, 1, "", "PytorchMxnetWrapDataset"], [243, 1, 1, "", "PytorchMxnetWrapFunction"], [243, 1, 1, "", "TensorflowCIFAR10"], [243, 1, 1, "", "TensorflowCIFAR100"], [243, 1, 1, "", "TensorflowDatasets"], [243, 1, 1, "", "TensorflowFashionMNIST"], [243, 1, 1, "", "TensorflowImageFolder"], [243, 1, 1, "", "TensorflowImageRecord"], [243, 1, 1, "", "TensorflowMNIST"], [243, 1, 1, "", "TensorflowTFRecordDataset"], [243, 1, 1, "", "TensorflowVOCRecord"], [243, 2, 1, "", "calculate_md5"], [243, 2, 1, "", "check_integrity"], [243, 2, 1, "", "dataset_registry"], [243, 2, 1, "", "download_url"], [243, 4, 1, "", "framework_datasets"], [243, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[244, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[245, 1, 1, "", "DummyDataset"], [245, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[246, 1, 1, "", "ImagenetRaw"], [246, 1, 1, "", "MXNetImagenetRaw"], [246, 1, 1, "", "ONNXRTImagenetDataset"], [246, 1, 1, "", "PytorchImagenetRaw"], [246, 1, 1, "", "TensorflowImagenetDataset"], [246, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[248, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[249, 0, 0, "-", "coco_filter"], [250, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[249, 1, 1, "", "LabelBalanceCOCORawFilter"], [249, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[250, 1, 1, "", "FILTERS"], [250, 1, 1, "", "Filter"], [250, 1, 1, "", "MXNetFilters"], [250, 1, 1, "", "ONNXRTITFilters"], [250, 1, 1, "", "ONNXRTQLFilters"], [250, 1, 1, "", "PyTorchFilters"], [250, 1, 1, "", "TensorflowFilters"], [250, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[253, 0, 0, "-", "imagenet_transform"], [255, 0, 0, "-", "tokenization"], [256, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[253, 1, 1, "", "BilinearImagenetTransform"], [253, 1, 1, "", "LabelShift"], [253, 1, 1, "", "ONNXResizeCropImagenetTransform"], [253, 1, 1, "", "OnnxBilinearImagenetTransform"], [253, 1, 1, "", "ParseDecodeImagenet"], [253, 1, 1, "", "ParseDecodeImagenetTransform"], [253, 1, 1, "", "QuantizedInput"], [253, 1, 1, "", "ResizeWithAspectRatio"], [253, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[255, 1, 1, "", "BasicTokenizer"], [255, 1, 1, "", "FullTokenizer"], [255, 1, 1, "", "WordpieceTokenizer"], [255, 2, 1, "", "convert_by_vocab"], [255, 2, 1, "", "convert_to_unicode"], [255, 2, 1, "", "load_vocab"], [255, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[256, 1, 1, "", "AlignImageChannelTransform"], [256, 1, 1, "", "BaseTransform"], [256, 1, 1, "", "CastONNXTransform"], [256, 1, 1, "", "CastPyTorchTransform"], [256, 1, 1, "", "CastTFTransform"], [256, 1, 1, "", "CenterCropTFTransform"], [256, 1, 1, "", "CenterCropTransform"], [256, 1, 1, "", "CollectTransform"], [256, 1, 1, "", "ComposeTransform"], [256, 1, 1, "", "CropResizeTFTransform"], [256, 1, 1, "", "CropResizeTransform"], [256, 1, 1, "", "CropToBoundingBox"], [256, 1, 1, "", "InputFeatures"], [256, 1, 1, "", "MXNetCropResizeTransform"], [256, 1, 1, "", "MXNetCropToBoundingBox"], [256, 1, 1, "", "MXNetNormalizeTransform"], [256, 1, 1, "", "MXNetTransforms"], [256, 1, 1, "", "MXNetTranspose"], [256, 1, 1, "", "NormalizeTFTransform"], [256, 1, 1, "", "NormalizeTransform"], [256, 1, 1, "", "ONNXRTCropToBoundingBox"], [256, 1, 1, "", "ONNXRTITTransforms"], [256, 1, 1, "", "ONNXRTQLTransforms"], [256, 1, 1, "", "PaddedCenterCropTransform"], [256, 1, 1, "", "ParseDecodeVocTransform"], [256, 1, 1, "", "PyTorchAlignImageChannel"], [256, 1, 1, "", "PyTorchCropResizeTransform"], [256, 1, 1, "", "PyTorchNormalizeTransform"], [256, 1, 1, "", "PyTorchTransforms"], [256, 1, 1, "", "PyTorchTranspose"], [256, 1, 1, "", "PytorchMxnetTransform"], [256, 1, 1, "", "PytorchMxnetWrapFunction"], [256, 1, 1, "", "RandomCropTFTransform"], [256, 1, 1, "", "RandomCropTransform"], [256, 1, 1, "", "RandomHorizontalFlip"], [256, 1, 1, "", "RandomResizedCropMXNetTransform"], [256, 1, 1, "", "RandomResizedCropPytorchTransform"], [256, 1, 1, "", "RandomResizedCropTFTransform"], [256, 1, 1, "", "RandomResizedCropTransform"], [256, 1, 1, "", "RandomVerticalFlip"], [256, 1, 1, "", "RescaleKerasPretrainTransform"], [256, 1, 1, "", "RescaleTFTransform"], [256, 1, 1, "", "RescaleTransform"], [256, 1, 1, "", "ResizeMXNetTransform"], [256, 1, 1, "", "ResizePytorchTransform"], [256, 1, 1, "", "ResizeTFTransform"], [256, 1, 1, "", "ResizeTransform"], [256, 1, 1, "", "ResizeWithRatio"], [256, 1, 1, "", "SquadExample"], [256, 1, 1, "", "TFModelZooCollectTransform"], [256, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [256, 1, 1, "", "TFSquadV1PostTransform"], [256, 1, 1, "", "TRANSFORMS"], [256, 1, 1, "", "TensorflowCropToBoundingBox"], [256, 1, 1, "", "TensorflowRandomHorizontalFlip"], [256, 1, 1, "", "TensorflowRandomVerticalFlip"], [256, 1, 1, "", "TensorflowResizeWithRatio"], [256, 1, 1, "", "TensorflowTransform"], [256, 1, 1, "", "TensorflowTransforms"], [256, 1, 1, "", "TensorflowTranspose"], [256, 1, 1, "", "TensorflowWrapFunction"], [256, 1, 1, "", "ToArray"], [256, 1, 1, "", "ToNDArrayTransform"], [256, 1, 1, "", "Transforms"], [256, 1, 1, "", "Transpose"], [256, 2, 1, "", "convert_examples_to_features"], [256, 2, 1, "", "get_final_text"], [256, 2, 1, "", "get_torchvision_map"], [256, 2, 1, "", "read_squad_examples"], [256, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[257, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[257, 3, 1, "", "_epoch_ran"], [257, 3, 1, "", "best_model"], [257, 3, 1, "", "best_score"], [257, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[259, 0, 0, "-", "qlinear2qdq"], [260, 0, 0, "-", "tf2onnx"], [261, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[259, 2, 1, "", "check_model"], [259, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[260, 2, 1, "", "tf_to_fp32_onnx"], [260, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[261, 2, 1, "", "torch_to_fp32_onnx"], [261, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[262, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[264, 0, 0, "-", "bleu"], [265, 0, 0, "-", "bleu_util"], [266, 0, 0, "-", "coco_label_map"], [267, 0, 0, "-", "coco_tools"], [268, 0, 0, "-", "evaluate_squad"], [269, 0, 0, "-", "f1"], [271, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[264, 1, 1, "", "BLEU"], [264, 1, 1, "", "UnicodeRegex"], [264, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[264, 3, 1, "", "labels"], [264, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[264, 3, 1, "", "nondigit_punct_re"], [264, 3, 1, "", "punct_nondigit_re"], [264, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[265, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[267, 1, 1, "", "COCOEvalWrapper"], [267, 1, 1, "", "COCOWrapper"], [267, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [267, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [267, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[267, 3, 1, "", "dataset"], [267, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[268, 2, 1, "", "evaluate"], [268, 2, 1, "", "exact_match_score"], [268, 2, 1, "", "f1_score"], [268, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[269, 2, 1, "", "evaluate"], [269, 2, 1, "", "f1_score"], [269, 2, 1, "", "metric_max_over_ground_truths"], [269, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[271, 1, 1, "", "Accuracy"], [271, 1, 1, "", "BaseMetric"], [271, 1, 1, "", "COCOmAPv2"], [271, 1, 1, "", "F1"], [271, 1, 1, "", "GeneralTopK"], [271, 1, 1, "", "Loss"], [271, 1, 1, "", "MAE"], [271, 1, 1, "", "METRICS"], [271, 1, 1, "", "MSE"], [271, 1, 1, "", "MXNetMetrics"], [271, 1, 1, "", "ONNXRTGLUE"], [271, 1, 1, "", "ONNXRTITMetrics"], [271, 1, 1, "", "ONNXRTQLMetrics"], [271, 1, 1, "", "PyTorchLoss"], [271, 1, 1, "", "PyTorchMetrics"], [271, 1, 1, "", "RMSE"], [271, 1, 1, "", "ROC"], [271, 1, 1, "", "SquadF1"], [271, 1, 1, "", "TensorflowCOCOMAP"], [271, 1, 1, "", "TensorflowMAP"], [271, 1, 1, "", "TensorflowMetrics"], [271, 1, 1, "", "TensorflowTopK"], [271, 1, 1, "", "TensorflowVOCMAP"], [271, 1, 1, "", "WrapMXNetMetric"], [271, 1, 1, "", "WrapONNXRTMetric"], [271, 1, 1, "", "WrapPyTorchMetric"], [271, 1, 1, "", "mIOU"], [271, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[271, 3, 1, "", "label_list"], [271, 3, 1, "", "pred_list"], [271, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[271, 3, 1, "", "k"], [271, 3, 1, "", "num_correct"], [271, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[271, 3, 1, "", "sample"], [271, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[271, 3, 1, "", "compare_label"], [271, 3, 1, "", "label_list"], [271, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[271, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[271, 3, 1, "", "compare_label"], [271, 3, 1, "", "label_list"], [271, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[271, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[271, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[271, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[271, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[271, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[271, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[271, 3, 1, "", "k"], [271, 3, 1, "", "num_correct"], [271, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[272, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[273, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[274, 0, 0, "-", "basic_nas"], [275, 0, 0, "-", "dynas"], [277, 0, 0, "-", "nas"], [278, 0, 0, "-", "nas_utils"], [279, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[274, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[275, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[277, 1, 1, "", "NAS"], [277, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[278, 2, 1, "", "create_search_space_pool"], [278, 2, 1, "", "find_pareto_front"], [278, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[279, 1, 1, "", "BayesianOptimizationSearcher"], [279, 1, 1, "", "GridSearcher"], [279, 1, 1, "", "RandomSearcher"], [279, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[280, 0, 0, "-", "gradient_sensitivity"], [281, 0, 0, "-", "group_lasso"], [283, 0, 0, "-", "magnitude"], [284, 0, 0, "-", "pattern_lock"], [285, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[280, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[281, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[283, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[284, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[285, 1, 1, "", "Pruner"], [285, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[286, 1, 1, "", "Pruning"], [286, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[286, 3, 1, "", "conf"], [286, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[288, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[289, 0, 0, "-", "pattern"], [290, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[289, 1, 1, "", "PATTERNS"], [289, 1, 1, "", "PatternBase"], [289, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[289, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[290, 1, 1, "", "TilePatternBase"], [290, 1, 1, "", "TilePattern_1x1"], [290, 1, 1, "", "TilePattern_1x16"], [290, 1, 1, "", "TilePattern_1x2"], [290, 1, 1, "", "TilePattern_2x2"], [290, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[291, 1, 1, "", "Pruning"], [291, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[291, 3, 1, "", "conf"], [291, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[293, 0, 0, "-", "logger"], [294, 0, 0, "-", "patterns"], [295, 0, 0, "-", "prune_utils"], [296, 0, 0, "-", "pruner"], [297, 0, 0, "-", "pruning"], [298, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[294, 1, 1, "", "Pattern"], [294, 1, 1, "", "PatternNInM"], [294, 1, 1, "", "PatternNxM"], [294, 2, 1, "", "get_pattern"], [294, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[294, 3, 1, "", "is_global"], [294, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[294, 3, 1, "", "M"], [294, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[294, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[295, 2, 1, "", "check_config"], [295, 2, 1, "", "parse_not_to_prune"], [295, 2, 1, "", "parse_to_prune"], [295, 2, 1, "", "process_and_check_config"], [295, 2, 1, "", "process_config"], [295, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[296, 1, 1, "", "MagnitudePruner"], [296, 1, 1, "", "PatternLockPruner"], [296, 1, 1, "", "Pruner"], [296, 1, 1, "", "SnipMomentumPruner"], [296, 1, 1, "", "SnipPruner"], [296, 2, 1, "", "get_pruner"], [296, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[296, 3, 1, "", "config"], [296, 3, 1, "", "current_sparsity_ratio"], [296, 3, 1, "", "end_step"], [296, 3, 1, "", "global_step"], [296, 3, 1, "", "masks"], [296, 3, 1, "", "max_sparsity_ratio_per_layer"], [296, 3, 1, "", "modules"], [296, 3, 1, "", "pattern"], [296, 3, 1, "", "scheduler"], [296, 3, 1, "", "scores"], [296, 3, 1, "", "start_step"], [296, 3, 1, "", "target_sparsity_ratio"], [296, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[297, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[297, 3, 1, "", "config_file_path"], [297, 3, 1, "", "model"], [297, 3, 1, "", "pruner_info"], [297, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[298, 1, 1, "", "IterativeScheduler"], [298, 1, 1, "", "OneshotScheduler"], [298, 1, 1, "", "Scheduler"], [298, 2, 1, "", "get_scheduler"], [298, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[298, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[299, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[300, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[301, 0, 0, "-", "auto_mixed_precision"], [302, 0, 0, "-", "basic"], [303, 0, 0, "-", "bayesian"], [304, 0, 0, "-", "exhaustive"], [306, 0, 0, "-", "mse"], [307, 0, 0, "-", "mse_v2"], [308, 0, 0, "-", "random"], [309, 0, 0, "-", "strategy"], [311, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[301, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[302, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[303, 1, 1, "", "BayesianOptimization"], [303, 1, 1, "", "BayesianTuneStrategy"], [303, 1, 1, "", "TargetSpace"], [303, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[304, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[306, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[307, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[308, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[309, 1, 1, "", "TuneStrategy"], [309, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[310, 0, 0, "-", "constant"], [312, 0, 0, "-", "tuning_sampler"], [313, 0, 0, "-", "tuning_space"], [314, 0, 0, "-", "tuning_structs"], [315, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[312, 1, 1, "", "FallbackTuningSampler"], [312, 1, 1, "", "ModelWiseTuningSampler"], [312, 1, 1, "", "OpTypeWiseTuningSampler"], [312, 1, 1, "", "OpWiseTuningSampler"], [312, 1, 1, "", "SmoothQuantSampler"], [312, 1, 1, "", "TuningOrder"], [312, 1, 1, "", "TuningSampler"], [312, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[313, 1, 1, "", "TuningItem"], [313, 1, 1, "", "TuningSpace"], [313, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [313, 2, 1, "", "pattern_to_internal"], [313, 2, 1, "", "pattern_to_path"], [313, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[314, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[315, 1, 1, "", "OrderedDefaultDict"], [315, 2, 1, "", "extract_data_type"], [315, 2, 1, "", "get_adaptor_name"], [315, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[317, 0, 0, "-", "bleu"], [318, 0, 0, "-", "bleu_util"], [319, 0, 0, "-", "coco_label_map"], [320, 0, 0, "-", "coco_tools"], [321, 0, 0, "-", "evaluate_squad"], [322, 0, 0, "-", "f1"], [324, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[317, 1, 1, "", "BLEU"], [317, 1, 1, "", "UnicodeRegex"], [317, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[317, 3, 1, "", "labels"], [317, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[317, 3, 1, "", "nondigit_punct_re"], [317, 3, 1, "", "punct_nondigit_re"], [317, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[318, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[320, 1, 1, "", "COCOEvalWrapper"], [320, 1, 1, "", "COCOWrapper"], [320, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [320, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [320, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[320, 3, 1, "", "dataset"], [320, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[321, 2, 1, "", "evaluate"], [321, 2, 1, "", "exact_match_score"], [321, 2, 1, "", "f1_score"], [321, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[322, 2, 1, "", "evaluate"], [322, 2, 1, "", "f1_score"], [322, 2, 1, "", "metric_max_over_ground_truths"], [322, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[324, 1, 1, "", "Accuracy"], [324, 1, 1, "", "BaseMetric"], [324, 1, 1, "", "COCOmAPv2"], [324, 1, 1, "", "F1"], [324, 1, 1, "", "GeneralTopK"], [324, 1, 1, "", "Loss"], [324, 1, 1, "", "MAE"], [324, 1, 1, "", "METRICS"], [324, 1, 1, "", "MSE"], [324, 1, 1, "", "MXNetMetrics"], [324, 1, 1, "", "Metric"], [324, 1, 1, "", "ONNXRTGLUE"], [324, 1, 1, "", "ONNXRTITMetrics"], [324, 1, 1, "", "ONNXRTQLMetrics"], [324, 1, 1, "", "PyTorchLoss"], [324, 1, 1, "", "PyTorchMetrics"], [324, 1, 1, "", "RMSE"], [324, 1, 1, "", "ROC"], [324, 1, 1, "", "SquadF1"], [324, 1, 1, "", "TensorflowCOCOMAP"], [324, 1, 1, "", "TensorflowMAP"], [324, 1, 1, "", "TensorflowMetrics"], [324, 1, 1, "", "TensorflowTopK"], [324, 1, 1, "", "TensorflowVOCMAP"], [324, 1, 1, "", "WrapMXNetMetric"], [324, 1, 1, "", "WrapONNXRTMetric"], [324, 1, 1, "", "WrapPyTorchMetric"], [324, 1, 1, "", "mIOU"], [324, 2, 1, "", "metric_registry"], [324, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[324, 3, 1, "", "label_list"], [324, 3, 1, "", "pred_list"], [324, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[324, 3, 1, "", "k"], [324, 3, 1, "", "num_correct"], [324, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[324, 3, 1, "", "sample"], [324, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[324, 3, 1, "", "compare_label"], [324, 3, 1, "", "label_list"], [324, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[324, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[324, 3, 1, "", "compare_label"], [324, 3, 1, "", "label_list"], [324, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[324, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[324, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[324, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[324, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[324, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[324, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[324, 3, 1, "", "k"], [324, 3, 1, "", "num_correct"], [324, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[325, 2, 1, "", "fit"]], "neural_compressor.model": [[326, 0, 0, "-", "base_model"], [328, 0, 0, "-", "keras_model"], [329, 0, 0, "-", "model"], [330, 0, 0, "-", "mxnet_model"], [331, 0, 0, "-", "nets_factory"], [332, 0, 0, "-", "onnx_model"], [333, 0, 0, "-", "tensorflow_model"], [334, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[326, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[328, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[329, 1, 1, "", "Model"], [329, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[330, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[331, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[332, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[333, 1, 1, "", "TensorflowBaseModel"], [333, 1, 1, "", "TensorflowCheckpointModel"], [333, 1, 1, "", "TensorflowModel"], [333, 1, 1, "", "TensorflowQATModel"], [333, 1, 1, "", "TensorflowSavedModelModel"], [333, 2, 1, "", "checkpoint_session"], [333, 2, 1, "", "estimator_session"], [333, 2, 1, "", "frozen_pb_session"], [333, 2, 1, "", "get_model_type"], [333, 2, 1, "", "graph_def_session"], [333, 2, 1, "", "graph_session"], [333, 2, 1, "", "keras_session"], [333, 2, 1, "", "load_saved_model"], [333, 2, 1, "", "saved_model_session"], [333, 2, 1, "", "slim_session"], [333, 2, 1, "", "validate_and_inference_input_output"], [333, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[334, 1, 1, "", "IPEXModel"], [334, 1, 1, "", "PyTorchBaseModel"], [334, 1, 1, "", "PyTorchFXModel"], [334, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[335, 1, 1, "", "Accuracy"], [335, 1, 1, "", "Footprint"], [335, 1, 1, "", "ModelSize"], [335, 1, 1, "", "MultiObjective"], [335, 1, 1, "", "Objective"], [335, 1, 1, "", "Performance"], [335, 2, 1, "", "objective_custom_registry"], [335, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[338, 0, 0, "-", "parser"], [348, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[337, 0, 0, "-", "factory"], [340, 0, 0, "-", "onnx_parser"], [342, 0, 0, "-", "parser"], [343, 0, 0, "-", "result"], [345, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[337, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[339, 0, 0, "-", "factory"], [341, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[339, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[341, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[342, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[343, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[344, 0, 0, "-", "factory"], [346, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[344, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[346, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[347, 0, 0, "-", "factory"], [350, 0, 0, "-", "onnxrt_profiler"], [353, 0, 0, "-", "profiler"], [355, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[347, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[349, 0, 0, "-", "factory"], [351, 0, 0, "-", "profiler"], [352, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[349, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[351, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[352, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[353, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[354, 0, 0, "-", "factory"], [356, 0, 0, "-", "profiler"], [357, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[354, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[356, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[357, 2, 1, "", "create_tf_config"], [357, 2, 1, "", "delete_assign"], [357, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[358, 2, 1, "", "fit"]], "neural_compressor.strategy": [[359, 0, 0, "-", "auto"], [360, 0, 0, "-", "auto_mixed_precision"], [361, 0, 0, "-", "basic"], [362, 0, 0, "-", "bayesian"], [363, 0, 0, "-", "conservative"], [364, 0, 0, "-", "exhaustive"], [365, 0, 0, "-", "hawq_v2"], [367, 0, 0, "-", "mse"], [368, 0, 0, "-", "mse_v2"], [369, 0, 0, "-", "random"], [370, 0, 0, "-", "strategy"], [372, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[359, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[360, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[361, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[362, 1, 1, "", "BayesianOptimization"], [362, 1, 1, "", "BayesianTuneStrategy"], [362, 1, 1, "", "TargetSpace"], [362, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[363, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[364, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[365, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[367, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[368, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[369, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[370, 1, 1, "", "TuneStrategy"], [370, 1, 1, "", "TuneStrategyMeta"], [370, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[371, 0, 0, "-", "constant"], [373, 0, 0, "-", "tuning_sampler"], [374, 0, 0, "-", "tuning_space"], [375, 0, 0, "-", "tuning_structs"], [376, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[373, 1, 1, "", "BlockFallbackTuningSampler"], [373, 1, 1, "", "FallbackTuningSampler"], [373, 1, 1, "", "LowerBitsSampler"], [373, 1, 1, "", "ModelWiseTuningSampler"], [373, 1, 1, "", "OpTypeWiseTuningSampler"], [373, 1, 1, "", "OpWiseTuningSampler"], [373, 1, 1, "", "TuningOrder"], [373, 1, 1, "", "TuningSampler"], [373, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[374, 1, 1, "", "TuningItem"], [374, 1, 1, "", "TuningSpace"], [374, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [374, 2, 1, "", "pattern_to_internal"], [374, 2, 1, "", "pattern_to_path"], [374, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[375, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[376, 1, 1, "", "OrderedDefaultDict"], [376, 2, 1, "", "build_slave_faker_model"], [376, 2, 1, "", "extract_data_type"], [376, 2, 1, "", "get_adaptor_name"], [376, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[377, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[377, 1, 1, "", "ExampleClass"], [377, 3, 1, "", "attribute1"], [377, 2, 1, "", "function1"], [377, 2, 1, "", "function2"], [377, 2, 1, "", "function3"], [377, 2, 1, "", "generator1"], [377, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[377, 3, 1, "", "attr1"], [377, 3, 1, "", "attr2"], [377, 3, 1, "", "attr5"]], "neural_compressor.training": [[379, 1, 1, "", "CallBacks"], [379, 1, 1, "", "CompressionManager"], [379, 2, 1, "", "fit"], [379, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[380, 0, 0, "-", "collect_layer_histogram"], [381, 0, 0, "-", "constant"], [382, 0, 0, "-", "create_obj_from_config"], [384, 0, 0, "-", "kl_divergence"], [385, 0, 0, "-", "load_huggingface"], [386, 0, 0, "-", "logger"], [387, 0, 0, "-", "neural_insights_utils"], [388, 0, 0, "-", "options"], [389, 0, 0, "-", "pytorch"], [390, 0, 0, "-", "utility"], [391, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[380, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[382, 2, 1, "", "create_dataloader"], [382, 2, 1, "", "create_dataset"], [382, 2, 1, "", "create_eval_func"], [382, 2, 1, "", "create_train_func"], [382, 2, 1, "", "get_algorithm"], [382, 2, 1, "", "get_func_from_config"], [382, 2, 1, "", "get_metrics"], [382, 2, 1, "", "get_postprocess"], [382, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[384, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[385, 1, 1, "", "OptimizedModel"], [385, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[386, 1, 1, "", "Logger"], [386, 2, 1, "", "debug"], [386, 2, 1, "", "error"], [386, 2, 1, "", "fatal"], [386, 2, 1, "", "info"], [386, 2, 1, "", "log"], [386, 2, 1, "", "warn"], [386, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[387, 2, 1, "", "register_neural_insights_workload"], [387, 2, 1, "", "update_neural_insights_workload"], [387, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[388, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[389, 2, 1, "", "is_int8_model"], [389, 2, 1, "", "load"]], "neural_compressor.utils.utility": [[390, 1, 1, "", "CaptureOutputToFile"], [390, 1, 1, "", "CpuInfo"], [390, 2, 1, "", "Dequantize"], [390, 1, 1, "", "DotDict"], [390, 1, 1, "", "GLOBAL_STATE"], [390, 1, 1, "", "LazyImport"], [390, 1, 1, "", "MODE"], [390, 1, 1, "", "OpEntry"], [390, 1, 1, "", "Statistics"], [390, 2, 1, "", "alias_param"], [390, 2, 1, "", "calculate_mse"], [390, 2, 1, "", "combine_histogram"], [390, 2, 1, "", "compare_objects"], [390, 2, 1, "", "compute_sparsity"], [390, 2, 1, "", "dequantize_weight"], [390, 2, 1, "", "dump_class_attrs"], [390, 2, 1, "", "dump_data_to_local"], [390, 2, 1, "", "dump_elapsed_time"], [390, 2, 1, "", "dump_table"], [390, 2, 1, "", "dump_table_to_csv"], [390, 2, 1, "", "equal_dicts"], [390, 2, 1, "", "fault_tolerant_file"], [390, 2, 1, "", "get_all_fp32_data"], [390, 2, 1, "", "get_number_of_sockets"], [390, 2, 1, "", "get_op_list"], [390, 2, 1, "", "get_size"], [390, 2, 1, "", "get_tensor_histogram"], [390, 2, 1, "", "get_tensors_info"], [390, 2, 1, "", "get_tuning_history"], [390, 2, 1, "", "get_weights_details"], [390, 2, 1, "", "load_data_from_pkl"], [390, 2, 1, "", "mse_metric_gap"], [390, 2, 1, "", "print_op_list"], [390, 2, 1, "", "print_table"], [390, 2, 1, "", "recover"], [390, 2, 1, "", "set_random_seed"], [390, 2, 1, "", "set_resume_from"], [390, 2, 1, "", "set_tensorboard"], [390, 2, 1, "", "set_workspace"], [390, 2, 1, "", "show_memory_info"], [390, 2, 1, "", "singleton"], [390, 2, 1, "", "str2array"], [390, 2, 1, "", "time_limit"], [390, 2, 1, "", "version1_eq_version2"], [390, 2, 1, "", "version1_gt_version2"], [390, 2, 1, "", "version1_gte_version2"], [390, 2, 1, "", "version1_lt_version2"], [390, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[391, 1, 1, "", "WeightsDetails"], [391, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"block_mask": 0, "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 400, 402], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 253, 255, 256, 257, 259, 260, 261, 262, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 312, 313, 314, 315, 317, 318, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 339, 341, 342, 343, 344, 346, 347, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 377, 379, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 339, 341, 342, 343, 344, 346, 347, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 399], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 153, 154, 157, 158, 159, 160, 161, 163, 164, 167, 171, 172, 173, 174, 175, 176, 178, 179, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 262, 263, 264, 267, 270, 271, 272, 273, 274, 275, 277, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 312, 313, 314, 315, 317, 320, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 339, 341, 342, 343, 344, 346, 347, 349, 351, 353, 354, 356, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 377, 379, 380, 383, 384, 385, 386, 388, 390, 391, 400], "function": [1, 13, 16, 34, 42, 43, 44, 66, 67, 69, 103, 104, 115, 117, 147, 148, 149, 151, 154, 155, 156, 157, 159, 162, 164, 167, 169, 171, 173, 174, 175, 176, 177, 179, 188, 189, 197, 199, 203, 206, 207, 208, 211, 213, 214, 215, 216, 218, 220, 221, 223, 226, 233, 241, 243, 247, 250, 251, 252, 254, 255, 256, 259, 260, 261, 264, 265, 267, 268, 269, 270, 271, 278, 285, 289, 294, 295, 296, 298, 303, 309, 313, 315, 317, 318, 320, 321, 322, 323, 324, 325, 329, 333, 335, 352, 357, 358, 362, 370, 374, 376, 377, 379, 382, 383, 385, 386, 387, 389, 390, 423], "subpackag": [2, 17, 86, 110, 111, 113, 166, 168, 183, 208, 227, 252, 263, 287, 305, 316, 366], "submodul": [2, 12, 17, 29, 50, 75, 86, 94, 100, 105, 110, 111, 113, 116, 129, 144, 150, 159, 165, 166, 168, 170, 180, 184, 191, 203, 207, 211, 218, 225, 228, 235, 247, 251, 254, 258, 263, 270, 276, 282, 288, 292, 305, 311, 316, 323, 327, 338, 340, 345, 348, 350, 355, 366, 372, 378, 383], "packag": [2, 29, 159, 191, 203, 207, 208, 211, 218, 235, 247, 251, 252, 254, 263, 270, 282, 287, 288, 305, 323, 327, 366, 383, 447, 449, 451, 452], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 299, 358, 396, 399, 401, 413, 420, 422, 425, 428, 431, 434, 435, 443, 454, 461, 462, 463, 466, 472], "separable_conv2d": 10, "mxnet": [11, 418, 433, 462, 468, 472], "mxnet_util": [12, 13], "util": [13, 43, 147, 156, 177, 310, 311, 312, 313, 314, 315, 352, 357, 371, 372, 373, 374, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 404], "onnxrt": [14, 418, 433, 468], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": [15, 16], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 401], "activ": 18, "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 466], "maxpool": 32, "norm": 33, "op": [34, 425], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": 39, "unary_op": 40, "smooth_quant": [42, 154, 160], "pytorch": [44, 389, 418, 423, 425, 433, 462, 463, 467, 468, 472], "queri": [45, 400], "tensorflow": [46, 418, 423, 425, 433, 462, 463, 467, 468, 472], "tf_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "graph_convert": 47, "graph_converter_without_calib": 48, "graph_rewrit": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "bf16": [49, 50, 435], "bf16_convert": [49, 148], "gener": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "convert_add_to_biasadd": 51, "convert_layout": 52, "convert_leakyrelu": 53, "convert_nan_to_random": 54, "convert_placeholder_to_const": 55, "dequantize_cast_optim": 56, "dilated_contract": 57, "dummy_biasadd": 58, "expanddims_optim": 59, "fetch_weight_from_reshap": 60, "fold_batch_norm": 61, "fold_const": 62, "fuse_biasadd_add": 63, "fuse_column_wise_mul": 64, "fuse_conv_with_math": 65, "fuse_decomposed_bn": 66, "fuse_decomposed_in": 67, "fuse_gelu": 68, "fuse_layer_norm": 69, "fuse_pad_with_conv": 70, "fuse_pad_with_fp32_conv": 71, "fuse_reshape_transpos": 72, "graph_cse_optim": 73, "grappler_pass": 74, "insert_print_nod": 76, "move_squeeze_after_relu": 77, "pre_optim": 78, "remove_training_nod": 79, "rename_batch_norm": 80, "split_shared_input": 81, "strip_equivalent_nod": 82, "strip_unused_nod": 83, "switch_optim": 84, "graph_bas": 85, "int8": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 425, 472], "freeze_fake_qu": 87, "freeze_valu": 88, "freeze_value_without_calib": 89, "fuse_conv_redundant_dequant": 90, "fuse_conv_requant": 91, "fuse_matmul_redundant_dequant": 92, "fuse_matmul_requant": 93, "meta_op_optim": 95, "post_hostconst_convert": 96, "post_quantized_op_cs": 97, "rnn_convert": 98, "scale_propag": 99, "onnx": [100, 101, 102, 103, 104, 403, 431, 462, 472], "onnx_graph": 101, "onnx_nod": 102, "onnx_schema": 103, "tf2onnx_util": 104, "qdq": [105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 472], "insert_qdq_pattern": 106, "merge_duplicated_qdq": 107, "share_qdq_y_pattern": 108, "graph_util": 109, "quantize_graph": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "qat": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 472], "fake_quant": 112, "quantize_config": 114, "quantize_help": 115, "quantize_lay": [116, 117, 118, 119, 120], "optimize_lay": 117, "quantize_layer_add": 118, "quantize_layer_bas": 119, "quantize_layer_bn": 120, "quantize_wrapp": 121, "fuse_qdq_bn": 122, "fuse_qdq_concatv2": 123, "fuse_qdq_conv": 124, "fuse_qdq_deconv": 125, "fuse_qdq_in": 126, "fuse_qdq_matmul": 127, "fuse_qdq_pool": 128, "optimize_qdq": 130, "quantize_graph_bas": 131, "quantize_graph_bn": 132, "quantize_graph_concatv2": 133, "quantize_graph_conv": 134, "quantize_graph_for_intel_cpu": 135, "quantize_graph_matmul": 136, "quantize_graph_pool": 137, "quantize_graph_common": 138, "smooth_quant_calibr": 139, "smooth_quant_scal": 140, "tf2onnx_convert": 141, "transform_graph": [142, 143, 144, 145, 146], "bias_correct": 142, "graph_transform_bas": 143, "insert_log": 145, "rerange_quantized_concat": 146, "torch_util": [148, 149, 150, 151, 152, 153, 154, 155, 156, 223], "hawq_metr": 149, "mixed_precis": [151, 272], "model_wrapp": 152, "pattern_detector": 153, "symbolic_trac": 155, "algorithm": [157, 158, 159, 160, 161, 466, 469], "fast_bias_correct": 158, "weight_correct": 161, "benchmark": [162, 215, 407, 416, 420, 434, 461], "compress": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 225, 226, 408], "callback": 163, "distil": [164, 165, 257, 421, 422, 434, 461, 472], "criterion": [164, 216], "pruner": [167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 285, 296], "criteria": [167, 459, 469], "model_slim": [169, 170, 171, 172], "auto_slim": 169, "pattern_analyz": 171, "weight_slim": 172, "pattern": [173, 288, 289, 290, 294, 459], "reg": 175, "schedul": [176, 298, 300, 459], "conf": [178, 179, 180, 181], "config": [178, 182, 409, 418, 456], "dotdict": 179, "pythonic_config": 181, "contrib": [183, 184, 185, 186, 227, 228, 229, 230], "strategi": [184, 185, 186, 228, 229, 230, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 414, 465, 469], "sigopt": [185, 229, 465, 469], "tpe": [186, 230, 469], "data": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 401, 420, 424], "dataload": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 217, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 417, 418], "base_dataload": [187, 231], "default_dataload": [189, 233], "fetcher": [190, 234], "attribut": [191, 199, 208, 243, 252, 263, 287, 327, 377, 383, 394], "mxnet_dataload": [192, 236], "onnxrt_dataload": [193, 237], "pytorch_dataload": [194, 238], "sampler": [195, 239], "tensorflow_dataload": [196, 240], "dataset": [197, 198, 199, 200, 201, 202, 203, 204, 241, 242, 243, 244, 245, 246, 247, 248, 418, 420, 429], "bert_dataset": [197, 241], "coco_dataset": [198, 242], "dummy_dataset": [200, 244], "dummy_dataset_v2": [201, 245], "imagenet_dataset": [202, 246], "style_transfer_dataset": [204, 248], "filter": [205, 206, 207, 249, 250, 251], "coco_filt": [205, 249], "transform": [209, 210, 211, 212, 213, 214, 253, 254, 255, 256, 429, 468], "coco_transform": 209, "imagenet_transform": [210, 253], "postprocess": [212, 222], "token": [213, 255], "experiment": [215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315], "common": [216, 217, 218, 219, 220, 221, 222, 223, 396, 426], "metric": [219, 264, 265, 266, 267, 268, 269, 270, 271, 317, 318, 319, 320, 321, 322, 323, 324, 429, 433], "model": [220, 326, 327, 328, 329, 330, 331, 332, 333, 334, 411, 425, 428, 431, 434, 436, 443, 459, 466, 472], "optim": [221, 444, 454, 457, 470], "compon": 224, "prune": [226, 286, 297, 434, 459, 461, 472], "export": [258, 259, 260, 261, 425], "qlinear2qdq": 259, "tf2onnx": 260, "torch2onnx": 261, "graph_optim": 262, "bleu": [264, 317], "bleu_util": [265, 318], "coco_label_map": [266, 319], "coco_tool": [267, 320], "evaluate_squad": [268, 321], "f1": [269, 322], "model_convers": 273, "na": [274, 275, 276, 277, 278, 279, 397, 461], "basic_na": 274, "dyna": 275, "nas_util": 278, "search_algorithm": 279, "pruner_legaci": [280, 281, 282, 283, 284, 285], "gradient_sensit": 280, "group_lasso": 281, "magnitud": 283, "pattern_lock": 284, "pruning_recip": [287, 288, 289, 290], "tile_pattern": 290, "pruning_v2": 291, "pytorch_prun": [292, 293, 294, 295, 296, 297, 298], "logger": [293, 386], "prune_util": 295, "auto_mixed_precis": [301, 360], "basic": [302, 361, 397, 469], "bayesian": [303, 362, 469], "exhaust": [304, 364, 469], "mse": [306, 367, 469], "mse_v2": [307, 368, 469], "random": [308, 369, 469], "constant": [310, 371, 381], "tuning_sampl": [312, 373], "tuning_spac": [313, 374], "tuning_struct": [314, 375], "mix_precis": 325, "base_model": 326, "keras_model": 328, "mxnet_model": 330, "nets_factori": 331, "onnx_model": 332, "tensorflow_model": 333, "torch_model": 334, "object": [335, 412, 456], "profil": [336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 420], "parser": [337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "factori": [337, 339, 344, 347, 349, 354], "onnx_pars": [339, 340, 341], "result": 343, "tensorflow_pars": [344, 345, 346], "onnxrt_profil": [349, 350, 351, 352], "tensorflow_profil": [354, 355, 356, 357], "auto": [359, 448, 454, 463, 466, 469], "conserv": [363, 469], "hawq_v2": [365, 469], "templat": [377, 378, 395], "api_doc_exampl": 377, "train": [379, 396, 415, 423, 434, 462], "collect_layer_histogram": 380, "create_obj_from_config": 382, "kl_diverg": 384, "load_huggingfac": 385, "neural_insights_util": 387, "option": [388, 423, 442], "weights_detail": 391, "version": 392, "intel": [393, 399, 417, 420, 430, 431, 433, 434, 440, 448, 454, 472, 473], "neural": [393, 396, 397, 399, 417, 420, 430, 431, 433, 434, 437, 441, 443, 448, 454, 459, 465, 470, 473], "compressor": [393, 396, 399, 417, 420, 430, 431, 433, 434, 448, 454, 465, 473], "document": [393, 399, 405, 473], "section": [393, 473], "contributor": [394, 395], "coven": [394, 395], "code": [394, 395, 397, 434, 455, 470], "conduct": [394, 395], "our": [394, 466], "pledg": 394, "standard": 394, "respons": 394, "scope": [394, 459], "enforc": 394, "contribut": [395, 447, 451], "guidelin": 395, "pull": 395, "request": [395, 435], "checklist": 395, "support": [395, 396, 397, 400, 401, 416, 417, 418, 420, 421, 422, 423, 425, 427, 430, 431, 433, 435, 436, 438, 439, 443, 444, 456, 457, 459, 461, 462, 466, 467, 468, 471], "fx": 396, "introduct": [396, 397, 400, 401, 416, 417, 418, 420, 421, 422, 423, 425, 427, 430, 433, 435, 436, 454, 456, 457, 459, 461, 462, 465, 466, 467, 468, 469, 471], "mode": [396, 472], "matrix": [396, 397, 400, 416, 417, 418, 420, 421, 422, 423, 425, 427, 430, 433, 435, 436, 439, 456, 457, 459, 461, 462, 466, 467, 471], "get": [396, 397, 399, 400, 416, 417, 418, 420, 421, 422, 423, 427, 428, 433, 435, 437, 448, 455, 456, 457, 459, 461, 462, 467, 471], "start": [396, 397, 399, 400, 416, 417, 418, 420, 421, 422, 423, 427, 428, 433, 435, 437, 438, 442, 448, 456, 457, 459, 461, 462, 467, 471], "post": [396, 434, 462], "static": [396, 462], "dynam": [396, 397, 462], "awar": [396, 434, 462], "exampl": [396, 397, 400, 405, 416, 417, 418, 420, 421, 422, 423, 424, 425, 433, 434, 435, 436, 439, 443, 456, 457, 459, 462, 466, 467, 472], "note": [396, 464], "detail": 396, "problem": 396, "architectur": [397, 419, 430, 431], "search": [397, 454], "api": [397, 399, 400, 405, 406, 416, 417, 418, 421, 422, 423, 428, 429, 433, 435, 437, 441, 455, 456, 457, 459, 461, 470], "usag": [397, 443, 454, 467, 469], "1": [397, 423, 426, 429, 434, 454, 472], "python": [397, 399, 417, 428, 433, 437, 441, 442, 449, 452, 461, 470], "yaml": [397, 418, 423, 427, 471], "2": [397, 423, 426, 429, 434, 454, 472], "onli": 397, "advanc": [397, 470], "custom": [397, 417, 433, 469], "secur": [398, 423], "polici": [398, 469], "report": 398, "vulner": 398, "instal": [399, 420, 431, 438, 440, 447, 448, 451], "from": [399, 431, 434], "pypi": [399, 443], "select": [399, 448], "public": [399, 460], "event": [399, 460], "addit": 399, "research": 399, "collabor": 399, "work": [400, 462], "flow": [400, 462], "background": [400, 454], "ad": 400, "new": [400, 401, 449, 452, 469], "backend": [400, 462], "capabl": 400, "implement": 400, "onnxrtadaptor": 400, "how": [401, 420], "type": [401, 459], "like": 401, "int4": 401, "few": 401, "line": 401, "chang": [401, 429, 453, 455, 464], "defin": [401, 423], "abil": 401, "specif": [401, 418], "invok": 401, "kernel": 401, "accord": 401, "tune": [401, 462, 466, 469], "configur": [401, 423, 427, 458, 461, 465, 471], "us": [401, 417, 433], "summari": 401, "runtim": [403, 431, 462, 472], "torch": [404, 472], "mix": [410, 434, 435, 463], "precis": [410, 434, 435, 463], "framework": [417, 418, 425, 427, 436, 461, 466], "build": [417, 426, 433], "file": [418, 427, 471], "user": [418, 423, 429, 461, 470, 471], "design": [419, 469], "workflow": 419, "diagnosi": 420, "featur": [420, 423, 427, 430, 443, 444, 448, 461, 462, 467, 471], "modifi": 420, "script": 420, "prepar": [420, 465], "run": [420, 455], "see": 420, "do": [420, 437], "paramet": 420, "descript": 420, "suggest": 420, "fallback": 420, "set": [420, 440, 454], "knowledg": [421, 472], "intermedi": 421, "layer": [421, 466], "self": 421, "distribut": [423, 443, 469], "infer": 423, "evalu": 423, "pure": 423, "horovodrun": 423, "execut": 423, "list": [424, 468], "releas": [424, 449, 452, 464], "fp32": 425, "appendix": 425, "frequent": 426, "ask": 426, "question": 426, "issu": [426, 464], "3": [426, 438, 454], "4": [426, 445, 454, 460], "quick": [428, 442], "sampl": 428, "valid": [428, 431, 466, 472], "incompat": [429, 464], "between": 429, "v1": 429, "face": 429, "built": [429, 431, 433], "infrastructur": 430, "linux": 431, "prerequisit": 431, "binari": 431, "sourc": 431, "ai": 431, "kit": 431, "window": 431, "system": [431, 458], "requir": [431, 447, 451], "hardwar": [431, 435, 472], "environ": [431, 440], "cpu": [431, 440, 472], "base": [431, 470], "64": 431, "compat": 431, "processor": 431, "gpu": 431, "": [431, 455], "xe": 431, "multipl": [431, 456, 472], "vendor": 431, "through": [431, 472], "softwar": [431, 435], "legal": 432, "inform": 432, "licens": 432, "citat": 432, "trademark": 432, "migrat": 434, "x": 434, "orchestr": [434, 457], "fp16": 435, "dure": [435, 463], "accuraci": [435, 462, 469], "driven": 435, "coder": [437, 441, 443, 454, 470], "what": [437, 455], "we": 437, "offer": 437, "jupyt": [437, 438, 449, 452], "lab": [437, 438], "extens": [437, 447, 448, 451, 454, 455, 472], "launcher": [437, 442], "contact": 437, "aw": 438, "amazon": 438, "sagemak": 438, "For": 438, "studio": 438, "notebook": 438, "instanc": 438, "guid": [438, 470], "bigdl": 439, "nano": 439, "platform": [440, 465], "best": [440, 448], "perform": [440, 465], "mkl": 440, "openmp": 440, "jemalloc": 440, "numa": 440, "control": 440, "variabl": 440, "frequenc": 440, "govern": 440, "enabl": [441, 448, 454], "bench": 441, "superbench": 441, "argument": 442, "v0": 445, "highlight": 445, "other": 445, "changelog": [446, 450], "neural_compressor_ext_lab": [447, 449], "uninstal": [447, 451], "develop": [447, 451], "jupyterlab": 448, "Or": 448, "let": 448, "u": 448, "help": 448, "you": 448, "pre": 448, "requisit": 448, "make": [449, 452, 455], "manual": [449, 452], "npm": [449, 452], "autom": [449, 452], "publish": [449, 452], "conda": [449, 452], "forg": [449, 452], "neural_compressor_ext_lab_alibaba": [451, 452], "log": 453, "unreleas": 453, "vscode": 454, "open": 454, "icon": 454, "5": 454, "welcom": 455, "your": 455, "v": 455, "folder": 455, "setup": 455, "up": 455, "straight": 455, "awai": 455, "explor": 455, "test": 455, "go": 455, "further": 455, "singl": 456, "One": 457, "shot": 457, "network": 459, "sparsiti": 459, "decai": 459, "regular": 459, "spars": 459, "deploy": 459, "refer": [459, 462, 466], "full": 460, "60": 460, "2023": 460, "7": 460, "2022": 460, "34": 460, "2021": 460, "15": 460, "2018": 460, "2020": 460, "style": 461, "access": 461, "fundament": [462, 466], "scheme": 462, "ipex": 462, "approach": 462, "With": 462, "without": 462, "specifi": 462, "rule": 462, "recip": 462, "devic": 462, "turn": 463, "off": 463, "known": 464, "benefit": 465, "comparison": 465, "differ": 465, "smooth": 466, "quant": 466, "per": 466, "tensor": 466, "channel": 466, "limit": 466, "smoothquant": 466, "enhanc": 466, "wise": 466, "alpha": 466, "engin": 466, "tensorboard": 467, "space": 469, "exit": 469, "process": 469, "overview": 470, "zero": 470, "topic": 470, "innov": 470, "product": 470, "11": 472, "0": 472, "13": 472, "ptq": 472, "9": 472}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [151, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [167, "module-contents"], [169, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [181, "module-contents"], [182, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [209, "module-contents"], [210, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [226, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [233, "module-contents"], [234, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [253, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [264, "module-contents"], [265, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [317, "module-contents"], [318, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [337, "module-contents"], [339, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [346, "module-contents"], [347, "module-contents"], [349, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [379, "module-contents"], [380, "module-contents"], [382, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [149, "classes"], [153, "classes"], [154, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [163, "classes"], [164, "classes"], [167, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [181, "classes"], [182, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [224, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [233, "classes"], [234, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [267, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [277, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [294, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [317, "classes"], [320, "classes"], [323, "classes"], [324, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [337, "classes"], [339, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [346, "classes"], [347, "classes"], [349, "classes"], [351, "classes"], [353, "classes"], [354, "classes"], [356, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [379, "classes"], [380, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [388, "classes"], [390, "classes"], [391, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [66, "functions"], [67, "functions"], [69, "functions"], [103, "functions"], [104, "functions"], [115, "functions"], [117, "functions"], [147, "functions"], [148, "functions"], [149, "functions"], [151, "functions"], [154, "functions"], [155, "functions"], [156, "functions"], [157, "functions"], [159, "functions"], [162, "functions"], [164, "functions"], [167, "functions"], [169, "functions"], [171, "functions"], [173, "functions"], [174, "functions"], [175, "functions"], [176, "functions"], [177, "functions"], [179, "functions"], [188, "functions"], [189, "functions"], [197, "functions"], [199, "functions"], [203, "functions"], [206, "functions"], [207, "functions"], [208, "functions"], [211, "functions"], [213, "functions"], [214, "functions"], [215, "functions"], [216, "functions"], [218, "functions"], [220, "functions"], [221, "functions"], [223, "functions"], [226, "functions"], [233, "functions"], [241, "functions"], [243, "functions"], [247, "functions"], [250, "functions"], [251, "functions"], [252, "functions"], [254, "functions"], [255, "functions"], [256, "functions"], [259, "functions"], [260, "functions"], [261, "functions"], [264, "functions"], [265, "functions"], [267, "functions"], [268, "functions"], [269, "functions"], [270, "functions"], [271, "functions"], [278, "functions"], [285, "functions"], [289, "functions"], [294, "functions"], [295, "functions"], [296, "functions"], [298, "functions"], [303, "functions"], [309, "functions"], [313, "functions"], [315, "functions"], [317, "functions"], [318, "functions"], [320, "functions"], [321, "functions"], [322, "functions"], [323, "functions"], [324, "functions"], [325, "functions"], [329, "functions"], [333, "functions"], [335, "functions"], [352, "functions"], [357, "functions"], [358, "functions"], [362, "functions"], [370, "functions"], [374, "functions"], [376, "functions"], [377, "functions"], [379, "functions"], [382, "functions"], [383, "functions"], [385, "functions"], [386, "functions"], [387, "functions"], [389, "functions"], [390, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [86, "subpackages"], [110, "subpackages"], [111, "subpackages"], [113, "subpackages"], [166, "subpackages"], [168, "subpackages"], [183, "subpackages"], [208, "subpackages"], [227, "subpackages"], [252, "subpackages"], [263, "subpackages"], [287, "subpackages"], [305, "subpackages"], [316, "subpackages"], [366, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [50, "submodules"], [75, "submodules"], [86, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [110, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [129, "submodules"], [144, "submodules"], [150, "submodules"], [159, "submodules"], [165, "submodules"], [166, "submodules"], [168, "submodules"], [170, "submodules"], [180, "submodules"], [184, "submodules"], [191, "submodules"], [203, "submodules"], [207, "submodules"], [211, "submodules"], [218, "submodules"], [225, "submodules"], [228, "submodules"], [235, "submodules"], [247, "submodules"], [251, "submodules"], [254, "submodules"], [258, "submodules"], [263, "submodules"], [270, "submodules"], [276, "submodules"], [282, "submodules"], [288, "submodules"], [292, "submodules"], [305, "submodules"], [311, "submodules"], [316, "submodules"], [323, "submodules"], [327, "submodules"], [338, "submodules"], [340, "submodules"], [345, "submodules"], [348, "submodules"], [350, "submodules"], [355, "submodules"], [366, "submodules"], [372, "submodules"], [378, "submodules"], [383, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [159, "package-contents"], [191, "package-contents"], [203, "package-contents"], [207, "package-contents"], [208, "package-contents"], [211, "package-contents"], [218, "package-contents"], [235, "package-contents"], [247, "package-contents"], [251, "package-contents"], [252, "package-contents"], [254, "package-contents"], [263, "package-contents"], [270, "package-contents"], [282, "package-contents"], [287, "package-contents"], [288, "package-contents"], [305, "package-contents"], [323, "package-contents"], [327, "package-contents"], [366, "package-contents"], [383, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[149, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[150, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[151, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[153, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[154, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[155, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[156, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[157, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[158, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[159, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[160, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[161, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[162, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[163, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[164, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[165, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[166, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[167, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[168, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[169, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[170, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[171, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[172, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[173, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[174, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[175, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[176, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[177, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[178, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[179, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[180, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[181, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[182, "module-neural_compressor.config"]], "neural_compressor.contrib": [[183, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[184, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[185, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[186, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[187, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[188, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[189, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[190, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[191, "module-neural_compressor.data.dataloaders"]], "Attributes": [[191, "attributes"], [199, "attributes"], [208, "attributes"], [243, "attributes"], [252, "attributes"], [263, "attributes"], [287, "attributes"], [327, "attributes"], [377, "attributes"], [383, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[192, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[193, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[194, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[195, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[196, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[197, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[198, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[199, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[200, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[201, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[202, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[203, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[204, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[205, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[206, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[207, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[208, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[209, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[210, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[211, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[212, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[213, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[214, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[215, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[216, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[217, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[218, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[219, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[220, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[221, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[222, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[223, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[224, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[225, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[226, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.contrib": [[227, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[228, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[229, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[230, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[234, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[235, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[238, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[239, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[241, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[242, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[243, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[244, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[245, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[246, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[247, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[248, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[249, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[250, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[251, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[252, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[253, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[254, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[255, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[256, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[257, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[258, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[259, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[260, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[261, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[262, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[263, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[264, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[265, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[266, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[267, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[268, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[269, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[270, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[271, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[272, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[273, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[274, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[275, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[276, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[277, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[278, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[279, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[280, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[281, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[282, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[283, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[284, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[285, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[286, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[287, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[290, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[291, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[292, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[293, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[294, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[295, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[296, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[297, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[298, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[299, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[300, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[301, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[302, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[303, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[304, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[305, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[306, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[307, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[308, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[309, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[310, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[311, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[312, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[313, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[314, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[315, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[316, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[317, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[318, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[319, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[320, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[321, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[322, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[323, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[324, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[325, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[326, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[327, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[328, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[329, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[330, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[331, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[332, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[333, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[334, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[335, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[336, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[337, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[338, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[339, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[340, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[341, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[342, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[343, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[344, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[345, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[346, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[347, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[348, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[349, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[350, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[353, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[354, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[355, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[358, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[359, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[360, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[361, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[362, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[363, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[364, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[365, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[366, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[367, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[368, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[369, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[370, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[371, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[372, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[373, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[374, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[375, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[376, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[377, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[378, "module-neural_compressor.template"]], "neural_compressor.training": [[379, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[380, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[381, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[382, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[383, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[384, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[385, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[386, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[387, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[388, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[389, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[390, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[391, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[392, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[393, "intel-neural-compressor-documentation"], [473, "intel-neural-compressor-documentation"]], "Sections": [[393, "sections"], [473, "sections"]], "Contributor Covenant Code of Conduct": [[394, "contributor-covenant-code-of-conduct"], [395, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[394, "our-pledge"]], "Our Standards": [[394, "our-standards"]], "Our Responsibilities": [[394, "our-responsibilities"]], "Scope": [[394, "scope"]], "Enforcement": [[394, "enforcement"]], "Attribution": [[394, "attribution"]], "Contribution Guidelines": [[395, "contribution-guidelines"]], "Pull Request Checklist": [[395, "pull-request-checklist"]], "Pull Request Template": [[395, "pull-request-template"]], "Support": [[395, "support"]], "FX": [[396, "fx"]], "Introduction": [[396, "introduction"], [397, "introduction"], [400, "introduction"], [401, "introduction"], [416, "introduction"], [417, "introduction"], [418, "introduction"], [421, "introduction"], [422, "introduction"], [423, "introduction"], [425, "introduction"], [427, "introduction"], [430, "introduction"], [433, "introduction"], [435, "introduction"], [436, "introduction"], [456, "introduction"], [457, "introduction"], [459, "introduction"], [461, "introduction"], [465, "introduction"], [466, "introduction"], [467, "introduction"], [468, "introduction"], [469, "introduction"], [471, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[396, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[396, "get-started"], [462, "get-started"]], "Post Training Static Quantization": [[396, "post-training-static-quantization"], [462, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[396, "post-training-dynamic-quantization"], [462, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[396, "quantization-aware-training"]], "Examples": [[396, "examples"], [397, "examples"], [416, "examples"], [417, "examples"], [418, "examples"], [421, "examples"], [422, "examples"], [423, "examples"], [424, "examples"], [425, "examples"], [434, "examples"], [435, "examples"], [436, "examples"], [457, "examples"], [459, "examples"], [462, "examples"], [467, "examples"]], "Note": [[396, "note"]], "Details": [[396, "details"]], "Common Problem": [[396, "common-problem"]], "Dynamic Quantization": [[396, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[396, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[397, "neural-architecture-search"]], "Basic NAS": [[397, "basic-nas"]], "Dynamic NAS": [[397, "dynamic-nas"]], "NAS Support Matrix": [[397, "nas-support-matrix"]], "Get Started with NAS API": [[397, "get-started-with-nas-api"]], "Basic Usage": [[397, "basic-usage"]], "1. Python code + YAML": [[397, "python-code-yaml"]], "2. Python code only": [[397, "python-code-only"]], "Advanced Usage (Custom NAS)": [[397, "advanced-usage-custom-nas"]], "Security Policy": [[398, "security-policy"]], "Report a Vulnerability": [[398, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[399, "intel-neural-compressor"], [454, "intel-neural-compressor"]], "Installation": [[399, "installation"], [431, "installation"], [448, "installation"]], "Install from pypi": [[399, "install-from-pypi"]], "Getting Started": [[399, "getting-started"], [428, "getting-started"]], "Quantization with Python API": [[399, "quantization-with-python-api"], [428, "quantization-with-python-api"]], "Documentation": [[399, "documentation"]], "Selected Publications/Events": [[399, "selected-publications-events"]], "Additional Content": [[399, "additional-content"]], "Research Collaborations": [[399, "research-collaborations"]], "Adaptor": [[400, "adaptor"], [402, "adaptor"]], "Adaptor Support Matrix": [[400, "adaptor-support-matrix"]], "Working Flow": [[400, "working-flow"], [462, "working-flow"]], "Get Started with Adaptor API": [[400, "get-started-with-adaptor-api"]], "Query API": [[400, "query-api"]], "Background": [[400, "background"]], "Query API Introduction": [[400, "query-api-introduction"]], "Example of Adding a New Backend Support": [[400, "example-of-adding-a-new-backend-support"]], "Capability": [[400, "capability"]], "Implement ONNXRTAdaptor Class": [[400, "implement-onnxrtadaptor-class"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[401, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[401, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[401, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[401, "use-the-new-data-type"]], "Summary": [[401, "summary"]], "ONNX Runtime": [[403, "onnx-runtime"]], "Torch Utils": [[404, "torch-utils"]], "API Document Example": [[405, "api-document-example"]], "APIs": [[406, "apis"]], "Benchmark": [[407, "benchmark"], [434, "benchmark"], [461, "benchmark"]], "Compression": [[408, "compression"]], "Config": [[409, "config"]], "Mix Precision": [[410, "mix-precision"], [434, "mix-precision"]], "Model": [[411, "model"], [436, "model"]], "Objective": [[412, "objective"], [456, "objective"]], "Quantization": [[413, "quantization"], [461, "quantization"], [462, "quantization"]], "Strategy": [[414, "strategy"]], "Training": [[415, "training"]], "Benchmarking": [[416, "benchmarking"]], "Benchmark Support Matrix": [[416, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[416, "get-started-with-benchmark-api"]], "DataLoader": [[417, "dataloader"]], "Supported Framework Dataloader Matrix": [[417, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[417, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[417, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[417, "build-custom-dataloader-with-python-api"]], "Dataset": [[418, "dataset"]], "Supported Framework Dataset Matrix": [[418, "supported-framework-dataset-matrix"]], "TensorFlow": [[418, "tensorflow"], [433, "tensorflow"], [468, "tensorflow"]], "PyTorch": [[418, "pytorch"], [433, "pytorch"], [463, "pytorch"]], "MXNet": [[418, "mxnet"], [433, "mxnet"], [468, "mxnet"]], "ONNXRT": [[418, "onnxrt"], [433, "onnxrt"], [468, "onnxrt"]], "Get start with Dataset API": [[418, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[418, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[418, "user-specific-dataset"]], "Design": [[419, "design"], [469, "design"], [469, "id1"], [469, "id3"], [469, "id5"], [469, "id7"], [469, "id9"], [469, "id11"], [469, "id13"], [469, "id15"], [469, "id17"], [469, "id19"], [469, "id21"]], "Architecture": [[419, "architecture"], [430, "architecture"]], "Workflow": [[419, "workflow"]], "Diagnosis": [[420, "diagnosis"]], "Diagnosis introduction": [[420, "diagnosis-introduction"]], "Supported feature matrix": [[420, "supported-feature-matrix"]], "Get started": [[420, "get-started"]], "Install Intel\u00ae Neural Compressor": [[420, "install-intel-neural-compressor"]], "Modify script": [[420, "modify-script"]], "Quantization diagnosis": [[420, "quantization-diagnosis"]], "Benchmark diagnosis": [[420, "benchmark-diagnosis"]], "Example": [[420, "example"], [433, "example"], [439, "example"], [443, "example"], [456, "example"], [466, "example"]], "Prepare dataset": [[420, "prepare-dataset"]], "Run quantization script": [[420, "run-quantization-script"]], "Run benchmark script": [[420, "run-benchmark-script"]], "See quantization data": [[420, "see-quantization-data"]], "How to do diagnosis": [[420, "how-to-do-diagnosis"]], "Parameter description": [[420, "parameter-description"]], "Diagnosis suggestions": [[420, "diagnosis-suggestions"]], "Fallback setting example": [[420, "fallback-setting-example"]], "See profiling data": [[420, "see-profiling-data"]], "Distillation": [[421, "distillation"], [434, "distillation"], [461, "distillation"]], "Knowledge Distillation": [[421, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[421, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[421, "self-distillation"]], "Distillation Support Matrix": [[421, "distillation-support-matrix"]], "Get Started with Distillation API": [[421, "get-started-with-distillation-api"]], "Distillation for Quantization": [[422, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[422, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[422, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[423, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[423, "supported-feature-matrix"], [427, "supported-feature-matrix"], [430, "supported-feature-matrix"], [461, "supported-feature-matrix"], [462, "supported-feature-matrix"], [467, "supported-feature-matrix"], [471, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[423, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[423, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[423, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[423, "horovodrun-execution"]], "Security": [[423, "security"]], "PyTorch Examples:": [[423, "pytorch-examples"]], "TensorFlow Examples:": [[423, "tensorflow-examples"]], "Example List": [[424, "example-list"]], "Release Data": [[424, "release-data"]], "Export": [[425, "export"]], "Supported Framework Model Matrix": [[425, "supported-framework-model-matrix"], [436, "supported-framework-model-matrix"]], "PyTorch Model": [[425, "pytorch-model"]], "FP32 Model Export": [[425, "fp32-model-export"], [425, "id1"]], "INT8 Model Export": [[425, "int8-model-export"], [425, "id2"]], "Tensorflow Model": [[425, "tensorflow-model"]], "Appendix": [[425, "appendix"]], "Supported quantized ops": [[425, "supported-quantized-ops"]], "Frequently Asked Questions": [[426, "frequently-asked-questions"]], "Common Build Issues": [[426, "common-build-issues"]], "Issue 1:": [[426, "issue-1"]], "Issue 2:": [[426, "issue-2"]], "Issue 3:": [[426, "issue-3"]], "Issue 4:": [[426, "issue-4"]], "Framework YAML Configuration Files": [[427, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[427, "get-started-with-framework-yaml-files"]], "Quick Samples": [[428, "quick-samples"]], "Validated Models": [[428, "validated-models"], [466, "validated-models"], [472, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[429, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[429, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[429, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[430, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[431, "linux-installation"]], "Prerequisites": [[431, "prerequisites"], [431, "id1"]], "Install from Binary": [[431, "install-from-binary"], [431, "id2"]], "Install from Source": [[431, "install-from-source"], [431, "id3"]], "Install from AI Kit": [[431, "install-from-ai-kit"]], "Windows Installation": [[431, "windows-installation"]], "System Requirements": [[431, "system-requirements"]], "Validated Hardware Environment": [[431, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[431, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[431, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[431, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[431, "validated-software-environment"]], "Legal Information": [[432, "legal-information"]], "License": [[432, "license"]], "Citation": [[432, "citation"]], "Trademarks": [[432, "trademarks"]], "Metrics": [[433, "metrics"]], "Supported Built-in Metric Matrix": [[433, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[433, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[433, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[433, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[434, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[434, "model-quantization"]], "Post-training Quantization": [[434, "post-training-quantization"]], "Quantization Aware Training": [[434, "quantization-aware-training"], [462, "quantization-aware-training"], [462, "id1"]], "Pruning": [[434, "pruning"], [459, "pruning"], [461, "pruning"]], "Orchestration": [[434, "orchestration"]], "Mixed Precision": [[435, "mixed-precision"]], "Mixed Precision Support Matrix": [[435, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[435, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[435, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[435, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[435, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[435, "get-started-with-mixed-precision-api"]], "Neural Coder": [[437, "neural-coder"], [454, "neural-coder"], [454, "id1"]], "What do we offer?": [[437, "what-do-we-offer"]], "Getting Started!": [[437, "getting-started"], [448, "getting-started"]], "Jupyter Lab Extension": [[437, "jupyter-lab-extension"]], "Python Launcher": [[437, "python-launcher"], [442, "python-launcher"]], "Python API": [[437, "python-api"]], "Contact": [[437, "contact"]], "AWS Amazon SageMaker Support": [[438, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[438, "start-jupyter-lab-3"]], "For SageMaker Studio": [[438, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[438, "for-sagemaker-notebook-instance"]], "Installation Guide": [[438, "installation-guide"]], "BigDL Nano Support": [[439, "bigdl-nano-support"]], "Support Matrix": [[439, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[440, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[440, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[440, "install-numa-controller"]], "Environment Variables": [[440, "environment-variables"]], "Frequency Governers": [[440, "frequency-governers"]], "Neural Coder as Python API": [[441, "neural-coder-as-python-api"]], "Enable": [[441, "enable"]], "Bench": [[441, "bench"]], "SuperBench": [[441, "superbench"]], "Quick-Start": [[442, "quick-start"]], "Launcher Arguments (Optional)": [[442, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[443, "neural-coder-for-quantization"]], "Features Supported": [[443, "features-supported"]], "Models Supported": [[443, "models-supported"]], "Usage": [[443, "usage"], [467, "usage"], [467, "id1"], [469, "usage"], [469, "id2"], [469, "id4"], [469, "id6"], [469, "id8"], [469, "id10"], [469, "id12"], [469, "id14"], [469, "id16"], [469, "id18"], [469, "id20"], [469, "id22"]], "PyPI distribution:": [[443, "pypi-distribution"]], "Supported Optimization Features": [[444, "supported-optimization-features"]], "v0.4": [[445, "v0-4"]], "Highlights": [[445, "highlights"]], "Others": [[445, "others"]], "Changelog": [[446, "changelog"], [450, "changelog"]], "neural_compressor_ext_lab": [[447, "neural-compressor-ext-lab"]], "Requirements": [[447, "requirements"], [451, "requirements"]], "Install": [[447, "install"], [451, "install"]], "Uninstall": [[447, "uninstall"], [451, "uninstall"]], "Contributing": [[447, "contributing"], [451, "contributing"]], "Development install": [[447, "development-install"], [451, "development-install"]], "Development uninstall": [[447, "development-uninstall"], [451, "development-uninstall"]], "Packaging the extension": [[447, "packaging-the-extension"], [451, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[448, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[448, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[448, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[448, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[449, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[449, "manual-release"], [452, "manual-release"]], "Python package": [[449, "python-package"], [452, "python-package"]], "NPM package": [[449, "npm-package"], [452, "npm-package"]], "Automated releases with the Jupyter Releaser": [[449, "automated-releases-with-the-jupyter-releaser"], [452, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[449, "publishing-to-conda-forge"], [452, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[451, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[452, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[453, "change-log"]], "[Unreleased]": [[453, "unreleased"]], "Background Introduction": [[454, "background-introduction"]], "Neural Coder Extension in VSCode": [[454, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[454, "neural-coder-extension-usage"]], "1. Open": [[454, "open"]], "2. Search": [[454, "search"]], "3. Setting": [[454, "setting"]], "4. Icon": [[454, "icon"]], "5. optimization (quantization)": [[454, "optimization-quantization"]], "5.1 Enable": [[454, "enable"]], "5.2 Auto": [[454, "auto"]], "Welcome to your VS Code Extension": [[455, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[455, "what-s-in-the-folder"]], "Setup": [[455, "setup"]], "Get up and running straight away": [[455, "get-up-and-running-straight-away"]], "Make changes": [[455, "make-changes"]], "Explore the API": [[455, "explore-the-api"]], "Run tests": [[455, "run-tests"]], "Go further": [[455, "go-further"]], "Single Objective": [[456, "single-objective"]], "Multiple Objectives": [[456, "multiple-objectives"]], "Objective Support Matrix": [[456, "objective-support-matrix"]], "Get Started with Objective API": [[456, "get-started-with-objective-api"]], "Config Single Objective": [[456, "config-single-objective"]], "Config Multiple Objectives": [[456, "config-multiple-objectives"]], "Optimization Orchestration": [[457, "optimization-orchestration"]], "One-shot": [[457, "one-shot"]], "Orchestration Support Matrix": [[457, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[457, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[458, "system-configuration"]], "Neural Network Pruning": [[459, "neural-network-pruning"]], "Pruning Patterns": [[459, "pruning-patterns"]], "Pruning Criteria": [[459, "pruning-criteria"]], "Pruning Types": [[459, "pruning-types"]], "Pruning Schedules": [[459, "pruning-schedules"]], "Pruning Scope": [[459, "pruning-scope"]], "Sparsity Decay Types": [[459, "sparsity-decay-types"]], "Regularization": [[459, "regularization"]], "Pruning Support Matrix": [[459, "pruning-support-matrix"]], "Get Started with Pruning API": [[459, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[459, "sparse-model-deployment"]], "Reference": [[459, "reference"], [462, "reference"], [466, "reference"]], "Full Publications/Events (60)": [[460, "full-publications-events-60"]], "2023 (7)": [[460, "id1"]], "2022 (34)": [[460, "id2"]], "2021 (15)": [[460, "id3"]], "2018 - 2020 (4)": [[460, "id4"]], "Pythonic Style Access for Configurations": [[461, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[461, "pythonic-api-for-user-configurations"], [461, "id1"]], "Pythonic API for Framework Configurations": [[461, "pythonic-api-for-framework-configurations"], [461, "id2"]], "Get Started with Pythonic API for Configurations": [[461, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[461, "nas"]], "Quantization Introduction": [[462, "quantization-introduction"]], "Quantization Fundamentals": [[462, "quantization-fundamentals"], [466, "quantization-fundamentals"]], "Quantization Support Matrix": [[462, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[462, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[462, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[462, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[462, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[462, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[462, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[462, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[462, "post-training-quantization"]], "Specify Quantization Rules": [[462, "specify-quantization-rules"]], "Specify Quantization Recipes": [[462, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[462, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[463, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[463, "tensorflow"]], "Release": [[464, "release"]], "Release Notes": [[464, "release-notes"]], "Known Issues": [[464, "known-issues"]], "Incompatible Changes": [[464, "incompatible-changes"]], "SigOpt Strategy": [[465, "sigopt-strategy"]], "Preparation": [[465, "preparation"]], "SigOpt Platform": [[465, "sigopt-platform"]], "Neural Compressor Configuration": [[465, "neural-compressor-configuration"]], "Performance": [[465, "performance"]], "Benefit of SigOpt Strategy": [[465, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[465, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[466, "smooth-quant"]], "Per-tensor & Per-channel": [[466, "per-tensor-per-channel"]], "Per-tensor example": [[466, "per-tensor-example"]], "Per-channel example": [[466, "per-channel-example"]], "Matmul quantization example": [[466, "matmul-quantization-example"]], "Per-channel limitation": [[466, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[466, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[466, "smoothquant"]], "Our enhancement:": [[466, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[466, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[466, "engineering"]], "Supported Framework Matrix": [[466, "supported-framework-matrix"]], "TensorBoard": [[467, "tensorboard"]], "Get Started with TensorBoard": [[467, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[467, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[467, "tensorflow-tensorboard"]], "PyTorch Examples": [[467, "pytorch-examples"]], "TensorFlow Examples": [[467, "tensorflow-examples"]], "Transform": [[468, "transform"]], "Transform Support List": [[468, "transform-support-list"]], "Pytorch": [[468, "pytorch"]], "Tuning Strategies": [[469, "tuning-strategies"]], "Strategy Design": [[469, "strategy-design"]], "Tuning Space": [[469, "tuning-space"]], "Exit Policy": [[469, "exit-policy"]], "Accuracy Criteria": [[469, "accuracy-criteria"]], "Tuning Process": [[469, "tuning-process"]], "Tuning Algorithms": [[469, "tuning-algorithms"]], "Auto": [[469, "auto"]], "Conservative Tuning": [[469, "conservative-tuning"]], "Basic": [[469, "basic"]], "MSE": [[469, "mse"]], "MSE_V2": [[469, "mse-v2"]], "HAWQ_V2": [[469, "hawq-v2"]], "Bayesian": [[469, "bayesian"]], "Exhaustive": [[469, "exhaustive"]], "Random": [[469, "random"]], "SigOpt": [[469, "sigopt"]], "TPE": [[469, "tpe"]], "Distributed Tuning": [[469, "distributed-tuning"]], "Customize a New Tuning Strategy": [[469, "customize-a-new-tuning-strategy"]], "User Guide": [[470, "user-guide"]], "Overview": [[470, "overview"]], "Python-based APIs": [[470, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[470, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[470, "advanced-topics"]], "Innovations for Productivity": [[470, "innovations-for-productivity"]], "User YAML Configuration Files": [[471, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[471, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[472, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[472, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[472, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[472, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[472, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[472, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[472, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[472, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[472, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[472, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.pytorch"], [45, "module-neural_compressor.adaptor.query"], [46, "module-neural_compressor.adaptor.tensorflow"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [109, "module-neural_compressor.adaptor.tf_utils.graph_util"], [110, "module-neural_compressor.adaptor.tf_utils"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [147, "module-neural_compressor.adaptor.tf_utils.util"], [148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [149, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [150, "module-neural_compressor.adaptor.torch_utils"], [151, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [152, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [153, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [154, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [155, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [156, "module-neural_compressor.adaptor.torch_utils.util"], [157, "module-neural_compressor.algorithm.algorithm"], [158, "module-neural_compressor.algorithm.fast_bias_correction"], [159, "module-neural_compressor.algorithm"], [160, "module-neural_compressor.algorithm.smooth_quant"], [161, "module-neural_compressor.algorithm.weight_correction"], [162, "module-neural_compressor.benchmark"], [163, "module-neural_compressor.compression.callbacks"], [164, "module-neural_compressor.compression.distillation.criterions"], [165, "module-neural_compressor.compression.distillation"], [166, "module-neural_compressor.compression"], [167, "module-neural_compressor.compression.pruner.criteria"], [168, "module-neural_compressor.compression.pruner"], [169, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [170, "module-neural_compressor.compression.pruner.model_slim"], [171, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [172, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [173, "module-neural_compressor.compression.pruner.patterns"], [174, "module-neural_compressor.compression.pruner.pruners"], [175, "module-neural_compressor.compression.pruner.regs"], [176, "module-neural_compressor.compression.pruner.schedulers"], [177, "module-neural_compressor.compression.pruner.utils"], [178, "module-neural_compressor.conf.config"], [179, "module-neural_compressor.conf.dotdict"], [180, "module-neural_compressor.conf"], [181, "module-neural_compressor.conf.pythonic_config"], [182, "module-neural_compressor.config"], [183, "module-neural_compressor.contrib"], [184, "module-neural_compressor.contrib.strategy"], [185, "module-neural_compressor.contrib.strategy.sigopt"], [186, "module-neural_compressor.contrib.strategy.tpe"], [187, "module-neural_compressor.data.dataloaders.base_dataloader"], [188, "module-neural_compressor.data.dataloaders.dataloader"], [189, "module-neural_compressor.data.dataloaders.default_dataloader"], [190, "module-neural_compressor.data.dataloaders.fetcher"], [191, "module-neural_compressor.data.dataloaders"], [192, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [193, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [194, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [195, "module-neural_compressor.data.dataloaders.sampler"], [196, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [197, "module-neural_compressor.data.datasets.bert_dataset"], [198, "module-neural_compressor.data.datasets.coco_dataset"], [199, "module-neural_compressor.data.datasets.dataset"], [200, "module-neural_compressor.data.datasets.dummy_dataset"], [201, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [202, "module-neural_compressor.data.datasets.imagenet_dataset"], [203, "module-neural_compressor.data.datasets"], [204, "module-neural_compressor.data.datasets.style_transfer_dataset"], [205, "module-neural_compressor.data.filters.coco_filter"], [206, "module-neural_compressor.data.filters.filter"], [207, "module-neural_compressor.data.filters"], [208, "module-neural_compressor.data"], [209, "module-neural_compressor.data.transforms.coco_transform"], [210, "module-neural_compressor.data.transforms.imagenet_transform"], [211, "module-neural_compressor.data.transforms"], [212, "module-neural_compressor.data.transforms.postprocess"], [213, "module-neural_compressor.data.transforms.tokenization"], [214, "module-neural_compressor.data.transforms.transform"], [215, "module-neural_compressor.experimental.benchmark"], [216, "module-neural_compressor.experimental.common.criterion"], [217, "module-neural_compressor.experimental.common.dataloader"], [218, "module-neural_compressor.experimental.common"], [219, "module-neural_compressor.experimental.common.metric"], [220, "module-neural_compressor.experimental.common.model"], [221, "module-neural_compressor.experimental.common.optimizer"], [222, "module-neural_compressor.experimental.common.postprocess"], [223, "module-neural_compressor.experimental.common.torch_utils"], [224, "module-neural_compressor.experimental.component"], [225, "module-neural_compressor.experimental.compression"], [226, "module-neural_compressor.experimental.compression.pruning"], [227, "module-neural_compressor.experimental.contrib"], [228, "module-neural_compressor.experimental.contrib.strategy"], [229, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [230, "module-neural_compressor.experimental.contrib.strategy.tpe"], [231, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [232, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [233, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [234, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [235, "module-neural_compressor.experimental.data.dataloaders"], [236, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [237, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [238, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [239, "module-neural_compressor.experimental.data.dataloaders.sampler"], [240, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [241, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [242, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [243, "module-neural_compressor.experimental.data.datasets.dataset"], [244, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [245, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [246, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [247, "module-neural_compressor.experimental.data.datasets"], [248, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [249, "module-neural_compressor.experimental.data.filters.coco_filter"], [250, "module-neural_compressor.experimental.data.filters.filter"], [251, "module-neural_compressor.experimental.data.filters"], [252, "module-neural_compressor.experimental.data"], [253, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [254, "module-neural_compressor.experimental.data.transforms"], [255, "module-neural_compressor.experimental.data.transforms.tokenization"], [256, "module-neural_compressor.experimental.data.transforms.transform"], [257, "module-neural_compressor.experimental.distillation"], [258, "module-neural_compressor.experimental.export"], [259, "module-neural_compressor.experimental.export.qlinear2qdq"], [260, "module-neural_compressor.experimental.export.tf2onnx"], [261, "module-neural_compressor.experimental.export.torch2onnx"], [262, "module-neural_compressor.experimental.graph_optimization"], [263, "module-neural_compressor.experimental"], [264, "module-neural_compressor.experimental.metric.bleu"], [265, "module-neural_compressor.experimental.metric.bleu_util"], [266, "module-neural_compressor.experimental.metric.coco_label_map"], [267, "module-neural_compressor.experimental.metric.coco_tools"], [268, "module-neural_compressor.experimental.metric.evaluate_squad"], [269, "module-neural_compressor.experimental.metric.f1"], [270, "module-neural_compressor.experimental.metric"], [271, "module-neural_compressor.experimental.metric.metric"], [272, "module-neural_compressor.experimental.mixed_precision"], [273, "module-neural_compressor.experimental.model_conversion"], [274, "module-neural_compressor.experimental.nas.basic_nas"], [275, "module-neural_compressor.experimental.nas.dynas"], [276, "module-neural_compressor.experimental.nas"], [277, "module-neural_compressor.experimental.nas.nas"], [278, "module-neural_compressor.experimental.nas.nas_utils"], [279, "module-neural_compressor.experimental.nas.search_algorithms"], [280, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [281, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [282, "module-neural_compressor.experimental.pruner_legacy"], [283, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [284, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [285, "module-neural_compressor.experimental.pruner_legacy.pruner"], [286, "module-neural_compressor.experimental.pruning"], [287, "module-neural_compressor.experimental.pruning_recipes"], [288, "module-neural_compressor.experimental.pruning_recipes.patterns"], [289, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [290, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [291, "module-neural_compressor.experimental.pruning_v2"], [292, "module-neural_compressor.experimental.pytorch_pruner"], [293, "module-neural_compressor.experimental.pytorch_pruner.logger"], [294, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [295, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [296, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [297, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [298, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [299, "module-neural_compressor.experimental.quantization"], [300, "module-neural_compressor.experimental.scheduler"], [301, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [302, "module-neural_compressor.experimental.strategy.basic"], [303, "module-neural_compressor.experimental.strategy.bayesian"], [304, "module-neural_compressor.experimental.strategy.exhaustive"], [305, "module-neural_compressor.experimental.strategy"], [306, "module-neural_compressor.experimental.strategy.mse"], [307, "module-neural_compressor.experimental.strategy.mse_v2"], [308, "module-neural_compressor.experimental.strategy.random"], [309, "module-neural_compressor.experimental.strategy.strategy"], [310, "module-neural_compressor.experimental.strategy.utils.constant"], [311, "module-neural_compressor.experimental.strategy.utils"], [312, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [313, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [314, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [315, "module-neural_compressor.experimental.strategy.utils.utility"], [316, "module-neural_compressor"], [317, "module-neural_compressor.metric.bleu"], [318, "module-neural_compressor.metric.bleu_util"], [319, "module-neural_compressor.metric.coco_label_map"], [320, "module-neural_compressor.metric.coco_tools"], [321, "module-neural_compressor.metric.evaluate_squad"], [322, "module-neural_compressor.metric.f1"], [323, "module-neural_compressor.metric"], [324, "module-neural_compressor.metric.metric"], [325, "module-neural_compressor.mix_precision"], [326, "module-neural_compressor.model.base_model"], [327, "module-neural_compressor.model"], [328, "module-neural_compressor.model.keras_model"], [329, "module-neural_compressor.model.model"], [330, "module-neural_compressor.model.mxnet_model"], [331, "module-neural_compressor.model.nets_factory"], [332, "module-neural_compressor.model.onnx_model"], [333, "module-neural_compressor.model.tensorflow_model"], [334, "module-neural_compressor.model.torch_model"], [335, "module-neural_compressor.objective"], [336, "module-neural_compressor.profiling"], [337, "module-neural_compressor.profiling.parser.factory"], [338, "module-neural_compressor.profiling.parser"], [339, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [340, "module-neural_compressor.profiling.parser.onnx_parser"], [341, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [342, "module-neural_compressor.profiling.parser.parser"], [343, "module-neural_compressor.profiling.parser.result"], [344, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [345, "module-neural_compressor.profiling.parser.tensorflow_parser"], [346, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [347, "module-neural_compressor.profiling.profiler.factory"], [348, "module-neural_compressor.profiling.profiler"], [349, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [350, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [353, "module-neural_compressor.profiling.profiler.profiler"], [354, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [355, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [358, "module-neural_compressor.quantization"], [359, "module-neural_compressor.strategy.auto"], [360, "module-neural_compressor.strategy.auto_mixed_precision"], [361, "module-neural_compressor.strategy.basic"], [362, "module-neural_compressor.strategy.bayesian"], [363, "module-neural_compressor.strategy.conservative"], [364, "module-neural_compressor.strategy.exhaustive"], [365, "module-neural_compressor.strategy.hawq_v2"], [366, "module-neural_compressor.strategy"], [367, "module-neural_compressor.strategy.mse"], [368, "module-neural_compressor.strategy.mse_v2"], [369, "module-neural_compressor.strategy.random"], [370, "module-neural_compressor.strategy.strategy"], [371, "module-neural_compressor.strategy.utils.constant"], [372, "module-neural_compressor.strategy.utils"], [373, "module-neural_compressor.strategy.utils.tuning_sampler"], [374, "module-neural_compressor.strategy.utils.tuning_space"], [375, "module-neural_compressor.strategy.utils.tuning_structs"], [376, "module-neural_compressor.strategy.utils.utility"], [377, "module-neural_compressor.template.api_doc_example"], [378, "module-neural_compressor.template"], [379, "module-neural_compressor.training"], [380, "module-neural_compressor.utils.collect_layer_histogram"], [381, "module-neural_compressor.utils.constant"], [382, "module-neural_compressor.utils.create_obj_from_config"], [383, "module-neural_compressor.utils"], [384, "module-neural_compressor.utils.kl_divergence"], [385, "module-neural_compressor.utils.load_huggingface"], [386, "module-neural_compressor.utils.logger"], [387, "module-neural_compressor.utils.neural_insights_utils"], [388, "module-neural_compressor.utils.options"], [389, "module-neural_compressor.utils.pytorch"], [390, "module-neural_compressor.utils.utility"], [391, "module-neural_compressor.utils.weights_details"], [392, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[45, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[139, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[141, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[145, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[149, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[149, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[149, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[149, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[149, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[150, "module-neural_compressor.adaptor.torch_utils"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[151, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[151, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[153, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[153, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[154, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[154, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[154, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[154, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[154, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[155, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[155, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[155, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[156, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[157, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[157, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[157, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[157, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[157, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[158, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[158, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[159, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[160, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[160, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[161, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[161, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[162, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[162, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[163, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[163, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[163, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[163, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[163, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[163, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[163, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[163, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[163, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[164, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[164, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[165, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[166, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[167, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[167, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[167, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[167, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[167, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[167, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[167, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[167, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[167, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[167, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[167, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[167, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[167, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[167, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[167, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[167, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[167, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[168, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[169, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[169, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[169, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[169, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[169, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[169, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[169, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[170, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[171, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[171, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[172, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[172, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[172, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[172, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[172, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[172, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[172, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[172, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[173, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternmha attribute)": [[173, "neural_compressor.compression.pruner.patterns.PatternMHA.M"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[173, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternmha attribute)": [[173, "neural_compressor.compression.pruner.patterns.PatternMHA.N"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[173, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns)": [[173, "neural_compressor.compression.pruner.patterns.PatternMHA"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[173, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[173, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[173, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[173, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[173, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[173, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[173, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[173, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[173, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[173, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[173, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[173, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[173, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[173, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[173, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[174, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[174, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "multiheadattentionpruner (class in neural_compressor.compression.pruner.pruners)": [[174, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[174, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[174, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[174, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[174, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "head_masks (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.linear_layers"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "mha_compressions (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.mha_scores"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[174, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[174, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[174, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[175, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[175, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[175, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[175, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[175, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[175, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[175, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[175, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[176, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[176, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[176, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[176, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[176, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[176, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[176, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[177, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[177, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[178, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[179, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[179, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[179, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[179, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[180, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[181, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[181, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[181, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[181, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[181, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[181, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[181, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[181, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[182, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[182, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[182, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[182, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[182, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[182, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[182, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[182, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[182, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[182, "module-neural_compressor.config"]], "neural_compressor.contrib": [[183, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[184, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[185, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[185, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[186, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[186, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[187, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[187, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[188, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[188, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[188, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[189, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[189, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[189, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[190, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[190, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[190, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[190, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[191, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[192, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[192, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[193, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[193, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[193, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[194, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[194, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[195, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[195, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[195, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[195, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[195, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[196, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[196, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[196, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[196, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[196, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[197, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[198, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[198, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[198, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[198, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[198, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[199, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[200, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[200, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[201, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[201, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[201, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[202, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[202, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[202, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[202, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[202, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[202, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[202, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[203, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[204, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[204, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[205, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[205, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[205, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[206, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[207, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[208, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[209, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[209, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[210, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[211, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[212, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[212, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[213, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TRANSFORMS"], [214, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[214, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[215, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[216, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[217, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[217, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[218, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[219, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[219, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[220, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[220, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[220, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[221, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[222, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[222, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[223, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[223, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[223, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[224, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[224, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[225, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[226, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[226, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[226, "neural_compressor.experimental.compression.pruning.save"]], "neural_compressor.experimental.contrib": [[227, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[228, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[229, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[229, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[230, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[230, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[234, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[234, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[234, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[234, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[235, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[238, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[238, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[239, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[239, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[239, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[239, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[239, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[241, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[241, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[241, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[241, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[241, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[241, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[241, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[241, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[241, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[242, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[242, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[242, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[242, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[242, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[243, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[243, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[244, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[244, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[245, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[245, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[245, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[246, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[246, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[246, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[246, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[246, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[246, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[246, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[247, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[248, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[248, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[249, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[249, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[249, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[250, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[250, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[250, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[250, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[250, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[250, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[250, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[250, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[250, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[251, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[252, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[253, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[253, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[253, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[253, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[253, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[253, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[253, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[253, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[253, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[253, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[254, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[255, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[255, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[255, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[255, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[255, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[255, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[255, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[255, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [256, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[256, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[256, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[257, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[257, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[257, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[257, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[257, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[257, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[258, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[259, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[259, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[259, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[260, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[260, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[260, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[261, "module-neural_compressor.experimental.export.torch2onnx"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[261, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[261, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[262, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[262, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[263, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[264, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[264, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[264, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[264, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[264, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[264, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[264, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[264, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[264, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[265, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[265, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[266, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[267, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[267, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[267, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[267, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[267, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[267, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[267, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[267, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[268, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[268, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[268, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[268, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[268, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[269, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[269, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[269, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[269, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[269, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[270, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[271, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[271, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[271, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[271, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[271, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[271, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[271, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[271, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[271, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[271, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[271, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[271, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[271, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[271, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[271, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[271, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[271, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[271, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[271, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[271, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[271, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[271, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[271, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[271, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[271, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[271, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[272, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[272, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[273, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[273, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[274, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[274, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[275, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[275, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[276, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[277, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[277, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[277, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[278, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[278, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[278, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[278, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[279, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[279, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[279, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[279, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[279, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[280, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[280, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[281, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[281, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[282, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[283, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[283, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[284, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[284, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[285, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[285, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[285, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[286, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[286, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[286, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[286, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[286, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[287, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[290, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[291, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[291, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[291, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[291, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[291, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[292, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[293, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[294, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[295, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[295, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[295, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[295, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[295, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[295, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[295, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[296, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[297, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[298, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[299, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[299, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[300, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[300, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[301, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[301, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[302, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[302, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[303, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[303, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[303, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[303, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[303, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[304, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[304, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[305, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[306, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[306, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[307, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[307, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[308, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[308, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[309, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[309, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[309, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[310, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[311, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[312, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[312, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[312, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[312, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[312, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[312, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[312, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[312, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[312, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[313, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[313, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[313, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[313, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[313, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[313, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[313, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[314, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[314, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[315, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[315, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[315, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[315, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[315, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[316, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[317, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[317, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[317, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[317, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[317, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[317, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[317, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[317, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[317, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[318, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[318, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[319, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[320, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[320, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[320, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[320, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[320, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[320, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[320, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[320, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[321, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[321, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[321, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[321, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[321, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[322, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[322, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[322, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[322, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[322, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[323, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[324, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[324, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[324, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[324, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[324, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[324, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[324, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[324, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[324, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[324, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[324, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[324, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[324, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[324, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[324, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[324, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[324, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[324, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[324, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[324, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[324, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[324, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[324, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[324, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[324, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[324, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[325, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[325, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[326, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[326, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[327, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[328, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[328, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[329, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[329, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[329, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[330, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[330, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[331, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[331, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[332, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[332, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[333, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[333, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[334, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[334, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[334, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[334, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[334, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[335, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[335, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[335, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[335, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[335, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[335, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[335, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[335, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[335, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[336, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[337, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[337, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[338, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[339, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[339, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[340, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[341, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[341, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[342, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[342, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[343, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[343, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[344, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[344, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[345, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[346, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[346, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[347, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[347, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[348, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[349, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[349, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[350, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[351, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[352, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[353, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[353, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[354, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[354, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[355, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[356, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[357, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[357, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[357, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[358, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[358, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[359, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[359, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[360, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[360, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[361, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[361, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[362, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[362, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[362, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[362, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[362, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[363, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[363, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[364, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[364, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[365, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[365, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[366, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[367, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[367, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[368, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[368, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[369, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[369, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[370, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[370, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[370, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[370, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[371, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[372, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[373, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[374, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[375, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[375, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[376, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[377, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[377, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[377, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[377, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[378, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[379, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[379, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[379, "neural_compressor.training.fit"]], "neural_compressor.training": [[379, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[379, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[380, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[380, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[381, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[382, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[382, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[382, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[382, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[382, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[382, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[382, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[382, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[382, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[382, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[383, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[384, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[384, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[385, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[385, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[385, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[386, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[386, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[386, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[386, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[386, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[386, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[386, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[386, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[386, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.neural_insights_utils": [[387, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[387, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[387, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[387, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[388, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[388, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[389, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[389, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[389, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[390, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[390, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[391, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[391, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[391, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[392, "module-neural_compressor.version"]]}})