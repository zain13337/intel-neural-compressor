:py:mod:`neural_compressor.utils.neural_insights_utils`
=======================================================

.. py:module:: neural_compressor.utils.neural_insights_utils

.. autoapi-nested-parse::

   Neural Insights utils functions.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   neural_compressor.utils.neural_insights_utils.register_neural_insights_workload
   neural_compressor.utils.neural_insights_utils.update_neural_insights_workload
   neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data



.. py:function:: register_neural_insights_workload(workload_location: str, model: Any, workload_mode: str) -> Optional[str]

   Register workload to Neural Insights.

   :param workload_location: path to workload directory
   :param model: Neural Compressor's model instance to be registered
   :param workload_mode: workload mode

   :returns: String with Neural Insight workload UUID if registered else None


.. py:function:: update_neural_insights_workload(workload_uuid: str, status: str) -> None

   Update status of specific workload.

   :param workload_uuid: string with Neural Insight workload UUID if registered else None
   :param status: workload status to be set

   :returns: None


.. py:function:: update_neural_insights_workload_accuracy_data(workload_uuid: str, baseline_accuracy: float, optimized_accuracy: float) -> None

   Update accuracy data of specific workload.

   :param workload_uuid: string with Neural Insight workload UUID if registered else None
   :param baseline_accuracy: accuracy of input model
   :param optimized_accuracy: accuracy of optimized model

   :returns: None


