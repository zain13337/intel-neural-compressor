Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["block_mask", "neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor.experimental.benchmark", "neural_compressor.experimental.common.criterion", "neural_compressor.experimental.common.dataloader", "neural_compressor.experimental.common", "neural_compressor.experimental.common.metric", "neural_compressor.experimental.common.model", "neural_compressor.experimental.common.optimizer", "neural_compressor.experimental.common.postprocess", "neural_compressor.experimental.common.torch_utils", "neural_compressor.experimental.component", "neural_compressor.experimental.compression", "neural_compressor.experimental.contrib", "neural_compressor.experimental.contrib.strategy", "neural_compressor.experimental.contrib.strategy.sigopt", "neural_compressor.experimental.contrib.strategy.tpe", "neural_compressor.experimental.data.dataloaders.base_dataloader", "neural_compressor.experimental.data.dataloaders.dataloader", "neural_compressor.experimental.data.dataloaders.default_dataloader", "neural_compressor.experimental.data.dataloaders.fetcher", "neural_compressor.experimental.data.dataloaders", "neural_compressor.experimental.data.dataloaders.mxnet_dataloader", "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", "neural_compressor.experimental.data.dataloaders.pytorch_dataloader", "neural_compressor.experimental.data.dataloaders.sampler", "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", "neural_compressor.experimental.data.datasets.bert_dataset", "neural_compressor.experimental.data.datasets.coco_dataset", "neural_compressor.experimental.data.datasets.dataset", "neural_compressor.experimental.data.datasets.dummy_dataset", "neural_compressor.experimental.data.datasets.dummy_dataset_v2", "neural_compressor.experimental.data.datasets.imagenet_dataset", "neural_compressor.experimental.data.datasets", "neural_compressor.experimental.data.datasets.style_transfer_dataset", "neural_compressor.experimental.data.filters.coco_filter", "neural_compressor.experimental.data.filters.filter", "neural_compressor.experimental.data.filters", "neural_compressor.experimental.data", "neural_compressor.experimental.data.transforms.imagenet_transform", "neural_compressor.experimental.data.transforms", "neural_compressor.experimental.data.transforms.tokenization", "neural_compressor.experimental.data.transforms.transform", "neural_compressor.experimental.distillation", "neural_compressor.experimental.export", "neural_compressor.experimental.export.qlinear2qdq", "neural_compressor.experimental.export.tf2onnx", "neural_compressor.experimental.export.torch2onnx", "neural_compressor.experimental.graph_optimization", "neural_compressor.experimental", "neural_compressor.experimental.metric.bleu", "neural_compressor.experimental.metric.bleu_util", "neural_compressor.experimental.metric.coco_label_map", "neural_compressor.experimental.metric.coco_tools", "neural_compressor.experimental.metric.evaluate_squad", "neural_compressor.experimental.metric.f1", "neural_compressor.experimental.metric", "neural_compressor.experimental.metric.metric", "neural_compressor.experimental.mixed_precision", "neural_compressor.experimental.model_conversion", "neural_compressor.experimental.nas.basic_nas", "neural_compressor.experimental.nas.dynas", "neural_compressor.experimental.nas", "neural_compressor.experimental.nas.nas", "neural_compressor.experimental.nas.nas_utils", "neural_compressor.experimental.nas.search_algorithms", "neural_compressor.experimental.pruner_legacy.gradient_sensitivity", "neural_compressor.experimental.pruner_legacy.group_lasso", "neural_compressor.experimental.pruner_legacy", "neural_compressor.experimental.pruner_legacy.magnitude", "neural_compressor.experimental.pruner_legacy.pattern_lock", "neural_compressor.experimental.pruner_legacy.pruner", "neural_compressor.experimental.pruning", "neural_compressor.experimental.pruning_recipes", "neural_compressor.experimental.pruning_recipes.patterns", "neural_compressor.experimental.pruning_recipes.patterns.pattern", "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", "neural_compressor.experimental.pruning_v2", "neural_compressor.experimental.pytorch_pruner", "neural_compressor.experimental.pytorch_pruner.logger", "neural_compressor.experimental.pytorch_pruner.patterns", "neural_compressor.experimental.pytorch_pruner.prune_utils", "neural_compressor.experimental.pytorch_pruner.pruner", "neural_compressor.experimental.pytorch_pruner.pruning", "neural_compressor.experimental.pytorch_pruner.scheduler", "neural_compressor.experimental.quantization", "neural_compressor.experimental.scheduler", "neural_compressor.experimental.strategy.auto_mixed_precision", "neural_compressor.experimental.strategy.basic", "neural_compressor.experimental.strategy.bayesian", "neural_compressor.experimental.strategy.exhaustive", "neural_compressor.experimental.strategy", "neural_compressor.experimental.strategy.mse", "neural_compressor.experimental.strategy.mse_v2", "neural_compressor.experimental.strategy.random", "neural_compressor.experimental.strategy.strategy", "neural_compressor.experimental.strategy.utils.constant", "neural_compressor.experimental.strategy.utils", "neural_compressor.experimental.strategy.utils.tuning_sampler", "neural_compressor.experimental.strategy.utils.tuning_space", "neural_compressor.experimental.strategy.utils.tuning_structs", "neural_compressor.experimental.strategy.utils.utility", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.neural_insights_utils", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (80)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 107, 148, 223, 231, 266, 268, 274, 280], "mask": [0, 12, 54, 80, 109, 133, 268, 283], "regist": [1, 14, 21, 28, 30, 35, 56, 63, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 168, 177, 187, 190, 209, 211, 216, 227, 228, 250, 266, 277, 280], "algorithm_registri": 1, "algorithm_typ": 1, "locat": [1, 28, 69, 216, 235, 242, 246, 249, 257, 271, 275, 279, 282], "sourc": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 225, 228, 242, 244, 246, 247, 249, 269], "decor": [1, 28, 35, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 180, 186, 187, 190, 280], "all": [1, 3, 6, 7, 14, 21, 28, 29, 35, 38, 44, 52, 56, 63, 69, 74, 77, 80, 82, 84, 91, 98, 102, 103, 107, 113, 122, 125, 130, 133, 135, 137, 139, 148, 162, 168, 172, 180, 184, 185, 189, 190, 191, 192, 209, 210, 211, 216, 220, 224, 228, 232, 240, 243, 244, 247, 248, 249, 250, 251, 254, 255, 257, 258, 262, 263, 264, 267, 268, 269, 271, 273, 274, 277, 279, 280], "subclass": [1, 14, 21, 28, 35, 49, 53, 56, 63, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 190], "paramet": [1, 6, 7, 10, 11, 12, 14, 21, 24, 28, 30, 35, 42, 43, 53, 54, 56, 63, 66, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 104, 107, 108, 109, 110, 111, 112, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 175, 176, 177, 179, 180, 186, 191, 210, 211, 214, 216, 223, 227, 228, 231, 243, 249, 250, 251, 252, 257, 262, 263, 268, 271, 272, 274, 276, 277, 279, 280, 282], "cl": [1, 14, 21, 28, 30, 35, 56, 63, 69, 91, 98, 102, 107, 109, 111, 122, 137, 148, 162, 180, 209], "The": [1, 6, 7, 10, 11, 12, 13, 14, 15, 16, 20, 21, 28, 30, 33, 35, 38, 42, 43, 44, 54, 55, 56, 57, 58, 62, 63, 69, 70, 75, 77, 78, 79, 81, 82, 84, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 99, 102, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 126, 128, 130, 131, 132, 134, 135, 137, 138, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 166, 168, 169, 170, 172, 174, 175, 179, 180, 181, 184, 186, 187, 190, 191, 192, 193, 195, 199, 202, 205, 207, 208, 209, 210, 211, 213, 214, 216, 218, 220, 222, 223, 224, 226, 227, 228, 229, 230, 231, 234, 235, 237, 240, 242, 243, 244, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "str": [1, 7, 12, 13, 14, 21, 24, 28, 30, 34, 35, 54, 55, 56, 63, 66, 69, 73, 74, 77, 78, 80, 82, 84, 91, 102, 125, 128, 130, 131, 133, 135, 137, 165, 168, 172, 175, 177, 180, 181, 209, 210, 211, 227, 260, 270, 278, 279], "registr": [1, 14, 21, 28, 56, 63, 69, 102], "name": [1, 6, 7, 12, 13, 14, 17, 21, 26, 28, 29, 33, 36, 37, 54, 55, 56, 59, 63, 69, 72, 73, 74, 79, 84, 102, 107, 109, 111, 126, 128, 132, 137, 142, 146, 148, 150, 166, 168, 170, 172, 177, 180, 185, 186, 192, 209, 211, 213, 216, 218, 220, 225, 227, 228, 230, 231, 235, 242, 246, 250, 251, 257, 268, 271, 275, 276, 278, 280, 282, 283], "call": [1, 80, 109, 133, 186, 187, 190, 210, 222, 238, 240, 250, 268, 271, 277, 278, 279], "return": [1, 6, 10, 11, 14, 21, 24, 28, 29, 30, 35, 42, 43, 56, 63, 66, 69, 74, 77, 78, 80, 81, 82, 84, 90, 91, 98, 102, 107, 108, 109, 111, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 177, 179, 180, 186, 187, 191, 192, 210, 211, 216, 227, 230, 262, 263, 264, 266, 268, 271, 274, 277, 278, 280], "type": [1, 7, 12, 14, 21, 28, 30, 35, 52, 54, 56, 63, 69, 74, 77, 78, 80, 84, 91, 98, 102, 107, 109, 111, 116, 122, 126, 128, 130, 131, 133, 137, 146, 148, 154, 155, 162, 166, 168, 179, 180, 190, 191, 211, 213, 216, 218, 220, 223, 228, 229, 231, 250, 252, 257, 258, 262, 263, 271, 272, 274, 276, 279, 280, 281, 282], "build": [1, 2, 4, 5, 87, 90, 141, 143, 145, 146, 147, 190, 191, 192, 224, 230, 242, 244, 246, 247, 250, 269, 280], "dict": [1, 6, 7, 10, 11, 29, 35, 42, 43, 53, 72, 74, 79, 80, 81, 82, 84, 87, 90, 91, 92, 99, 102, 104, 107, 108, 109, 110, 111, 116, 119, 125, 128, 132, 133, 134, 135, 137, 138, 146, 150, 165, 168, 169, 170, 172, 179, 180, 186, 191, 209, 218, 227, 268, 270, 271, 277, 278, 280], "algorithmschedul": 1, "conf": [1, 6, 7, 10, 11, 29, 42, 43, 86, 93, 94, 96, 97, 98, 99, 104, 114, 116, 119, 120, 122, 126, 138, 148, 150, 151, 152, 154, 155, 159, 160, 162, 166, 169, 186, 187, 189, 192, 207, 214, 221, 222, 228, 229, 230, 251, 253, 254, 267, 271, 272, 273, 274, 276, 277, 280], "control": [1, 7, 186, 228, 255, 268, 280], "differ": [1, 5, 7, 14, 28, 30, 47, 56, 69, 75, 84, 90, 92, 101, 112, 137, 146, 148, 174, 184, 186, 187, 191, 210, 211, 213, 214, 216, 217, 222, 223, 227, 228, 230, 242, 246, 251, 254, 257, 266, 268, 271, 274, 277, 278, 279, 280], "phase": [1, 187, 228, 268, 271, 273, 280], "base": [1, 7, 12, 14, 21, 28, 38, 44, 47, 52, 54, 56, 63, 69, 84, 90, 92, 98, 99, 102, 104, 109, 119, 122, 126, 137, 139, 146, 147, 148, 159, 162, 166, 187, 189, 190, 191, 192, 209, 211, 215, 216, 220, 228, 229, 237, 238, 240, 249, 252, 257, 260, 263, 264, 268, 269, 271, 274, 276, 277, 278, 280, 283], "fastbiascorrect": [2, 5], "threshold": [2, 170, 174, 227], "2": [2, 4, 6, 7, 13, 29, 55, 80, 82, 84, 109, 116, 133, 135, 137, 148, 154, 180, 186, 189, 190, 208, 210, 211, 213, 214, 220, 223, 224, 225, 226, 227, 229, 231, 253, 259, 260, 262, 263, 264, 266, 268, 269, 271, 272, 274, 275, 276, 277, 279, 280, 281], "0": [2, 4, 7, 12, 15, 16, 19, 24, 28, 30, 31, 44, 46, 50, 51, 53, 54, 57, 58, 61, 66, 69, 74, 75, 84, 91, 99, 104, 112, 137, 148, 150, 155, 175, 186, 189, 209, 210, 211, 214, 216, 218, 219, 220, 224, 225, 226, 227, 228, 229, 231, 235, 237, 242, 246, 252, 262, 263, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282], "channel_axi": [2, 5], "1": [2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 24, 28, 29, 30, 31, 44, 46, 50, 51, 53, 54, 55, 57, 58, 61, 62, 66, 69, 75, 80, 81, 82, 84, 99, 104, 109, 112, 113, 133, 134, 135, 137, 148, 150, 168, 172, 175, 180, 184, 186, 189, 190, 192, 208, 210, 211, 213, 214, 218, 220, 221, 224, 226, 227, 229, 231, 233, 235, 251, 252, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282], "fetch": [3, 47, 191, 211, 262, 263, 264], "file": [3, 7, 10, 11, 12, 13, 14, 17, 27, 28, 34, 37, 42, 43, 54, 55, 56, 59, 68, 69, 70, 75, 80, 86, 87, 88, 90, 99, 104, 108, 110, 112, 113, 133, 138, 148, 150, 179, 180, 185, 187, 190, 191, 192, 216, 219, 222, 225, 227, 228, 230, 235, 244, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 262, 263, 264, 266, 270, 271, 274, 278, 279], "init": [3, 211, 227, 280], "fast_bias_correct": [3, 7, 271], "smooth_quant": [3, 7, 209, 271, 277], "weight_correct": [3, 7, 271], "smoothquant": [4, 189, 226, 269, 274, 281], "alpha": [4, 209, 271, 280], "5": [4, 7, 16, 24, 30, 58, 66, 84, 137, 150, 190, 211, 218, 220, 224, 227, 228, 254, 259, 262, 263, 268, 270, 271, 274, 277, 279, 280, 282, 283], "fake": [4, 168, 228, 271, 274, 277], "input": [4, 7, 10, 11, 12, 13, 14, 16, 24, 27, 28, 33, 42, 43, 54, 55, 56, 58, 66, 68, 69, 72, 73, 74, 137, 138, 142, 146, 150, 169, 175, 177, 179, 180, 187, 190, 191, 207, 208, 210, 211, 213, 214, 215, 216, 218, 220, 222, 227, 228, 229, 230, 232, 237, 268, 270, 271, 274, 277, 278, 279, 282], "channel": [4, 5, 7, 24, 28, 66, 69, 107, 175, 189, 190, 192, 223, 224, 231, 232, 234, 239, 254, 268, 274, 279, 283], "quantiz": [4, 6, 7, 10, 11, 24, 31, 38, 42, 43, 66, 74, 75, 76, 86, 113, 119, 125, 129, 155, 157, 159, 168, 169, 170, 174, 175, 179, 180, 190, 197, 209, 210, 211, 216, 217, 220, 222, 223, 227, 230, 232, 237, 239, 240, 243, 256, 258, 259, 261, 267, 269, 275, 278, 279, 280, 281, 282], "more": [4, 28, 69, 107, 187, 188, 189, 191, 208, 209, 211, 214, 216, 218, 221, 223, 224, 226, 228, 229, 231, 232, 240, 244, 247, 252, 257, 266, 267, 268, 273, 274, 277, 280, 281, 283], "detail": [4, 28, 69, 180, 181, 184, 189, 191, 192, 208, 209, 214, 220, 221, 222, 226, 227, 228, 229, 232, 240, 249, 257, 258, 268, 274, 275, 276, 277, 278, 280, 281], "pleas": [4, 7, 12, 13, 14, 17, 54, 55, 56, 59, 107, 109, 110, 137, 150, 186, 187, 188, 189, 190, 207, 208, 211, 215, 216, 218, 224, 226, 227, 229, 232, 233, 237, 240, 256, 257, 258, 268, 271, 273, 274, 275, 276, 277, 280, 281], "refer": [4, 7, 12, 54, 77, 78, 84, 107, 109, 110, 130, 131, 137, 150, 186, 189, 190, 191, 207, 210, 211, 213, 215, 216, 218, 222, 224, 225, 227, 228, 229, 232, 237, 240, 251, 252, 254, 256, 257, 258, 266, 270, 272, 275, 279, 280], "accur": [4, 268, 274, 277], "effici": [4, 187, 189, 208, 210, 214, 232, 257, 267, 268, 269, 274, 277, 280], "post": [4, 7, 10, 11, 42, 43, 150, 184, 189, 190, 191, 213, 215, 216, 218, 223, 224, 231, 232, 238, 249, 259, 268, 269, 272, 274, 277, 278, 280], "train": [4, 7, 10, 11, 12, 14, 28, 38, 42, 43, 54, 56, 69, 70, 86, 109, 129, 150, 172, 187, 189, 190, 191, 197, 211, 213, 214, 215, 218, 223, 229, 231, 232, 238, 249, 254, 262, 267, 269, 272, 274, 276, 277, 280, 282], "larg": [4, 189, 210, 214, 228, 231, 269, 272, 274, 277, 283], "languag": [4, 77, 130, 184, 189, 218, 231, 253, 269, 272, 274, 277], "model": [4, 6, 7, 10, 11, 12, 14, 28, 29, 32, 33, 42, 43, 50, 53, 54, 56, 69, 70, 72, 73, 74, 75, 76, 84, 85, 86, 87, 90, 93, 94, 96, 97, 98, 99, 104, 108, 109, 110, 111, 112, 113, 114, 116, 119, 120, 122, 129, 137, 138, 148, 150, 151, 152, 154, 155, 159, 160, 162, 168, 169, 175, 177, 179, 180, 182, 185, 186, 187, 189, 190, 192, 197, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 222, 223, 225, 227, 229, 232, 237, 239, 240, 243, 249, 251, 256, 258, 259, 260, 261, 266, 267, 269, 271, 275, 276, 278, 279, 280, 281, 282], "spiq": [4, 277], "data": [4, 7, 10, 11, 29, 31, 42, 43, 74, 76, 116, 126, 128, 129, 138, 150, 154, 166, 168, 169, 172, 177, 180, 189, 190, 208, 210, 211, 216, 220, 221, 224, 227, 228, 229, 231, 251, 252, 254, 257, 262, 263, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281], "free": [4, 10, 11, 42, 43, 150, 184, 238, 243, 251, 259, 266, 276, 277], "per": [4, 6, 7, 29, 174, 190, 192, 210, 231, 257, 268, 273, 274, 283], "static": [4, 7, 74, 126, 150, 166, 190, 191, 192, 213, 218, 223, 228, 232, 237, 238, 239, 240, 243, 249, 252, 260, 262, 263, 264, 272, 277, 280, 283], "For": [4, 7, 14, 28, 56, 69, 81, 82, 84, 107, 110, 134, 135, 137, 138, 150, 184, 186, 188, 190, 192, 214, 215, 216, 218, 220, 223, 232, 234, 235, 237, 240, 251, 252, 257, 268, 273, 274, 277, 278, 280, 282, 283], "torch": [4, 7, 74, 138, 150, 175, 179, 186, 189, 192, 193, 214, 216, 218, 228, 229, 230, 231, 232, 237, 240, 252, 271, 274, 277, 278], "backend": [4, 7, 8, 9, 12, 13, 15, 16, 17, 18, 19, 23, 25, 28, 34, 35, 40, 41, 45, 46, 48, 50, 54, 55, 57, 58, 59, 60, 61, 65, 67, 69, 85, 120, 138, 139, 140, 142, 160, 186, 192, 213, 216, 222, 223, 228, 229, 238, 257, 262, 263, 264, 270, 274, 279, 280, 282], "we": [4, 5, 6, 7, 29, 31, 53, 77, 80, 130, 133, 157, 184, 186, 190, 191, 192, 209, 210, 213, 216, 218, 220, 226, 227, 228, 236, 237, 240, 244, 247, 249, 250, 252, 255, 262, 263, 264, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281], "onli": [4, 5, 6, 7, 12, 29, 31, 35, 54, 74, 86, 107, 109, 120, 150, 160, 168, 180, 190, 191, 192, 207, 208, 209, 210, 213, 214, 216, 219, 220, 226, 228, 229, 237, 250, 268, 269, 270, 271, 272, 277, 278, 280, 281, 282], "handl": [4, 176, 186, 188, 209, 210, 257, 277], "layer": [4, 7, 30, 37, 107, 108, 170, 172, 180, 189, 190, 191, 192, 215, 223, 252, 268, 274, 275, 281], "whose": [4, 108, 146, 222, 277, 280], "smooth": [4, 7, 125, 209, 268, 280], "scale": [4, 5, 24, 28, 66, 69, 231, 271, 274, 276, 277, 279, 280], "could": [4, 10, 11, 14, 42, 43, 56, 113, 138, 150, 169, 184, 186, 215, 228, 267, 268, 271, 274, 277, 281], "absorb": [4, 274], "support": [4, 7, 10, 11, 12, 14, 21, 24, 28, 30, 31, 32, 35, 42, 43, 53, 54, 56, 63, 66, 69, 76, 84, 86, 91, 107, 109, 113, 120, 126, 129, 137, 138, 142, 148, 150, 160, 166, 169, 172, 174, 175, 180, 182, 189, 191, 209, 226, 228, 232, 237, 240, 243, 249, 256, 257, 260, 269, 273, 276, 280, 281], "other": [4, 53, 82, 135, 146, 184, 186, 191, 192, 209, 213, 220, 223, 225, 228, 230, 231, 252, 266, 268, 271, 277, 279, 280, 283], "later": [4, 209, 256, 257, 278], "onnx": [4, 7, 50, 72, 73, 74, 138, 145, 178, 185, 189, 190, 191, 193, 210, 213, 217, 218, 220, 221, 223, 229, 230, 231, 234, 239, 240, 252, 269, 270, 274, 275, 277, 280], "insert": [4, 186, 191, 210, 223, 228, 232, 268, 271, 273, 274, 277, 278], "mul": [4, 218, 274, 277], "befor": [4, 7, 12, 54, 107, 109, 111, 185, 192, 210, 211, 214, 215, 216, 219, 220, 224, 228, 244, 247, 253, 254, 271, 274, 276, 278, 280], "conv": [4, 7, 186, 191, 192, 228, 268, 270, 271, 280], "linear": [4, 7, 107, 186, 214, 218, 228, 268, 274, 277, 280], "op": [4, 7, 74, 119, 126, 127, 155, 157, 159, 166, 167, 168, 174, 180, 189, 190, 191, 192, 213, 220, 228, 229, 253, 254, 268, 271, 273, 275, 277, 278, 280, 282], "fuse": [4, 186, 277, 278], "kernel": [4, 7, 190, 191, 280], "futur": [4, 10, 11, 31, 42, 43, 223, 226, 228, 240, 262, 263, 264, 281], "weightcorrect": 5, "ep": [5, 229], "1e": [5, 277, 282], "05": [5, 7, 84, 137, 227, 277, 283], "correct": [5, 7, 80, 81, 82, 84, 108, 133, 134, 135, 137, 184, 232], "int8": [5, 6, 7, 24, 66, 72, 73, 74, 126, 128, 166, 168, 179, 180, 185, 186, 189, 190, 191, 192, 207, 211, 215, 220, 226, 228, 229, 231, 234, 237, 239, 240, 243, 249, 252, 254, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 282], "weight": [5, 7, 74, 107, 109, 126, 137, 150, 157, 166, 168, 180, 181, 190, 191, 192, 208, 213, 215, 220, 222, 226, 228, 251, 262, 266, 268, 269, 270, 271, 272, 277, 278, 280, 281, 282], "distribut": [5, 7, 31, 44, 46, 47, 50, 51, 52, 53, 174, 189, 191, 210, 214, 224, 244, 247, 251, 254, 262, 269, 271, 274, 275, 277, 281, 283], "close": [5, 208, 258], "fp32": [5, 7, 10, 11, 42, 43, 73, 74, 84, 119, 126, 137, 155, 159, 166, 172, 175, 179, 180, 185, 190, 192, 213, 220, 221, 226, 227, 228, 229, 239, 251, 252, 253, 254, 270, 271, 273, 274, 275, 276, 277, 278, 280, 282, 283], "r": [5, 213, 224, 250, 251, 253, 254, 256, 257, 271, 283], "w_int8": 5, "u": [5, 232, 251, 256], "w_fp32": 5, "i": [5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 21, 24, 28, 29, 31, 35, 37, 38, 42, 43, 44, 52, 53, 54, 55, 56, 57, 58, 61, 63, 66, 69, 77, 80, 82, 84, 86, 91, 99, 104, 108, 109, 113, 120, 130, 133, 135, 137, 138, 148, 150, 155, 160, 168, 169, 175, 179, 180, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 199, 202, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283], "varianc": [5, 213], "ratio": [5, 7, 24, 28, 66, 69, 109, 211, 226, 228, 252, 268, 279, 283], "between": [5, 7, 28, 69, 81, 84, 134, 137, 180, 186, 190, 191, 192, 208, 213, 214, 223, 227, 228, 231, 240, 271, 274, 275, 276, 277, 279, 280], "wise": [5, 7, 116, 119, 154, 155, 159, 189, 191, 223, 254, 268, 274, 277, 278, 280, 281, 282], "": [5, 7, 14, 27, 28, 29, 31, 33, 53, 56, 68, 69, 82, 107, 109, 135, 137, 138, 142, 150, 177, 180, 184, 185, 187, 191, 192, 209, 213, 214, 216, 218, 220, 223, 228, 229, 237, 240, 242, 246, 249, 252, 254, 257, 267, 268, 269, 270, 271, 274, 275, 276, 277, 280, 281, 282, 283], "equal": [5, 180, 231, 268, 274], "minim": [5, 116, 154, 191, 192, 208, 214, 217, 227, 228, 242, 246, 268, 271, 280], "round": [5, 189, 269, 271, 274, 277], "scale_c": 5, "shift": [5, 24, 66, 250, 279], "notic": [5, 29, 225, 229, 252, 275], "can": [5, 7, 10, 11, 14, 28, 29, 31, 42, 43, 53, 56, 69, 80, 82, 84, 107, 109, 111, 133, 135, 137, 138, 148, 150, 169, 180, 186, 187, 189, 190, 191, 192, 207, 209, 210, 211, 213, 214, 215, 216, 218, 220, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 242, 243, 244, 246, 247, 249, 250, 252, 254, 255, 256, 257, 259, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283], "chang": [5, 7, 109, 111, 157, 180, 185, 191, 210, 216, 219, 225, 228, 232, 242, 243, 246, 249, 255, 268, 278, 279, 280], "first": [5, 7, 12, 54, 80, 126, 133, 155, 166, 180, 186, 187, 189, 190, 191, 192, 211, 213, 224, 229, 231, 234, 243, 244, 247, 250, 252, 253, 254, 270, 271, 273, 274, 276, 277, 278, 280, 282], "an": [5, 7, 14, 28, 32, 37, 47, 52, 56, 69, 76, 77, 81, 82, 90, 91, 113, 129, 130, 134, 135, 138, 150, 169, 180, 182, 184, 186, 187, 189, 190, 192, 208, 210, 211, 212, 213, 218, 226, 227, 228, 229, 231, 232, 236, 237, 240, 249, 252, 253, 254, 257, 260, 266, 268, 269, 271, 274, 276, 277, 278, 279, 280], "empir": 5, "solut": [5, 189, 190, 191, 219, 234, 238, 243, 269, 274, 275, 277, 280, 281], "make": [5, 52, 107, 109, 111, 180, 184, 190, 191, 207, 209, 210, 220, 227, 228, 237, 242, 246, 249, 251, 268, 271, 272, 273, 274, 276, 277, 280], "thi": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 31, 37, 38, 42, 43, 53, 54, 55, 56, 57, 58, 59, 61, 69, 77, 80, 81, 82, 84, 93, 94, 96, 97, 98, 99, 104, 107, 109, 111, 112, 113, 116, 119, 130, 133, 134, 135, 137, 138, 148, 150, 154, 159, 168, 169, 179, 180, 184, 185, 186, 187, 190, 191, 192, 208, 209, 210, 211, 214, 215, 216, 218, 219, 220, 223, 225, 226, 227, 228, 229, 230, 232, 234, 235, 237, 238, 240, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 262, 263, 264, 268, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281], "don": [5, 7, 186, 255, 268, 280], "t": [5, 7, 28, 31, 69, 82, 135, 186, 190, 209, 213, 214, 216, 228, 229, 250, 255, 268, 271, 274, 280, 282], "min": [5, 7, 180, 213, 231, 252, 254, 268, 271, 274, 277, 279, 280], "max": [5, 7, 28, 69, 81, 82, 116, 134, 135, 154, 180, 189, 213, 224, 228, 231, 252, 254, 268, 271, 274, 277, 279, 280], "valu": [5, 6, 7, 10, 11, 12, 15, 16, 24, 28, 29, 42, 43, 54, 57, 58, 66, 69, 80, 84, 108, 116, 119, 126, 133, 137, 138, 150, 154, 159, 166, 168, 169, 170, 172, 180, 186, 191, 192, 208, 211, 213, 220, 227, 228, 229, 231, 235, 252, 254, 260, 266, 268, 270, 271, 274, 275, 277, 279, 280, 282], "us": [6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 27, 28, 29, 30, 35, 42, 43, 52, 53, 54, 55, 56, 57, 58, 61, 68, 69, 73, 74, 75, 77, 78, 80, 84, 85, 86, 91, 98, 99, 102, 104, 107, 109, 110, 111, 112, 113, 116, 119, 122, 125, 126, 130, 131, 133, 137, 148, 150, 154, 157, 159, 162, 166, 168, 169, 170, 171, 172, 173, 175, 180, 184, 185, 186, 187, 189, 190, 191, 207, 208, 209, 211, 213, 214, 215, 216, 218, 220, 222, 224, 225, 228, 229, 230, 231, 232, 233, 234, 236, 237, 240, 242, 244, 246, 247, 249, 251, 252, 253, 254, 255, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 282, 283], "evalu": [6, 10, 11, 12, 29, 42, 43, 54, 70, 77, 80, 81, 82, 84, 86, 130, 133, 134, 135, 137, 138, 148, 150, 169, 172, 187, 190, 191, 209, 211, 214, 215, 222, 223, 226, 227, 228, 229, 232, 238, 240, 243, 249, 266, 268, 271, 276, 277, 278, 280, 282], "perform": [6, 7, 12, 24, 29, 54, 66, 75, 99, 104, 112, 119, 137, 148, 150, 155, 159, 185, 186, 187, 190, 191, 207, 211, 212, 213, 215, 217, 218, 223, 224, 227, 228, 229, 230, 232, 234, 238, 240, 243, 249, 255, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 278, 280, 282, 283], "set_env_var": [6, 29], "env_var": [6, 29], "overwrite_exist": [6, 29], "fals": [6, 7, 12, 14, 24, 28, 29, 30, 31, 37, 44, 46, 50, 51, 53, 54, 56, 66, 69, 80, 84, 133, 137, 148, 150, 172, 175, 179, 180, 190, 191, 210, 211, 220, 227, 228, 242, 246, 252, 260, 263, 264, 270, 271, 274, 277, 278, 279, 280, 282], "set": [6, 7, 10, 11, 12, 14, 17, 28, 29, 34, 35, 42, 43, 44, 54, 56, 59, 69, 80, 86, 99, 104, 108, 113, 133, 137, 138, 146, 150, 169, 177, 180, 184, 187, 189, 191, 207, 210, 211, 214, 216, 218, 220, 222, 223, 224, 227, 228, 229, 232, 234, 236, 250, 251, 252, 253, 254, 255, 259, 262, 268, 270, 271, 274, 276, 277, 280, 282], "specifi": [6, 7, 10, 11, 28, 29, 42, 43, 69, 75, 80, 84, 86, 87, 90, 99, 104, 112, 113, 133, 137, 138, 150, 169, 179, 180, 191, 192, 216, 220, 227, 228, 237, 251, 257, 261, 262, 263, 264, 266, 268, 270, 274, 279, 280, 282], "environ": [6, 29, 184, 189, 207, 242, 246, 249, 257, 260, 262, 263, 264, 280], "variabl": [6, 7, 14, 29, 56, 116, 154, 168, 224, 268, 280], "new": [6, 14, 28, 29, 44, 56, 69, 108, 148, 185, 191, 216, 228, 229, 243, 249, 250, 251, 252, 258, 259, 262, 263, 268, 269, 271, 274, 275, 276, 279, 281, 282], "env": [6, 29, 219, 262, 263, 264], "two": [6, 14, 19, 29, 56, 61, 80, 107, 111, 113, 120, 133, 160, 180, 185, 186, 187, 209, 210, 211, 214, 216, 218, 220, 228, 229, 231, 256, 257, 259, 268, 271, 273, 274, 276, 277, 280, 282], "case": [6, 7, 27, 28, 29, 53, 68, 69, 75, 99, 104, 112, 148, 192, 209, 210, 214, 215, 216, 220, 222, 227, 233, 237, 249, 250, 251, 254, 260, 263, 264, 266, 268, 269, 271, 274, 275, 277, 279, 281, 282, 283], "exist": [6, 29, 146, 180, 218, 227, 236, 280], "alreadi": [6, 14, 27, 29, 56, 68, 190, 211, 223, 244, 247, 251, 260, 280], "param": [6, 29, 35, 44, 84, 116, 137, 154, 180, 190, 230, 280], "true": [6, 7, 12, 14, 15, 27, 28, 29, 52, 54, 56, 57, 68, 69, 74, 78, 84, 102, 125, 131, 137, 148, 150, 165, 172, 175, 179, 180, 189, 191, 210, 211, 213, 216, 220, 227, 228, 232, 235, 236, 251, 252, 253, 254, 260, 262, 270, 271, 272, 274, 277, 278, 279, 280, 282], "set_all_env_var": [6, 29], "configur": [6, 7, 10, 11, 14, 17, 29, 34, 42, 43, 56, 59, 70, 74, 75, 86, 87, 88, 90, 99, 104, 108, 112, 113, 119, 137, 138, 148, 150, 159, 168, 169, 171, 172, 178, 179, 186, 187, 190, 191, 211, 213, 228, 236, 250, 257, 262, 263, 264, 266, 268, 271, 274, 275, 277, 279, 280, 283], "neural": [6, 7, 24, 25, 28, 29, 32, 35, 38, 66, 67, 69, 71, 76, 83, 84, 86, 99, 104, 107, 110, 112, 113, 118, 124, 129, 136, 137, 138, 142, 149, 150, 157, 158, 164, 177, 182, 185, 190, 191, 192, 207, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 233, 234, 237, 239, 240, 242, 244, 246, 247, 248, 260, 266, 267, 269, 271, 274, 275, 277, 278, 279, 280, 282, 283], "compressor": [6, 7, 24, 25, 28, 29, 32, 35, 38, 66, 67, 69, 71, 76, 83, 84, 86, 107, 110, 112, 113, 118, 124, 129, 136, 137, 138, 142, 149, 150, 158, 164, 177, 182, 185, 187, 190, 191, 192, 207, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 232, 233, 237, 239, 240, 242, 244, 246, 247, 248, 251, 252, 253, 254, 256, 257, 264, 266, 267, 268, 269, 271, 274, 275, 277, 278, 279, 280, 281, 282, 283], "physic": [6, 29, 184, 207, 257], "core": [6, 7, 29, 185, 207, 225, 242, 246, 257, 283], "get_architectur": [6, 29], "get": [6, 7, 28, 29, 35, 37, 47, 69, 74, 107, 109, 111, 119, 126, 128, 137, 146, 150, 159, 166, 168, 172, 175, 177, 180, 191, 208, 219, 223, 224, 226, 228, 235, 252, 254, 262, 263, 269, 274, 277, 280, 281, 284], "architectur": [6, 29, 87, 90, 189, 207, 214, 228, 256, 268, 269, 274, 281], "system": [6, 29, 180, 207, 231, 235, 268, 283], "get_threads_per_cor": [6, 29], "thread": [6, 7, 29, 210, 259], "get_thread": [6, 29], "list": [6, 7, 10, 11, 12, 24, 28, 29, 42, 43, 47, 54, 66, 69, 73, 74, 77, 78, 80, 81, 82, 84, 91, 99, 104, 107, 110, 125, 130, 131, 133, 134, 135, 137, 138, 146, 150, 165, 169, 170, 180, 186, 189, 190, 211, 218, 220, 224, 226, 228, 232, 237, 239, 242, 243, 246, 254, 257, 259, 260, 266, 268, 270, 271, 273, 277, 278, 280], "get_physical_id": [6, 29], "socket": [6, 29, 180, 257, 259, 283], "get_core_id": [6, 29], "id": [6, 27, 29, 68, 77, 79, 80, 81, 82, 130, 132, 133, 134, 135, 189, 227, 257, 258, 262, 263, 264, 276, 280], "get_bounded_thread": [6, 29], "core_id": [6, 29], "bind": [6, 29], "instanc": [6, 7, 10, 11, 29, 42, 43, 81, 82, 84, 87, 90, 93, 94, 96, 97, 98, 116, 128, 134, 135, 137, 138, 150, 154, 168, 169, 177, 180, 184, 185, 186, 190, 207, 228, 234, 240, 274, 280, 282, 283], "run_inst": 6, "b_dataload": [6, 7, 207, 228], "none": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 24, 28, 29, 30, 31, 38, 42, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 66, 69, 70, 73, 74, 75, 80, 84, 85, 86, 87, 90, 99, 104, 108, 112, 114, 116, 119, 120, 122, 126, 133, 137, 138, 148, 150, 151, 152, 154, 155, 159, 160, 162, 166, 169, 170, 172, 175, 177, 179, 180, 189, 190, 191, 210, 211, 227, 231, 252, 271, 274, 278, 279, 280], "b_func": [6, 207], "run": [6, 7, 10, 11, 27, 29, 42, 43, 53, 68, 108, 109, 116, 138, 150, 154, 169, 189, 190, 207, 216, 219, 220, 228, 232, 234, 236, 237, 238, 240, 242, 243, 244, 246, 247, 249, 257, 258, 259, 260, 262, 263, 264, 269, 271, 274, 275, 276, 278, 280, 282], "object": [6, 7, 10, 11, 12, 13, 14, 28, 29, 31, 42, 43, 44, 54, 55, 56, 69, 70, 75, 80, 88, 90, 93, 94, 96, 97, 98, 99, 104, 107, 108, 109, 110, 111, 112, 116, 129, 133, 137, 138, 146, 147, 150, 154, 168, 169, 172, 179, 180, 186, 187, 191, 197, 207, 209, 210, 211, 219, 227, 228, 230, 267, 268, 270, 271, 279, 280, 281, 283], "benchmarkconfig": [6, 7, 207, 213, 228], "contain": [6, 7, 10, 11, 12, 13, 14, 42, 43, 54, 55, 56, 70, 74, 75, 80, 81, 82, 86, 99, 102, 104, 107, 108, 109, 110, 111, 112, 133, 134, 135, 138, 150, 169, 172, 179, 189, 208, 211, 214, 223, 227, 250, 257, 262, 263, 264, 268, 274, 278, 280, 281], "accuraci": [6, 7, 10, 11, 42, 43, 70, 75, 84, 99, 104, 112, 137, 138, 148, 150, 155, 169, 177, 186, 189, 191, 192, 208, 210, 211, 213, 215, 216, 217, 218, 227, 228, 231, 240, 249, 251, 258, 259, 262, 263, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 281, 282, 283], "goal": [6, 70, 75, 99, 104, 112, 138, 150, 191, 210, 267, 271, 280], "tune": [6, 7, 10, 11, 12, 14, 42, 43, 54, 56, 75, 112, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 138, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 180, 190, 191, 208, 209, 210, 211, 213, 216, 223, 225, 228, 229, 249, 253, 256, 258, 259, 266, 268, 269, 273, 275, 276, 278, 282], "prefer": [6, 75, 112, 150, 268, 274], "calibr": [6, 7, 10, 11, 42, 43, 75, 112, 150, 174, 190, 192, 211, 222, 223, 268, 271, 274, 280, 281, 282], "space": [6, 7, 10, 11, 42, 43, 75, 82, 87, 90, 91, 92, 112, 116, 119, 126, 135, 138, 150, 154, 159, 166, 184, 185, 187, 190, 191, 192, 209, 268, 271, 277, 282], "etc": [6, 27, 68, 70, 75, 82, 99, 104, 112, 135, 138, 150, 179, 189, 214, 223, 251, 255, 268, 276, 280], "dataload": [6, 10, 11, 12, 23, 32, 42, 43, 54, 65, 70, 99, 104, 113, 150, 169, 172, 186, 189, 190, 191, 213, 214, 215, 216, 221, 222, 228, 229, 251, 252, 267, 268, 271, 272, 273, 274, 277, 278, 279, 281, 282], "framework": [6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 28, 30, 31, 35, 40, 41, 45, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 67, 69, 75, 84, 85, 112, 120, 126, 137, 138, 139, 140, 142, 160, 166, 172, 189, 190, 192, 208, 209, 213, 216, 217, 221, 222, 223, 224, 227, 228, 229, 251, 252, 268, 269, 271, 275, 278, 279, 280, 281, 282, 283], "custom": [6, 7, 113, 137, 148, 179, 207, 214, 215, 232, 255, 256, 257, 261, 263, 264, 268, 269, 274, 276], "If": [6, 7, 10, 11, 14, 28, 42, 43, 56, 69, 108, 138, 150, 169, 185, 186, 191, 207, 209, 210, 211, 216, 224, 225, 227, 228, 235, 243, 244, 247, 249, 255, 260, 266, 268, 271, 274, 276, 277, 278, 279, 280], "user": [6, 7, 10, 11, 14, 17, 21, 28, 29, 35, 42, 43, 56, 59, 63, 69, 75, 99, 104, 110, 112, 113, 137, 138, 148, 150, 155, 168, 169, 180, 186, 187, 189, 190, 191, 192, 197, 207, 209, 210, 214, 215, 218, 220, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 243, 249, 256, 257, 258, 259, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 275, 277, 278, 279, 280, 284], "pass": [6, 137, 150, 179, 180, 185, 186, 190, 207, 211, 214, 215, 216, 222, 227, 228, 250, 257, 268, 270, 271, 273, 277, 282], "need": [6, 7, 10, 11, 14, 21, 28, 31, 33, 34, 42, 43, 44, 52, 53, 56, 63, 69, 74, 113, 119, 137, 138, 148, 150, 159, 169, 179, 180, 186, 190, 209, 210, 211, 213, 214, 216, 223, 228, 232, 234, 235, 238, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 256, 260, 262, 268, 270, 271, 272, 273, 274, 275, 277, 279, 280, 282], "generate_prefix": 6, "core_list": 6, "gener": [6, 10, 11, 14, 15, 16, 17, 28, 42, 43, 44, 53, 56, 57, 58, 59, 69, 77, 85, 116, 130, 138, 150, 154, 169, 185, 186, 190, 192, 210, 214, 227, 228, 229, 231, 232, 237, 242, 244, 246, 247, 249, 251, 252, 266, 268, 269, 271, 273, 274, 277, 278, 279, 280], "command": [6, 29, 169, 213, 216, 232, 234, 237, 242, 246, 250, 251, 253, 254, 255, 257], "prefix": [6, 232, 237, 278], "numactl": [6, 219, 235, 243], "index": [6, 7, 14, 47, 52, 56, 91, 180, 211, 227, 250, 254, 274, 277], "bound": [6, 28, 69, 80, 116, 133, 154, 227, 279], "specif": [6, 7, 12, 13, 14, 15, 19, 21, 35, 54, 55, 56, 57, 61, 63, 93, 94, 96, 97, 98, 137, 150, 177, 184, 187, 190, 191, 208, 209, 210, 213, 214, 220, 222, 226, 227, 228, 229, 230, 231, 232, 236, 237, 239, 243, 249, 251, 257, 266, 268, 270, 274, 280, 282], "call_on": 6, "cmd": 6, "log_fil": 6, "execut": [6, 7, 109, 113, 115, 150, 151, 153, 169, 172, 179, 180, 213, 214, 215, 228, 229, 234, 235, 242, 243, 249, 250, 251, 252, 256, 259, 267, 268, 271, 274, 276, 280, 283], "one": [6, 28, 38, 69, 77, 80, 84, 86, 107, 110, 111, 130, 133, 137, 187, 190, 208, 214, 215, 216, 220, 223, 224, 227, 228, 229, 232, 233, 237, 238, 240, 242, 243, 246, 249, 250, 251, 254, 255, 256, 257, 259, 266, 267, 268, 270, 271, 272, 274, 275, 277, 279, 280], "dump": [6, 74, 180, 185, 254, 271, 275, 278], "log": [6, 176, 186, 240, 262, 263, 264, 276, 278, 280], "window": [6, 207, 224, 249, 250], "config_inst": 6, "raw_cmd": 6, "multi": [6, 80, 133, 137, 150, 187, 210, 211, 223, 228, 266, 268, 271, 280], "trigger": [6, 109], "sub": [6, 29, 187, 209, 280], "process": [6, 7, 10, 11, 12, 13, 14, 24, 28, 29, 42, 43, 54, 55, 56, 66, 69, 107, 109, 111, 115, 116, 138, 150, 151, 153, 154, 169, 179, 180, 187, 190, 191, 192, 208, 210, 211, 214, 215, 216, 218, 228, 231, 233, 254, 256, 257, 259, 267, 268, 271, 272, 274, 277, 278, 279, 282], "raw": [6, 13, 17, 20, 55, 59, 62, 119, 159, 227, 253, 280], "summary_benchmark": 6, "summari": [6, 169, 213, 244, 247, 278, 283], "profil": [6, 7, 129], "benchmark_with_raw_cmd": 6, "string": [6, 7, 14, 30, 35, 56, 70, 75, 77, 80, 86, 87, 88, 90, 91, 99, 104, 107, 108, 109, 110, 111, 112, 130, 133, 142, 146, 172, 177, 180, 227, 279], "exampl": [6, 7, 12, 13, 14, 24, 28, 54, 55, 56, 66, 69, 80, 81, 82, 84, 110, 133, 134, 135, 137, 138, 148, 150, 168, 169, 179, 180, 184, 189, 191, 192, 197, 222, 223, 232, 235, 236, 237, 240, 257, 260, 273, 275, 279, 280, 281, 284], "accord": [6, 7, 12, 13, 14, 28, 54, 55, 56, 69, 119, 157, 159, 172, 187, 190, 211, 216, 252, 257, 262, 263, 264, 268, 273, 277, 279, 280], "config": [6, 10, 11, 12, 42, 43, 54, 93, 94, 96, 97, 98, 99, 104, 107, 108, 109, 110, 111, 126, 127, 129, 138, 166, 167, 168, 169, 172, 179, 180, 187, 189, 191, 192, 197, 207, 209, 210, 213, 214, 215, 216, 218, 221, 223, 227, 228, 229, 230, 251, 252, 267, 268, 270, 271, 273, 274, 276, 278, 280], "from": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 24, 30, 31, 34, 42, 43, 44, 47, 51, 54, 55, 56, 57, 58, 59, 61, 66, 70, 72, 73, 74, 77, 80, 81, 82, 86, 91, 107, 108, 109, 111, 126, 128, 130, 133, 134, 135, 138, 146, 148, 150, 166, 168, 169, 172, 175, 179, 180, 184, 185, 186, 187, 190, 192, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 223, 226, 227, 229, 230, 231, 232, 236, 237, 238, 240, 250, 252, 254, 255, 259, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281], "import": [6, 7, 86, 138, 148, 150, 169, 180, 186, 187, 189, 192, 207, 210, 211, 213, 214, 215, 216, 218, 221, 227, 228, 229, 230, 231, 232, 236, 238, 251, 252, 260, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281], "fit_with_raw_cmd": 6, "iter": [6, 7, 10, 11, 14, 15, 31, 42, 43, 47, 52, 56, 57, 109, 111, 138, 150, 169, 172, 186, 187, 190, 207, 210, 211, 228, 268, 270, 271, 277, 278, 280, 282], "100": [6, 7, 14, 56, 207, 211, 216, 222, 224, 228, 254, 270, 271, 279, 280, 282, 283], "cores_per_inst": [6, 7, 207, 228, 270], "4": [6, 7, 21, 24, 28, 63, 66, 69, 77, 78, 80, 130, 131, 133, 168, 184, 189, 190, 192, 207, 216, 217, 220, 223, 224, 227, 228, 231, 237, 257, 259, 263, 268, 271, 274, 277, 279, 280, 283], "num_of_inst": [6, 7, 207, 228, 270], "7": [6, 7, 148, 192, 207, 219, 220, 228, 268, 271, 275, 277, 280, 283], "test": [6, 7, 28, 69, 185, 189, 213, 224, 257, 262, 283], "py": [6, 7, 78, 80, 81, 82, 109, 131, 133, 134, 135, 186, 190, 209, 213, 216, 224, 228, 234, 236, 237, 238, 244, 247, 251, 253, 254, 256, 257, 259, 260, 262, 263, 264, 271, 275, 278], "fit": [6, 7, 116, 138, 150, 154, 169, 186, 189, 207, 210, 211, 213, 216, 221, 222, 227, 228, 229, 230, 251, 252, 268, 271, 272, 273, 274], "pb": [6, 7, 138, 146, 150, 207, 216, 221, 228, 230, 251, 254, 262, 278, 283], "eval_dataload": [6, 7, 10, 11, 42, 43, 113, 114, 116, 119, 120, 122, 138, 150, 151, 152, 154, 155, 159, 160, 162, 169, 207, 222, 227, 228, 251, 271, 272, 280], "x": [7, 28, 53, 69, 116, 154, 208, 209, 213, 216, 229, 230, 257, 258, 262, 263, 265, 271, 272, 277, 278, 279, 281], "dotdict": [7, 148, 180], "access": [7, 175, 180, 244, 247, 251], "yaml": [7, 10, 11, 12, 14, 29, 42, 43, 54, 56, 70, 75, 86, 87, 88, 90, 99, 104, 112, 113, 179, 180, 190, 192, 222, 227, 228, 266, 270, 278, 279], "attribut": [7, 180, 190, 210, 220, 222, 228, 270, 282], "instead": [7, 53, 180, 235, 237, 240, 255, 268, 274], "dictionari": [7, 27, 68, 80, 87, 90, 92, 133, 180], "notat": [7, 180], "option": [7, 10, 11, 12, 28, 42, 43, 54, 69, 73, 74, 80, 86, 107, 113, 126, 133, 137, 138, 150, 166, 168, 169, 173, 175, 180, 191, 192, 209, 210, 211, 220, 224, 228, 243, 257, 260, 262, 263, 264, 268, 271, 274, 276, 277, 279, 280, 282], "random_se": [7, 116, 154, 228, 282], "1978": 7, "workspac": [7, 179, 180, 230, 257, 262, 263, 264], "default_workspac": 7, "resume_from": [7, 180], "tensorboard": [7, 172, 180, 190, 228, 252], "global": [7, 93, 94, 96, 97, 98, 107, 168, 180, 186, 228, 268, 270, 280], "creat": [7, 12, 14, 31, 44, 54, 56, 80, 90, 91, 126, 133, 166, 168, 172, 184, 187, 190, 211, 230, 242, 244, 246, 247, 250, 262, 263, 264, 268, 271, 276, 278, 280, 281], "you": [7, 12, 52, 54, 109, 137, 150, 185, 186, 191, 209, 210, 211, 213, 216, 224, 225, 227, 229, 232, 234, 235, 237, 242, 246, 249, 250, 251, 252, 253, 254, 255, 257, 268, 271, 274, 275, 276, 277, 278, 281], "want": [7, 12, 52, 54, 109, 155, 169, 186, 190, 210, 211, 216, 228, 237, 249, 250, 257, 266, 271, 274, 276, 278, 280], "should": [7, 10, 11, 12, 14, 28, 33, 42, 43, 52, 54, 56, 69, 74, 78, 131, 137, 138, 150, 169, 180, 186, 187, 190, 191, 192, 211, 214, 216, 227, 228, 235, 244, 247, 249, 251, 252, 266, 268, 271, 274, 279, 280, 282], "function": [7, 10, 11, 13, 42, 43, 55, 87, 90, 99, 104, 173, 185, 186, 187, 190, 191, 192, 207, 210, 214, 215, 218, 222, 223, 224, 226, 227, 228, 229, 240, 250, 256, 257, 268, 271, 274, 275, 276, 277, 278, 280, 281], "util": [7, 37, 78, 108, 118, 129, 131, 158, 191, 192, 193, 208, 209, 216, 228, 232, 252, 268, 271, 280, 281], "set_random_se": [7, 180], "seed": [7, 92, 180, 228, 282], "int": [7, 12, 13, 24, 28, 53, 54, 55, 66, 69, 73, 74, 78, 80, 84, 91, 131, 133, 137, 168, 175, 180, 189, 209, 210, 211, 227, 228, 260, 270, 274, 279], "set_workspac": [7, 180], "set_resume_from": [7, 180], "set_tensorboard": [7, 180], "bool": [7, 12, 14, 24, 28, 54, 56, 66, 69, 74, 78, 84, 107, 125, 131, 137, 165, 175, 179, 180, 210, 211, 227, 260, 270, 279], "random": [7, 24, 28, 66, 69, 92, 116, 118, 154, 158, 180, 187, 228, 268, 270, 279, 282], "default": [7, 10, 11, 12, 13, 14, 24, 28, 42, 43, 46, 54, 55, 56, 66, 69, 73, 74, 77, 86, 108, 128, 130, 137, 146, 168, 172, 175, 180, 186, 190, 209, 210, 211, 220, 223, 224, 227, 228, 229, 231, 237, 240, 242, 246, 254, 257, 262, 263, 264, 266, 268, 270, 271, 273, 274, 276, 277, 279, 280, 282], "directori": [7, 13, 14, 55, 56, 146, 175, 177, 179, 180, 211, 216, 219, 242, 244, 246, 247, 253, 255, 278], "where": [7, 80, 84, 133, 137, 168, 180, 192, 208, 213, 214, 242, 246, 250, 277, 278], "intermedi": [7, 30, 186, 223, 271], "histori": [7, 179, 180, 249, 253, 280], "ar": [7, 12, 28, 54, 69, 80, 84, 91, 107, 108, 109, 113, 115, 116, 133, 137, 151, 153, 154, 168, 172, 179, 180, 184, 185, 186, 187, 190, 191, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 235, 237, 240, 243, 249, 251, 252, 254, 255, 256, 257, 260, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], "store": [7, 14, 56, 102, 109, 222], "nc_workspac": [7, 252, 253], "format": [7, 12, 13, 14, 54, 55, 56, 74, 80, 86, 126, 133, 166, 175, 189, 191, 192, 209, 211, 216, 218, 227, 228, 229, 230, 231, 232, 254, 257, 269, 271, 274, 275], "datetim": 7, "now": [7, 28, 69, 186, 187, 192, 211, 216, 240, 270, 279, 280], "strftime": 7, "y": [7, 28, 69, 116, 154, 209, 213, 219, 235, 277, 279], "m": [7, 107, 185, 214, 224, 232, 234, 237, 240, 244, 247, 257, 268, 283], "d_": 7, "h": [7, 28, 69, 216, 257, 258, 262, 263, 264, 279], "resum": [7, 10, 11, 42, 43, 114, 120, 122, 151, 152, 154, 155, 159, 160, 162], "wa": [7, 190, 228, 231, 254, 255, 258, 269, 280], "automat": [7, 14, 17, 24, 56, 59, 66, 75, 85, 112, 186, 189, 207, 211, 223, 228, 229, 232, 234, 237, 238, 240, 242, 243, 244, 246, 247, 249, 256, 259, 267, 268, 271, 277, 279, 280], "save": [7, 14, 56, 73, 74, 113, 146, 150, 169, 170, 175, 180, 186, 190, 222, 228, 229, 230, 233, 237, 242, 246, 252, 257, 262, 263, 264, 267, 271, 272, 274, 277], "dure": [7, 107, 111, 148, 180, 191, 213, 228, 230, 256, 266, 267, 268, 271, 277, 278, 282], "last": [7, 210, 229, 232, 234, 239, 243, 271, 274, 277], "flag": [7, 78, 131, 213], "indic": [7, 12, 47, 52, 54, 70, 80, 91, 133, 186, 210, 219, 252, 257, 278], "whether": [7, 12, 24, 28, 52, 54, 66, 69, 78, 80, 84, 107, 131, 133, 137, 172, 175, 179, 180, 190, 211, 227, 271, 274, 277, 279], "each": [7, 14, 17, 24, 28, 52, 56, 59, 66, 69, 78, 80, 81, 82, 119, 131, 133, 134, 135, 159, 180, 185, 190, 191, 192, 209, 211, 213, 214, 215, 220, 228, 234, 240, 243, 249, 257, 259, 266, 268, 272, 274, 276, 278, 279, 280, 281], "visual": [7, 189, 240, 249, 276, 278, 280, 281], "displai": [7, 125, 126, 165, 166, 180, 249, 252], "2022": [7, 225, 268, 274, 277], "workspace_path": 7, "output": [7, 10, 11, 33, 37, 42, 43, 73, 74, 77, 107, 130, 137, 138, 146, 150, 169, 175, 176, 180, 186, 190, 191, 214, 215, 216, 218, 220, 222, 227, 228, 230, 240, 249, 250, 252, 257, 258, 262, 263, 264, 267, 268, 270, 271, 274, 275, 277, 278, 279, 280, 282], "devic": [7, 175, 189, 191, 210, 214, 228, 229, 232, 235, 240, 249, 268, 270, 272, 274], "cpu": [7, 175, 180, 189, 191, 207, 208, 223, 228, 229, 232, 234, 240, 249, 257, 269, 270, 271, 272, 273, 274, 278], "warmup": [7, 207, 228, 270], "model_nam": [7, 189], "inter_num_of_thread": [7, 228, 270], "intra_num_of_thread": [7, 228, 270], "diagnosi": [7, 228, 252, 253, 254, 269, 275, 281], "ni_workload_nam": 7, "benchmark": [7, 31, 76, 113, 129, 148, 180, 189, 197, 230, 232, 236, 240, 243, 249, 252, 280, 281, 282, 283], "A": [7, 14, 28, 31, 33, 34, 56, 69, 70, 77, 80, 81, 82, 84, 87, 90, 91, 92, 99, 102, 104, 107, 108, 109, 110, 111, 116, 130, 133, 134, 135, 137, 138, 142, 146, 154, 169, 180, 185, 189, 191, 209, 210, 211, 217, 220, 227, 228, 230, 242, 243, 246, 249, 257, 268, 269, 271, 274, 277, 279, 280, 282], "empti": [7, 235, 272], "includ": [7, 12, 14, 21, 28, 30, 54, 56, 63, 69, 75, 85, 107, 112, 180, 184, 190, 191, 192, 210, 211, 213, 224, 225, 226, 227, 228, 232, 235, 238, 243, 255, 259, 262, 263, 264, 268, 271, 273, 274, 278, 280], "itex": [7, 73, 229, 271, 277], "ipex": [7, 179, 223, 226, 228, 229, 234, 238, 239, 277], "onnxrt_trt_ep": [7, 229, 271], "onnxrt_cuda_ep": [7, 229, 271], "onnxrt_dnnl_ep": [7, 229, 271], "onnxrt_dml_ep": [7, 271], "number": [7, 13, 24, 28, 52, 55, 66, 69, 81, 82, 84, 107, 116, 134, 135, 137, 154, 172, 180, 207, 210, 211, 216, 227, 257, 259, 268, 271, 274, 276, 277, 279, 280], "inter": 7, "oper": [7, 24, 66, 107, 186, 207, 210, 213, 218, 249, 255, 268, 271, 274, 277, 279, 280], "intra": 7, "accuracycriterion": [7, 228, 280], "higher_is_bett": [7, 137, 150, 280, 282], "criterion": [7, 32, 35, 214, 215, 228, 268, 271, 277, 280, 282], "rel": [7, 148, 228, 252, 270, 280, 282, 283], "tolerable_loss": [7, 228, 280], "01": [7, 226, 228, 270, 274, 280, 282, 283], "metric": [7, 10, 11, 32, 42, 43, 70, 75, 76, 91, 99, 104, 112, 113, 129, 138, 150, 169, 172, 187, 190, 191, 211, 213, 216, 228, 229, 251, 271, 276, 277, 278, 280, 281, 282, 283], "higher": [7, 10, 11, 42, 43, 91, 138, 150, 169, 186, 213, 214, 218, 227, 252, 268, 271, 274, 276], "better": [7, 10, 11, 42, 43, 91, 138, 150, 169, 209, 215, 227, 229, 268, 269, 271, 274, 276, 277, 280], "loss": [7, 30, 75, 84, 99, 104, 112, 137, 169, 208, 213, 214, 215, 216, 217, 226, 227, 228, 229, 240, 252, 254, 267, 268, 269, 271, 274, 277, 280, 282], "absolut": [7, 84, 137, 227, 228, 231, 268, 271, 280], "float": [7, 12, 24, 54, 66, 78, 80, 81, 82, 109, 131, 133, 134, 135, 165, 177, 180, 209, 211, 227, 231, 270, 271, 277, 279], "how": [7, 28, 69, 70, 107, 185, 186, 188, 190, 210, 211, 214, 215, 216, 222, 227, 228, 243, 244, 247, 248, 249, 251, 262, 263, 264, 268, 269, 271, 277, 279, 280, 281, 282], "much": [7, 28, 69, 70, 214, 243, 277, 279], "accept": [7, 184, 207, 209, 210, 251, 274], "accuracy_criterion": [7, 148, 228, 253, 266, 270, 280, 282], "avail": [7, 142, 189, 193, 195, 199, 202, 205, 209, 217, 219, 221, 223, 242, 246, 251, 256, 257, 258, 262, 263, 264, 268, 280, 283], "tuningcriterion": [7, 228, 266, 276, 280], "strategi": [7, 8, 14, 40, 56, 76, 129, 189, 190, 191, 192, 197, 208, 209, 210, 216, 223, 228, 237, 249, 254, 269, 270, 271, 273, 274, 275, 281, 282], "basic": [7, 27, 68, 87, 107, 118, 122, 125, 158, 162, 165, 169, 223, 224, 228, 231, 251, 270, 276], "strategy_kwarg": [7, 276, 280], "timeout": [7, 228, 270, 280, 282], "max_trial": [7, 228, 280], "doc": [7, 107, 125, 126, 137, 150, 165, 166, 180, 227, 228, 244, 247, 255], "tuning_strategi": 7, "md": [7, 107, 137, 150], "constraint": [7, 75, 112, 228, 268, 276, 280, 282], "guarante": [7, 228], "models": [7, 148, 228, 266, 270], "footprint": [7, 75, 99, 104, 112, 148, 215, 228, 266, 268, 270, 272], "second": [7, 12, 54, 155, 180, 213, 228, 242, 246, 250, 262, 263, 274, 277, 280, 282], "which": [7, 12, 13, 14, 24, 29, 54, 55, 56, 66, 77, 82, 91, 93, 94, 96, 97, 98, 102, 107, 108, 109, 111, 116, 130, 135, 137, 142, 148, 150, 154, 180, 184, 186, 187, 189, 190, 191, 192, 208, 210, 211, 213, 214, 216, 219, 220, 223, 227, 228, 229, 230, 233, 237, 240, 243, 249, 250, 251, 254, 257, 262, 263, 264, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282], "mean": [7, 24, 28, 66, 69, 82, 84, 107, 119, 135, 137, 159, 186, 191, 192, 210, 213, 216, 220, 227, 228, 235, 254, 268, 271, 272, 274, 277, 279, 280, 282, 283], "earli": [7, 228, 271, 280, 282], "stop": [7, 228, 280, 281, 282], "time": [7, 28, 69, 84, 116, 137, 148, 154, 180, 191, 210, 213, 216, 219, 228, 237, 239, 242, 246, 249, 250, 255, 258, 262, 263, 266, 268, 269, 271, 274, 276, 277, 278, 279, 280], "combin": [7, 10, 11, 24, 38, 42, 43, 66, 138, 150, 169, 180, 186, 190, 223, 228, 267, 269, 271, 273, 274, 279, 280], "field": [7, 14, 56, 80, 133, 186, 190, 192, 216, 228, 231, 276, 280, 282], "decid": [7, 78, 109, 131, 190, 191, 228, 271, 275, 280], "when": [7, 12, 13, 21, 28, 54, 55, 63, 69, 78, 108, 109, 131, 150, 169, 184, 187, 191, 209, 210, 211, 228, 240, 242, 243, 246, 250, 251, 254, 255, 256, 258, 262, 268, 271, 274, 277, 279, 280], "exit": [7, 115, 151, 153, 228, 257, 262, 263, 264, 282], "tuning_criterion": [7, 228, 266, 276, 280], "posttrainingquantconfig": [7, 150, 186, 189, 192, 210, 213, 218, 221, 227, 228, 230, 251, 252, 253, 254, 271, 272, 273, 274, 276, 277, 280], "domain": [7, 268, 280], "auto": [7, 114, 152, 158, 180, 186, 208, 232, 235, 237, 239, 240, 268, 271, 274], "recip": [7, 75, 112, 189, 228, 231, 272, 274, 277, 280], "quant_format": [7, 74, 218, 252], "approach": [7, 87, 88, 90, 186, 187, 189, 208, 211, 214, 223, 228, 237, 249, 252, 260, 262, 263, 264, 268, 269, 270, 272, 274, 280, 282], "calibration_sampling_s": [7, 228, 254], "op_type_dict": [7, 189, 192, 270, 271, 274, 280], "op_name_dict": [7, 213, 228, 252, 254, 271, 280], "reduce_rang": [7, 192, 270], "example_input": [7, 74, 179, 218], "excluded_precis": [7, 273], "quant_level": [7, 252, 274, 277, 280], "gpu": [7, 189, 207, 223, 228, 229, 234, 240, 249, 270, 271, 272], "npu": [7, 271], "xpu": [7, 240, 271], "cv": [7, 268], "object_detect": [7, 80, 133], "nlp": [7, 110, 237, 253, 268, 271], "recommendation_system": 7, "adaptor": [7, 128, 168, 172, 189, 192, 223, 272, 273, 275, 277, 278, 281], "explicitli": [7, 222, 268], "overrid": [7, 180, 209], "detect": [7, 80, 84, 133, 137, 142, 185, 186, 232, 239, 240, 268, 280], "quantiztaion": 7, "below": [7, 113, 137, 150, 185, 186, 189, 190, 191, 192, 210, 213, 214, 216, 222, 227, 231, 232, 234, 242, 243, 246, 249, 252, 257, 266, 267, 268, 270, 271, 274, 276, 277, 278, 280, 281], "do": [7, 12, 53, 54, 70, 74, 77, 80, 110, 130, 133, 179, 184, 191, 209, 211, 216, 220, 223, 227, 228, 244, 247, 268, 273, 275, 277, 280], "quant": [7, 126, 166, 186, 209, 226, 228, 271], "smooth_quant_arg": [7, 271, 277], "layer_wise_qu": [7, 272], "fast": [7, 268, 269, 274], "bia": [7, 274, 278], "gemm_to_matmul": [7, 271], "convert": [7, 12, 24, 27, 28, 54, 66, 68, 69, 73, 80, 86, 108, 126, 133, 166, 186, 191, 228, 229, 234, 271, 273, 274, 277, 279, 280], "gemm": 7, "matmul": [7, 107, 220, 252, 274, 280], "add": [7, 12, 14, 35, 54, 56, 108, 126, 166, 180, 185, 186, 189, 192, 210, 211, 216, 218, 220, 227, 228, 244, 247, 251, 252, 259, 262, 263, 276, 277, 278, 280, 281], "valid": [7, 14, 56, 80, 108, 109, 133, 146, 187, 189, 190, 211, 213, 214, 217, 220, 223, 225, 228, 240, 254, 268, 271, 274, 275], "graph_optimization_level": [7, 270, 271], "disable_al": [7, 270], "enable_bas": 7, "enable_extend": 7, "enable_al": 7, "first_conv_or_matmul_quant": [7, 271], "last_conv_or_matmul_quant": [7, 271], "pre_post_process_quant": [7, 271], "preprocess": [7, 12, 28, 54, 69, 168, 172, 216, 279], "postprocess": [7, 25, 28, 32, 69, 137, 150, 172, 190, 228, 278, 279], "add_qdq_pair_to_weight": [7, 271], "qdq": [7, 72, 73, 74, 190, 213, 218, 223, 239, 240, 271, 275, 277], "pair": [7, 191, 210, 228, 229, 275], "optypes_to_exclude_output_qu": [7, 271], "optyp": [7, 72, 191], "dedicated_qdq_pair": [7, 271], "dedic": 7, "qoper": [7, 218, 252], "requir": [7, 113, 146, 186, 190, 191, 207, 208, 210, 213, 215, 216, 220, 228, 229, 230, 233, 243, 249, 251, 256, 257, 260, 263, 264, 268, 271, 274, 275, 276, 277, 278, 280, 282], "onnxruntim": [7, 14, 21, 50, 56, 63, 85, 190, 208, 210, 223, 224, 229, 252, 270], "tensorflow": [7, 12, 13, 14, 17, 19, 21, 28, 35, 53, 54, 55, 56, 59, 61, 63, 69, 73, 74, 75, 78, 80, 84, 85, 86, 112, 120, 131, 133, 137, 138, 146, 150, 160, 180, 185, 187, 189, 190, 191, 208, 209, 210, 213, 214, 215, 217, 220, 221, 223, 224, 228, 229, 230, 231, 239, 240, 251, 254, 268, 269, 270, 276, 277, 280, 282], "method": [7, 12, 14, 21, 28, 31, 47, 52, 53, 54, 56, 63, 69, 90, 91, 92, 126, 166, 168, 172, 173, 175, 176, 186, 187, 189, 208, 209, 210, 211, 213, 214, 215, 227, 228, 267, 268, 271, 273, 274, 277, 279, 280], "dynam": [7, 44, 74, 126, 166, 190, 210, 214, 218, 223, 228, 232, 237, 238, 239, 240, 243, 249, 269, 280, 283], "weight_onli": [7, 179, 189, 209, 231, 272, 274], "ptq": [7, 150, 186, 213, 216, 223, 228, 254, 271, 277, 278, 280], "both": [7, 184, 187, 190, 215, 228, 233, 252, 254, 256, 268, 270, 271, 274, 277, 280], "tri": [7, 209, 280], "meet": [7, 113, 115, 151, 153, 186, 191, 266, 269, 270, 271, 274, 278, 280], "criteria": [7, 75, 99, 104, 107, 109, 112, 186, 249, 277], "bayesian": [7, 92, 118, 158, 187, 268, 270], "mse": [7, 84, 118, 137, 150, 158, 180, 213, 227, 254, 270, 274, 275], "mse_v2": [7, 118, 158], "hawq_v2": [7, 158], "exhaust": [7, 92, 118, 158, 270], "els": [7, 52, 148, 177, 237, 274, 278], "sampl": [7, 12, 13, 14, 24, 28, 47, 52, 54, 55, 56, 66, 69, 84, 91, 116, 137, 154, 187, 210, 211, 217, 223, 250, 271, 274, 277, 279, 280, 282, 283], "advanc": [7, 184, 189, 191, 197, 226, 231, 268, 271, 274, 282], "reduc": [7, 190, 208, 215, 228, 229, 249, 250, 268, 269, 271, 272, 273, 274, 277, 280, 282], "dtype": [7, 15, 16, 24, 28, 57, 58, 66, 69, 175, 189, 191, 192, 211, 213, 218, 220, 232, 254, 270, 271, 274, 277, 278, 279, 282], "activ": [7, 37, 126, 166, 168, 190, 191, 192, 208, 213, 215, 220, 228, 250, 251, 254, 262, 263, 264, 270, 271, 274, 277, 278, 282], "layer1": [7, 228, 268, 271], "conv1": [7, 271, 282], "bit": [7, 168, 189, 192, 208, 215, 229, 231, 269, 271, 274, 277], "precis": [7, 10, 11, 42, 43, 75, 82, 84, 85, 112, 114, 126, 135, 137, 138, 148, 152, 155, 166, 180, 189, 190, 191, 197, 207, 208, 215, 216, 220, 223, 231, 232, 238, 239, 240, 269, 270, 271, 274, 277, 280, 281], "exclud": [7, 190, 208, 273], "enabl": [7, 109, 191, 192, 216, 224, 229, 232, 234, 237, 238, 240, 251, 253, 254, 256, 259, 268, 269, 277, 280], "mix": [7, 114, 126, 138, 152, 166, 189, 190, 197, 223, 232, 238, 239, 240, 281], "bf16": [7, 126, 166, 190, 191, 220, 228, 234, 239, 243, 249, 273, 280, 283], "disabl": [7, 184, 249, 254, 273, 274, 277], "conserv": [7, 158], "In": [7, 38, 53, 80, 107, 109, 133, 148, 184, 186, 187, 189, 190, 191, 210, 211, 213, 214, 215, 216, 227, 228, 239, 242, 243, 246, 252, 253, 254, 255, 262, 263, 264, 266, 267, 268, 271, 273, 274, 276, 277, 278, 279, 280, 281], "docstr": 7, "workload": [7, 177, 180, 251, 269], "insight": [7, 177, 189, 213, 269, 275, 280, 281], "quantizationawaretrainingconfig": [7, 169, 186, 215, 218, 228, 271, 273, 280], "awar": [7, 38, 86, 107, 157, 169, 190, 191, 192, 208, 215, 216, 218, 223, 249, 259, 267, 269, 274, 280], "qat": [7, 86, 146, 215, 216, 223, 228, 271], "copi": [7, 108, 180, 210, 255], "deepcopi": 7, "model_origin": [7, 150, 273], "qat_op_name_dict": 7, "compression_manag": [7, 169, 186, 214, 215, 228, 267, 268, 271], "prepare_compress": [7, 169, 186, 214, 215, 228, 267, 268, 271], "weightpruningconfig": [7, 228, 267, 268], "pruning_config": [7, 228, 268], "target_spars": [7, 228, 268, 270, 282], "9": [7, 186, 224, 228, 268, 270, 277, 280, 282, 283], "pruning_typ": [7, 228, 268], "snip_momentum": [7, 228, 268], "pattern": [7, 14, 56, 97, 98, 100, 105, 109, 126, 166, 190, 209, 211, 220, 223, 228, 250, 267, 270, 277, 280, 283], "4x1": [7, 103, 228, 268, 283], "op_nam": [7, 127, 167, 180, 181, 191, 228, 268, 278], "excluded_op_nam": [7, 228, 268], "start_step": [7, 109, 228, 268, 270], "end_step": [7, 109, 228, 268, 270], "pruning_scop": [7, 228, 268], "pruning_frequ": [7, 228, 268], "min_sparsity_ratio_per_op": [7, 228, 268], "max_sparsity_ratio_per_op": [7, 228, 268], "98": [7, 228, 268, 270, 283], "sparsity_decay_typ": [7, 228, 268], "exp": [7, 228, 231, 268], "pruning_op_typ": [7, 228, 268], "low_memory_usag": 7, "kwarg": [7, 14, 26, 28, 33, 36, 56, 69, 125, 127, 137, 138, 139, 141, 143, 145, 146, 147, 150, 165, 167, 169, 175, 176, 179, 180, 210], "prune": [7, 38, 39, 76, 93, 94, 96, 97, 98, 102, 104, 105, 107, 108, 109, 111, 113, 180, 189, 216, 217, 220, 221, 223, 267, 269, 281, 282], "defin": [7, 10, 11, 42, 43, 87, 88, 90, 91, 92, 99, 104, 107, 108, 109, 111, 138, 150, 169, 179, 184, 187, 190, 191, 210, 211, 214, 215, 220, 223, 227, 228, 250, 267, 268, 271, 274, 276, 277, 278, 280, 282], "singl": [7, 12, 28, 47, 54, 69, 80, 109, 111, 133, 137, 150, 186, 211, 213, 224, 255, 268, 272, 277], "sequenc": [7, 12, 27, 28, 54, 68, 69, 78, 82, 107, 131, 135, 190, 211, 220, 268, 274, 279], "local": [7, 107, 180, 242, 246, 251, 258, 259, 268, 276], "link": [7, 12, 54, 137, 150, 208, 211, 218, 242, 246, 249, 274, 283], "out": [7, 12, 13, 14, 54, 55, 56, 75, 107, 112, 185, 186, 189, 211, 232, 237, 242, 243, 244, 246, 247, 249, 255, 268, 270, 271, 274], "By": [7, 77, 130, 191, 192, 227, 230, 242, 243, 246, 268, 269, 274, 280], "correspond": [7, 12, 54, 77, 80, 84, 130, 133, 137, 172, 180, 190, 220, 228, 268, 270, 271, 276, 280], "sparsiti": [7, 109, 111, 180, 189, 211, 223, 228, 281, 283], "reach": [7, 111, 185, 210, 251, 268, 280], "after": [7, 12, 24, 28, 31, 54, 66, 69, 109, 155, 175, 180, 187, 189, 191, 211, 213, 214, 215, 218, 223, 227, 228, 242, 243, 246, 250, 254, 266, 267, 268, 271, 273, 274, 276, 277, 278, 279, 280], "90": [7, 226, 272, 282, 283], "magnitud": [7, 84, 95, 137, 223, 268], "snip": [7, 109, 223, 268, 283], "magnitude_progress": 7, "snip_progress": 7, "snip_momentum_progress": 7, "pattern_lock": [7, 95], "most": [7, 84, 137, 213, 228, 229, 268, 271, 274, 277, 280, 283], "feasibl": 7, "under": [7, 14, 56, 175, 179, 185, 187, 189, 211, 225, 227, 228, 232, 237, 238, 249, 257, 267, 268, 269, 272, 274, 278, 280], "situat": [7, 216, 268], "structur": [7, 109, 127, 167, 180, 223, 248, 250, 253, 262, 268, 269, 271, 278, 281, 283], "unstructur": [7, 103, 223, 268, 283], "nxm": [7, 103, 107, 268], "e": [7, 184, 185, 189, 214, 217, 221, 232, 237, 238, 242, 246, 268, 274, 277, 280], "g": [7, 185, 214, 217, 221, 232, 237, 268, 274, 275, 277, 280], "8x1": 7, "channelx1": [7, 268], "1xchannel": [7, 268], "n": [7, 13, 28, 55, 69, 78, 107, 131, 192, 209, 211, 213, 214, 257, 268, 271, 277, 279], "directli": [7, 53, 80, 84, 108, 133, 137, 189, 227, 228, 236, 268, 270, 271, 278], "our": [7, 187, 189, 218, 228, 231, 250, 251, 254, 276, 281], "itrex": [7, 277], "some": [7, 12, 54, 108, 191, 192, 209, 211, 213, 218, 224, 227, 228, 251, 252, 253, 254, 257, 266, 268, 271, 273, 274, 277, 278, 280, 281], "step": [7, 107, 109, 111, 169, 191, 192, 213, 214, 215, 216, 228, 244, 247, 249, 262, 263, 264, 267, 268, 270, 273, 274, 276, 277, 278, 280], "start": [7, 28, 69, 80, 133, 155, 224, 254, 269, 279, 280, 281, 284], "integ": [7, 70, 80, 84, 91, 107, 109, 133, 137, 190, 192, 208, 271, 274, 277, 280], "end": [7, 12, 27, 28, 54, 68, 69, 109, 115, 151, 153, 190, 191, 192, 214, 215, 220, 224, 228, 243, 259, 266, 268, 274, 278, 279, 280], "determin": [7, 174, 184, 186, 208, 268, 271], "score": [7, 77, 78, 80, 81, 82, 84, 109, 130, 131, 133, 134, 135, 137, 157, 172, 186, 227, 252, 266, 268, 276, 280], "gather": [7, 107], "togeth": [7, 28, 69, 214, 224, 236, 269, 278, 279], "sort": [7, 119, 159, 213, 252, 274, 280], "sinc": [7, 75, 77, 99, 104, 112, 130, 214, 218, 224, 227, 243, 249, 254, 267, 274, 275], "lead": [7, 209, 214, 228, 229, 254, 268, 274, 277], "less": [7, 180, 207, 214, 228, 256, 268], "frequenc": [7, 70, 109, 228, 268, 282], "minimum": [7, 192, 208, 213, 228, 231, 240, 268, 277, 280], "restrict": [7, 268, 276], "everi": [7, 107, 109, 190, 210, 237, 242, 246, 272, 274, 280], "maximum": [7, 12, 28, 54, 69, 78, 109, 116, 131, 146, 154, 192, 208, 211, 213, 228, 268, 271, 277, 279], "schedul": [7, 76, 105, 109, 228, 256, 257, 259, 267], "increas": [7, 212, 223, 231, 232, 249, 254, 274, 280], "cube": [7, 268], "current": [7, 86, 93, 94, 96, 97, 98, 107, 109, 116, 120, 154, 160, 180, 186, 187, 190, 192, 208, 209, 216, 220, 228, 232, 236, 249, 257, 266, 268, 271, 274, 277, 280], "local_config": [7, 93, 94, 96, 97, 98], "6": [7, 220, 231, 271, 277, 280, 283], "queri": [7, 191, 192, 259, 271], "kei": [7, 91, 108, 146, 170, 172, 180, 189, 191, 251, 252, 258, 269, 274, 278, 280], "self": [7, 148, 190, 191, 210, 211, 223, 227, 251, 276, 278, 280], "attent": [7, 12, 54, 184, 214, 268], "dens": [7, 111, 252, 268, 283], "8": [7, 27, 68, 186, 191, 208, 209, 220, 224, 231, 256, 257, 268, 269, 274, 277, 280, 283], "update_config": 7, "10": [7, 14, 56, 116, 154, 189, 207, 211, 218, 224, 226, 228, 251, 252, 268, 270, 279, 280, 283], "hpoconfig": 7, "search_spac": [7, 87, 90, 91, 92], "searcher": [7, 92], "xgb": 7, "loss_typ": [7, 30, 228, 282], "reg": 7, "min_train_sampl": 7, "42": [7, 92, 226, 283], "hyperparamet": [7, 125, 276, 277, 280], "optim": [7, 32, 38, 75, 92, 112, 116, 154, 169, 170, 177, 180, 187, 189, 207, 209, 213, 214, 215, 216, 220, 221, 223, 224, 226, 228, 230, 232, 234, 236, 237, 240, 243, 251, 254, 255, 256, 258, 260, 269, 270, 271, 273, 274, 276, 277, 278, 280, 282], "search": [7, 10, 11, 42, 43, 75, 77, 87, 90, 91, 92, 112, 116, 130, 154, 180, 189, 209, 223, 227, 232, 233, 243, 268, 269, 274, 277, 278, 280, 281], "algorithm": [7, 77, 84, 92, 129, 130, 137, 172, 174, 187, 189, 190, 191, 192, 209, 214, 215, 220, 223, 226, 238, 243, 268, 271, 278, 282], "grid": [7, 92, 187, 268], "bo": 7, "knowledgedistillationlossconfig": [7, 214, 215, 228, 267], "temperatur": [7, 30, 228, 282], "ce": [7, 30, 228, 282], "loss_weight": [7, 30, 228, 282], "knowledg": [7, 30, 70, 215, 217, 221, 223, 228, 230, 282], "distil": [7, 30, 37, 38, 76, 189, 217, 221, 223, 267, 281, 282], "entropi": [7, 208, 280], "probabl": [7, 174, 274], "length": [7, 12, 28, 54, 69, 80, 133, 211, 227, 269, 271, 274, 279], "item": [7, 27, 68, 108, 126, 166, 208, 216, 268, 277, 280], "student": [7, 12, 37, 54, 70, 211, 214, 215, 283], "groundtruth": [7, 80, 133], "label": [7, 10, 11, 12, 14, 15, 16, 17, 20, 24, 28, 33, 42, 43, 54, 56, 57, 58, 59, 62, 66, 69, 77, 79, 84, 130, 132, 137, 138, 150, 169, 186, 210, 211, 213, 227, 228, 271, 279], "teacher": [7, 70, 214, 215, 228, 283], "kl": [7, 170, 174, 191, 192, 208, 220, 228, 280, 282], "sum": [7, 84, 137, 213, 214], "multipli": [7, 231, 274], "distillationconfig": [7, 169, 214, 215, 228, 267], "criterion_conf": 7, "d_conf": [7, 215, 228, 267], "teacher_model": [7, 30, 214, 215, 228], "intermediatelayersknowledgedistillationlossconfig": [7, 214], "layer_map": [7, 30, 214], "add_origin_loss": [7, 30], "map": [7, 28, 69, 72, 74, 75, 79, 81, 82, 84, 99, 104, 109, 112, 132, 134, 135, 137, 209, 211, 216, 227, 228, 242, 246, 254, 268, 271, 274], "relationship": [7, 251], "student_layer_nam": 7, "student_layer_output_process": 7, "teacher_layer_nam": 7, "teacher_layer_output_process": 7, "bert": [7, 12, 28, 50, 53, 54, 69, 189, 211, 214, 227, 229, 237, 260, 263, 264, 268, 279, 283], "desir": [7, 24, 28, 66, 69, 191, 192, 268, 277, 279], "its": [7, 14, 28, 50, 56, 69, 72, 78, 79, 109, 116, 131, 132, 154, 184, 211, 214, 225, 227, 229, 240, 242, 246, 249, 250, 268, 274, 276, 279, 280], "either": [7, 80, 133, 233, 237, 257, 267, 270, 271], "take": [7, 10, 11, 28, 33, 42, 43, 47, 69, 107, 116, 137, 138, 150, 154, 169, 184, 186, 187, 210, 213, 214, 220, 228, 249, 268, 271, 273, 274, 279, 280, 282], "serv": [7, 146, 257, 262, 263, 264], "tupl": [7, 10, 11, 24, 28, 42, 43, 66, 69, 74, 125, 138, 150, 165, 169, 179, 191, 209, 211, 227, 228, 271, 279], "numer": [7, 84, 137, 192, 229, 231, 269, 271, 274], "abbrevi": 7, "same": [7, 12, 28, 54, 69, 80, 133, 180, 190, 192, 207, 210, 211, 214, 216, 220, 228, 231, 233, 237, 242, 246, 268, 270, 271, 274, 277, 278, 279, 280], "further": [7, 184, 189, 229, 230, 232, 234, 243, 249, 271], "layer_nam": [7, 268], "student_model": [7, 30, 228], "l1": 7, "len": [7, 28, 69, 211, 216, 279], "origin": [7, 12, 28, 29, 54, 69, 93, 94, 96, 97, 98, 108, 109, 128, 155, 168, 175, 180, 185, 211, 237, 268, 271, 274, 279, 280, 282], "selfknowledgedistillationlossconfig": [7, 214, 228], "like": [7, 10, 11, 14, 42, 43, 44, 56, 75, 84, 109, 112, 113, 137, 146, 150, 169, 185, 186, 187, 190, 191, 213, 214, 215, 223, 237, 252, 254, 267, 268, 271, 274, 275, 277, 280], "student1_layer_name1": 7, "teacher_layer_name1": 7, "student2_layer_name1": 7, "student1_layer_name2": 7, "teacher_layer_name2": 7, "student2_layer_name2": 7, "calcul": [7, 15, 16, 57, 58, 81, 82, 107, 109, 119, 134, 135, 159, 170, 180, 208, 211, 227, 228, 240, 252, 266, 268, 271, 274, 276, 277, 280, 282], "soft": 7, "l2": [7, 268], "hard": [7, 210, 213], "resblock": 7, "featur": [7, 12, 13, 24, 28, 54, 55, 66, 69, 185, 189, 207, 210, 212, 214, 228, 229, 230, 232, 236, 237, 240, 249, 251, 255, 268, 269, 275, 279], "deepst": 7, "fc": [7, 268], "3": [7, 14, 28, 56, 69, 80, 133, 180, 186, 187, 189, 208, 209, 210, 211, 214, 216, 218, 220, 221, 224, 227, 228, 229, 231, 232, 236, 240, 242, 246, 251, 256, 257, 259, 260, 262, 266, 268, 269, 270, 271, 274, 275, 276, 277, 279, 280, 283], "02": [7, 283], "nn": [7, 74, 138, 150, 175, 179, 186, 214, 228, 230, 274, 277, 278], "crossentropyloss": [7, 214, 228], "sgd": [7, 35, 214, 228, 270, 282], "lr": [7, 214, 216, 228], "0001": [7, 214, 228, 270], "learning_r": [7, 228, 270, 282], "callabl": [7, 82, 135, 169, 209, 210], "altern": [7, 150], "distil_loss": [7, 228], "mixedprecisionconfig": [7, 138, 228, 229], "mixedprecis": [7, 85, 228], "target": [7, 108, 111, 116, 154, 175, 211, 216, 228, 268, 278, 279, 280, 282], "convers": [7, 86, 185, 190, 191, 228, 229, 271, 273, 277], "fp16": [7, 126, 166, 271], "fallback": [7, 119, 120, 157, 159, 160, 218, 229, 252, 273, 280], "won": [7, 271, 274], "work": [7, 75, 112, 188, 191, 209, 210, 214, 244, 247, 255, 273, 274, 275, 277, 278], "tensor": [7, 28, 69, 72, 74, 107, 109, 119, 146, 159, 175, 179, 180, 186, 192, 209, 210, 211, 213, 231, 268, 271, 275, 278, 279, 280], "trace": [7, 74, 157, 186, 239, 280], "mix_precis": [7, 129, 228, 229], "converted_model": [7, 138, 228, 229], "exportconfig": 7, "opset_vers": [7, 73, 74, 218], "14": [7, 73, 74, 189, 218, 224, 264, 283], "input_nam": [7, 73, 74, 146, 218], "output_nam": [7, 73, 74, 146, 218], "dynamic_ax": [7, 74, 218], "common": [7, 26, 76, 86, 90, 91, 92, 172, 184, 209, 211, 215, 216, 218, 222, 224, 228, 271, 277], "export": [7, 76, 80, 133, 189, 221, 235, 250, 252, 278, 281], "select": [7, 12, 54, 175, 186, 187, 208, 223, 224, 249, 268, 271, 274, 278, 280], "opset": [7, 73, 74, 218], "version": [7, 73, 74, 129, 184, 186, 190, 209, 220, 224, 225, 228, 242, 244, 246, 247, 269, 277, 280, 281], "qlinear": [7, 14, 21, 56, 63, 84, 137, 190, 239], "ax": [7, 74], "inform": [7, 10, 11, 31, 33, 34, 42, 43, 107, 109, 110, 111, 113, 137, 180, 184, 185, 188, 189, 190, 191, 192, 193, 195, 199, 202, 205, 208, 209, 214, 220, 228, 230, 231, 244, 247, 250, 251, 254, 255, 257, 258, 262, 263, 268, 273, 274, 275, 277, 278, 282, 283, 284], "onnxqlinear2qdqconfig": 7, "onnxqlinear2qdq": 7, "torch2onnxconfig": [7, 218], "torch2onnx": [7, 71], "qdq_op_fp32_bia": 7, "qdq_op_int32_bia": 7, "qdq_op_fp32_bias_qdq": 7, "resnet50": [7, 189, 213, 216, 218, 229, 232, 236, 268, 271, 276, 283], "int8_onnx_config": [7, 218], "randn": [7, 218], "224": [7, 24, 66, 189, 211, 216, 218, 221, 228, 232, 251, 279, 282], "batch_siz": [7, 12, 13, 31, 44, 46, 50, 51, 52, 53, 54, 55, 74, 187, 210, 211, 216, 218, 222, 228, 232, 271], "q_model": [7, 86, 150, 186, 210, 211, 213, 216, 218, 221, 222, 227, 228, 230, 251, 252, 271, 272, 273, 274], "tf2onnxconfig": [7, 218], "tf2onnx": [7, 71], "axi": 7, "addit": [7, 169, 191, 192, 214, 243, 251, 257, 274, 275, 280], "keyword": 7, "argument": [7, 187, 213, 253, 254, 257, 260, 262, 263, 264, 274], "output_graph": 7, "nasconfig": [7, 88, 90, 187], "search_algorithm": [7, 89, 187], "dyna": [7, 89, 187, 223, 270], "na": [7, 76, 142, 223, 226, 283], "mxnet": [7, 14, 17, 21, 28, 49, 53, 56, 59, 63, 69, 75, 84, 112, 137, 138, 143, 150, 185, 189, 190, 191, 208, 210, 217, 220, 223, 228, 229, 230, 270, 280, 282], "kera": [7, 14, 21, 35, 56, 63, 141, 146, 191, 210, 216, 230, 239, 240], "pytorch": [7, 12, 14, 17, 21, 28, 30, 35, 37, 53, 54, 56, 59, 63, 69, 74, 75, 84, 85, 105, 107, 110, 112, 120, 137, 138, 147, 150, 160, 173, 180, 185, 186, 187, 189, 190, 191, 192, 208, 209, 210, 214, 215, 217, 220, 223, 224, 226, 228, 229, 230, 231, 232, 234, 237, 238, 239, 240, 249, 251, 260, 263, 264, 268, 269, 270, 274, 275, 277, 280, 282], "built": [8, 9, 12, 13, 18, 20, 22, 23, 24, 25, 28, 33, 35, 40, 41, 45, 48, 50, 54, 55, 60, 62, 64, 65, 66, 67, 69, 113, 137, 140, 148, 150, 169, 187, 190, 211, 216, 228, 242, 246, 266, 271, 276, 279, 280, 282], "multipl": [8, 9, 12, 13, 15, 16, 17, 18, 19, 23, 25, 28, 35, 40, 41, 45, 46, 48, 54, 55, 57, 58, 59, 60, 61, 65, 67, 69, 85, 138, 139, 140, 142, 148, 207, 211, 218, 228, 256, 259, 267, 268, 276, 277, 280], "sigopt": [9, 41, 269], "tpe": [9, 41], "provid": [10, 11, 28, 42, 43, 69, 75, 80, 99, 104, 112, 113, 133, 138, 150, 169, 173, 175, 187, 189, 190, 191, 192, 207, 210, 213, 215, 216, 217, 223, 224, 226, 227, 228, 229, 230, 232, 236, 240, 243, 249, 250, 251, 257, 258, 268, 270, 271, 274, 277, 278, 280, 281, 282, 283], "sigopttunestrategi": [10, 42], "q_dataload": [10, 11, 42, 43, 114, 116, 119, 120, 122, 151, 152, 154, 155, 159, 160, 162, 222, 280], "q_func": [10, 11, 42, 43, 114, 116, 119, 120, 122, 151, 152, 154, 155, 159, 160, 162, 190, 191, 228, 280], "eval_func": [10, 11, 42, 43, 113, 114, 116, 119, 120, 122, 138, 150, 151, 152, 154, 155, 159, 160, 162, 169, 186, 210, 211, 213, 214, 215, 216, 228, 252, 271, 272, 273, 274, 280, 282], "eval_metr": [10, 11, 138, 150, 151, 152, 154, 155, 159, 160, 162, 169, 227, 251, 271], "q_hook": [10, 11, 42, 43, 114, 116, 119, 120, 122, 151, 152, 154, 155, 159, 160, 162], "hpo": [10, 42, 268], "low": [10, 11, 15, 16, 42, 43, 57, 58, 75, 85, 112, 138, 190, 191, 207, 208, 211, 216, 228, 229, 254, 269, 271, 274, 277, 280], "initi": [10, 11, 12, 30, 42, 43, 51, 54, 108, 109, 126, 150, 166, 169, 187, 192, 211, 227, 248, 268, 271, 277, 280], "loader": [10, 11, 42, 43, 138, 150, 169, 175, 210, 271], "mandatori": [10, 11, 42, 43, 150, 228, 282], "It": [10, 11, 37, 42, 43, 82, 84, 91, 107, 112, 119, 135, 137, 138, 150, 155, 159, 169, 190, 191, 192, 208, 213, 214, 228, 231, 235, 238, 243, 249, 250, 251, 252, 254, 255, 257, 268, 271, 274, 275, 276, 280, 282], "yield": [10, 11, 31, 42, 43, 52, 116, 138, 150, 154, 169, 210, 271, 280], "dataset": [10, 11, 23, 31, 42, 43, 44, 46, 47, 50, 51, 52, 53, 65, 80, 81, 82, 84, 113, 133, 134, 135, 137, 138, 150, 169, 172, 187, 189, 190, 191, 210, 216, 221, 227, 228, 237, 251, 252, 262, 268, 271, 274, 275, 277, 280, 282, 283], "_": [10, 11, 42, 43, 150, 186, 187, 189, 190, 191, 208, 213, 214, 216, 218, 220, 228, 229, 230, 232, 238, 242, 244, 246, 247, 254, 257, 258, 266, 268, 271, 274, 275, 276, 277, 278, 280, 282], "depend": [10, 11, 29, 42, 43, 138, 150, 169, 185, 219, 220, 255, 270, 271, 280], "implement": [10, 11, 12, 14, 42, 43, 49, 52, 53, 54, 56, 77, 130, 138, 148, 150, 157, 169, 192, 210, 211, 227, 228, 240, 250, 268, 271, 274, 275, 278, 280, 282], "well": [10, 11, 42, 43, 138, 150, 169, 187, 189, 209, 211, 231, 268, 271, 275, 277, 282], "taken": [10, 11, 42, 43, 138, 150, 169, 271], "reserv": [10, 11, 42, 43], "abl": [10, 11, 42, 43, 138, 150, 169, 240, 249, 271], "pre": [10, 11, 12, 42, 43, 54, 138, 150, 169, 209, 211, 214, 215, 228, 237, 254, 268, 269, 271, 274, 278, 280], "through": [10, 11, 42, 43, 137, 138, 150, 189, 207, 220, 222, 223, 227, 235, 256, 266, 267, 268, 270, 271, 274], "tuner": [10, 11, 42, 43, 75, 112, 138, 150, 169, 271], "encapsul": [10, 11, 42, 43, 138, 150, 169, 230], "scalar": [10, 11, 42, 43, 138, 150, 169, 227, 271, 280], "pseudo": [10, 11, 42, 43, 150, 169, 274, 278], "code": [10, 11, 29, 42, 43, 86, 110, 113, 150, 169, 186, 189, 190, 191, 192, 211, 214, 215, 216, 222, 223, 225, 227, 232, 234, 236, 237, 238, 240, 243, 249, 253, 254, 256, 257, 258, 266, 267, 268, 269, 270, 271, 276, 277, 278, 279], "someth": [10, 11, 14, 42, 43, 56, 150, 169], "def": [10, 11, 42, 43, 150, 169, 186, 190, 209, 210, 211, 214, 215, 216, 227, 228, 271, 277, 278, 280], "fefin": [11, 43], "tpetunestrategi": [11, 43], "pytorchbertdataset": [12, 54], "task": [12, 19, 54, 61, 84, 137, 211, 214, 215, 218, 223, 227, 228, 252, 256, 259, 268, 272, 274, 277, 283], "model_typ": [12, 54, 180, 211], "transform": [12, 13, 14, 15, 16, 17, 19, 21, 23, 54, 55, 56, 57, 58, 59, 61, 63, 65, 186, 187, 189, 208, 211, 214, 215, 216, 217, 221, 226, 228, 232, 237, 238, 239, 240, 252, 260, 263, 264, 268, 269, 273, 274, 277, 278, 280, 282], "filter": [12, 13, 14, 15, 16, 17, 19, 23, 54, 55, 56, 57, 58, 59, 61, 65, 180, 192, 211, 223, 268, 278], "construct": [12, 15, 16, 19, 26, 31, 33, 34, 36, 54, 57, 58, 61, 137, 142, 146, 168, 172, 184, 191, 192, 211, 216, 268, 280], "tensordataset": [12, 54, 211], "full": [12, 13, 14, 54, 55, 56, 175, 180, 189, 208, 211, 213, 219, 225, 250, 255, 268, 274, 275], "repo": [12, 54, 183, 185, 211, 217, 242, 244, 246, 247, 284], "http": [12, 14, 54, 56, 77, 78, 80, 81, 82, 107, 109, 110, 130, 131, 133, 134, 135, 137, 150, 186, 211, 213, 221, 224, 225, 228, 238, 244, 247, 251, 253, 254, 255, 256, 257, 260, 262, 263, 264, 268, 275], "github": [12, 54, 77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 185, 189, 211, 213, 217, 224, 225, 228, 238, 244, 247, 251, 253, 254, 255, 256, 257, 260, 263, 264, 275], "com": [12, 54, 77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 184, 209, 211, 213, 221, 224, 225, 228, 232, 238, 251, 253, 254, 256, 257, 260, 263, 264, 275, 276, 283], "huggingfac": [12, 54, 175, 211, 217, 221, 231, 237, 238, 239, 240, 260, 261, 263, 264, 277, 283], "your": [12, 52, 54, 185, 189, 209, 210, 211, 213, 216, 225, 228, 232, 235, 236, 237, 242, 243, 244, 246, 247, 249, 251, 255, 257, 262, 263, 264, 268, 269, 276, 278, 280, 281], "todo": [12, 15, 54, 57, 80, 126, 133, 166], "easi": [12, 54, 112, 218, 228, 252, 256, 269, 271, 274, 276], "ad": [12, 54, 77, 116, 130, 154, 191, 192, 213, 229, 232, 237, 240, 244, 247, 257, 268, 274, 278], "load": [12, 27, 28, 54, 68, 69, 138, 146, 150, 179, 180, 191, 210, 242, 246, 250, 252, 270, 271, 272, 277], "arg": [12, 13, 14, 54, 55, 56, 107, 116, 154, 175, 176, 211, 216, 228, 231, 238, 268, 271, 274, 277, 278, 279], "classifi": [12, 54, 84, 137, 211, 214], "squad": [12, 28, 54, 69, 81, 82, 84, 134, 135, 137, 211, 227, 268, 279, 283], "distilbert": [12, 54, 211, 229, 269, 283], "xlnet": [12, 54, 211], "xlm": [12, 54, 211, 283], "condit": [12, 13, 14, 28, 54, 55, 56, 69, 115, 151, 153, 211, 225, 279, 280], "101": [12, 54, 84, 137, 227, 258, 277, 283], "2043": [12, 54], "2001": [12, 54], "onnxrtbertdataset": [12, 54], "data_dir": [12, 54, 211], "model_name_or_path": [12, 54, 211, 228, 237, 238, 253, 260, 263, 264, 272], "max_seq_length": [12, 28, 54, 69, 211, 279], "128": [12, 15, 16, 28, 54, 57, 58, 69, 211, 228, 271, 274, 279, 283], "do_lower_cas": [12, 27, 28, 54, 68, 69, 211, 279], "mrpc": [12, 54, 84, 137, 211, 227, 237, 260, 263, 264, 268, 280, 283], "dynamic_length": [12, 54, 211], "onnxrt": [12, 14, 21, 28, 54, 56, 63, 69, 84, 137, 178, 190, 213, 229, 251, 271, 283], "dir": [12, 54, 175, 179, 211, 219, 222], "path": [12, 13, 14, 28, 54, 55, 56, 69, 70, 73, 74, 75, 86, 87, 88, 90, 99, 104, 108, 110, 112, 113, 126, 138, 146, 150, 166, 175, 177, 180, 186, 187, 190, 211, 213, 216, 222, 227, 228, 229, 230, 235, 238, 249, 252, 254, 257, 262, 263, 264, 267, 274, 279, 282], "shortcut": [12, 54, 211], "token": [12, 25, 28, 54, 67, 69, 77, 78, 130, 131, 175, 189, 211, 227, 228, 251, 252, 274, 276, 277, 279, 280], "longer": [12, 28, 54, 69, 211, 279], "than": [12, 28, 54, 69, 180, 187, 189, 207, 211, 222, 231, 254, 262, 266, 267, 268, 271, 274, 276, 279, 280], "truncat": [12, 28, 54, 69, 211, 279], "shorter": [12, 28, 54, 69, 211, 279], "pad": [12, 28, 54, 69, 211, 279], "lowercas": [12, 54, 211], "fine": [12, 54, 209, 211, 235, 268, 269, 271], "choic": [12, 54, 190, 211, 227, 255, 277], "qqp": [12, 54, 211, 227, 283], "qnli": [12, 54, 211, 227, 283], "rte": [12, 54, 211, 227, 283], "st": [12, 54, 211, 227], "b": [12, 54, 180, 185, 208, 211, 227, 268, 274, 277, 280], "cola": [12, 54, 211, 227, 283], "mnli": [12, 54, 211, 227, 283], "wnli": [12, 54, 211, 227], "mobilebert": [12, 54, 211, 214], "roberta": [12, 54, 211, 283], "fix": [12, 54, 109, 210, 211, 236, 268, 271, 274, 280], "uncas": [12, 28, 54, 69, 211, 279, 283], "load_and_cache_exampl": [12, 54], "cach": [12, 54, 219, 271, 274], "helper": [12, 13, 14, 27, 54, 55, 56, 68, 72, 73, 74, 146, 178], "convert_examples_to_featur": [12, 28, 54, 69], "max_length": [12, 54], "label_list": [12, 54, 84, 137], "output_mod": [12, 54], "classif": [12, 28, 54, 69, 84, 110, 137, 214, 218, 227, 238, 252, 260, 263, 264, 268, 269], "pad_token": [12, 54], "pad_token_segment_id": [12, 54], "mask_padding_with_zero": [12, 54], "inputfeatur": [12, 28, 54, 69], "properti": [12, 54, 168, 225], "input_id": [12, 28, 54, 69, 228], "vocabulari": [12, 27, 28, 54, 68, 69, 279], "attention_mask": [12, 54, 228], "avoid": [12, 54, 186, 209, 278], "usual": [12, 54, 191, 213, 214, 254, 267, 268, 271, 272, 277], "NOT": [12, 54, 220], "token_type_id": [12, 54, 228], "segment": [12, 54, 78, 80, 131, 133, 185], "portion": [12, 54], "them": [12, 54, 186, 192, 210, 213, 218, 220, 222, 252, 255, 267, 268, 274, 280], "problem": [12, 54, 84, 137, 227, 229, 250], "regress": [12, 54, 185, 213], "seq_length": [12, 54], "tensorflowbertdataset": [12, 54], "root": [12, 13, 14, 17, 54, 55, 56, 59, 84, 137, 211, 216, 227, 228, 282], "label_fil": [12, 28, 54, 69, 211, 279], "tfrecord": [12, 13, 14, 54, 55, 56, 211], "guid": [12, 54, 186, 189, 209, 211, 214, 224, 232, 240, 249, 284], "parsedecodebert": [12, 54], "tensorflowmodelzoobertdataset": [12, 13, 54, 55], "pars": [12, 13, 24, 28, 54, 55, 66, 69, 191, 192, 279], "num_cor": [12, 13, 17, 54, 55, 59, 211], "28": [12, 13, 17, 54, 55, 59, 211, 283], "three": [12, 54, 115, 151, 153, 186, 190, 191, 208, 224, 229, 243, 257, 267, 271, 273, 276, 277, 278], "tf": [12, 13, 14, 28, 53, 54, 55, 56, 69, 144, 146, 209, 216, 224, 230, 269, 273, 279], "record": [12, 13, 14, 20, 30, 37, 54, 55, 56, 62, 180, 211, 254, 274, 276, 278, 280], "resiz": [12, 13, 24, 28, 54, 55, 66, 69, 211, 279], "coco": [13, 20, 55, 62, 80, 84, 133, 137, 227, 268], "parsedecodecoco": [13, 55], "cocorecorddataset": [13, 55], "interleav": [13, 55, 211], "parallel": [13, 55, 211, 228, 256, 259, 280], "cocoraw": [13, 55, 211], "img_dir": [13, 55, 211], "val2017": [13, 55, 211], "anno_dir": [13, 55, 211], "annot": [13, 55, 80, 133, 191, 192, 211, 227, 268, 280], "instances_val2017": [13, 55, 211], "json": [13, 28, 55, 69, 179, 211, 230, 250, 257, 258, 262, 263, 264, 274, 279], "arrang": [13, 14, 17, 55, 56, 59, 211, 268], "wai": [13, 14, 17, 55, 56, 59, 146, 187, 192, 210, 211, 213, 227, 228, 232, 235, 250, 251, 255, 256, 257, 267, 268, 271, 274, 277, 280, 282], "jpg": [13, 17, 19, 55, 59, 61, 189, 211], "imag": [13, 14, 17, 19, 24, 28, 55, 56, 59, 61, 66, 69, 80, 133, 189, 211, 216, 218, 268, 270, 277, 278, 279, 283], "coconpi": [13, 55, 211], "npy_dir": [13, 55, 211], "npy": [13, 55, 211], "tensorflowdataset": [14, 56], "pytorchdataset": [14, 56], "mxnetdataset": [14, 56], "onnxrtqldataset": [14, 56], "onnxrtitdataset": [14, 56], "IT": [14, 21, 56, 63, 269], "pytorchmxnetwrapdataset": [14, 56], "datafunc": [14, 56], "pytorchmxnetwrapfunct": [14, 28, 56, 69], "framework_dataset": [14, 56], "convent": [14, 56, 80, 133, 185, 214, 231], "imageclassifi": [14, 56], "choos": [14, 56, 175, 223, 237, 269, 275, 277, 280, 282], "tensorflow_itex": [14, 17, 19, 21, 56, 59, 61, 63, 210, 270], "onnxrt_qdq": [14, 21, 56, 63, 270], "onnxrt_qlinearop": [14, 21, 28, 56, 63, 69, 270], "onnxrt_integerop": [14, 21, 28, 56, 63, 69, 270], "pytorch_ipex": [14, 21, 56, 63, 228, 270, 282], "pytorch_fx": [14, 21, 56, 63, 228, 270], "dataset_registri": [14, 56], "dataset_typ": [14, 56], "dataset_format": [14, 56], "data_format": [14, 24, 56, 66], "eg": [14, 56, 211, 270], "raw_imag": [14, 56], "overwrit": [14, 56, 242, 246], "__getitem__": [14, 28, 52, 56, 69, 210, 211, 228], "__len__": [14, 52, 56, 211], "size": [14, 20, 24, 28, 46, 47, 53, 56, 62, 66, 69, 107, 146, 148, 180, 184, 191, 210, 211, 216, 219, 228, 231, 249, 250, 266, 268, 271, 272, 274, 277, 279, 282, 283], "iterabledataset": [14, 52, 56], "also": [14, 28, 53, 56, 69, 77, 130, 137, 148, 150, 185, 187, 190, 191, 192, 210, 213, 217, 221, 223, 227, 228, 232, 237, 242, 243, 246, 249, 250, 251, 254, 255, 266, 268, 269, 271, 273, 274, 277, 280], "__iter__": [14, 52, 56, 210, 211, 228], "over": [14, 56, 84, 137, 191, 217, 221, 223, 227, 240, 249, 255, 259, 268, 270, 277, 280], "download_url": [14, 56], "url": [14, 56, 185, 225, 260, 261, 268], "filenam": [14, 56, 180, 211, 255], "md5": [14, 56], "download": [14, 56, 211, 213, 224, 254, 260, 275], "address": [14, 56, 184, 209, 229, 251, 254, 257, 269], "gen_bar_updat": [14, 56], "progress": [14, 56, 243, 249, 251, 268, 271], "bar": [14, 56, 249, 269], "check_integr": [14, 56], "fpath": [14, 56], "check": [14, 56, 72, 108, 179, 180, 189, 213, 216, 224, 233, 235, 237, 244, 247, 248, 252, 255, 258, 259, 275], "checksum": [14, 56], "calculate_md5": [14, 56], "chunk_siz": [14, 56], "1024": [14, 56, 235], "cifar10": [14, 56, 211], "cifar100": [14, 56, 211], "databas": [14, 56, 257], "extract": [14, 56, 128, 168, 211], "otherwis": [14, 28, 56, 69, 180, 184, 191, 211, 244, 247, 270, 274, 279], "www": [14, 56, 211, 283], "c": [14, 56, 180, 211, 219, 224, 274, 280], "toronto": [14, 56, 211], "edu": [14, 56, 211], "kriz": [14, 56, 211], "cifar": [14, 56, 211, 283], "python": [14, 32, 56, 76, 129, 180, 182, 186, 189, 209, 211, 213, 216, 219, 224, 228, 234, 240, 243, 249, 253, 254, 256, 257, 259, 262, 264, 268, 269, 279], "tar": [14, 56, 211, 213, 244, 247], "gz": [14, 56, 211, 213, 244, 247], "manual": [14, 56, 211, 232, 238, 240, 243, 257, 262, 263, 264, 268], "subset": [14, 17, 56, 59, 211, 254], "internet": [14, 56, 211, 251], "put": [14, 56, 211, 214], "again": [14, 56, 211, 252, 254, 273], "pytorchcifar10": [14, 56], "mxnetcifar10": [14, 56], "tensorflowcifar10": [14, 56], "pytorchcifar100": [14, 56], "mxnetcifar100": [14, 56], "tensorflowcifar100": [14, 56], "mnist": [14, 56, 211, 216], "modifi": [14, 56, 168, 186, 192, 216, 220, 253, 254, 268, 282], "nation": [14, 56, 184], "institut": [14, 56], "standard": [14, 28, 56, 69, 185, 191, 209, 213, 218, 227, 279, 280], "technologi": [14, 56, 226, 228, 231], "fashionmnist": [14, 56, 211], "npz": [14, 56, 211], "idx1": [14, 56, 211], "ubyt": [14, 56, 211], "idx3": [14, 56, 211], "t10k": [14, 56, 211], "pytorchmnist": [14, 56], "mxnetmnist": [14, 56], "tensorflowmnist": [14, 56], "pytorchfashionmnist": [14, 56], "mxnetfashionmnist": [14, 56], "tensorflowfashionmnist": [14, 56], "imagefold": [14, 56, 211, 216, 228], "expect": [14, 56, 184, 185, 219, 226, 249, 271, 274, 280], "folder": [14, 19, 56, 61, 138, 150, 179, 211, 237, 242, 246, 255, 262, 263, 264, 274, 278], "subfold": [14, 56, 252], "repres": [14, 19, 56, 61, 80, 82, 84, 133, 135, 137, 184, 192, 208, 211, 218, 257, 268, 271, 272, 280], "belong": [14, 56, 142, 271], "class_1": [14, 56, 211], "xxx": [14, 56, 211, 228], "png": [14, 56, 211], "xxy": [14, 56, 211], "xxz": [14, 56, 211], "class_n": [14, 56, 211], "123": [14, 56, 211, 279], "nsdf3": [14, 56, 211], "asd932_": [14, 56, 211], "categori": [14, 56, 79, 132, 207, 211, 239], "mxnetimagefold": [14, 56], "tensorflowtfrecorddataset": [14, 56], "tensorflowimagerecord": [14, 56], "imagenet": [14, 17, 24, 56, 59, 66, 187, 213, 228, 238, 254, 268, 278, 279, 282, 283], "000": [14, 56, 189, 211], "001": [14, 56, 211, 216, 277, 282], "099": [14, 56, 211], "follow": [14, 56, 77, 80, 130, 133, 184, 185, 186, 187, 189, 190, 191, 192, 209, 210, 211, 214, 215, 216, 220, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 242, 246, 251, 253, 254, 257, 262, 267, 268, 270, 271, 274, 277, 278, 280], "tensorflowvocrecord": [14, 56], "pascal": [14, 56], "voc": [14, 56, 84, 137], "2012": [14, 56], "val": [14, 17, 56, 59, 108, 213, 228, 254], "00000": [14, 56], "00004": [14, 56], "00001": [14, 56], "00003": [14, 56], "dummi": [15, 16, 57, 58, 84, 137, 189, 211, 221, 227, 228, 251], "dummydataset": [15, 16, 57, 58], "shape": [15, 16, 24, 28, 57, 58, 66, 69, 80, 133, 189, 211, 220, 221, 228, 251, 252, 274, 277, 279], "high": [15, 16, 57, 58, 211, 213, 224, 254, 269, 280], "127": [15, 16, 57, 58, 211, 271, 277], "float32": [15, 16, 28, 57, 58, 69, 80, 133, 175, 190, 207, 211, 228, 271, 274, 277, 279], "rang": [15, 16, 28, 57, 58, 69, 169, 175, 189, 190, 192, 208, 211, 213, 214, 215, 216, 228, 231, 252, 254, 267, 268, 271, 274, 277, 279], "stand_norm": [15, 16, 57, 58, 211], "real": [15, 31, 57, 191, 208, 216, 251, 258, 269, 271], "dummy_v2": [16, 58, 211], "sparse_dummy_v2": [16, 58, 211], "input_shap": [16, 58, 211], "label_shap": [16, 58, 211], "sparsedummydataset": [16, 58], "dense_shap": [16, 58, 211], "sparse_ratio": [16, 58, 211], "imagenetraw": [17, 59, 211], "data_path": [17, 59, 211], "image_list": [17, 59, 211], "img1": [17, 59, 211], "img2": [17, 59, 211], "imgx": [17, 59, 211], "read": [17, 28, 59, 69, 108, 211, 273, 276], "val_map": [17, 59, 211], "txt": [17, 59, 211, 213, 224, 251, 253, 254, 256, 257], "pytorchimagenetraw": [17, 59], "mxnetimagenetraw": [17, 59], "tensorflowimagenetraw": [17, 59], "inteltensorflow": [17, 19, 59, 61, 224], "tensorflowimagenetdataset": [17, 59], "onnxrtimagenetdataset": [17, 59], "class": [18, 60, 91, 138, 150, 186, 187, 191, 209, 210, 211, 214, 227, 228, 240, 266, 267, 271, 275, 278, 280, 282], "bert_dataset": [18, 60], "coco_dataset": [18, 60], "dummy_dataset": [18, 60], "dummy_dataset_v2": [18, 60], "imagenet_dataset": [18, 60], "style_transfer_dataset": [18, 60], "style": [19, 47, 61, 209, 211, 222], "transfer": [19, 61, 70, 211, 214, 215, 228, 277], "styletransferdataset": [19, 61], "content_fold": [19, 61, 211], "style_fold": [19, 61, 211], "crop_ratio": [19, 61, 211], "resize_shap": [19, 61, 211], "256": [19, 24, 61, 66, 211, 216, 228, 279], "image_format": [19, 61, 211], "holder": [19, 61, 211], "labelbalancecocorecordfilt": [20, 62], "balanc": [20, 62, 231, 274, 277], "labelbalancecocorawfilt": [20, 62], "tensorflowfilt": [21, 63], "onnxrtqlfilt": [21, 63], "mode": [21, 63, 80, 126, 133, 146, 166, 177, 179, 180, 190, 191, 213, 223, 242, 246, 254, 255, 271, 273, 274, 280], "onnxrtitfilt": [21, 63], "pytorchfilt": [21, 63], "mxnetfilt": [21, 63], "filter_registri": [21, 63], "filter_typ": [21, 63], "__call__": [21, 63], "write": [21, 63, 180, 216, 222, 228, 232, 278], "coco_filt": [22, 64], "quantizedinput": [24, 66, 279], "uint8": [24, 66, 80, 128, 133, 168, 190, 211, 220, 270, 271, 279, 282], "point": [24, 66, 81, 82, 91, 116, 134, 135, 154, 180, 227, 231, 249, 254, 255, 271, 274, 277, 279, 280], "labelshift": [24, 66, 279], "label_shift": [24, 66, 279], "parsedecodeimagenet": [24, 66, 279], "proto": [24, 28, 66, 69, 279], "parsedecodeimagenettransform": [24, 66], "decod": [24, 66, 77, 130, 227, 279], "v1": [24, 66, 81, 82, 84, 134, 135, 137, 146, 216, 218, 219, 227, 230, 253, 268, 275, 276, 277, 283], "tensorflowtransposelastchannel": 24, "transpos": [24, 28, 69, 73, 107, 274, 279], "nhwc": 24, "nchw": 24, "tensorflowshiftrescal": 24, "rescal": [24, 28, 69, 279], "tensorflowresizecropimagenettransform": [24, 66], "height": [24, 28, 66, 69, 107, 216, 279, 282], "width": [24, 28, 66, 69, 107, 208, 216, 268, 271, 279, 282], "random_crop": [24, 66, 279], "resize_sid": [24, 66, 279], "resize_method": [24, 66], "bilinear": [24, 28, 66, 69, 279], "random_flip_left_right": [24, 66, 279], "mean_valu": [24, 66, 279], "channels_last": [24, 66, 232], "subpixel": [24, 66], "rgb": [24, 66], "seri": [24, 66, 189, 224, 228, 279], "applic": [24, 66, 192, 218, 232, 249, 251, 257, 258, 262, 263, 269, 274, 277, 278, 279, 281], "result": [24, 28, 66, 69, 77, 80, 81, 82, 84, 130, 133, 134, 135, 137, 150, 157, 169, 179, 180, 184, 187, 189, 210, 213, 214, 216, 223, 225, 227, 228, 237, 238, 249, 250, 253, 257, 258, 259, 260, 266, 268, 269, 271, 274, 276, 277, 278, 279, 280, 281, 283], "crop": [24, 28, 66, 69, 211, 279], "flip": [24, 28, 66, 69, 279], "left": [24, 28, 66, 69, 243, 249, 277, 279], "right": [24, 66, 80, 133, 184, 185, 186, 249, 255, 277, 279], "std": [24, 28, 66, 69, 228, 279], "bilinearimagenettransform": [24, 66], "central_fract": [24, 66, 279], "875": [24, 66, 279], "fraction": [24, 66, 279], "onnxbilinearimagenettransform": [24, 66], "onnxresizecropimagenettransform": [24, 66], "std_valu": [24, 66], "229": [24, 66, 228], "225": [24, 66, 228, 283], "resizewithaspectratio": [24, 66], "87": [24, 66, 283], "inter_pol": [24, 66], "cv2": [24, 66], "inter_area": [24, 66], "aspect": [24, 28, 66, 69, 279], "imagenet_transform": [25, 67], "postprocess_cl": [26, 36, 228], "user_postprocess": [26, 36], "just": [26, 28, 31, 33, 34, 36, 44, 69, 148, 187, 228, 239, 243, 249, 257, 267, 271, 277, 279, 280], "collect": [26, 28, 31, 33, 34, 36, 69, 82, 84, 135, 137, 170, 180, 191, 271, 278, 280], "info": [26, 31, 36, 107, 142, 175, 176, 180, 186, 209, 213, 230, 259, 264], "convert_to_unicod": [27, 68], "text": [27, 28, 68, 69, 77, 82, 110, 130, 135, 218, 225, 231, 238, 260, 263, 264, 268, 269, 274, 277, 279, 283], "unicod": [27, 68], "assum": [27, 68, 80, 91, 133, 190, 220, 249], "utf": [27, 68], "load_vocab": [27, 68], "vocab_fil": [27, 28, 68, 69, 279], "convert_by_vocab": [27, 68], "vocab": [27, 68], "whitespace_token": [27, 68], "whitespac": [27, 68, 82, 135], "clean": [27, 68, 228], "split": [27, 28, 68, 69, 186, 272, 274, 277, 279], "piec": [27, 68, 77, 130, 227, 274], "fulltoken": [27, 68], "tokenzi": [27, 68], "basictoken": [27, 68], "punctuat": [27, 68, 77, 82, 130, 135], "lower": [27, 28, 68, 69, 82, 135, 155, 215, 231, 268, 269, 271, 277, 279, 280], "wordpiecetoken": [27, 68], "unk_token": [27, 68], "unk": [27, 68], "max_input_chars_per_word": [27, 68], "200": [27, 68, 186, 258, 280], "wordpiec": [27, 28, 68, 69, 279], "concat_gener": [28, 69], "inc": [28, 69, 184, 189, 191, 226, 232, 239, 249, 251, 256, 269, 270, 275, 280], "abstract": [28, 69, 70, 75, 112, 190, 192, 222], "own": [28, 52, 69, 148, 187, 191, 210, 211, 223, 227, 251, 255, 266, 274, 276, 281], "inherit": [28, 30, 38, 51, 69, 109, 111, 187, 190, 191, 211], "tensorflowtransform": [28, 69], "mxnettransform": [28, 69], "pytorchtransform": [28, 69], "onnxrtqltransform": [28, 69], "onnxrtittransform": [28, 69], "transform_registri": [28, 69], "transform_typ": [28, 69], "basetransform": [28, 69], "tensorflowwrapfunct": [28, 69], "transform_func": [28, 69], "wrapper": [28, 30, 31, 33, 34, 53, 69, 80, 84, 133, 137, 142, 146, 273], "pytorchmxnettransform": [28, 69], "get_torchvision_map": [28, 69], "interpol": [28, 69, 227, 268, 279], "torchvis": [28, 69, 189, 217, 221, 232, 238, 252], "composetransform": [28, 69], "transform_list": [28, 69, 279], "compos": [28, 69, 172, 279], "sever": [28, 69, 111, 113, 187, 213, 214, 215, 223, 228, 229, 231, 242, 246, 257, 268, 270, 272, 277, 279, 280, 282], "croptoboundingbox": [28, 69, 279], "offset_height": [28, 69, 279], "offset_width": [28, 69, 279], "target_height": [28, 69, 279], "target_width": [28, 69, 279], "box": [28, 69, 80, 84, 133, 137, 186, 227, 232, 243, 249, 278, 279, 280], "vertic": [28, 69, 107, 279], "coordin": [28, 69, 116, 154, 256, 279, 280], "top": [28, 69, 75, 84, 99, 104, 112, 137, 185, 227, 249, 252, 254, 279], "corner": [28, 69, 185, 190, 192, 279], "horizont": [28, 69, 279], "mxnetcroptoboundingbox": [28, 69], "onnxrtcroptoboundingbox": [28, 69], "tensorflowcroptoboundingbox": [28, 69], "resizewithratio": [28, 69, 279], "min_dim": [28, 69, 279], "800": [28, 69, 279], "max_dim": [28, 69, 279], "1365": [28, 69, 279], "constant_valu": [28, 69], "np": [28, 69, 116, 154, 216, 259, 277, 279, 280], "arrai": [28, 69, 80, 91, 133, 180, 279], "smaller": [28, 69, 214, 228, 231, 268, 279], "dimens": [28, 46, 69, 211, 214, 274, 279], "ensur": [28, 69, 116, 154, 216, 271, 279], "longest": [28, 69, 279], "side": [28, 69, 211, 243, 279], "doesn": [28, 69, 190, 216, 228, 229, 250, 282], "exce": [28, 69, 274, 279], "zero": [28, 69, 109, 180, 189, 231, 254, 268, 271, 274, 277, 279, 280], "so": [28, 69, 168, 186, 190, 213, 219, 223, 229, 231, 235, 237, 253, 254, 255, 271, 273, 274, 277, 278, 279, 281], "tensorflowresizewithratio": [28, 69], "perm": [28, 69, 279], "permut": [28, 69, 279], "tensorflowtranspos": [28, 69], "mxnettranspos": [28, 69], "pytorchtranspos": [28, 69], "randomverticalflip": [28, 69, 279], "given": [28, 69, 80, 133, 150, 187, 192, 268, 277, 279], "randomli": [28, 69, 92, 116, 154, 187, 277, 279, 280], "tensorflowrandomverticalflip": [28, 69], "randomhorizontalflip": [28, 69, 228, 279], "tensorflowrandomhorizontalflip": [28, 69], "toarrai": [28, 69, 279], "pil": [28, 69, 279], "ndarrai": [28, 69, 170, 219, 279], "numpi": [28, 69, 80, 91, 133, 219, 277, 279], "casttftransform": [28, 69], "castonnxtransform": [28, 69], "castpytorchtransform": [28, 69], "centercroptftransform": [28, 69], "center": [28, 69, 188, 189, 224, 279, 280], "paddedcentercroptransform": [28, 69], "crop_pad": [28, 69], "resizetftransform": [28, 69], "nearest": [28, 69, 274, 279], "bicub": [28, 69, 279], "resizepytorchtransform": [28, 69], "randomcroptftransform": [28, 69], "randomresizedcroppytorchtransform": [28, 69], "08": [28, 69, 226, 279, 283], "randomresizedcropmxnettransform": [28, 69], "randomresizedcroptftransform": [28, 69], "normalizetftransform": [28, 69], "normal": [28, 69, 82, 135, 228, 258, 266, 274, 277, 279], "deviat": [28, 69, 213, 279], "broadcast": [28, 69, 216, 279], "rescalekeraspretraintransform": [28, 69], "rescaletftransform": [28, 69], "rescaletransform": [28, 69], "alignimagechanneltransform": [28, 69], "dim": [28, 69, 277, 279], "align": [28, 69, 184, 274, 279], "w": [28, 69, 268, 277, 279], "must": [28, 69, 80, 133, 185, 186, 191, 207, 210, 224, 271, 279], "pytorchalignimagechannel": [28, 69], "tondarraytransform": [28, 69], "resizemxnettransform": [28, 69], "resizetransform": [28, 69], "cropresizetftransform": [28, 69], "boundari": [28, 69, 279], "area": [28, 69, 80, 133, 227, 231, 279], "pytorchcropresizetransform": [28, 69], "mxnetcropresizetransform": [28, 69], "cropresizetransform": [28, 69], "centercroptransform": [28, 69], "mxnetnormalizetransform": [28, 69], "pytorchnormalizetransform": [28, 69], "normalizetransform": [28, 69], "randomcroptransform": [28, 69], "randomresizedcroptransform": [28, 69], "get_final_text": [28, 69], "pred_text": [28, 69], "orig_text": [28, 69], "project": [28, 69, 183, 184, 185, 255, 269, 276, 280, 284], "predict": [28, 33, 69, 77, 81, 82, 84, 130, 134, 135, 137, 150, 187, 214, 227, 240, 274, 277, 278, 279], "back": [28, 34, 69, 213, 249, 255], "squadexampl": [28, 69], "qas_id": [28, 69], "question_text": [28, 69], "doc_token": [28, 69], "orig_answer_text": [28, 69], "start_posit": [28, 69], "end_posit": [28, 69], "is_imposs": [28, 69], "simpl": [28, 69, 224, 228, 268, 276, 277, 280], "without": [28, 69, 109, 128, 168, 184, 214, 216, 228, 231, 240, 251, 254, 268, 269, 270, 280, 281], "answer": [28, 69, 81, 82, 134, 135, 184, 254, 268, 279, 283], "posit": [28, 69, 184, 227, 232, 257, 262, 263, 264], "unique_id": [28, 69], "example_index": [28, 69], "doc_span_index": [28, 69], "token_to_orig_map": [28, 69], "token_is_max_context": [28, 69], "input_mask": [28, 69, 228], "segment_id": [28, 69, 228], "read_squad_exampl": [28, 69], "input_fil": [28, 69], "doc_strid": [28, 69, 279], "max_query_length": [28, 69, 279], "output_fn": [28, 69], "inputbatch": [28, 69], "collecttransform": [28, 69], "10833": [28, 69], "tfsquadv1posttransform": [28, 69], "n_best_siz": [28, 69, 279], "20": [28, 69, 254, 257, 262, 263, 264, 268, 279, 282, 283], "384": [28, 69, 279], "64": [28, 69, 187, 226, 274, 277, 279, 283], "max_answer_length": [28, 69, 279], "30": [28, 69, 217, 221, 223, 279, 283], "total": [28, 69, 84, 109, 137, 211, 213, 268, 274, 279, 283], "best": [28, 69, 70, 75, 112, 119, 159, 184, 187, 189, 209, 224, 232, 238, 249, 255, 266, 271, 274, 277, 279, 280], "nbest_predict": [28, 69, 279], "question": [28, 69, 81, 82, 134, 135, 184, 185, 189, 190, 224, 232, 256, 268, 277, 279, 283], "becaus": [28, 69, 107, 186, 254, 271, 277, 279, 280], "anoth": [28, 69, 77, 86, 130, 180, 213, 214, 242, 246, 279, 280], "up": [28, 69, 108, 189, 216, 217, 220, 223, 240, 244, 247, 249, 268, 269, 270, 271, 276, 279, 280, 282], "long": [28, 69, 209, 219, 274, 279], "document": [28, 69, 191, 192, 197, 216, 226, 229, 234, 244, 247, 248, 255, 256, 258, 268, 275, 279, 281], "chunk": [28, 69, 279], "stride": [28, 69, 279], "tfmodelzoocollecttransform": [28, 69], "zoo": [28, 53, 69, 189, 217, 221, 283], "tfsquadv1modelzooposttransform": [28, 69], "squadv1": [28, 69, 279], "see": [28, 69, 77, 130, 184, 185, 186, 188, 209, 225, 228, 242, 243, 246, 249, 250, 254, 255, 274, 277, 278, 280], "parsedecodevoctransform": [28, 69], "measur": [29, 138, 174, 187, 190, 207, 213, 214, 227, 228, 274, 278, 280], "conf_fname_or_obj": [29, 38, 70, 75, 85, 86, 87, 88, 90, 99, 104, 112], "thei": [29, 184, 209, 214, 220, 228, 237, 252, 255, 266], "ha": [29, 77, 107, 109, 130, 185, 187, 190, 191, 192, 210, 218, 223, 228, 229, 235, 249, 254, 255, 257, 260, 268, 270, 271, 273, 276, 277, 280], "possibl": [29, 213, 251, 267, 268, 272, 273, 280], "unnecessari": [29, 228], "critet": 30, "tensorflowcrossentropyloss": 30, "pytorchcrossentropyloss": 30, "tensorflowknowledgedistillationloss": 30, "pytorchknowledgedistillationloss": [30, 228], "pytorchintermediatelayersknowledgedistillationloss": 30, "tensorflowcriterion": 30, "pytorchcriterion": 30, "integr": [30, 190, 228, 250, 251, 256, 274], "criterion_registri": 30, "criterion_typ": 30, "registry_criterion": 30, "knowledgedistillationframework": 30, "knowledgedistillationloss": [30, 228, 282], "pytorchknowledgedistillationlosswrapp": 30, "param_dict": [30, 35], "wrap": [30, 80, 133, 186, 216, 244, 247], "tensorflowknowledgedistillationlossextern": 30, "intermediatelayersknowledgedistillationloss": 30, "pytorchintermediatelayersknowledgedistillationlosswrapp": 30, "selfknowledgedistillationloss": 30, "selfknowledg": 30, "collate_fn": [31, 44, 46, 47, 50, 51, 53, 210, 211], "last_batch": [31, 44, 46, 50, 51, 53, 210], "rollov": [31, 44, 46, 50, 51, 53, 210], "sampler": [31, 44, 46, 48, 50, 51, 53, 125, 165, 210, 216], "batch_sampl": [31, 44, 46, 50, 51, 53, 210], "num_work": [31, 44, 46, 50, 51, 53, 210, 228, 271], "pin_memori": [31, 44, 46, 50, 51, 53, 210], "shuffl": [31, 44, 46, 50, 51, 53, 210, 228, 271], "batch": [31, 44, 46, 47, 52, 53, 169, 210, 214, 215, 228, 267, 268, 271, 277, 279, 280, 283], "setter": 31, "calib_dataload": [31, 113, 150, 186, 189, 210, 211, 213, 221, 222, 227, 228, 251, 252, 271, 272, 273, 274], "reason": [31, 184, 191, 210, 254, 274, 278, 280], "have": [31, 52, 77, 80, 107, 109, 130, 133, 137, 150, 168, 184, 185, 191, 192, 209, 210, 211, 213, 216, 220, 225, 227, 228, 229, 231, 232, 249, 252, 255, 257, 262, 263, 264, 266, 268, 271, 272, 274, 277, 280, 281], "know": [31, 209, 216, 275], "known": [31, 116, 154, 228, 231, 268, 271, 278, 280], "intel": [32, 35, 71, 76, 83, 84, 107, 110, 118, 124, 129, 136, 137, 149, 150, 158, 164, 182, 184, 185, 187, 188, 190, 191, 192, 208, 211, 212, 214, 215, 217, 218, 220, 221, 225, 226, 229, 230, 232, 237, 239, 240, 251, 252, 253, 254, 256, 257, 266, 267, 268, 269, 271, 273, 274, 275, 277, 278, 280, 281, 282, 283], "open": [32, 76, 129, 172, 182, 184, 189, 218, 219, 228, 244, 247, 250, 251, 255, 256, 257, 269], "librari": [32, 76, 129, 182, 189, 224, 228, 229, 234, 243, 249, 269, 271], "torch_util": [32, 189, 272, 277], "metric_cl": [33, 137, 150, 228], "user_metr": [33, 137, 150], "alwai": [33, 80, 133, 137, 150, 213, 227, 228, 254, 274], "recommend": [33, 137, 189, 190, 211, 220, 240, 243, 248, 250, 268, 270, 280], "design": [33, 38, 53, 137, 155, 187, 189, 228, 237, 240, 268, 271, 281], "set_backend": 34, "tensorflowoptim": 35, "onc": [35, 111, 115, 151, 153, 191, 192, 210, 249, 255, 268, 269, 280, 283], "pytorchoptim": 35, "main": [35, 110, 186, 210, 213, 216, 228, 236, 238, 250, 259, 268, 271, 274], "entri": [35, 75, 113, 180, 209, 225], "optimizer_registri": 35, "optimizer_typ": 35, "cross": [35, 84, 137, 222, 280], "tensorflowsgd": 35, "tensorflowadamw": 35, "tensorflow_addon": 35, "adamw": 35, "pytorchsgd": 35, "record_output": 37, "output_process": 37, "help": [37, 86, 209, 226, 230, 232, 238, 249, 257, 262, 263, 264, 274, 280, 281], "get_activ": 37, "hook": [37, 38, 99, 104, 172, 214, 215, 228, 268, 277, 278], "mainli": [38, 111, 189, 228, 268, 271], "shot": [38, 109, 111, 187, 223, 228, 268, 269, 274], "appli": [38, 78, 131, 184, 191, 192, 228, 231, 232, 234, 240, 249, 253, 254, 259, 267, 268, 271, 273, 276, 277, 280, 281, 282], "api": [39, 75, 80, 112, 125, 126, 133, 137, 150, 165, 166, 180, 186, 189, 193, 195, 199, 202, 205, 213, 218, 223, 224, 228, 234, 238, 239, 240, 256, 257, 261, 275, 276, 280, 284], "basedatalod": 44, "basedataload": [44, 49, 51], "_generate_dataload": 44, "default_col": 46, "merg": [46, 126, 166, 244, 247, 278, 280], "outer": 46, "defaultdataload": [46, 53], "definit": [47, 52], "drop_last": [47, 52], "iterablefetch": 47, "next": [47, 187, 191, 192, 210, 270, 274, 280], "indexfetch": 47, "base_dataload": 48, "default_dataload": 48, "fetcher": 48, "mxnet_dataload": 48, "onnxrt_dataload": 48, "pytorch_dataload": 48, "tensorflow_dataload": 48, "mxnetdataload": 49, "onnxrtbertdataload": 50, "variant": 50, "onnxrtdataload": 50, "pytorchdataload": 51, "data_sourc": [52, 172], "matter": [52, 273], "iterablesampl": 52, "squential": 52, "clear": [52, 190, 220, 227, 228], "what": [52, 137, 150, 169, 184, 269], "try": [52, 146, 186, 189, 213, 252, 268, 271, 277, 280], "indexdataset": 52, "intern": [52, 126, 166, 210, 211, 227, 268], "element": [52, 80, 107, 133, 180, 211, 223, 227, 231, 268, 274, 277], "retriev": [52, 268], "act": [52, 184], "placehold": [52, 209], "sequentialsampl": 52, "sequenti": [52, 113, 115, 151, 153, 280], "batchsampl": 52, "tfdatadataload": 53, "tensorflow1": 53, "coupl": 53, "graph": [53, 75, 139, 146, 186, 190, 211, 214, 216, 222, 230, 232, 251, 254, 271, 272, 273, 278], "feed_dict": 53, "session": [53, 146, 228, 278], "satisfi": [53, 213, 224, 255], "usag": [53, 80, 86, 113, 133, 191, 211, 216, 217, 232, 240, 251, 257, 262, 263, 264, 266, 270, 274, 279], "feed": [53, 214, 268], "tf1": [53, 230], "although": [53, 276], "obj": [53, 70, 75, 86, 87, 88, 90, 99, 104, 108, 112, 138, 148, 150, 169, 172, 180], "tensorflowbertdataload": 53, "tensorflowmodelzoobertdataload": 53, "tensorflowdataload": 53, "tensorflowimagefold": 56, "deriv": [70, 107, 109, 111], "compon": [70, 76, 113, 186, 209, 213, 216, 224, 225, 232, 249, 257, 267, 268], "pipelin": [70, 87, 88, 113, 185, 215, 228, 267], "distillation_conf": 70, "relat": [70, 80, 99, 104, 107, 133, 168, 172, 192, 232, 256, 257, 268, 274, 282], "_epoch_ran": 70, "epoch": [70, 109, 169, 210, 214, 215, 216, 228, 267, 268, 282], "ran": 70, "eval_frequ": 70, "term": [70, 185, 208, 214, 225, 227, 266, 267, 280], "best_scor": 70, "best_model": [70, 179, 274], "found": [70, 189, 209, 214, 226, 229, 237, 254, 258, 277, 280, 283], "qlinear2qdq": 71, "qlinearop": [72, 213, 223, 240, 271, 283], "check_model": 72, "modelproto": [72, 138, 230], "onnx_qlinear_to_qdq": 72, "input_name_to_nod": 72, "destin": [72, 86], "node": [72, 74, 146, 190, 213, 216, 252, 256, 259, 262, 263, 264, 272, 278, 280, 283], "tf_to_fp32_onnx": 73, "graph_def": [73, 138, 146, 150], "save_path": [73, 74, 190, 230], "inputs_as_nchw": 73, "tool": [73, 180, 189, 190, 228, 242, 246, 252, 255, 256, 257, 268, 269, 271], "tf_to_int8_onnx": 73, "int8_model": [73, 74, 190], "get_node_map": 74, "fp32_model": [74, 180, 190, 272, 274], "fp32_onnx_path": 74, "module_node_map": 74, "get_quantizable_onnx_op": 74, "quantize_nod": 74, "dynamic_quant_export": 74, "pt_fp32_model": 74, "pt_int8_model": 74, "q_config": [74, 190], "weight_typ": 74, "s8": 74, "static_quant_export": 74, "_quantiz": 74, "torch_to_fp32_onnx": 74, "do_constant_fold": 74, "verbos": [74, 116, 154], "constant": [74, 116, 124, 154, 164, 173, 209, 210, 220, 252, 279], "fold": [74, 220, 274, 277], "torch_to_int8_onnx": 74, "infer": [75, 112, 146, 148, 150, 169, 189, 190, 191, 208, 214, 215, 228, 229, 249, 266, 268, 269, 271, 274, 277, 278, 280], "achiev": [75, 112, 218, 226, 228, 252, 267, 268, 269, 271, 277, 278, 280], "within": [75, 80, 112, 133, 146, 184, 186, 192, 208, 229, 242, 246, 249, 257, 268, 269, 274, 277, 280], "across": [75, 85, 112, 138, 212, 228, 231, 256, 259, 268, 272, 277, 280], "variou": [75, 85, 112, 138, 192, 223, 231, 232, 259, 268, 270, 272], "dl": [75, 85, 99, 104, 112, 138, 213, 222, 236, 249, 269, 283], "bring": [75, 112, 243, 256, 277], "unifi": [75, 112, 190, 191, 192, 210, 222, 223, 227, 228, 230], "vari": [75, 99, 104, 112, 254, 268, 277, 283], "roc": [75, 84, 99, 104, 112, 137], "memori": [75, 99, 104, 112, 148, 180, 208, 210, 215, 228, 229, 231, 232, 266, 268, 271, 272, 274, 277, 280, 283], "flexibl": [75, 99, 104, 112, 189, 214, 256, 268, 274], "interfac": [75, 99, 104, 112, 113, 172, 223, 228, 240, 258, 271, 275], "via": [75, 99, 104, 112, 184, 189, 216, 223, 228, 232, 249, 268, 269], "graph_optimization_conf": 75, "popular": [76, 129, 182, 189, 190, 191, 208, 214, 217, 218, 221, 226, 228, 268, 271, 274, 280, 281], "compress": [76, 99, 104, 129, 148, 169, 175, 182, 189, 197, 214, 223, 228, 249, 251, 266, 267, 268, 269, 271, 277, 281, 283], "techniqu": [76, 129, 182, 189, 223, 228, 232, 251, 267, 268, 269, 270, 271, 281, 282, 283], "contrib": [76, 129], "pruner_legaci": 76, "pruning_recip": 76, "pytorch_prun": 76, "graph_optim": 76, "mixed_precis": [76, 138, 228], "model_convers": 76, "pruning_v2": 76, "script": [77, 78, 81, 82, 130, 131, 134, 135, 185, 189, 216, 223, 232, 236, 239, 240, 243, 260, 262, 269], "unicoderegex": [77, 130], "hoc": [77, 130], "hack": [77, 130], "recogn": [77, 130, 280], "symbol": [77, 130, 138, 150, 186, 230], "nondigit_punct_r": [77, 130], "compil": [77, 130, 228], "regular": [77, 108, 130], "express": [77, 130, 184], "preced": [77, 130, 277, 280], "digit": [77, 130, 180, 269], "punct_nondigit_r": [77, 130], "symbol_r": [77, 130], "bleu_token": [77, 130], "offici": [77, 81, 82, 130, 134, 135, 184, 277], "mose": [77, 130], "smt": [77, 130], "mosesdecod": [77, 130], "blob": [77, 78, 81, 82, 107, 130, 131, 134, 135, 137, 150, 228, 238, 260, 263, 264], "master": [77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 228, 280], "mteval": [77, 130], "v14": [77, 130], "pl": [77, 130], "l954": [77, 130], "l983": [77, 130], "comput": [77, 78, 81, 82, 84, 130, 131, 134, 135, 137, 169, 180, 208, 210, 215, 218, 227, 228, 229, 231, 232, 243, 252, 268, 269, 271, 274, 277, 280], "bilingu": [77, 130], "understudi": [77, 130], "qualiti": [77, 130, 209], "been": [77, 107, 109, 130, 187, 192, 209, 214, 228, 229, 249, 274, 277], "machin": [77, 130, 218, 224, 235, 249, 251, 257, 269, 277, 278], "translat": [77, 78, 130, 131, 231, 268, 280], "natur": [77, 130, 218], "approxim": [77, 78, 130, 131, 191, 227, 274], "glue": [77, 84, 130, 137, 211, 227, 228, 238], "word": [77, 130, 209, 227, 268, 274, 283], "ngram": [77, 130, 227], "order": [77, 78, 113, 116, 119, 128, 130, 131, 154, 159, 168, 186, 213, 227, 252, 270, 274, 277, 278, 280], "breviti": [77, 78, 130, 131, 227], "penalti": [77, 78, 130, 131, 227], "doe": [77, 130, 168, 209, 210, 211, 227, 228, 274, 275, 279], "beam": [77, 130, 227], "bleu": [78, 83, 131, 136, 227, 268], "tensor2tensor": [78, 131], "bleu_hook": [78, 131], "compute_bleu": [78, 131], "reference_corpu": [78, 131], "translation_corpu": [78, 131], "max_ord": [78, 131], "use_bp": [78, 131], "against": [78, 131], "gram": [78, 131], "bleu_scor": [78, 131], "third": [80, 133, 185, 225], "parti": [80, 133, 185, 225, 271], "pycocotool": [80, 133, 219, 224], "note": [80, 120, 133, 160, 187, 189, 191, 192, 209, 210, 213, 216, 218, 220, 224, 226, 228, 234, 237, 242, 246, 249, 251, 255, 257, 259, 268, 271, 274, 277, 278, 280, 281, 282], "noth": [80, 133, 280], "thu": [80, 133, 228, 268, 271], "cannot": [80, 133, 186, 209, 219, 274, 278], "slim": [80, 133, 144, 146, 230, 268], "jonathanhuang": [80, 133], "image_id": [80, 133, 227], "encod": [80, 133, 252, 279], "invok": [80, 133, 191], "groundtruth_dict": [80, 133], "exportgroundtruthtococo": [80, 133], "groundtruth_boxes_list": [80, 133], "groundtruth_classes_list": [80, 133], "max_num_class": [80, 133], "output_path": [80, 133], "detections_list": [80, 133], "exportdetectionstococo": [80, 133], "detection_boxes_list": [80, 133], "detection_scores_list": [80, 133], "detection_classes_list": [80, 133], "cocowrapp": [80, 133], "loadannot": [80, 133], "cocoevalwrapp": [80, 133], "agnostic_mod": [80, 133], "computemetr": [80, 133], "ani": [80, 82, 125, 133, 135, 165, 177, 180, 184, 189, 192, 209, 216, 232, 237, 250, 251, 255, 256, 268, 276, 280], "detection_typ": [80, 133], "bbox": [80, 133, 186, 227], "hold": [80, 116, 133, 154, 211], "being": [80, 133, 192, 257], "iou_typ": [80, 133], "iou_thr": [80, 84, 133, 137, 227], "map_point": [80, 84, 133, 137, 227], "cocoev": [80, 133], "To": [80, 133, 148, 185, 189, 191, 192, 209, 211, 213, 216, 229, 231, 233, 236, 242, 244, 246, 247, 251, 255, 268, 270, 273, 274, 275, 277, 280, 282], "mscoco": [80, 133], "org": [80, 109, 133, 186, 213, 224, 244, 247, 268], "Then": [80, 133, 191, 213, 242, 244, 246, 247, 254, 277, 280], "exportsingleimagegroundtruthtococo": [80, 133], "next_annotation_id": [80, 133], "category_id_set": [80, 133], "groundtruth_box": [80, 133], "groundtruth_class": [80, 133], "groundtruth_mask": [80, 133], "groundtruth_is_crowd": [80, 133], "ingest": [80, 133], "here": [80, 133, 191, 211, 216, 217, 218, 220, 221, 226, 227, 237, 244, 247, 249, 252, 255, 257, 271, 275, 276, 277, 283], "match": [80, 81, 133, 134, 189, 214, 250, 274], "ones": [80, 133, 268], "exportsingleimagedetectionstococo": [80, 133], "associ": [80, 133], "uniqu": [80, 113, 133, 271], "identifi": [80, 133, 146, 257, 268, 274], "assign": [80, 133, 180, 216, 270, 280], "continu": [80, 107, 133, 187, 226, 228, 250, 268, 281], "drop": [80, 108, 133, 185, 228, 229, 243, 268, 274, 277, 283], "num_gt_box": [80, 133], "num_detect": [80, 84, 133, 137, 227, 228, 282], "image_height": [80, 133], "image_width": [80, 133], "detection_mask": [80, 133], "crowd": [80, 133], "rais": [80, 107, 108, 109, 133, 138, 189, 209, 251, 268, 269], "valueerror": [80, 133, 219], "insid": [80, 133, 214, 215, 250, 268, 272, 280], "exportsingleimagedetectionboxestococo": [80, 133], "detection_box": [80, 133, 228, 282], "detection_scor": [80, 133, 228, 282], "detection_class": [80, 133, 228, 282], "exporsingleimagedetectionboxestococo": [80, 133], "exportsingleimagedetectionmaskstococo": [80, 133], "allenai": [81, 82, 134, 135], "bi": [81, 82, 134, 135], "att": [81, 82, 134, 135], "flow": [81, 82, 134, 135, 186, 187, 228], "f1_score": [81, 82, 134, 135], "ground_truth": [81, 82, 134, 135], "f1": [81, 83, 84, 134, 136, 137, 216, 227, 228, 252, 276, 283], "ground": [81, 82, 134, 135], "truth": [81, 82, 134, 135], "metric_max_over_ground_truth": [81, 82, 134, 135], "metric_fn": [81, 82, 134, 135], "exact_match_scor": [81, 134], "exact": [81, 134], "averag": [81, 82, 84, 134, 135, 137, 227, 228, 274, 280, 283], "articl": [81, 82, 134, 135], "paragraph": [81, 82, 134, 135], "qa": [81, 82, 134, 135, 189], "normalize_answ": [82, 135], "remov": [82, 135, 184, 228, 242, 246, 255, 262, 263, 268, 278], "extra": [82, 135, 228, 274], "replac": [82, 135, 209, 216, 228, 231, 240, 275], "newlin": [82, 135, 180], "tab": [82, 135, 249, 278], "abc": [82, 135, 190, 278, 280], "harmon": [82, 84, 135, 137], "recal": [82, 84, 135, 137], "equat": [82, 84, 135, 137, 271, 277], "answer_start": [82, 135], "177": [82, 135, 283], "denver": [82, 135], "bronco": [82, 135], "nfl": [82, 135], "team": [82, 135, 184, 273], "afc": [82, 135], "super": [82, 135, 187], "bowl": [82, 135], "50": [82, 135, 187, 191, 254, 268, 277, 283], "56be4db0acb8001400a502ec": [82, 135], "form": [82, 135, 213, 214, 249], "percentag": [82, 135, 208, 274, 282], "bleu_util": [83, 136], "coco_label_map": [83, 136], "coco_tool": [83, 136], "evaluate_squad": [83, 136], "tensorflowmetr": [84, 137], "maintain": [84, 137, 184, 185, 209, 230, 232, 244, 247, 251, 256, 257, 268, 274, 275], "pytorchmetr": [84, 137], "mxnetmetr": [84, 137], "onnxrtqlmetr": [84, 137], "onnxrtitmetr": [84, 137], "metric_registri": [84, 137], "metric_typ": [84, 137], "decorator_metr": [84, 137], "basemetr": [84, 137, 150], "single_output": [84, 137], "hvd": [84, 137, 216], "wrappytorchmetr": [84, 137], "wrapmxnetmetr": [84, 137], "wraponnxrtmetr": [84, 137], "binari": [84, 137, 219, 227, 244, 247, 275], "proport": [84, 137], "were": [84, 137, 235, 268], "pred_list": [84, 137], "pytorchloss": [84, 137], "print": [84, 137, 180, 216, 227, 228, 251, 252, 268, 277, 280], "mae": [84, 137, 227], "compare_label": [84, 137, 150, 227], "error": [84, 119, 137, 159, 176, 213, 227, 233, 254, 255, 258, 274, 277, 280], "actual": [84, 137, 216], "compar": [84, 137, 180, 215, 227, 231, 252, 268, 271, 274, 276, 278, 280], "pred": [84, 137, 227], "rmse": [84, 137, 227, 280], "squar": [84, 119, 137, 159, 213, 227, 254, 280], "estim": [84, 137, 146, 280], "tensorflowtopk": [84, 137], "k": [84, 137, 150, 227, 251, 268], "among": [84, 137, 231, 243, 277], "outcom": [84, 137], "consid": [84, 137, 184, 208, 209, 214, 250, 280], "find": [84, 91, 116, 137, 154, 180, 190, 213, 226, 235, 242, 246, 249, 250, 252, 254, 268, 274, 276, 277, 278, 280], "num_correct": [84, 137], "num_sampl": [84, 137], "generaltopk": [84, 137], "cocomapv2": [84, 137, 227], "anno_path": [84, 137, 227], "95": [84, 137, 227, 283], "map_kei": [84, 137], "detectionboxes_precis": [84, 137], "output_index_map": [84, 137, 227], "tensorflowmap": [84, 137], "tensorflowcocomap": [84, 137], "tensorflowvocmap": [84, 137], "squadf1": [84, 137, 227], "miou": [84, 137], "num_class": [84, 137], "21": [84, 137, 237, 238, 260, 263, 264, 269, 277, 283], "iou": [84, 137], "intersect": [84, 137, 190, 227], "union": [84, 137, 169, 227, 260], "onnxrtglu": [84, 137], "dlrm": [84, 137], "modelconvers": 86, "typic": [86, 113, 187, 189, 215, 217, 221, 254, 268, 283], "saved_model": [86, 272], "basicna": 87, "model_build": [87, 90], "conf_fnam": 87, "modul": [89, 95, 105, 106, 186, 209, 210, 214, 223, 227, 228, 230, 268, 270, 273, 274, 278, 281], "basic_na": 89, "nas_util": 89, "nasbas": [90, 187], "nas_registri": 91, "nas_method": 91, "create_search_space_pool": 91, "idx": [91, 211], "enumer": [91, 169, 190, 214, 215, 216, 228, 231, 267, 268, 278], "find_pareto_front": 91, "pareto": [91, 187], "front": [91, 187], "n_point": 91, "n_metric": 91, "n_pareto_point": 91, "gridsearch": 92, "whole": [92, 192, 251, 271, 283], "randomsearch": 92, "bayesianoptimizationsearch": 92, "gradient": [93, 189, 223, 228, 268, 269, 283], "sensit": [93, 109, 223, 268], "pruner": [93, 94, 95, 96, 97, 99, 104, 105, 107, 110, 228, 268, 282], "gradientsensitivityprun": 93, "global_config": [93, 94, 96, 97, 98], "pytorchmodel": [93, 94, 96, 97, 98, 147], "mai": [93, 94, 96, 97, 98, 184, 185, 191, 208, 209, 213, 218, 219, 225, 229, 242, 246, 252, 255, 257, 269, 271, 274, 277, 280], "overwritten": [93, 94, 96, 97, 98, 237], "group": [94, 189, 223, 268, 274, 278, 279, 280, 283], "lasso": [94, 223, 268], "grouplassoprun": 94, "legaci": 95, "gradient_sensit": 95, "group_lasso": 95, "basicmagnitudeprun": 96, "lock": [97, 98, 223, 267, 268], "patternlockprun": [97, 109], "pruner_registri": 98, "clase": 98, "pruningconf": [99, 104], "tfpruningcallback": [99, 104], "nc_model": [99, 104], "input_model": [99, 104, 230, 252, 253, 254, 278], "callback": [99, 104, 169, 172, 186, 228, 267, 268, 271], "pure": [99, 104, 268], "tile_pattern": 101, "pattern_registri": 102, "pattern_typ": 102, "patternbas": 102, "mask_shap": [102, 103], "is_contigu": 102, "tile": [103, 209], "tilepatternbas": 103, "parent": [103, 109, 111, 278], "tilepattern_1x1": 103, "1x1": [103, 214, 228, 268], "tilepattern_2x2": 103, "2x2": [103, 277], "tilepattern_1x16": 103, "1x16": 103, "tilepattern_4x1": 103, "tilepattern_1x2": 103, "1x2": [103, 277], "logger": [105, 170, 173, 180], "prune_util": 105, "register_pattern": 107, "registri": [107, 109, 111, 187], "sure": [107, 109, 111, 207, 251], "get_pattern": 107, "assertionerror": [107, 108, 109, 138], "unit": [107, 185, 257, 268], "part": [107, 109, 186, 224, 229, 244, 247, 257, 259, 268, 272, 277, 281], "is_glob": 107, "contrast": [107, 279], "individu": [107, 184, 257, 268, 277], "patternnxm": 107, "kept": 107, "block_siz": [107, 274], "direct": [107, 268], "hidden": [107, 190], "patternninm": 107, "check_config": 108, "prune_config": 108, "everyth": [108, 237], "reset_non_value_to_default": 108, "undefin": 108, "process_and_check_config": 108, "non": [108, 180, 186, 213, 274, 280], "process_config": 108, "obtain": [108, 186, 191, 257, 268, 276, 277, 280], "parse_to_prun": 108, "keep": [108, 155, 186, 190, 209, 248, 249, 275], "parse_not_to_prun": 108, "register_prun": 109, "get_prun": 109, "module_nam": [109, 180], "begin": [109, 209, 210, 214, 215, 228, 268, 280], "current_sparsity_ratio": 109, "global_step": 109, "update_frequency_on_step": [109, 270], "target_sparsity_ratio": 109, "final": [109, 191, 228, 235, 266, 268, 271, 275, 280], "max_sparsity_ratio_per_lay": [109, 270], "magnitudeprun": 109, "snipprun": 109, "network": [109, 157, 187, 208, 214, 215, 218, 228, 231, 251, 269, 271, 277, 280], "connect": [109, 249, 251, 258, 268, 276], "arxiv": [109, 189, 208, 231, 268, 269, 274, 277], "ab": [109, 268, 271, 277], "1810": 109, "02340": 109, "snipmomentumprun": 109, "moreoev": 109, "updat": [109, 137, 150, 177, 219, 226, 227, 228, 235, 240, 243, 259, 268, 274, 277, 280, 281], "momentum": [109, 223, 228, 268, 282], "while": [109, 116, 154, 190, 191, 211, 217, 223, 229, 232, 237, 249, 251, 268, 270, 271, 274, 277], "spars": [109, 211, 269], "least": [110, 185, 228, 268, 280], "templat": [110, 228, 268], "tree": [110, 126, 166, 257], "huggingface_model": [110, 253], "eager": [110, 189, 216, 223, 271, 273, 278], "config_file_path": 110, "pruner_info": 110, "register_schedul": 111, "get_schedul": 111, "gradual": [111, 268], "oneshotschedul": 111, "iterativeschedul": 111, "quantconf": 112, "separ": [113, 184, 209, 222, 225, 257, 259, 267, 270], "append": [113, 116, 154, 186, 215, 228, 267], "There": [113, 115, 151, 153, 209, 213, 214, 220, 223, 228, 232, 254, 256, 257, 274, 277, 280, 282], "opt_model": [113, 228], "fulli": [113, 228, 257, 271, 277], "train_func": [113, 169, 216, 228, 271], "automixedprecisiontunestrategi": [114, 152], "basictunestrategi": [115, 153], "stage": [115, 120, 151, 153, 160, 214, 268, 278, 280], "polici": [115, 119, 151, 153, 159, 184, 189, 282, 284], "bayesiantunestrategi": [116, 154], "acq_max": [116, 154], "ac": [116, 154], "gp": [116, 154], "y_max": [116, 154], "n_warmup": [116, 154], "10000": [116, 154, 268], "n_iter": [116, 154], "acquisit": [116, 154], "gaussian": [116, 154, 280], "relev": [116, 154, 191, 192, 209, 254, 268], "limit": [116, 154, 180, 189, 213, 214, 226, 231, 271, 274, 275, 278], "acq": [116, 154], "randomst": [116, 154], "scipi": [116, 154], "x_max": [116, 154], "targetspac": [116, 154], "pbound": [116, 154], "9527": [116, 154, 228, 282], "allow": [116, 154, 214, 216, 227, 228, 229, 251, 256, 268, 270, 274, 277, 280, 282], "duplic": [116, 154], "bayesianoptim": [116, 154], "exhaustivetunestrategi": [117, 156], "auto_mixed_precis": [118, 158], "msetunestrategi": [119, 159], "those": [119, 159, 180, 213, 214, 215, 222, 228, 229, 267, 268, 271, 280], "mse_v2tunestrategi": [120, 160], "revert": [120, 128, 160, 168, 280], "fx": [120, 160, 223, 229, 238, 239, 253, 269, 271, 273], "randomtunestrategi": [121, 161], "strategy_registri": [122, 162, 280], "tunestrategi": [122, 162, 280], "tuning_sampl": [124, 164], "tuning_spac": [124, 125, 127, 164, 165, 167], "tuning_struct": [124, 125, 126, 164, 165, 166], "tuningsamplerregistri": 125, "tuningsampl": [125, 165], "tuningord": [125, 165], "Not": [125, 126, 165, 166, 180, 187, 209], "tuningspac": [125, 126, 165, 166], "tuning_order_lst": [125, 165], "initial_op_tuning_cfg": [125, 165], "modelwisetuningsampl": [125, 165], "tuning_items_prior": [125, 165], "op_dtype_dict": [125, 165], "optuningconfig": [125, 126, 127, 165, 166, 167], "optypewisetuningsampl": [125, 165], "opwisetuningsampl": [125, 165], "fallbacktuningsampl": [125, 165], "op_dtyp": [125, 165], "accumul": [125, 165, 231, 280], "skip_first": [125, 165], "smoothquantsampl": [125, 165], "tuningitem": [126, 166], "item_typ": [126, 166], "capabl": [126, 166, 191, 192, 207, 220, 228, 229, 240, 251, 256, 268, 270, 271, 280, 282], "pattern_to_intern": [126, 166], "default_dtyp": [126, 166], "pattern_to_path": [126, 166], "quant_mode_from_pattern": [126, 166], "internal_pattern": [126, 166], "initial_tuning_cfg_with_quant_mod": [126, 166], "op_name_typ": [126, 166], "quant_mod": [126, 166, 191, 192], "cfg": [126, 166, 172, 191, 192], "step1": [126, 166], "step2": [126, 166], "complet": [126, 166, 190, 191, 268, 271, 280, 282, 283], "step3": [126, 166], "step4": [126, 166], "step5": [126, 166], "op_typ": [127, 167], "op_quant_mod": [127, 167], "ordereddefaultdict": [128, 168], "extract_data_typ": [128, 168], "data_typ": [128, 168], "sign": [128, 168, 185, 189, 192, 208, 251, 269, 271, 274, 276], "unsign": [128, 168, 192, 274], "reverted_data_typ": [128, 168], "signed_flag": [128, 168], "get_adaptor_nam": [128, 168], "experiment": [129, 187, 211, 215, 216, 218, 224, 228, 268, 270, 271, 275, 279], "sub_class": [137, 150], "register_customer_metr": 137, "mani": [137, 150, 209, 210, 224, 274, 280, 282], "tell": [137, 150, 270], "topk": [137, 150, 216, 227, 228, 251, 271], "matrix": [137, 150, 189, 240, 281], "frozen": [138, 146, 150, 230], "ckpt": [138, 146, 150, 283], "savedmodel": [138, 146, 150], "onnx_ml_pb2": [138, 230], "gluon": [138, 150, 230], "hybirdblock": [138, 150], "basemodel": 139, "plai": [139, 269, 274, 277], "role": [139, 274, 277], "base_model": 140, "keras_model": 140, "mxnet_model": 140, "nets_factori": 140, "onnx_model": [140, 252], "tensorflow_model": [140, 254], "torch_model": 140, "kerasmodel": 141, "get_model_fwk_nam": 142, "fwk": 142, "mxnetmodel": 143, "net": [144, 189], "factori": 144, "tfslimnetsfactori": 144, "onnxmodel": 145, "get_model_typ": 146, "validate_graph_nod": 146, "node_nam": [146, 191], "compat": [146, 185, 216, 230, 244, 247, 249, 268, 275], "graphdef": [146, 230], "validate_and_inference_input_output": 146, "input_tensor_nam": 146, "output_tensor_nam": 146, "graph_sess": 146, "sess": 146, "graph_def_sess": 146, "frozen_pb_sess": 146, "load_saved_model": 146, "saved_model_tag": 146, "signatur": 146, "tag": [146, 277, 278], "metagraphdef": 146, "analyz": [146, 276, 277, 278], "input_tensor": 146, "output_tensor": 146, "try_loading_kera": 146, "keras_sess": 146, "slim_sess": 146, "checkpoint_sess": 146, "estimator_sess": 146, "input_fn": 146, "saved_model_sess": 146, "tensorflowbasemodel": 146, "tensorflowsavedmodelmodel": 146, "tensorflowllmmodel": 146, "exceed": 146, "protobuf": [146, 252], "2gb": 146, "tensorflowqatmodel": 146, "tensorflowcheckpointmodel": 146, "checkpoint": [146, 179, 230], "tensorflowmodel": 146, "pytorchbasemodel": 147, "pytorchfxmodel": 147, "ipexmodel": 147, "driven": [148, 189, 228, 249, 266, 278], "develop": [148, 185, 186, 209, 224, 228, 229, 231, 232, 238, 249, 255, 268, 269, 273, 276], "objective_registri": 148, "objective_custom_registri": 148, "obj_cl": 148, "eural_compressor": 148, "objective_cl": 148, "user_object": 148, "__class__": 148, "__name__": 148, "objective_cfg": 148, "deep_get": 148, "usr_cfg": 148, "deep_set": 148, "user_obj_cfg": 148, "With": [148, 186, 190, 192, 210, 228, 237, 242, 246, 250, 256, 266, 268, 269, 276, 277, 280, 283], "easili": [148, 190, 233, 237, 249, 266, 277], "special": [148, 186, 210, 227, 228, 266, 268, 274, 281], "peak": [148, 266], "multiobject": 148, "metric_criterion": 148, "metric_weight": 148, "obj_criterion": 148, "obj_weight": 148, "is_measur": 148, "calib_func": [150, 273], "entir": [150, 169, 186, 191, 192, 208, 256, 268], "autotunestrategi": 151, "level": [155, 176, 184, 231, 259, 277, 280], "conservativetunestrategi": 155, "o0": [155, 280], "who": [155, 184], "hawq_v2tunestrategi": 157, "hawq": [157, 280], "v2": [157, 210, 216, 218, 219, 224, 226, 238, 275, 277, 280, 281, 283], "hessian": [157, 274, 280], "made": [157, 190, 271, 275, 280], "small": [157, 187, 254, 255, 268, 274, 280, 283], "impact": [157, 268, 275, 280], "tunestrategymeta": 162, "metaclass": 162, "lowerbitssampl": 165, "blockfallbacktuningsampl": 165, "op_block_lst": 165, "target_dtyp": 165, "alpha_list": 165, "weightonlyquantsampl": 165, "quanttyp": 168, "quantopt": 168, "quant_typ": 168, "quant_opt": 168, "preprocess_user_cfg": 168, "op_user_cfg": 168, "op_user_cfg_modifi": 168, "group_siz": [168, 274], "32": [168, 216, 222, 231, 274, 283], "build_slave_faker_model": 168, "slave": [168, 280], "virtual": [168, 269], "classregist": 168, "loop": [169, 186, 187, 191, 192, 220, 259, 276, 280], "compressionmanag": 169, "deal": 169, "pruningconfig": 169, "orchestr": [169, 189, 223, 281], "on_train_begin": [169, 186, 214, 215, 228, 267, 268, 271], "train_loop": [169, 228, 267], "on_epoch_begin": [169, 172, 214, 215, 228, 267], "on_step_begin": [169, 172, 214, 215, 228, 267, 268], "on_after_compute_loss": [169, 214, 215, 228, 267], "backward": [169, 214, 215, 216, 228, 267, 268, 271, 275], "on_before_optimizer_step": [169, 214, 215, 228, 267, 268], "on_step_end": [169, 172, 214, 215, 228, 267], "on_epoch_end": [169, 172, 214, 215, 228, 267], "on_train_end": [169, 214, 215, 228, 267, 268, 271], "path_to_sav": 169, "manag": [169, 172, 228, 232, 233, 243], "top1": [169, 227, 251, 268, 271, 283], "callbacks_list": 169, "layerhistogramcollector": 170, "histogram": [170, 180, 251, 278], "num_bin": 170, "8001": [170, 257, 262, 263, 264], "layer_tensor": 170, "include_lay": 170, "collector": 170, "diverg": [170, 174, 192, 208, 214, 280], "get_func_from_config": 172, "func_dict": 172, "get_preprocess": 172, "get_metr": 172, "get_postprocess": 172, "get_algorithm": 172, "algo": 172, "create_dataset": 172, "cfg_preprocess": 172, "cfg_filter": 172, "create_dataload": 172, "dataloader_cfg": 172, "create_eval_func": 172, "postprocess_cfg": 172, "fp32_baselin": [172, 190], "baselin": [172, 276, 277, 278], "create_train_func": 172, "train_cfg": 172, "Their": 172, "auxiliari": 173, "collect_layer_histogram": 173, "create_obj_from_config": 173, "kl_diverg": 173, "load_huggingfac": [173, 228], "neural_insights_util": 173, "weights_detail": 173, "pretrain": [175, 232, 238], "optimizedmodel": 175, "from_pretrain": [175, 189, 228], "save_for_huggingface_upstream": [175, 228], "output_dir": [175, 228, 237, 238, 253, 254, 260, 263, 264], "export_compressed_model": [175, 274], "saved_dir": [175, 274], "use_optimum_format": [175, 274], "enable_full_rang": [175, 272, 274], "compression_dtyp": [175, 274], "int32": [175, 211, 274], "compression_dim": [175, 274], "scale_dtyp": [175, 274], "_type_": 175, "leverag": [175, 187, 189, 214, 218, 232, 249, 267, 271, 274, 280], "symmetr": [175, 192, 271, 274, 279, 280], "comoress": 175, "float16": [175, 211, 274], "msg": [176, 258, 262, 263], "debug": [176, 213, 242, 246, 250, 280, 281], "fatal": 176, "warn": [176, 209], "alia": [176, 180, 234, 239], "register_neural_insights_workload": 177, "workload_loc": [177, 180], "workload_mod": 177, "workload_nam": 177, "uuid": 177, "update_neural_insights_workload": 177, "workload_uuid": 177, "statu": [177, 184, 210, 231, 259, 262, 263, 264, 266, 268], "update_neural_insights_workload_accuracy_data": 177, "baseline_accuraci": 177, "optimized_accuraci": 177, "get_model_path": 177, "is_int8_model": 179, "load_weight_onli": 179, "checkpoint_dir": 179, "layer_wis": [179, 272], "qconfig": [179, 274, 278], "pt": [179, 224, 230, 253, 269, 271, 273, 274], "history_cfg": 179, "best_configur": 179, "best_model_weight": 179, "snapshot": [179, 253], "recover_model_from_json": 179, "json_file_path": 179, "recov": [179, 180, 190, 215], "cfg_from_fil": 180, "yaml_fil": [180, 211, 216], "version1_lt_version2": 180, "version1": 180, "version2": 180, "version1_gt_version2": 180, "greater": [180, 262, 268, 280], "version1_eq_version2": 180, "version1_gte_version2": 180, "version1_lte_version2": 180, "lazyimport": 180, "lazi": 180, "till": [180, 280], "singleton": 180, "time_limit": 180, "context": [180, 270, 274], "get_siz": 180, "seen": [180, 190], "recurs": 180, "compute_spars": 180, "fault_tolerant_fil": 180, "temporari": [180, 184], "equal_dict": 180, "d1": 180, "d2": 180, "compare_kei": 180, "ignore_kei": 180, "except": [180, 209, 255, 271, 272], "ignor": [180, 208, 211, 274, 277, 280], "cpuinfo": 180, "dump_elapsed_tim": [180, 190], "customized_msg": 180, "elaps": 180, "combine_histogram": 180, "old_hist": 180, "arr": 180, "old": [180, 228, 275], "get_tensor_histogram": 180, "tensor_data": [180, 181], "bin": [180, 219], "2048": [180, 189, 274], "get_all_fp32_data": 180, "get_tuning_histori": 180, "tuning_history_path": 180, "num": 180, "offlin": [180, 184, 228, 271, 277], "str2arrai": 180, "dequantize_weight": 180, "weight_tensor": 180, "min_filter_tensor": 180, "max_filter_tensor": 180, "dequant": [180, 186, 191, 277, 278], "scale_info": 180, "captureoutputtofil": 180, "tmp_file_path": 180, "stream": [180, 283], "sy": [180, 209, 235], "stderr": 180, "captur": 180, "statist": [180, 181], "header": [180, 219], "field_nam": 180, "output_handl": 180, "printer": 180, "global_st": 180, "load_data_from_pkl": 180, "pkl": [180, 253], "dump_data_to_loc": 180, "show_memory_info": 180, "hint": 180, "show": [180, 184, 214, 216, 228, 231, 235, 250, 251, 252, 254, 257, 262, 263, 264, 277, 280, 281], "dump_class_attr": 180, "compare_object": 180, "obj1": 180, "obj2": 180, "ignore_attr": 180, "comparison": [180, 274, 275, 278], "alias_param": 180, "param_nam": 180, "param_alia": 180, "alias": [180, 209], "print_tabl": 180, "column_map": 180, "table_entri": 180, "titl": [180, 225, 250, 280], "insert_newlin": 180, "tabl": [180, 192, 213, 218, 231, 252, 254, 283], "prettyt": 180, "column": [180, 274, 277], "func": [180, 271, 282], "handler": [180, 280], "row": [180, 213, 252, 277], "decim": 180, "get_tensors_info": 180, "about": [180, 184, 209, 210, 228, 254, 255, 268, 273, 280, 281, 283], "get_weights_detail": 180, "weightdetail": 180, "dump_tabl": 180, "filepath": [180, 209], "file_typ": 180, "csv": [180, 187, 252, 253], "extens": [180, 187, 189, 190, 209, 220, 223, 224, 226, 228, 229, 230, 233, 238, 239, 240, 244, 247, 248, 252, 268, 269, 271, 274, 277, 280, 281, 282], "dump_table_to_csv": 180, "get_number_of_socket": 180, "platform": [180, 189, 223, 232, 240, 259, 269, 271], "opentri": 180, "activation_min": 180, "activation_max": 180, "print_op_list": 180, "get_op_list": 180, "minmax_file_path": 180, "input_model_tensor": 180, "optimized_model_tensor": 180, "activation_min_max": 180, "calculate_ms": 180, "mse_metric_gap": 180, "fp32_tensor": 180, "dequantize_tensor": 180, "euclidean": [180, 214], "distanc": [180, 214], "check_key_exist": 180, "weightsdetail": 181, "input_tensor_data": 181, "optimized_tensor_data": 181, "weightsstatist": 181, "welcom": [183, 184, 185, 189, 251, 258, 284], "interest": [184, 189, 251, 278], "foster": 184, "particip": [184, 259], "commun": [184, 251], "harass": 184, "experi": [184, 232, 254, 276, 277, 280], "everyon": 184, "regardless": 184, "ag": 184, "bodi": 184, "ethnic": 184, "sex": 184, "characterist": 184, "gender": 184, "ident": [184, 214], "educ": 184, "socio": 184, "econom": 184, "person": [184, 269], "appear": [184, 243, 249, 251], "race": 184, "religion": 184, "sexual": 184, "orient": 184, "behavior": [184, 190, 191, 192, 220, 230, 274, 278, 280, 282], "contribut": [184, 189, 268], "inclus": 184, "Being": 184, "respect": [184, 220, 268, 277, 282], "viewpoint": 184, "gracefulli": 184, "critic": 184, "focus": [184, 190, 231], "empathi": 184, "toward": [184, 214], "member": [184, 190], "unaccept": 184, "imageri": 184, "unwelcom": 184, "troll": 184, "insult": 184, "derogatori": 184, "comment": [184, 191, 211, 227, 228, 274, 279], "polit": 184, "attack": 184, "public": [184, 244, 247], "privat": 184, "publish": [184, 225, 226, 229, 250, 277], "electron": 184, "explicit": 184, "permiss": 184, "inappropri": 184, "profession": 184, "clarifi": 184, "appropri": [184, 208, 277], "fair": 184, "action": [184, 244, 247], "edit": 184, "reject": 184, "commit": [184, 185], "wiki": 184, "issu": [184, 185, 188, 189, 224, 252, 254, 271, 278], "ban": 184, "temporarili": 184, "perman": [184, 268], "deem": 184, "threaten": 184, "offens": 184, "harm": 184, "mail": 184, "social": [184, 269], "media": [184, 269], "account": [184, 276, 280], "appoint": 184, "onlin": [184, 276], "event": [184, 278], "represent": [184, 186, 208, 215, 231, 268, 271], "abus": 184, "report": [184, 185, 189, 259, 276], "contact": [184, 275, 276], "complaint": 184, "review": [184, 185, 189, 269], "investig": [184, 209, 254], "necessari": [184, 187, 191, 230, 250, 268, 276, 280], "circumst": [184, 270], "oblig": [184, 255], "confidenti": [184, 251], "regard": [184, 273], "incid": 184, "good": [184, 271, 280], "faith": 184, "face": [184, 189, 197, 232, 236, 256, 258, 269, 275, 283], "repercuss": 184, "leadership": 184, "adapt": [184, 191, 211, 231, 240, 269], "faq": [184, 189], "page": [184, 185, 251, 254, 255], "improv": [185, 208, 209, 228, 232, 249, 250, 252, 268, 269, 271, 273, 274, 280, 281, 283], "send": [185, 191], "view": [185, 189, 217, 240, 249, 255, 275], "star": 185, "repositori": [185, 244, 247], "button": [185, 223, 243, 249], "fork": [185, 244, 247], "clone": [185, 213, 224, 242, 246, 251, 253, 254, 256, 257], "pc": 185, "git": [185, 213, 219, 224, 251, 253, 254, 256, 257], "branch": 185, "modif": [185, 190, 220, 237, 256], "checkout": 185, "my": 185, "messag": [185, 257, 258, 262, 263, 264, 280], "push": [185, 231, 268, 274, 277], "consist": [185, 186, 209, 257, 277, 280], "cover": [185, 218, 222, 269], "would": [185, 228, 253, 268, 271, 277], "adopt": [185, 232, 268, 269, 277], "certif": [185, 251], "agre": 185, "off": [185, 274], "pr": [185, 210, 227, 244, 247, 275], "At": [185, 191, 231, 255, 259, 280], "approv": 185, "solv": [185, 271, 275], "licens": 185, "azur": [185, 189, 269], "devop": 185, "ci": 185, "And": [185, 186, 207, 209, 228, 235, 277], "cloud": [185, 189, 231, 259, 269], "deploi": [185, 214, 228, 255, 259, 274, 280], "e16": 185, "v5": 185, "scope": [185, 191, 228], "scan": [185, 189], "pylint": 185, "bandit": 185, "copyright": [185, 225], "docstyl": 185, "spellcheck": 185, "dco": 185, "pytest": 185, "No": [185, 209, 219, 228, 257, 258, 269], "failur": [185, 186], "fault": 185, "coverag": 185, "runtim": [185, 189, 190, 191, 193, 210, 213, 217, 220, 223, 229, 231, 234, 239, 240, 270, 274, 275, 280], "submit": [185, 256, 259, 269], "bug": [185, 189], "intend": 185, "safe": 185, "collabor": [185, 189, 234, 240], "adher": 185, "toolkit": [186, 224, 232, 240, 269, 281], "tracer": 186, "graphmodul": [186, 273], "resolv": [186, 188], "floatfunct": 186, "cat": [186, 218, 235, 262, 263, 264], "done": [186, 214, 215, 233, 249, 258, 262, 263, 268, 271], "fusion": [186, 190, 220], "relu": [186, 220, 277, 278], "batchnorm": [186, 277], "descript": [186, 191, 192, 210, 257, 261, 277], "10004": [186, 187, 190, 210, 214, 215, 216, 220, 223, 229, 231, 267, 270, 272, 274, 282], "neural_compressor": [186, 187, 189, 192, 207, 209, 210, 211, 213, 214, 215, 216, 218, 221, 222, 227, 228, 229, 230, 231, 251, 252, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 279, 280, 282], "eval": [186, 209, 210, 213, 232, 271, 278], "fail": [186, 210, 218, 258], "conduct": [186, 228, 237, 249, 280, 281], "imper": 186, "therefor": [186, 228, 252, 254, 268, 271, 272, 275, 277], "lot": [186, 254, 277], "As": [186, 191, 210, 214, 227, 228, 243, 254, 268, 274, 280], "might": [186, 209, 251, 280], "sometim": [186, 213, 271], "successfulli": [186, 189, 216, 258, 262, 263, 264, 269], "suggest": [186, 209, 276], "traceabl": 186, "proxi": 186, "prepar": [186, 211, 216, 221, 251, 262, 263, 264, 268, 271], "tutori": [186, 240, 269, 281], "prototyp": 186, "html": [186, 189, 191, 208, 216, 223, 244, 247, 250, 252, 258, 262, 271], "highlight": 186, "untrac": 186, "move": [186, 255, 270, 274, 275], "ssd": [186, 218, 283], "resnet34": [186, 283], "r34": 186, "bboxes_labels_scor": 186, "prob": 186, "45": [186, 226, 283], "max_output": 186, "zip": [186, 258, 262, 263], "squeez": 186, "dbox": 186, "dlabel": 186, "dscore": 186, "decode_singl": 186, "autom": [187, 232, 249, 250, 269, 277], "artifici": 187, "ann": 187, "par": [187, 259], "outperform": 187, "hand": 187, "propos": [187, 190, 214, 229, 274, 277], "potenti": [187, 213], "procedur": [187, 268, 280], "lie": [187, 208], "predictor": 187, "4x": [187, 271], "shown": [187, 210, 213, 214, 227, 228, 231, 243, 252, 254, 266, 267, 268, 272, 277, 280], "figur": [187, 242, 243, 246, 272], "popul": 187, "inner": 187, "evolutionari": 187, "cycl": 187, "until": [187, 191, 280], "conclud": 187, "count": [187, 211, 274], "met": [187, 220, 271, 278], "yet": [187, 244, 247, 250, 257, 271], "simplest": [187, 208, 235], "launcher": [187, 189, 214, 215, 240, 281], "agent": 187, "nsga2": 187, "supernet": 187, "ofa_mbv3_d234_e346_k357_w1": 187, "acc": [187, 226, 259, 268, 278, 283], "mac": [187, 250], "num_ev": 187, "250": [187, 268], "results_csv_path": 187, "search_result": 187, "dataset_path": 187, "ilsvrc2012": 187, "aim": [187, 189, 226, 232, 268, 277, 280, 281], "mobilenetv3": 187, "lt": [187, 211], "wmt": 187, "en": 187, "de": 187, "guidelin": [188, 189], "mainstream": [189, 281], "deep": [189, 190, 191, 210, 223, 224, 228, 229, 231, 232, 234, 237, 238, 240, 243, 249, 269, 271, 280, 281], "learn": [189, 190, 191, 210, 211, 218, 222, 223, 224, 228, 229, 231, 232, 234, 237, 238, 240, 243, 244, 247, 249, 268, 269, 271, 277, 278, 280, 281], "workflow": [189, 191, 192, 213, 214, 218, 224, 229, 231, 244, 247, 251, 278, 281], "particular": [189, 268, 274], "wide": [189, 217, 229, 268, 271], "hardwar": [189, 190, 214, 223, 228, 231, 249, 268, 269, 270], "xeon": [189, 224, 225, 226, 229, 269, 271, 273, 283], "scalabl": [189, 224, 226, 229, 269, 271, 273], "processor": [189, 226, 229, 257, 269, 271, 273], "flex": [189, 224], "amd": [189, 224, 283], "arm": [189, 223, 224, 283], "nvidia": [189, 208, 223, 224, 283], "llama2": 189, "falcon": [189, 226, 268, 277, 283], "gpt": [189, 226, 253, 268, 277, 283], "j": [189, 226, 253, 268, 277, 283], "bloom": [189, 226, 268, 277, 283], "opt": [189, 226, 237, 268, 277, 280, 283], "broad": [189, 223, 238, 281], "stabl": [189, 224, 268, 269], "diffus": [189, 269], "hub": [189, 217, 221, 240], "hug": [189, 256, 269], "vision": [189, 218, 236, 277], "coder": [189, 223, 233, 234, 237, 240, 243, 256, 260, 269], "marketplac": [189, 250, 269], "googl": [189, 209, 229, 269], "amazon": [189, 232, 240], "web": [189, 251, 257, 262, 263, 264, 278], "servic": [189, 249, 256, 269], "softwar": [189, 225, 268, 269, 275], "alibaba": [189, 239, 246, 247, 269], "tencent": [189, 269], "taco": [189, 269], "microsoft": [189, 190, 231], "oliv": [189, 269], "ai": [189, 231, 232, 269, 273, 281], "ecosystem": [189, 269], "lightn": [189, 239], "2024": [189, 283], "03": [189, 283], "sota": [189, 269], "autoround": [189, 226], "gaudi2": 189, "acceler": [189, 214, 228, 232, 240, 249, 252, 256, 268, 269, 273, 274, 277, 280], "pip": [189, 213, 216, 219, 221, 224, 234, 237, 242, 244, 246, 247, 251, 252, 253, 254, 275], "34": [189, 226, 264, 283], "packag": [189, 190, 209, 219, 224, 249, 250, 269, 275, 280], "program": [189, 216, 225, 232, 249], "demonstr": [189, 217, 231, 232, 262, 263, 264, 278], "gauid2": 189, "docker": 189, "gaudi": 189, "stack": 189, "setup": [189, 213, 220, 224, 244, 247, 251, 253, 254, 256, 257, 268], "habana": 189, "habana_visible_devic": 189, "ompi_mca_btl_vader_single_copy_mechan": 189, "cap": 189, "sys_nic": 189, "host": [189, 216, 257, 259, 262, 263, 264], "ipc": 189, "vault": 189, "ubuntu22": 189, "04": [189, 224, 226, 283], "habanalab": 189, "latest": [189, 224, 269, 275], "p": [189, 250, 251, 274], "login": [189, 244, 247, 276], "exec": 189, "container_id": 189, "bash": [189, 254, 278], "optimum": [189, 239, 240, 252, 274], "upgrad": [189, 228], "auto_round": 189, "automodel": 189, "autotoken": [189, 228], "get_dataload": 189, "eleutherai": [189, 226, 253, 277, 283], "neo": [189, 283], "125m": [189, 277], "float_model": 189, "trust_remote_cod": 189, "seqlen": 189, "woq_conf": 189, "quantized_model": [189, 258, 262, 263], "int4": [189, 226, 271, 283], "resnet18": [189, 229, 234, 283], "static_quant_conf": 189, "overview": [189, 280], "jupyterlab": [189, 232, 238, 240, 242, 246, 281], "studio": [189, 240, 249, 259, 281], "topic": 189, "fp4": [189, 231, 274], "nf4": [189, 274], "fp8": [189, 231, 269], "innov": [189, 240, 269], "product": [189, 223, 229, 232, 233, 249, 255, 269, 271, 276, 280], "blog": [189, 269], "meta": [189, 226, 269, 283], "llama": [189, 226, 268, 269, 272, 274, 277, 283], "effect": [189, 190, 268, 269], "oct": [189, 269], "2023": [189, 231, 264, 268, 274, 277], "emnlp": [189, 269], "teq": [189, 269, 272, 274], "trainabl": [189, 269, 274], "equival": [189, 231, 269, 274, 277], "sep": [189, 269], "descent": [189, 269], "releas": [189, 224, 238, 240, 242, 246, 248, 260, 263, 264, 284], "legal": [189, 284], "secur": [189, 251, 269, 284], "request": [189, 257, 258, 259, 262, 263, 264, 271], "ask": [189, 224], "email": 189, "research": [189, 225, 277, 283], "idea": [189, 251, 268, 277, 280], "discord": 189, "join": [189, 252, 257, 262, 263], "technic": 189, "discuss": 189, "wechat": [189, 269], "img": 189, "bridg": [190, 191, 223], "vanilla": [190, 191, 223], "adaptor_registri": 190, "abcadaptor": 190, "__init__": [190, 209, 210, 211, 227, 280], "framework_specific_info": 190, "tune_cfg": [190, 192, 280], "query_fw_cap": [190, 192], "query_fused_pattern": 190, "he": 190, "besid": [190, 214, 254, 274], "introduc": [190, 191, 192, 220, 228, 271, 274, 275, 277, 281], "describ": [190, 192, 209, 213, 220, 251, 278], "past": [190, 274], "abov": [190, 191, 192, 214, 251, 252, 254, 257, 268, 271, 277, 280], "mainten": 190, "difficult": [190, 277], "abil": [190, 191, 211, 220, 231, 277], "fragment": 190, "scenario": [190, 207, 214, 228, 268, 274], "granular": [190, 191, 192, 220, 223, 231, 235, 271, 277, 282], "scheme": [190, 191, 192, 210, 220, 240, 274, 280, 282], "semant": [190, 220], "querybackendcap": [190, 191], "tensorflowqueri": 190, "look": [190, 192, 220, 227, 251, 252, 254, 277, 282], "mla": [190, 229, 271], "becom": [190, 218, 268, 274], "explor": [190, 231], "qtype": 190, "onnxrt_qlinearopsadaptor": 190, "data_load": 190, "inspect_tensor": 190, "op_list": [190, 278], "iteration_list": 190, "inspect_typ": 190, "save_to_disk": 190, "quantization_cfg": 190, "set_tensor": 190, "tensor_dict": 190, "input_graph": 190, "diagnosis_help": 190, "fw": 191, "outlin": [191, 192], "instruct": [191, 192, 214, 224, 229, 244, 247, 251, 252, 253, 254, 268, 269, 270, 271, 277, 283], "extend": [191, 192], "accommod": [191, 192], "incorpor": [191, 192, 215, 268, 280], "give": [191, 249, 280], "diagram": [191, 192, 213, 280], "illustr": [191, 192, 215, 280], "sequencediagram": [191, 192, 259], "autonumb": [191, 192], "query_framework_cap": 191, "opwis": 191, "optypewis": 191, "travers": [191, 192, 274, 280], "\u2776": 191, "\u2777": 191, "\u2778": 191, "\u2779": 191, "\u277a": 191, "\u277b": 191, "previou": [191, 192, 228, 268, 275, 277, 278, 280, 281, 283], "\u277c": 191, "These": [191, 223, 252], "chapter": 191, "node_op": 191, "confirm": 191, "chosen": [191, 208], "tune_config": 191, "conv2d": [191, 192, 213, 218, 220, 254, 277, 278, 280], "int8_conv_config": 191, "optype_wise_": 191, "minmax": [191, 192, 208, 220, 271, 282], "per_channel": [191, 192, 220, 271, 282], "sym": [191, 192, 220, 271, 274, 282], "per_tensor": [191, 192, 220, 271, 282], "tuning_cfg_to_fw": 191, "Its": [191, 208, 268], "quantize_config": 191, "calib_iter": 191, "op_wise_config": 191, "dispatch": [191, 223, 256, 259], "is_perchannel": 191, "is_asymmetr": 191, "weight_bit": 191, "bf16_op": [191, 273], "convert_bf16": 191, "got": [191, 219, 278], "subsequ": [191, 232, 249], "calib": 191, "forward": [191, 228, 251, 268, 270, 271, 274, 277, 278], "larger": [191, 268, 274, 277], "outlier": [191, 208, 213, 254, 274, 277], "caus": [191, 210, 233, 252, 254, 268, 274], "somewhat": 191, "distort": 191, "line": [191, 209, 216, 223, 232, 237, 238, 257, 278], "explain": [192, 213, 277], "let": [192, 220, 237, 268, 270, 282], "overal": [192, 257, 274, 282], "drive": 192, "section": [192, 209, 213, 214, 215, 249, 252, 255, 268, 270, 274, 282], "uint4": 192, "asym": [192, 220, 274, 282], "asymmetr": [192, 271, 274, 280], "independ": 192, "kullback": [192, 214], "leibler": [192, 214], "pytorch_cpu": 192, "1_11_capabl": 192, "cap_s8_1_11": 192, "conv1d": 192, "cap_s8_1_11_conv1d": 192, "state": [192, 235, 268], "per_channel_symmetr": 192, "addition": [192, 216, 268, 280], "per_tensor_symmetr": 192, "One": [192, 209, 211, 216, 223, 254, 268, 269, 280], "due": [192, 218, 268, 271, 277, 278], "nativ": 192, "simul": 192, "observ": [192, 274, 276, 278, 280], "with_arg": 192, "qscheme": 192, "torch_dtyp": 192, "quant_min": 192, "quant_max": 192, "linux": [207, 219, 224, 243, 249], "x86_64": 207, "aarch64": 207, "prove": [208, 274, 277], "benefici": 208, "uniform": [208, 274], "\u03b2": 208, "\u03b1": 208, "fundament": [208, 228], "preserv": [208, 231, 268, 274], "primari": [208, 280], "focu": [208, 280], "essenti": [208, 219], "percentil": 208, "remaind": 208, "enhanc": [208, 232, 268, 269, 273], "resolut": 208, "extrem": 208, "still": [208, 228, 255, 269, 271, 273], "retain": 208, "noteworthi": 208, "vanhouck": 208, "vincent": 208, "andrew": 208, "senior": 208, "mark": 208, "z": [208, 209, 214, 277], "mao": 208, "speed": [208, 228, 240, 268, 269, 271, 280], "2011": 208, "szymon": 208, "migacz": 208, "tensorrt": [208, 229, 271], "2017": 208, "mckinstri": 208, "jeffrei": 208, "l": [208, 214, 278, 280], "et": [208, 231, 274, 277], "al": [208, 231, 274, 277], "discov": [208, 278], "embed": [208, 268], "preprint": [208, 231, 268, 274, 277], "1809": 208, "04191": 208, "2018": 208, "mostli": 209, "summar": [209, 214], "conflict": [209, 219], "overli": 209, "argu": 209, "decis": [209, 227], "prioriti": [209, 260], "pep": 209, "o": [209, 224, 234, 252], "sub_modul": 209, "namespac": 209, "pollut": 209, "subprocess": [209, 210], "popen": 209, "statement": 209, "pipe": 209, "long_str": 209, "extran": 209, "__version__": 209, "pager": 209, "getenv": 209, "readabl": 209, "seem": 209, "worth": [209, 268], "4f": 209, "65421": 209, "f": [209, 214, 216, 271, 274, 277], "sentenc": 209, "register_config": 209, "framework_nam": 209, "algo_nam": 209, "eval_result": 209, "declar": [209, 250], "complex": [209, 228, 229, 268], "typealia": 209, "_lossandgradi": 209, "complextfmap": 209, "xx_func": 209, "ordereddict": 209, "pylanc": 209, "cheeseshopaddress": 209, "chees": 209, "shop": 209, "outofcheeseerror": 209, "crbug": 209, "192795": 209, "cpufreq": [209, 235], "deprec": [209, 244, 247, 275, 279], "facilit": [209, 232], "__all__": 209, "get_all_config_set_from_config_registri": 209, "baseconfig": 209, "composableconfig": 209, "fwk_name": 209, "algorithm_entri": 209, "autotun": 209, "static_qu": 209, "gptq": [209, 226, 272, 274], "rtn": [209, 272, 274], "snippet": [209, 223], "register_algo": 209, "rtn_algo_entri": 209, "smooth_quant_entri": 209, "vscode": [209, 248, 250], "settings_recommend": 209, "often": [210, 214, 254, 267, 268], "encount": 210, "consum": 210, "previous": 210, "lack": [210, 219], "faster": [210, 212, 218, 269, 280, 283], "treat": 210, "Of": 210, "evenli": 210, "divid": [210, 259, 277, 280], "discard": 210, "throw": 210, "awai": 210, "draw": [210, 276, 280], "pin": [210, 242, 246], "reshuffl": 210, "manner": [210, 214, 230], "newdataload": 210, "input_data": 210, "customis": [210, 211, 227], "ensp": [211, 279], "imagerecord": [211, 216, 282], "image_nam": 211, "cocorecord": 211, "gt": [211, 277, 279], "int64": 211, "offer": [211, 231], "style_transf": 211, "content": [211, 257, 258, 262, 263, 264], "tfrecorddataset": 211, "post_training_static_qu": [211, 228, 270, 280], "labelbal": 211, "300": [211, 268], "16": [211, 224, 262, 274, 283], "helloworld": [211, 229, 279], "aid": 212, "deploy": [212, 232, 249, 269, 272, 277], "infrastructur": 212, "gap": [213, 230], "diagnos": 213, "gui": [213, 223, 254, 268], "termin": [213, 242, 243, 246, 252], "repeat": [213, 280], "durat": [213, 258, 262, 263, 276], "cd": [213, 216, 224, 251, 253, 254, 256, 257, 262, 263, 264], "ilsvr2012": 213, "wget": [213, 219, 221, 251, 254], "caff": 213, "berkeleyvis": 213, "caffe_ilsvrc12": 213, "xvzf": 213, "image_recognit": [213, 254, 278], "resnet50_torchvis": 213, "ptq_static": [213, 253], "model_path": [213, 262], "resnet50_v1": [213, 216, 228], "dataset_loc": [213, 254, 262, 278], "label_path": 213, "present": [213, 257, 269, 277], "quantiti": 213, "big": [213, 274], "vec": 213, "mu": 213, "frac": [213, 231, 277], "sigma": 213, "sqrt": 213, "var": 213, "happen": 213, "dispers": [213, 252], "trust": [213, 251], "rule": [213, 232, 268], "v0": [213, 226, 254, 277, 278], "cg": [213, 254, 278], "conv0": [213, 254, 278], "expens": [214, 228, 280], "power": [214, 228, 231, 243, 269], "mobil": [214, 228, 283], "produc": 214, "logit": 214, "softmax": 214, "kd": 214, "d": [214, 222, 250, 252, 258, 268], "patient": 214, "compact": [214, 228, 235, 268], "agnost": 214, "resourc": [214, 256, 259, 280], "convolut": [214, 269], "ia": 214, "attach": [214, 228, 277], "shallow": 214, "depth": [214, 273], "deepest": 214, "deeper": 214, "paper": [214, 268, 274, 277], "Will": [214, 223], "10006": [214, 215], "student_output": [214, 215], "student_loss": [214, 215], "training_func_for_nc": [214, 215], "distil_loss_conf": 214, "accordingli": [214, 240, 277], "promis": [215, 228, 268], "huge": [215, 254, 268, 272], "heavi": 215, "light": 215, "booster": 215, "degrad": [215, 268, 280], "retrain": 215, "novel": [215, 232, 243, 249], "place": [215, 224, 262, 268, 278, 280], "comb": 215, "distillation_criterion": [215, 228, 267], "q_conf": 215, "horovod": 216, "instal": [216, 219, 221, 232, 234, 237, 240, 244, 247, 249, 250, 252, 253, 254, 284], "builtin": 216, "enable_eager_execut": 216, "yaml_file_path": 216, "pre_process": 216, "simpli": [216, 230, 232, 234, 237, 249, 257], "evaluation_result": 216, "evaluation_time_cost": 216, "partit": [216, 268], "distributedsampl": 216, "train_sampl": 216, "train_dataset": [216, 271], "num_replica": 216, "rank": 216, "train_load": 216, "train_kwarg": 216, "adadelta": 216, "distributedoptim": 216, "named_paramet": 216, "broadcast_paramet": 216, "state_dict": [216, 274, 278], "root_rank": 216, "broadcast_optimizer_st": 216, "set_epoch": 216, "batch_idx": 216, "zero_grad": [216, 228, 268], "nll_loss": 216, "log_interv": 216, "0f": 216, "tloss": 216, "6f": 216, "dry_run": 216, "break": [216, 228], "test_func": 216, "num_of_process": 216, "002": 216, "ssh": [216, 249], "prompt": 216, "readm": [216, 262], "exactli": [216, 233], "recognit": [216, 218, 268, 278], "resizecropimagenet": [216, 279], "realiz": [216, 266, 273, 276], "tow": 216, "node1": [216, 262, 263], "node2": [216, 262, 263], "TO": [216, 234, 254], "your_node1_nam": 216, "your_node2_nam": 216, "resnet50_fp32_pretrained_model": 216, "nc_resnet50_v1": 216, "resnet": [216, 283], "varieti": [217, 270, 280], "10k": [217, 221], "speedup": [217, 223, 271], "2x": [217, 223], "vnni": [217, 223, 270, 271], "exchang": 218, "hope": 218, "inc_model": [218, 230], "fp32_onnx_config": 218, "verifi": [218, 226], "vgg16": [218, 283], "mobilenet": [218, 276, 283], "rcnn": 218, "torchscript": [218, 272, 277], "unsupport": [218, 228, 268], "add_relu": 218, "conv1d_relu": 218, "conv2d_relu": 218, "group_norm": 218, "hardswish": 218, "instance_norm": 218, "layer_norm": 218, "leaky_relu": 218, "sigmoid": 218, "toolchain": [219, 269], "bare": 219, "metal": 219, "sudo": [219, 235], "apt": [219, 224, 235, 243], "python3": 219, "dev": [219, 242, 246], "distutil": 219, "libgl1": 219, "mesa": 219, "glx": 219, "libglib2": 219, "ln": 219, "sf": 219, "usr": 219, "incompat": 219, "88": [219, 276, 283], "80": [219, 226, 272, 278, 283], "pyobject": 219, "reinstal": 219, "importerror": 219, "libgl": 219, "share": [219, 220, 274, 277, 280], "yum": [219, 224], "opencv": [219, 224, 243], "conda": [219, 224, 235, 243, 262, 263, 264, 275], "13": [219, 224, 226, 251, 275, 277, 283], "pend": [219, 258], "sqlalchemi": 219, "27": [219, 283], "alemb": 219, "forg": [219, 224], "quick": [220, 229, 268, 281, 282], "friendli": [220, 228, 231, 269, 277, 281, 282], "dive": [220, 281], "unless": 220, "purpos": [220, 229, 249, 251, 270, 271], "syntax": 220, "go": [220, 244, 247, 255, 270, 274, 279], "15": [220, 224, 263], "up1": 220, "up2": 220, "valid_mixed_precis": 220, "concatv2": 220, "maxpool": 220, "avgpool": 220, "depthwiseconv2dn": 220, "relu6": 220, "biasadd": 220, "addn": 220, "addv2": 220, "grappler": 220, "grappler_optim": 220, "constfold": 220, "arithmet": 220, "debug_stripp": 220, "storag": [221, 227, 251, 254, 274, 277], "googleapi": [221, 251, 254], "v1_6": [221, 251, 254], "mobilenet_v1_1": [221, 251, 262], "0_224_frozen": [221, 251, 262], "major": [222, 254, 271, 277], "concept": [222, 276, 281], "rather": [222, 274], "custom_metr": 222, "refin": [222, 268], "420": 223, "geomean": 223, "upload": [223, 244, 247], "click": [223, 232, 233, 240, 243, 249, 254, 269, 278], "qintegerop": [223, 271], "plan": 223, "oneapi": [224, 269, 281], "analyt": [224, 269, 281], "success": [224, 251], "11": [224, 226, 227, 229, 251, 277, 280, 283], "frequent": 224, "pypi": [224, 244, 247], "nightli": 224, "headless": [224, 243], "fastai": 224, "esri": 224, "consolid": 224, "eas": [224, 234, 269], "along": [224, 268, 274], "streamlin": [224, 256, 269], "scienc": 224, "websit": 224, "anaconda": [224, 256, 257], "suit": [224, 250, 278], "formerli": 224, "skylak": 224, "cascad": 224, "lake": [224, 229, 269], "cooper": [224, 229, 269], "ic": [224, 269], "sapphir": [224, 226], "rapid": [224, 226], "hbm": 224, "arctic": 224, "sound": 224, "pont": 224, "vecchio": 224, "cento": [224, 283], "ubuntu": 224, "22": [224, 226, 283], "maco": 224, "ventura": 224, "fortensorflow": 224, "forpytorch": 224, "17": [224, 262], "tf_enable_onednn_opt": 224, "onednn": [224, 229, 271], "newer": 224, "apach": 225, "subject": 225, "accompani": [225, 280], "wish": 225, "bibtex": 225, "misc": 225, "author": 225, "feng": 225, "tian": 225, "hanwen": 225, "haihao": [225, 268], "shen": [225, 268], "suyu": 225, "chen": 225, "howpublish": 225, "year": 225, "logo": 225, "atom": 225, "phi": 225, "pentium": 225, "vtune": 225, "corpor": 225, "subsidiari": 225, "brand": 225, "claim": 225, "sq": [226, 277], "woq": [226, 231], "4th": [226, 269, 271], "gen": [226, 229, 269, 271, 273], "codenam": [226, 229], "quickli": [226, 280, 281], "6b": [226, 253, 277, 283], "facebook": [226, 255, 277, 283], "3b": [226, 277], "30b": [226, 277, 283], "7b": [226, 277, 283], "hf": [226, 277, 283], "13b": [226, 277, 283], "70b": [226, 283], "tiiuae": [226, 277, 283], "40b": 226, "baichuan": 226, "chat": [226, 277, 283], "baichuan2": 226, "bigscienc": [226, 277, 283], "1b7": [226, 277], "databrick": [226, 277, 283], "dolli": [226, 268, 277, 283], "12b": 226, "neox": [226, 283], "20b": [226, 283], "mistralai": 226, "mistral": 226, "thudm": 226, "chatglm2": 226, "wip": 226, "chatglm3": 226, "come": [226, 231, 280], "soon": 226, "lambada_openai": [226, 283], "67": [226, 283], "57": [226, 277, 283], "68": [226, 279, 283], "23": [226, 283], "0098": 226, "0000": [226, 230], "84": [226, 277, 283], "0040": 226, "71": [226, 283], "51": [226, 283], "70": [226, 283], "89": [226, 277, 283], "9913": 226, "53": [226, 283], "0003": [226, 283], "76": [226, 283], "0035": 226, "96": [226, 283], "0043": 226, "59": [226, 277, 283], "9988": 226, "24": [226, 268, 280, 283], "9936": 226, "9963": [226, 283], "46": [226, 283], "47": [226, 283], "99": [226, 283], "0356": 226, "38": [226, 283], "0009": 226, "19": [226, 282, 283], "9968": 226, "35": [226, 268, 283], "9961": [226, 283], "31": [226, 283], "33": [226, 231, 283], "79": [226, 278, 283], "0070": 226, "43": [226, 283], "0018": 226, "72": [226, 277, 283], "25": [226, 268, 283], "9989": 226, "9949": 226, "54": [226, 282, 283], "9940": 226, "58": [226, 263, 283], "0033": 226, "0117": 226, "49": [226, 283], "82": [226, 283], "0046": [226, 283], "0087": 226, "77": [226, 283], "9932": [226, 283], "75": [226, 268, 283], "9997": 226, "0086": [226, 277], "55": [226, 264, 283], "9991": 226, "09": [226, 283], "0057": 226, "97": [226, 228, 283], "0041": 226, "73": [226, 283], "92": [226, 283], "0005": 226, "9942": [226, 283], "9987": 226, "0030": [226, 283], "61": [226, 283], "9962": [226, 283], "9992": 226, "52": [226, 283], "9914": 226, "0023": 226, "9986": 226, "9919": [226, 283], "9977": 226, "94": [226, 279, 283], "0093": 226, "78": [226, 279, 283], "0203": 226, "74": [226, 283], "44": [226, 283], "0237": 226, "0013": 226, "00": [226, 283], "0044": 226, "popularli": 227, "industri": [227, 269], "label_map": 227, "ap": 227, "curv": 227, "turn": [227, 243, 272], "target_boxes_num": 227, "str_label": 227, "int_label": 227, "inturn": 227, "cocomap": 227, "vocmap": 227, "categor": 227, "multiclass": 227, "multilabel": 227, "newmetr": 227, "reset": 227, "reflect": [227, 279], "new_metr": 227, "deliv": [228, 269, 275], "conveni": [228, 256], "veri": [228, 250, 254, 271, 274, 280, 281], "comprehens": [228, 281], "kind": 228, "resort": 228, "inject": 228, "automodelforsequenceclassif": 228, "val_dataset": [228, 271], "val_dataload": [228, 271], "worker": [228, 259, 262, 263, 264, 271], "ping_memori": [228, 271], "formul": 228, "effort": 228, "written": 228, "onnxrt_integ": [228, 282], "onnxrt_qlinear": [228, 282], "image_tensor": [228, 282], "post_training_dynamic_qu": [228, 270, 280], "1000": [228, 258, 282], "2000": 228, "sampling_s": [228, 282], "model_wis": [228, 282], "op_dict": 228, "op_wis": [228, 278, 282], "sigopt_api_token": [228, 276, 280], "sigopt_project_id": [228, 276, 280], "sigopt_experiment_nam": [228, 276, 280], "performance_onli": 228, "demo": 228, "600": [228, 283], "training_arg": 228, "emul": [228, 271], "trainer": [228, 240], "similar": [228, 253, 270, 277, 280, 282], "briefli": [228, 277], "maxim": [228, 268, 280], "pruning_func": 228, "num_train_epoch": [228, 268], "train_dataload": [228, 268, 271], "n_gpu": 228, "gradient_accumulation_step": 228, "clip_grad_norm_": 228, "max_grad_norm": 228, "rate": [228, 268, 271], "start_epoch": [228, 270, 282], "end_epoch": [228, 270, 282], "newli": [228, 268], "on_after_optimizer_step": [228, 268], "layer3": [228, 268], "layer2": [228, 268, 271], "lr_schedul": [228, 268], "weight_decai": [228, 282], "0004": 228, "nesterov": [228, 282], "randomresizedcrop": [228, 279], "totensor": [228, 279], "485": 228, "456": 228, "406": [228, 283], "nepoch": 228, "cnt": 228, "loss_sum": 228, "iter_bar": 228, "tqdm": 228, "desc": 228, "teacher_logit": 228, "train_fun": 228, "training_func": 228, "recent": [228, 229], "growth": [228, 229, 231, 268], "significantli": [228, 229, 252, 254, 268, 280], "bandwidth": [228, 229, 274], "output_model": [228, 252, 254, 278], "exit_polici": [228, 282], "determinist": 228, "arbitrari": [228, 267], "meaning": [228, 267], "reli": [228, 277], "prune_conf": 228, "quantization_aware_training_conf": 228, "aforement": 228, "inset": 228, "p_conf": [228, 267], "ssd_mobilenet_v1": 228, "benchmarkconf": 228, "bfloat16": [229, 232, 240, 273], "ieee": [229, 277], "half": [229, 240], "sixteen": 229, "launch": [229, 250, 255], "3rd": [229, 269, 271, 273], "boost": [229, 233, 249, 268, 269], "x86": 229, "avx512": [229, 271], "vcvtne2ps2bf16": 229, "vcvtneps2bf16": 229, "vdpbf16p": 229, "dot": [229, 271], "fbgemm": [229, 271], "cpuexecutionprovid": [229, 271], "tensorrtexecutionprovid": [229, 271], "cudaexecutionprovid": [229, 271], "cuda": [229, 232, 234, 268, 271], "dnnlexecutionprovid": [229, 271], "avx512_bf16": 229, "plu": 229, "persist": 230, "brought": [230, 233, 240, 271], "tf2": 230, "h5": 230, "hybridblock": 230, "saved_result": [230, 253, 274], "breakthrough": 231, "emerg": [231, 277], "analysi": [231, 232, 249, 268, 276], "chatbot": [231, 269], "fuel": 231, "llm": [231, 268, 269, 272, 274, 277], "nevertheless": 231, "challeng": [231, 272], "explos": 231, "pose": [231, 272], "obstacl": 231, "practic": 231, "mx": 231, "promot": 231, "msfp": 231, "mxfp8": 231, "e5m2": 231, "e8m0": 231, "e4m3": 231, "mxfp6": 231, "fp6": 231, "e3m2": 231, "e2m3": 231, "mxfp4": 231, "e2m1": [231, 274], "mxint8": 231, "occupi": 231, "incur": 231, "energi": 231, "cost": [231, 271, 274], "silicon": 231, "seamlessli": [231, 256, 268, 280], "meticul": 231, "craft": 231, "empow": 231, "sacrif": [231, 269], "distinct": 231, "fall": 231, "consumpt": [231, 277], "amax": 231, "blocksiz": 231, "expon": 231, "floor": 231, "log2": 231, "rmin": [231, 271], "10005": [231, 272], "mxquantconfig": 231, "quant_config": 231, "w_dtype": 231, "act_dtyp": 231, "user_model": 231, "darvish": 231, "rouhani": 231, "bita": 231, "narrow": 231, "inferenc": 231, "2020": 231, "10271": 231, "10281": 231, "ocp": 231, "2310": 231, "10537": 231, "simplifi": [232, 243, 249, 268, 269], "switch": [232, 278], "acquir": 232, "heurist": [232, 249], "great": 232, "amp": [232, 239, 258, 274], "autocast": 232, "jit": [232, 234, 239, 277, 278], "simultan": [232, 256, 267, 270], "my_model": 232, "no_grad": 232, "memory_format": 232, "freez": [232, 268], "112": 232, "rand": [232, 277], "plugin": [232, 250], "aw": [232, 240, 259, 269, 283], "sagemak": [232, 240], "inlin": [232, 237, 240], "neural_cod": [232, 234, 236, 237, 238, 240], "bench": 232, "superbench": 232, "enjoi": [233, 237, 240], "rebuild": [233, 242, 246], "reload": [233, 250, 252, 255], "modern": [234, 274], "democrat": [234, 269], "programm": [234, 240, 249], "nano_bf16_channels_last": 234, "nano_bf16_ipex_channels_last": 234, "nano_bf16_ipex": 234, "nano_bf16": 234, "nano_fp32_channels_last": 234, "nano_fp32_ipex_channels_last": 234, "nano_fp32_ipex": 234, "nano_gpu_to_cpu": 234, "nano_int8": 234, "nano_jit_bf16_channels_last": 234, "nano_jit_bf16_ipex_channels_last": 234, "nano_jit_bf16_ipex": 234, "nano_jit_bf16": 234, "nano_jit_fp32_channels_last": 234, "nano_jit_fp32_ipex_channels_last": 234, "nano_jit_fp32_ipex": 234, "nano_jit_fp32": 234, "nano_onnxruntime_fp32": 234, "nano_onnxruntime_int8_qlinear": 234, "openvino": 234, "nano_openvino_fp32": 234, "nano_openvino_int8": 234, "bc": [235, 243], "conda_prefix": 235, "echo": 235, "tradit": [235, 268], "libjemalloc": 235, "libiomp5": 235, "home": 235, "lib": 235, "ld_preload": 235, "malloc_conf": 235, "oversize_threshold": 235, "background_thread": 235, "metadata_thp": 235, "dirty_decay_m": 235, "9000000000": 235, "muzzy_decay_m": 235, "kmp_affin": 235, "kmp_blocktim": 235, "dnnl_primitive_cache_capac": 235, "governor": 235, "scaling_governor": 235, "powersav": 235, "tee": 235, "pytorch_jit_script": [236, 239], "pytorch_channels_last": [236, 239], "run_bench": 236, "patch": [236, 249], "patch_path": 236, "your_patch_path": 236, "sweep": 236, "sweep_object": 236, "bench_config": 236, "bench_featur": 236, "sai": 237, "run_glu": [237, 238, 260, 263, 264], "requisit": 237, "task_nam": [237, 238, 260, 263, 264], "do_ev": [237, 238, 253, 260, 263, 264], "remain": 237, "itself": [237, 268], "run_glue_optim": 237, "static_ipex": 237, "stock": [238, 277], "auto_qu": 238, "v4": [238, 260, 263, 264, 283], "albert": [238, 283], "sst2": 238, "alexnet": [238, 283], "pytorch_amp": 239, "optimize_for_infer": 239, "pytorch_jit_trac": 239, "pytorch_jit_script_ofi": 239, "pytorch_jit_trace_ofi": 239, "torchdynamo": 239, "pytorch_torchdynamo_jit_script": 239, "pytorch_torchdynamo_jit_trac": 239, "pytorch_torchdynamo_jit_script_ofi": 239, "pytorch_torchdynamo_jit_trace_ofi": 239, "pytorch_inc_bf16": 239, "pytorch_inc_static_quant_fx": 239, "pytorch_inc_static_quant_ipex": 239, "pytorch_inc_static_quant_ipex_xpu": 239, "pytorch_inc_dynamic_qu": 239, "pytorch_ipex_fp32": 239, "pytorch_ipex_bf16": 239, "pytorch_ipex_int8_static_qu": 239, "pytorch_ipex_int8_dynamic_qu": 239, "blade": 239, "disc": 239, "pytorch_aliblad": 239, "pytorch_lightning_bf16_cpu": 239, "tensorflow_amp": 239, "keras_amp": 239, "tensorflow_inc": 239, "keras_inc": 239, "onnx_inc_static_quant_qlinear": 239, "onnx_inc_static_quant_qdq": 239, "onnx_inc_dynamic_qu": 239, "pytorch_inc_huggingface_optimum_stat": 239, "pytorch_inc_huggingface_optimum_dynam": 239, "intel_extension_for_transform": 239, "bigdl": [239, 240], "nano": [239, 240], "nano_": 239, "inc_auto": 239, "delight": 240, "announc": 240, "v": [240, 249, 268, 280, 282], "500": [240, 258], "jupyt": [240, 242, 243, 246], "isa": 240, "adjust": [240, 271, 277], "delta": 240, "acc_delta": 240, "int8_acc": 240, "fp32_acc": 240, "ext": [242, 244, 246, 247, 248], "lab": [242, 243, 244, 246, 247], "nodej": [242, 246], "jlpm": [242, 246], "yarn": [242, 246], "npm": [242, 243, 246], "lieu": [242, 246], "labextens": [242, 243, 246], "typescript": [242, 246], "watch": [242, 246, 255], "immedi": [242, 246, 268], "refresh": [242, 246], "browser": [242, 246, 251, 255], "wait": [242, 246, 249, 259], "rebuilt": [242, 246], "easier": [242, 246, 249, 251, 269], "symlink": [242, 246], "down": 243, "finish": [243, 259], "enter": [243, 249, 257], "leav": 243, "blank": 243, "cell": 243, "gain": [243, 267, 269], "mkl": 243, "jemalloc": 243, "pip3": 243, "pyproject": [244, 247], "toml": [244, 247], "twine": [244, 247], "whl": [244, 247], "dist": [244, 247], "sdist": [244, 247], "bdist_wheel": [244, 247], "frontend": [244, 247, 257, 264], "cut": [244, 247], "admin_github_token": [244, 247], "pypi_token": [244, 247], "npm_token": [244, 247], "secret": [244, 247], "panel": [244, 247, 249], "draft": [244, 247], "changelog": [244, 247, 248], "pkg": [244, 247], "bot": [244, 247], "pick": [244, 247, 250], "feedstock": [244, 247], "hatch": 247, "notabl": 248, "daili": 249, "advantag": [249, 268, 270, 280], "remot": 249, "server": [249, 251, 254, 257, 262, 263, 264], "re": [249, 255, 274], "market": 249, "uninstal": 249, "fill": [249, 276, 279, 280], "upper": 249, "sidebar": 249, "hover": 249, "track": [249, 276], "argpars": 249, "pop": [249, 259], "diff": 249, "manifest": 250, "palett": 250, "src": 250, "registercommand": 250, "amodio": 250, "tsl": 250, "matcher": 250, "dbaeumer": 250, "eslint": [250, 255], "press": 250, "f5": 250, "ctrl": 250, "hello": 250, "world": 250, "breakpoint": 250, "consol": [250, 255], "relaunch": 250, "toolbar": 250, "node_modul": 250, "viewlet": 250, "dropdown": 250, "runner": [250, 255], "startup": 250, "bundl": 250, "neural_insight": [251, 253, 254], "tl": 251, "ui": 251, "12": [251, 283], "5000": 251, "338174d13706855fc6924cec7b3a8ae8": 251, "listen": 251, "port": [251, 258], "firewal": 251, "8080": 251, "cert": 251, "path_to_cert": 251, "crt": 251, "path_to_private_kei": 251, "encrypt": 251, "insecur": 251, "expos": 251, "forfeit": 251, "client": [251, 257, 264], "extern": 251, "threat": 251, "diagnost": 251, "skill": 251, "feel": [251, 255], "layoutlmv3": [252, 283], "seqev": 252, "sentencepiec": 252, "timm": 252, "fvcore": 252, "pillow": 252, "einop": 252, "textdist": 252, "setuptool": 252, "cli": 252, "hypjudi": 252, "finetun": [252, 268, 274], "funsd": [252, 283], "calib_dataset": 252, "incdataset": 252, "eval_dataset": 252, "poor": [252, 278], "9049": 252, "2989": 252, "66": [252, 283], "9631": 252, "glob": 252, "panda": 252, "pd": 252, "set_opt": 252, "max_row": 252, "max_column": 252, "getmtim": 252, "revers": 252, "activations_t": 252, "weights_tabl": [252, 253], "read_csv": 252, "nweight": 252, "descend": 252, "sorted_data": 252, "sort_valu": 252, "ascend": 252, "evid": 252, "tip": 252, "8981": 252, "7502": 252, "run_clm": 253, "dataset_nam": 253, "wikitext": [253, 283], "dataset_config_nam": 253, "do_train": 253, "inspect_sav": 253, "inspect_result": 253, "quan": 253, "model_summari": 253, "incept": [254, 283], "v3": [254, 283], "inception_v3": [254, 278], "inceptionv3_fp32_pretrained_model": [254, 278], "prepare_dataset": 254, "sh": [254, 278], "raw_dir": 254, "img_raw": 254, "delet": [254, 268], "run_tun": 254, "nc_inception_v3": 254, "decreas": [254, 268], "highest": [254, 260, 280], "satisfactori": 254, "webpag": 254, "spike": 254, "bottom": 254, "chart": [254, 271, 276, 278], "concentr": 254, "toler": 254, "But": 254, "bigger": 254, "bootstrap": 255, "localhost": [255, 257, 262, 263], "3000": 255, "lint": 255, "interact": [255, 276], "correctli": 255, "hash": [255, 258], "readi": [255, 268], "aren": 255, "transit": 255, "webpack": 255, "babel": 255, "tweak": 255, "ever": 255, "curat": 255, "suitabl": 255, "middl": [255, 277], "shouldn": 255, "howev": [255, 268, 274, 277], "understand": [255, 271, 278, 281], "wouldn": 255, "couldn": 255, "io": 255, "troubleshoot": 255, "effortlessli": 256, "rest": [256, 257, 262, 263, 264], "grpc": [256, 257, 261, 262, 263, 265], "queue": 256, "elimin": 256, "mpi": [256, 257, 280], "neural_solut": [256, 257, 262, 263, 264], "task_monitor_port": [257, 262, 263, 264], "22222": [257, 262, 263, 264], "result_monitor_port": [257, 262, 263, 264], "33333": [257, 262, 263, 264], "restful_api_port": [257, 262, 263, 264], "hostfil": [257, 259, 262, 263, 264], "grpc_api_port": [257, 262, 263, 264], "api_typ": [257, 262, 263, 264], "conda_env": [257, 262, 263, 264], "upload_path": [257, 262, 263, 264], "8000": [257, 262, 263, 264], "monitor": [257, 262, 263, 264], "3333": [257, 262, 263, 264], "2222": [257, 262, 263, 264], "ns_workspac": [257, 262, 263, 264], "hf_model": [257, 261, 263, 264], "curl": [257, 258, 262, 263], "task_id": [257, 262, 263, 264], "usernam": 257, "db": [257, 259], "serve_log": [257, 262, 263, 264], "frontend_grpc": 257, "task_log": 257, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 257, "task_workspac": 257, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 257, "aliv": 257, "properli": 257, "commonli": [257, 268], "hostnam": 257, "breakdown": 257, "ip": 257, "hous": 257, "host1": [257, 262, 263], "host2": [257, 262, 263], "query_id": 257, "oaa": 258, "host_ip": 258, "task_request": [258, 262, 263, 264], "tuning_info": [258, 262], "optimization_result": [258, 262], "result_path": [258, 262, 263], "closur": 258, "404": [258, 268, 283], "health": 258, "healthi": 258, "400": 258, "alloc": 259, "incom": 259, "taskmonitor": 259, "cluster": [259, 262, 263, 280], "tasklaunch": 259, "resultmonitor": 259, "receiv": [259, 276], "p1": 259, "notif": 259, "p2": 259, "p3": 259, "mpirun": [259, 280], "perf": 259, "p4": 259, "four": [259, 278, 283], "classdiagram": 259, "taskdb": 259, "get_statu": 259, "update_statu": 259, "task_collect": 259, "append_task": 259, "get_all_pending_task": 259, "update_task_statu": 259, "task_db": 259, "wait_new_task": 259, "schedule_task": 259, "dispatch_task": 259, "launch_task": 259, "query_task_statu": 259, "node_list": 259, "reserve_resourc": 259, "get_node_statu": 259, "pool": 259, "gcp": [259, 269], "script_url": [260, 262, 263, 264], "archiv": 260, "tf_example1": [261, 262, 263], "hf_models_grpc": [261, 264], "00173": 262, "01024": 262, "task_request_distribut": 262, "custom_models_optim": 262, "respons": [262, 263, 264, 271], "7602cd63d4c849e7a686a8165a77f69d": [262, 263], "151": 262, "8617": 262, "8213": [262, 283], "number_of_socket": [262, 263], "number_of_thread": [262, 263], "cdf419910f9b4d2a8320d0e420ac1d0a": 263, "optimized_result": 263, "3162": 263, "6488": [263, 283], "06": [264, 282, 283], "d3e10a49326449fb9d0d62f2bfc1cb43": 264, "fastapi": 265, "multi_object": 266, "benefit": 267, "instanti": 267, "neuron": 268, "art": 268, "grown": 268, "unpreced": 268, "increasingli": 268, "crucial": 268, "stand": [268, 280], "consecut": 268, "salient": [268, 274], "shrink": 268, "influenc": 268, "head": 268, "mechan": [268, 276, 281], "contextu": 268, "scene": 268, "haven": 268, "color": [268, 272], "lowest": [268, 280], "formula": [268, 277], "interv": 268, "emsp": 268, "partial": [268, 271], "downstream": 268, "prone": 268, "co": 268, "discourag": 268, "penal": 268, "parameter": 268, "coeffici": 268, "sparsegpt": 268, "lightweight": 268, "rearrang": [268, 274], "perceptron": 268, "mlp": 268, "valuabl": [268, 278], "basi": 268, "mha": 268, "billion": 268, "mpt": [268, 277, 283], "lm": 268, "lamini": [268, 277], "mention": [268, 274], "tend": 268, "exemplifi": 268, "complement": 268, "fortieth": 268, "miss": [268, 271], "grain": [268, 269, 280], "pruner2": 268, "prepare_prun": 268, "retrain_fre": 268, "few": [268, 269, 277, 280], "lm_head": [268, 274], "yourself": 268, "uncertain": 268, "parse_auto_slim_config": 268, "auto_config": 268, "ffn2_sparsiti": 268, "mha_spars": 268, "quit": 268, "straightforward": [268, 274, 277], "carri": 268, "pruning_pattern": 268, "pruning_start": 268, "pruning_end": 268, "sparse_gpt": 268, "embed_out": 268, "card": 268, "hesit": 268, "causal": 268, "clm": 268, "sst": [268, 283], "63": [268, 283], "flan": 268, "t5": 268, "english": 268, "romanian": 268, "381": 268, "yolov5": 268, "2x1": [268, 283], "801": 268, "7895": 268, "signific": [268, 269, 272, 277], "reduct": [268, 272, 282], "xgboost": 268, "namhoon": 268, "lee": 268, "thalaiyasingam": 268, "ajanthan": 268, "philip": 268, "torr": 268, "confer": [268, 277], "2019": 268, "zafrir": 268, "ofir": 268, "ariel": 268, "larei": 268, "boudoukh": 268, "mosh": 268, "wasserblat": 268, "2111": 268, "05754": 268, "2021": 268, "kwon": 268, "kim": 268, "mahonei": 268, "hassoun": 268, "keutzer": 268, "gholami": 268, "pp": 268, "24101": 268, "24116": 268, "frantar": [268, 274], "alistarh": 268, "massiv": 268, "2301": 268, "00774": 268, "apr": 269, "medium": 269, "aug": 269, "juli": 269, "onnxcommunitymeetup2023": 269, "june": 269, "msft": 269, "netflix": 269, "mlperf": [269, 283], "5x": 269, "\u96c6\u6210\u82f1\u7279\u5c14": 269, "\u817e\u8baf\u4e91taco": 269, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 269, "mar": 269, "heterogen": 269, "jan": 269, "busi": 269, "amx": 269, "journei": 269, "dec": 269, "mleffici": 269, "deepen": 269, "foundat": 269, "intellig": 269, "vmware": 269, "applianc": 269, "bitnami": 269, "nov": 269, "neurip": 269, "quala": 269, "minilm": [269, 283], "plug": 269, "twitter": 269, "linkedin": 269, "zone": 269, "land": 269, "pat": 269, "keynot": 269, "intelon": 269, "chines": 269, "purif": 269, "jun": 269, "partner": 269, "feb": 269, "joint": 269, "bilibili": 269, "gestalt": 269, "ml": 269, "youtub": 269, "doubl": 269, "3d": [269, 277], "reconstruct": 269, "abound": 269, "lpot": [269, 275], "nextplatform": 269, "cern": 269, "gan": 269, "3dgan": 269, "iml": 269, "workshop": 269, "asplo": 269, "18": [269, 283], "highli": [269, 274], "intelcaff": 269, "aris": 270, "henc": 270, "onnxrt_qoper": 270, "quant_aware_train": 270, "use_bf16": 270, "weight_compress": [270, 282], "initial_spars": [270, 282], "prune_typ": [270, 282], "basic_magnitud": [270, 282], "update_frequ": 270, "prune_domain": 270, "tile_pattern_1x1": 270, "invent": 271, "On": [271, 283], "theoret": [271, 274], "affin": 271, "math": 271, "zeropoint": 271, "255": [271, 277], "overflow": 271, "rmax": 271, "unseen": 271, "enough": 271, "peopl": 271, "mimic": 271, "fact": 271, "ultim": 271, "pain": 271, "lossi": 271, "philosophi": 271, "neither": 271, "nor": 271, "val_load": 271, "avg": 271, "themselv": 271, "dmlexecutionprovid": 271, "meanwhil": 272, "substanti": 272, "greatli": [272, 274], "even": [272, 274, 277], "constrain": 272, "grei": 272, "blue": 272, "rectangl": 272, "subgraph": [272, 280], "w8a8": [272, 274], "awq": [272, 274], "load_empty_model": 272, "rtn_arg": [272, 274], "lambda": 272, "ouput_dir": 272, "fp32_model_path": 272, "int8_model_path": 272, "ON": 273, "forc": 273, "postposttrainingquantconfig": 273, "datatyp": [273, 280, 283], "cast": [273, 279], "bf16convert": 273, "bf16wrapper": 273, "retrac": 273, "preval": 274, "grow": 274, "demand": 274, "trade": 274, "bottleneck": 274, "roughli": 274, "speak": 274, "factor": [274, 277, 283], "capac": [274, 276], "flop": 274, "famou": 274, "approx": 274, "bmm": 274, "100x": 274, "excel": 274, "stai": [274, 277], "quantif": [274, 277], "think": 274, "intuit": [274, 277], "uniformli": 274, "qlora": 274, "invers": 274, "restor": 274, "protect": 274, "inspir": 274, "c_": 274, "normalfloat": 274, "bnb": 274, "enable_mse_search": 274, "clip": [274, 277], "805": 274, "005": 274, "return_int": 274, "group_dim": 274, "awq_arg": 274, "enable_auto_scal": 274, "91": [274, 277, 283], "gptq_arg": 274, "actord": 274, "diagon": 274, "percdamp": 274, "stabil": 274, "nsampl": 274, "pad_max_length": 274, "use_max_length": 274, "static_group": 274, "mitig": 274, "true_sequenti": 274, "slower": 274, "weightonlylinear": 274, "date": 274, "sym_full_rang": 274, "qweight_config_path": 274, "gptq_config_path": 274, "gptq_config": 274, "use_full_length": 274, "n_block": 274, "compressed_model": 274, "q": [274, 277], "seek": 274, "omit": 274, "rtn_g32asym": 274, "gptq_g32asym": 274, "gptq_g32asym_disable_last_matmul": 274, "gptq_g128asym": 274, "awq_g32asym": 274, "xiao": [274, 277], "guangxuan": [274, 277], "2211": [274, 277], "10438": [274, 277], "wei": [274, 277], "xiui": [274, 277], "suppress": [274, 277], "2209": [274, 277, 283], "13325": [274, 277], "lin": 274, "ji": 274, "2306": 274, "00978": 274, "elia": 274, "2210": 274, "17323": 274, "dettmer": 274, "tim": 274, "2305": 274, "14314": 274, "site": 275, "assist": 275, "inspect": [275, 278], "renam": 275, "sed": 275, "your_script": 275, "backbon": 276, "sigopt_experiment_id": 276, "nc": [276, 280], "certain": 276, "suffici": 276, "ordinari": 276, "latenc": [276, 280], "8266": 276, "8372": 276, "2132": 276, "83": [276, 277, 283], "7495": 276, "8299": 276, "8294": 276, "85": [276, 277, 283], "0837": 276, "8291": 276, "4469": 276, "gigant": 277, "systemat": 277, "migrat": [277, 281], "difficulti": 277, "mathemat": 277, "allevi": 277, "coarsest": 277, "finer": [277, 280], "2d": 277, "matric": 277, "similarli": 277, "finest": 277, "why": [277, 278], "suppos": 277, "6839": 277, "4741": 277, "7451": 277, "9301": 277, "1742": 277, "6835": 277, "num_bit": 277, "q_min": 277, "q_max": 277, "zp": 277, "q_x": 277, "clamp_": 277, "round_": 277, "w_q": 277, "00296431384049356": 277, "172": [277, 283], "192": 277, "w_dq": 277, "2220": 277, "1510": 277, "2420": 277, "2570": 277, "0500": 277, "1890": 277, "mseloss": 277, "1983354538679123": 277, "6848": 277, "4743": 277, "7440": 277, "9308": 277, "1749": 277, "385297635664756e": 277, "07": [277, 282, 283], "dq": 277, "affect": 277, "quantize_per_channel": 277, "x_tmp": 277, "detach": 277, "reshap": 277, "keepdim": 277, "dequantize_per_channel": 277, "0029": [277, 283], "0036": 277, "162": [277, 283], "48": [277, 283], "93": [277, 283], "207": [277, 283], "139": [277, 283], "6837": 277, "4734": 277, "1751": 277, "6821": 277, "637690492221736e": 277, "6376e": 277, "3852e": 277, "cdot": 277, "quantize_per_tensor_absmax": 277, "n_bit": 277, "div_": 277, "0806": 277, "7589": 277, "6038": 277, "3815": 277, "5040": 277, "7174": 277, "5444": 277, "5826": 277, "7772": 277, "5555": 277, "3740": 277, "3253": 277, "0698": 277, "1381": 277, "5972": [277, 283], "0737": 277, "8298": 277, "6883": 277, "2991": 277, "1601": 277, "6506": 277, "8246": 277, "3924": 277, "3845": 277, "8768": 277, "w_scale": 277, "x_q": 277, "x_scale": 277, "120": 277, "0059755356051027775": 277, "119": 277, "006533813662827015": 277, "y_q": 277, "17509": 277, "7608": 277, "4055": 277, "16599": 277, "21020": 277, "10016": 277, "9860": 277, "22444": 277, "y_dq": 277, "6836": 277, "2970": 277, "1583": 277, "6481": 277, "8207": 277, "3911": 277, "3850": 277, "8763": 277, "though": 277, "simplic": 277, "denot": 277, "fp1": 277, "fp2": 277, "subsect": [277, 282], "x1": [277, 280], "x2": [277, 280], "layernorm": 277, "herebi": 277, "optdecoderlay": 277, "blockwis": 277, "waq": 277, "torchsmoothqu": 277, "auto_alpha_arg": 277, "overhead": 277, "leakyrelu": 277, "hardtanh": 277, "instancenorm": 277, "t5norm": 277, "llamanorm": 277, "groupnorm": 277, "lambada": 277, "openai": 277, "sweet": 277, "spot": 277, "region": 277, "560m": 277, "354": 277, "3542": 277, "4634": 277, "4936": 277, "518": 277, "5185": 277, "7b1": [277, 283], "5764": [277, 283], "5977": 277, "bloomz": [277, 283], "3947": 277, "3930": 277, "4828": 277, "4906": 277, "5018": 277, "4980": 277, "5593": [277, 283], "5552": 277, "379": 277, "3757": 277, "350m": 277, "4516": 277, "4533": 277, "5789": 277, "5742": 277, "6365": 277, "6404": 277, "6769": [277, 283], "6804": [277, 283], "6872": 277, "6814": 277, "7149": 277, "7128": 277, "66b": 277, "7398": 277, "7326": 277, "7361": [277, 283], "7357": 277, "7627": [277, 283], "7590": 277, "7759": [277, 283], "7840": 277, "65b": 277, "7908": 277, "7957": 277, "7392": [277, 283], "7335": 277, "7058": [277, 283], "6994": 277, "7677": [277, 283], "7615": [277, 283], "6831": [277, 283], "mbzuai": 277, "124m": 277, "3804": 277, "3887": 277, "774m": 277, "5048": 277, "5057": 277, "5b": 277, "5443": [277, 283], "5436": 277, "mosaicml": [277, 283], "655": [277, 283], "6499": 277, "stabilityai": 277, "stablelm": 277, "4172": 277, "4149": 277, "togethercomput": 277, "redpajama": 277, "incit": 277, "6542": 277, "6735": 277, "6718": 277, "6740": [277, 283], "6569": 277, "6621": 277, "7143": 277, "7221": 277, "6895": 277, "6953": [277, 283], "6866": [277, 283], "6297": 277, "6247": 277, "6437": [277, 283], "6392": 277, "7332": 277, "7632": 277, "asterisk": 277, "consider": 277, "amount": 277, "arang": 277, "tolist": 277, "default_alpha": 277, "alpha_min": 277, "alpha_max": 277, "alpha_step": 277, "step_siz": 277, "shared_criterion": 277, "do_blockwis": 277, "jason": 277, "transact": 277, "yvinec": 277, "edouard": 277, "proceed": 277, "cvf": 277, "winter": 277, "instrument": 278, "writer": 278, "_pre_eval_hook": 278, "_post_eval_hook": 278, "submodul": 278, "whitelist": 278, "_recordingobserv": 278, "output_tensors_dict": 278, "current_it": 278, "get_tensor_valu": 278, "_observer_forward_hook": 278, "activation_post_process": 278, "_add_observer_": 278, "child": 278, "named_children": 278, "leaf": 278, "add_modul": 278, "register_forward_hook": 278, "dump_tim": 278, "summarywrit": 278, "_acc": 278, "tune_": 278, "add_graph": 278, "get_observer_dict": 278, "observer_dict": 278, "strip": 278, "is_quant": 278, "add_histogram": 278, "shell": 278, "bind_al": 278, "logdir_spec": 278, "tune_0_acc0": 278, "tune_1": 278, "tune_1_acc0": 278, "baseline_acc_0": 278, "776": 278, "tune_1_acc_0": 278, "095": 278, "runs_v3": 278, "run_tuning_dump_tensor": 278, "inceptionv3": 278, "skip": [278, 280], "run_quant": 278, "topologi": 278, "nc_inceptionv3": 278, "inceptionv3_dump_tensor": 278, "eightbit": 278, "requant": 278, "disappear": 278, "centercrop": 279, "randomcrop": 279, "cropres": 279, "decodeimag": 279, "jpeg": 279, "encodejp": 279, "alignimagechannel": 279, "116": 279, "103": [279, 283], "017": 279, "bilinearimagenet": [279, 282], "topilimag": 279, "padding_mod": 279, "border": 279, "pixel": 279, "edg": 279, "colorjitt": 279, "bright": 279, "satur": 279, "hue": 279, "jitter": 279, "tondarrai": 279, "o1": 280, "human": 280, "concret": 280, "aggress": 280, "classic": 280, "flowchart": 280, "htmllabel": 280, "td": 280, "classdef": 280, "itemstyl": 280, "cce5ff": 280, "stroke": 280, "99ccff": 280, "s1": 280, "s2": 280, "s3": 280, "s4": 280, "s5": 280, "s6": 280, "s7": 280, "nbsp": [280, 283], "subgraphstyl": 280, "ffffff": 280, "attempt": 280, "post_training_auto_qu": 280, "trial": 280, "increment": 280, "ii": 280, "confidence_batch": 280, "spent": 280, "hawq_v2_loss": 280, "model_loss": 280, "black": 280, "discret": 280, "compli": 280, "prior": 280, "posterior": 280, "short": 280, "never": 280, "loglevel": 280, "endlessli": 280, "perspect": 280, "smbo": 280, "appl": 280, "surrog": 280, "quantil": 280, "densiti": 280, "parzen": 280, "greatest": 280, "hour": 280, "dai": 280, "next_tune_cfg": 280, "overridden": 280, "replic": 280, "replica": 280, "fed": 280, "synchron": 280, "number_of_process": 280, "run_cmd": 280, "abctunestrategi": 280, "familiar": 281, "notebook": 281, "introduct": 281, "organ": 282, "logic": 282, "mobilenet_v1": 282, "hyper": 282, "40": [282, 283], "adam": 282, "beta_1": 282, "beta_2": 282, "999": 282, "epsilon": 282, "sparsecategoricalcrossentropi": 282, "sum_over_batch_s": 282, "from_logit": 282, "1x": 283, "platinum": 283, "8480": 283, "8ghz": 283, "56": 283, "ht": 283, "turbo": 283, "256gb": 283, "16x16gb": 283, "ddr5": 283, "4800": 283, "mt": 283, "bio": 283, "3a14": 283, "tel2p1": 283, "microcod": 283, "0x2b0001b0": 283, "gcc": 283, "20210514": 283, "red": 283, "hat": 283, "visit": 283, "1s4c14ins1bsthroughput": 283, "sec": 283, "1720": 283, "582": 283, "95x": 283, "1517": 283, "570": 283, "65": 283, "66x": 283, "resnet101": 283, "41": 283, "1058": 283, "382": 283, "77x": 283, "69": 283, "2080": 283, "951": 283, "19x": 283, "1587": 283, "863": 283, "37": 283, "84x": 283, "1052": 283, "434": 283, "42x": 283, "707": 283, "234": 283, "02x": 283, "320": 283, "179": 283, "79x": 283, "4312": 283, "1512": 283, "85x": 283, "2287": 283, "1406": 283, "63x": 283, "1367": 283, "59x": 283, "vgg19": 283, "1244": 283, "176": 283, "04x": 283, "resnetv2": 283, "780": 283, "34x": 283, "494": 283, "329": 283, "50x": 283, "152": 283, "349": 283, "235": 283, "48x": 283, "densenet": 283, "161": 283, "29": 283, "282": 283, "223": 283, "26x": 283, "1284": 283, "756": 283, "70x": 283, "1280": 283, "530": 283, "cnn": 283, "39": 283, "26": 283, "178": 283, "13x": 283, "yolov3": 283, "249": 283, "64x": 283, "28x": 283, "36": 283, "05x": 283, "86": 283, "390": 283, "212": 283, "83x": 283, "vit": 283, "81": 283, "230": 283, "142": 283, "62x": 283, "1989": 283, "31x": 283, "1165": 283, "303": 283, "953": 283, "302": 283, "15x": 283, "resnest50": 283, "365": 283, "21x": 283, "resnext101_32x8d": 283, "548": 283, "104": 283, "27x": 283, "efficientnet_b0": 283, "636": 283, "62": 283, "566": 283, "12x": 283, "efficientnet_b3": 283, "471": 283, "358": 283, "32x": 283, "peleenet": 283, "790": 283, "504": 283, "57x": 283, "yolo": 283, "137": 283, "88x": 283, "175": 283, "23x": 283, "camembert": 283, "393": 283, "174": 283, "783": 283, "344": 283, "684": 283, "99x": 283, "312": 283, "155": 283, "60": 283, "01x": 283, "funnel": 283, "281": 283, "395": 283, "173": 283, "373": 283, "405": 283, "30x": 283, "stsb": 283, "396": 283, "136": 283, "377": 283, "17x": 283, "391": 283, "25x": 283, "135": 283, "61x": 283, "117": 283, "93x": 283, "lvwerra": 283, "pegasu": 283, "samsum": 283, "1981": 283, "598": 283, "1095": 283, "298": 283, "67x": 283, "549": 283, "29x": 283, "375": 283, "hellaswag": 283, "winogrand": 283, "piqa": 283, "word_perplex": 283, "4954": 283, "6409": 283, "7541": 283, "6434": 283, "8816": 283, "gptqw4g128asym": 283, "679": 283, "4895": 283, "6433": 283, "7476": 283, "6399": 283, "9945": 283, "0999": 283, "gptqw4g32asym": 283, "6829": 283, "4923": 283, "6401": 283, "7486": 283, "6410": 283, "0141": 283, "gptqw4g128sym": 283, "685": 283, "4907": 283, "6361": 283, "7443": 283, "6390": 283, "1498": 283, "gptqw4g32sym": 283, "6911": 283, "4899": 283, "6448": 283, "7497": 283, "6439": 283, "0008": 283, "0927": 283, "5049": 283, "6543": 283, "7628": 283, "6497": 283, "2862": 283, "4984": 283, "6535": 283, "7568": 283, "6473": 283, "4193": 283, "6885": 283, "4973": 283, "753": 283, "6455": 283, "9935": 283, "4607": 283, "decapoda": 283, "5642": 283, "6709": 283, "7835": 283, "6887": 283, "4202": 283, "7244": 283, "5603": 283, "6614": 283, "6824": 283, "9909": 283, "5881": 283, "5911": 283, "7009": 283, "7878": 283, "7106": 283, "7518": 283, "5843": 283, "6961": 283, "7911": 283, "4319": 283, "7572": 283, "5898": 283, "7056": 283, "7894": 283, "7105": 283, "9998": 283, "3429": 283, "7596": 283, "5841": 283, "6977": 283, "7905": 283, "7080": 283, "4916": 283, "6266": 283, "7277": 283, "8096": 283, "7350": 283, "2384": 283, "778": 283, "624": 283, "7269": 283, "8047": 283, "7334": 283, "9979": 283, "4237": 283, "7706": 283, "6239": 283, "7285": 283, "8058": 283, "7322": 283, "4697": 283, "7836": 283, "6195": 283, "7337": 283, "9983": 283, "5604": 283, "5732": 283, "648": 283, "7715": 283, "6746": 283, "7107": 283, "6982": 283, "5637": 283, "6527": 283, "7704": 283, "6713": 283, "9950": 283, "9702": 283, "5682": 283, "6575": 283, "7758": 283, "6742": 283, "9994": 283, "9317": 283, "567": 283, "6902": 283, "7353": 283, "6622": 283, "7829": 283, "6862": 283, "9635": 283, "7246": 283, "5617": 283, "6756": 283, "7797": 283, "6854": 283, "9931": 283, "2799": 283, "7312": 283, "6059": 283, "7103": 283, "7077": 283, "2213": 283, "7273": 283, "6018": 283, "7088": 283, "7742": 283, "7030": 283, "9934": 283, "2538": 283, "083": 283, "7283": 283, "6053": 283, "7024": 283, "7764": 283, "7031": 283, "1889": 283, "374": 283, "727": 283, "5997": 283, "7018": 283, "9916": 283, "2504": 283, "497": 283, "7122": 283, "8984": 283, "5933": 283, "689": 283, "7851": 283, "7075": 283, "1556": 283, "448": 283, "7675": 283, "5934": 283, "7856": 283, "7111": 283, "9984": 283, "1514": 283, "927": 283, "7566": 283, "5899": 283, "7032": 283, "9953": 283, "1374": 283, "728": 283, "4628": 283, "6456": 283, "6029": 283, "6438": 283, "5799": 283, "4542": 283, "6004": 283, "9957": 283, "0626": 283, "4789": 283, "6134": 283, "7432": 283, "5525": 283, "4731": 283, "6504": 283, "7617": 283, "6094": 283, "7828": 283, "5098": 283, "7622": 283, "6505": 283, "3242": 283, "6878": 283, "5058": 283, "6393": 283, "7633": 283, "6491": 283, "9978": 283, "5514": 283, "6864": 283, "5084": 283, "6519": 283, "6509": 283, "0006": 283, "4728": 283, "6876": 283, "5045": 283, "6474": 283, "9952": 283, "6379": 283, "5282": 283, "614": 283, "7448": 283, "6312": 283, "6377": 283, "5228": 283, "5991": 283, "6261": 283, "4096": 283, "6224": 283, "4271": 283, "577": 283, "722": 283, "5871": 283, "9359": 283, "6123": 283, "4227": 283, "5738": 283, "7203": 283, "5823": 283, "9917": 283, "3377": 283, "615": 283, "4259": 283, "5714": 283, "7247": 283, "9951": 283, "2083": 283, "6154": 283, "4208": 283, "5777": 283, "7198": 283, "5834": 283, "9937": 283, "3121": 283, "7233": 283, "5359": 283, "7753": 283, "195": 283, "7186": 283, "5328": 283, "7699": 283, "6687": 283, "9922": 283, "3463": 283, "7268": 283, "533": 283, "659": 283, "6726": 283, "2897": 283, "5718": 283, "6859": 283, "7927": 283, "6890": 283, "9324": 283, "7006": 283, "5655": 283, "6803": 283, "7965": 283, "6857": 283, "1515": 283, "5752": 283, "6748": 283, "7845": 283, "6724": 283, "5951": 283, "6472": 283, "5716": 283, "6685": 283, "784": 283, "6678": 283, "8539": 283, "6918": 283, "5819": 283, "678": 283, "6861": 283, "8863": 283, "5765": 283, "6827": 283, "7873": 283, "6832": 283, "9958": 283, "1451": 283, "storywrit": 283, "693": 283, "5477": 283, "663": 283, "6719": 283, "9125": 283, "6661": 283, "7813": 283, "6693": 283, "1137": 283, "rw": 283, "6604": 283, "5419": 283, "6598": 283, "6594": 283, "7616": 283, "6484": 283, "5369": 283, "7807": 283, "6559": 283, "9947": 283, "9411": 283, "6571": 283, "5398": 283, "6582": 283, "6579": 283, "8809": 283, "652": 283, "535": 283, "7682": 283, "6532": 283, "9906": 283, "0048": 283, "5177": 283, "6669": 283, "7824": 283, "5053": 283, "6301": 283, "5142": 283, "6654": 283, "6483": 283, "9933": 283, "8146": 283, "517": 283, "9941": 283, "1666": 283, "734": 283, "1658": 283, "1495": 283, "733": 283, "1661": 283, "732": 283, "1713": 283, "767": 283, "1747": 283, "770": 283, "7519": 283, "4430": 283, "4413": 283, "72x": 283, "7190": 283, "4019": 283, "613": 283, "170": 283, "611": 283, "186": 283, "619": 283, "184": 283, "36x": 283, "623": 283, "5711": 283, "2584": 283, "6136": 283, "2630": 283, "33x": 283, "shufflenet": 283, "6820": 283, "3686": 283, "googlenet": 283, "1971": 283, "1120": 283, "76x": 283, "1838": 283, "1142": 283, "squeezenet": 283, "10163": 283, "5771": 283, "10339": 283, "6002": 283, "caffenet": 283, "2805": 283, "1077": 283, "60x": 283, "4351": 283, "822": 283, "2169": 283, "893": 283, "43x": 283, "2232": 283, "841": 283, "65x": 283, "zfnet": 283, "921": 283, "525": 283, "75x": 283, "925": 283, "534": 283, "73x": 283, "1862": 283, "1161": 283, "1956": 283, "1262": 283, "55x": 283, "efficientnet": 283, "2793": 283, "1383": 283, "beit": 283, "206": 283, "91x": 283, "duc": 283, "74x": 283, "ultra": 283, "8780": 283, "1920": 283, "emot": 283, "ferplu": 283, "6360": 283, "3067": 283, "07x": 283, "arcfac": 283, "449": 283, "511": 283, "484": 283, "222": 283, "18x": 283, "integerop": 283, "635": 283, "1324": 283, "244": 283, "47x": 283, "440": 283, "214": 283, "06x": 283, "715": 283, "201": 283, "03x": 283, "714": 283, "213": 283, "339": 283, "58x": 283, "215": 283, "89x": 283, "712": 283, "217": 283, "l12": 283, "h384": 283, "1209": 283, "588": 283, "1268": 283, "16x": 283, "1253": 283, "399": 283, "14x": 283, "l6": 283, "1139": 283, "94x": 283, "2365": 283, "08x": 283, "718": 283, "35x": 283, "electra": 283, "discrimin": 283, "1951": 283, "71x": 283, "2198": 283, "1129": 283, "mini": 283, "5814": 283, "3388": 283, "6396": 283, "3445": 283, "86x": 283, "bart": 283, "126": 283, "spanbert": 283, "multilingu": 283, "82x": 283, "118": 283, "46x": 283, "layoutlmv2": 283, "perplex": 283, "2788": 283, "7002": 283, "4124": 283, "9921": 283, "3950": 283, "9892": 283, "9163": 283, "7240": 283, "9902": 283, "0438": 283, "7634": 283, "1186": 283, "9944": 283, "1276": 283, "7543": 283, "6181": 283, "rtnw4g32asym": 283, "6496": 283, "9967": 283, "7964": 283, "6612": 283, "rtnw4g32sym": 283, "7941": 283, "7243": 283, "9971": 283, "taskdataset": 283, "accuracyspars": 283, "ratiospars": 283, "commentsbalancedor": 283, "unbalanc": 283, "answeringsquad": 283, "87f1": 283, "momentumunbalanc": 283, "momentumbalanc": 283, "90f1": 283, "59f1": 283, "23f1": 283, "classificationmrpc": 283, "52f1": 283, "26f1": 283, "classificationsst": 283, "61accuraci": 283, "recognitionimagenet": 283, "95top1": 283, "v5s6": 283, "detectioncoco": 283, "ap0": 283, "6ap0": 283, "584": 283, "34f1": 283, "lassounbalanc": 283, "classificationmnli": 283, "mm": 283, "allbalanc": 283, "32accuraci": 283, "sensitivitybalanc": 283, "classificationqqp": 283, "classificationqnli": 283, "54accuraci": 283, "em": 283, "mobilenetv2": 283, "wideresnet40": 283, "9522": 283, "8178": 283, "0213": 283, "8235": 283, "027": 283, "5494": 283, "7153": 283, "5540": 283, "5523": 283, "vgg": 283, "bn": 283, "7022": 283, "7415": 283, "7025": 283, "6739": 283, "7399": 283, "6845": 283, "0106": 283, "blendcnn": 283, "7034": 283, "8382": 283, "bilstm": 283, "8314": 283, "9403": 283, "9048": 283, "0734": 283, "7323": 283, "8256": 283, "8084": 283, "8814": 283, "7442": 283, "8371": 283, "0119": 283, "0115": 283, "tinybert": 283, "8018": 283, "8044": 283, "8363": 283, "8411": 283, "8025": 283, "8074": 283, "0007": 283, "8626": 283, "9091": 283, "8782": 283, "8684": 283, "8259": 283, "0058": 283, "distilroberta": 283, "6057": 283, "6187": 283, "0130": 283, "c6i": 283, "2xlarg": 283, "c6a": 283, "c6g": 283, "a100cuda": 283, "executionprovid": 283}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [129, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[3, 0, 0, "-", "algorithm"], [6, 0, 0, "-", "benchmark"], [7, 0, 0, "-", "config"], [8, 0, 0, "-", "contrib"], [23, 0, 0, "-", "data"], [76, 0, 0, "-", "experimental"], [136, 0, 0, "-", "metric"], [138, 0, 0, "-", "mix_precision"], [140, 0, 0, "-", "model"], [148, 0, 0, "-", "objective"], [149, 0, 0, "-", "profiling"], [150, 0, 0, "-", "quantization"], [158, 0, 0, "-", "strategy"], [169, 0, 0, "-", "training"], [173, 0, 0, "-", "utils"], [182, 0, 0, "-", "version"]], "neural_compressor.algorithm": [[1, 0, 0, "-", "algorithm"], [2, 0, 0, "-", "fast_bias_correction"], [4, 0, 0, "-", "smooth_quant"], [5, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[1, 1, 1, "", "ALGORITHMS"], [1, 1, 1, "", "Algorithm"], [1, 1, 1, "", "AlgorithmScheduler"], [1, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[2, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[4, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[5, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[6, 2, 1, "", "benchmark_with_raw_cmd"], [6, 2, 1, "", "call_one"], [6, 2, 1, "", "config_instance"], [6, 2, 1, "", "fit"], [6, 2, 1, "", "generate_prefix"], [6, 2, 1, "", "get_architecture"], [6, 2, 1, "", "get_bounded_threads"], [6, 2, 1, "", "get_core_ids"], [6, 2, 1, "", "get_physical_ids"], [6, 2, 1, "", "get_threads"], [6, 2, 1, "", "get_threads_per_core"], [6, 2, 1, "", "profile"], [6, 2, 1, "", "run_instance"], [6, 2, 1, "", "set_all_env_var"], [6, 2, 1, "", "set_env_var"], [6, 2, 1, "", "summary_benchmark"]], "neural_compressor.config": [[7, 1, 1, "", "AccuracyCriterion"], [7, 1, 1, "", "BenchmarkConfig"], [7, 1, 1, "", "DistillationConfig"], [7, 1, 1, "", "DotDict"], [7, 1, 1, "", "ExportConfig"], [7, 1, 1, "", "HPOConfig"], [7, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [7, 1, 1, "", "Keras"], [7, 1, 1, "", "KnowledgeDistillationLossConfig"], [7, 1, 1, "", "MXNet"], [7, 1, 1, "", "MixedPrecisionConfig"], [7, 1, 1, "", "NASConfig"], [7, 1, 1, "", "ONNX"], [7, 1, 1, "", "ONNXQlinear2QDQConfig"], [7, 1, 1, "", "Options"], [7, 1, 1, "", "PostTrainingQuantConfig"], [7, 1, 1, "", "PyTorch"], [7, 1, 1, "", "QuantizationAwareTrainingConfig"], [7, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [7, 1, 1, "", "TF2ONNXConfig"], [7, 1, 1, "", "TensorFlow"], [7, 1, 1, "", "Torch2ONNXConfig"], [7, 1, 1, "", "TuningCriterion"], [7, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[9, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[10, 0, 0, "-", "sigopt"], [11, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[10, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[11, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[18, 0, 0, "-", "datasets"], [22, 0, 0, "-", "filters"], [25, 0, 0, "-", "transforms"]], "neural_compressor.data.datasets": [[12, 0, 0, "-", "bert_dataset"], [13, 0, 0, "-", "coco_dataset"], [14, 0, 0, "-", "dataset"], [15, 0, 0, "-", "dummy_dataset"], [16, 0, 0, "-", "dummy_dataset_v2"], [17, 0, 0, "-", "imagenet_dataset"], [19, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[12, 1, 1, "", "InputFeatures"], [12, 1, 1, "", "ONNXRTBertDataset"], [12, 1, 1, "", "ParseDecodeBert"], [12, 1, 1, "", "PytorchBertDataset"], [12, 1, 1, "", "TensorflowBertDataset"], [12, 1, 1, "", "TensorflowModelZooBertDataset"], [12, 2, 1, "", "convert_examples_to_features"], [12, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[13, 1, 1, "", "COCONpy"], [13, 1, 1, "", "COCORaw"], [13, 1, 1, "", "COCORecordDataset"], [13, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[14, 1, 1, "", "CIFAR10"], [14, 1, 1, "", "CIFAR100"], [14, 1, 1, "", "Dataset"], [14, 1, 1, "", "Datasets"], [14, 1, 1, "", "FashionMNIST"], [14, 1, 1, "", "ImageFolder"], [14, 1, 1, "", "IterableDataset"], [14, 1, 1, "", "MNIST"], [14, 1, 1, "", "MXNetCIFAR10"], [14, 1, 1, "", "MXNetCIFAR100"], [14, 1, 1, "", "MXNetDatasets"], [14, 1, 1, "", "MXNetFashionMNIST"], [14, 1, 1, "", "MXNetImageFolder"], [14, 1, 1, "", "MXNetMNIST"], [14, 1, 1, "", "ONNXRTITDatasets"], [14, 1, 1, "", "ONNXRTQLDatasets"], [14, 1, 1, "", "PyTorchDatasets"], [14, 1, 1, "", "PytorchCIFAR10"], [14, 1, 1, "", "PytorchCIFAR100"], [14, 1, 1, "", "PytorchFashionMNIST"], [14, 1, 1, "", "PytorchMNIST"], [14, 1, 1, "", "PytorchMxnetWrapDataset"], [14, 1, 1, "", "PytorchMxnetWrapFunction"], [14, 1, 1, "", "Tensorflow"], [14, 1, 1, "", "TensorflowCIFAR10"], [14, 1, 1, "", "TensorflowCIFAR100"], [14, 1, 1, "", "TensorflowDatasets"], [14, 1, 1, "", "TensorflowFashionMNIST"], [14, 1, 1, "", "TensorflowImageRecord"], [14, 1, 1, "", "TensorflowMNIST"], [14, 1, 1, "", "TensorflowTFRecordDataset"], [14, 1, 1, "", "TensorflowVOCRecord"], [14, 2, 1, "", "calculate_md5"], [14, 2, 1, "", "check_integrity"], [14, 2, 1, "", "dataset_registry"], [14, 2, 1, "", "download_url"], [14, 3, 1, "", "framework_datasets"], [14, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[15, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, 1, 1, "", "DummyDataset"], [16, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, 1, 1, "", "ImagenetRaw"], [17, 1, 1, "", "MXNetImagenetRaw"], [17, 1, 1, "", "ONNXRTImagenetDataset"], [17, 1, 1, "", "PytorchImagenetRaw"], [17, 1, 1, "", "TensorflowImagenetDataset"], [17, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[20, 0, 0, "-", "coco_filter"], [21, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[20, 1, 1, "", "LabelBalanceCOCORawFilter"], [20, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[21, 1, 1, "", "FILTERS"], [21, 1, 1, "", "Filter"], [21, 1, 1, "", "MXNetFilters"], [21, 1, 1, "", "ONNXRTITFilters"], [21, 1, 1, "", "ONNXRTQLFilters"], [21, 1, 1, "", "PyTorchFilters"], [21, 1, 1, "", "TensorflowFilters"], [21, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[24, 0, 0, "-", "imagenet_transform"], [26, 0, 0, "-", "postprocess"], [27, 0, 0, "-", "tokenization"], [28, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[24, 1, 1, "", "BilinearImagenetTransform"], [24, 1, 1, "", "LabelShift"], [24, 1, 1, "", "ONNXResizeCropImagenetTransform"], [24, 1, 1, "", "OnnxBilinearImagenetTransform"], [24, 1, 1, "", "ParseDecodeImagenet"], [24, 1, 1, "", "ParseDecodeImagenetTransform"], [24, 1, 1, "", "QuantizedInput"], [24, 1, 1, "", "ResizeWithAspectRatio"], [24, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [24, 1, 1, "", "TensorflowShiftRescale"], [24, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[26, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[27, 1, 1, "", "BasicTokenizer"], [27, 1, 1, "", "FullTokenizer"], [27, 1, 1, "", "WordpieceTokenizer"], [27, 2, 1, "", "convert_by_vocab"], [27, 2, 1, "", "convert_to_unicode"], [27, 2, 1, "", "load_vocab"], [27, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[28, 1, 1, "", "AlignImageChannelTransform"], [28, 1, 1, "", "BaseTransform"], [28, 1, 1, "", "CastONNXTransform"], [28, 1, 1, "", "CastPyTorchTransform"], [28, 1, 1, "", "CastTFTransform"], [28, 1, 1, "", "CenterCropTFTransform"], [28, 1, 1, "", "CenterCropTransform"], [28, 1, 1, "", "CollectTransform"], [28, 1, 1, "", "ComposeTransform"], [28, 1, 1, "", "CropResizeTFTransform"], [28, 1, 1, "", "CropResizeTransform"], [28, 1, 1, "", "CropToBoundingBox"], [28, 1, 1, "", "InputFeatures"], [28, 1, 1, "", "MXNetCropResizeTransform"], [28, 1, 1, "", "MXNetCropToBoundingBox"], [28, 1, 1, "", "MXNetNormalizeTransform"], [28, 1, 1, "", "MXNetTransforms"], [28, 1, 1, "", "MXNetTranspose"], [28, 1, 1, "", "NormalizeTFTransform"], [28, 1, 1, "", "NormalizeTransform"], [28, 1, 1, "", "ONNXRTCropToBoundingBox"], [28, 1, 1, "", "ONNXRTITTransforms"], [28, 1, 1, "", "ONNXRTQLTransforms"], [28, 1, 1, "", "PaddedCenterCropTransform"], [28, 1, 1, "", "ParseDecodeVocTransform"], [28, 1, 1, "", "PyTorchAlignImageChannel"], [28, 1, 1, "", "PyTorchCropResizeTransform"], [28, 1, 1, "", "PyTorchNormalizeTransform"], [28, 1, 1, "", "PyTorchTransforms"], [28, 1, 1, "", "PyTorchTranspose"], [28, 1, 1, "", "PytorchMxnetTransform"], [28, 1, 1, "", "PytorchMxnetWrapFunction"], [28, 1, 1, "", "RandomCropTFTransform"], [28, 1, 1, "", "RandomCropTransform"], [28, 1, 1, "", "RandomHorizontalFlip"], [28, 1, 1, "", "RandomResizedCropMXNetTransform"], [28, 1, 1, "", "RandomResizedCropPytorchTransform"], [28, 1, 1, "", "RandomResizedCropTFTransform"], [28, 1, 1, "", "RandomResizedCropTransform"], [28, 1, 1, "", "RandomVerticalFlip"], [28, 1, 1, "", "RescaleKerasPretrainTransform"], [28, 1, 1, "", "RescaleTFTransform"], [28, 1, 1, "", "RescaleTransform"], [28, 1, 1, "", "ResizeMXNetTransform"], [28, 1, 1, "", "ResizePytorchTransform"], [28, 1, 1, "", "ResizeTFTransform"], [28, 1, 1, "", "ResizeTransform"], [28, 1, 1, "", "ResizeWithRatio"], [28, 1, 1, "", "SquadExample"], [28, 1, 1, "", "TFModelZooCollectTransform"], [28, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [28, 1, 1, "", "TFSquadV1PostTransform"], [28, 1, 1, "", "TRANSFORMS"], [28, 1, 1, "", "TensorflowCropToBoundingBox"], [28, 1, 1, "", "TensorflowRandomHorizontalFlip"], [28, 1, 1, "", "TensorflowRandomVerticalFlip"], [28, 1, 1, "", "TensorflowResizeWithRatio"], [28, 1, 1, "", "TensorflowTransform"], [28, 1, 1, "", "TensorflowTransforms"], [28, 1, 1, "", "TensorflowTranspose"], [28, 1, 1, "", "TensorflowWrapFunction"], [28, 1, 1, "", "ToArray"], [28, 1, 1, "", "ToNDArrayTransform"], [28, 1, 1, "", "Transforms"], [28, 1, 1, "", "Transpose"], [28, 2, 1, "", "convert_examples_to_features"], [28, 2, 1, "", "get_final_text"], [28, 2, 1, "", "get_torchvision_map"], [28, 2, 1, "", "read_squad_examples"], [28, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[29, 0, 0, "-", "benchmark"], [32, 0, 0, "-", "common"], [38, 0, 0, "-", "component"], [39, 0, 0, "-", "compression"], [40, 0, 0, "-", "contrib"], [65, 0, 0, "-", "data"], [70, 0, 0, "-", "distillation"], [71, 0, 0, "-", "export"], [75, 0, 0, "-", "graph_optimization"], [83, 0, 0, "-", "metric"], [85, 0, 0, "-", "mixed_precision"], [86, 0, 0, "-", "model_conversion"], [89, 0, 0, "-", "nas"], [95, 0, 0, "-", "pruner_legacy"], [99, 0, 0, "-", "pruning"], [100, 0, 0, "-", "pruning_recipes"], [104, 0, 0, "-", "pruning_v2"], [105, 0, 0, "-", "pytorch_pruner"], [112, 0, 0, "-", "quantization"], [113, 0, 0, "-", "scheduler"], [118, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[29, 1, 1, "", "Benchmark"], [29, 2, 1, "", "get_architecture"], [29, 2, 1, "", "get_bounded_threads"], [29, 2, 1, "", "get_core_ids"], [29, 2, 1, "", "get_physical_ids"], [29, 2, 1, "", "get_threads"], [29, 2, 1, "", "get_threads_per_core"], [29, 2, 1, "", "set_all_env_var"], [29, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[30, 0, 0, "-", "criterion"], [31, 0, 0, "-", "dataloader"], [33, 0, 0, "-", "metric"], [34, 0, 0, "-", "model"], [35, 0, 0, "-", "optimizer"], [36, 0, 0, "-", "postprocess"], [37, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[30, 1, 1, "", "Criterions"], [30, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [30, 1, 1, "", "KnowledgeDistillationFramework"], [30, 1, 1, "", "KnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchCriterions"], [30, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [30, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [30, 1, 1, "", "SelfKnowledgeDistillationLoss"], [30, 1, 1, "", "TensorflowCriterions"], [30, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [30, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[31, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[33, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[34, 1, 1, "", "Model"], [34, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[35, 1, 1, "", "Optimizers"], [35, 1, 1, "", "PyTorchOptimizers"], [35, 1, 1, "", "PyTorchSGD"], [35, 1, 1, "", "TensorFlowAdamW"], [35, 1, 1, "", "TensorFlowSGD"], [35, 1, 1, "", "TensorflowOptimizers"], [35, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[36, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[37, 2, 1, "", "get_activation"], [37, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[38, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[41, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[42, 0, 0, "-", "sigopt"], [43, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[48, 0, 0, "-", "dataloaders"], [60, 0, 0, "-", "datasets"], [64, 0, 0, "-", "filters"], [67, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[44, 0, 0, "-", "base_dataloader"], [45, 0, 0, "-", "dataloader"], [46, 0, 0, "-", "default_dataloader"], [47, 0, 0, "-", "fetcher"], [49, 0, 0, "-", "mxnet_dataloader"], [50, 0, 0, "-", "onnxrt_dataloader"], [51, 0, 0, "-", "pytorch_dataloader"], [52, 0, 0, "-", "sampler"], [53, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, 1, 1, "", "DefaultDataLoader"], [46, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, 1, 1, "", "Fetcher"], [47, 1, 1, "", "IndexFetcher"], [47, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, 1, 1, "", "ONNXRTBertDataLoader"], [50, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, 1, 1, "", "BatchSampler"], [52, 1, 1, "", "IterableSampler"], [52, 1, 1, "", "Sampler"], [52, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, 1, 1, "", "TFDataDataLoader"], [53, 1, 1, "", "TensorflowBertDataLoader"], [53, 1, 1, "", "TensorflowDataLoader"], [53, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[54, 0, 0, "-", "bert_dataset"], [55, 0, 0, "-", "coco_dataset"], [56, 0, 0, "-", "dataset"], [57, 0, 0, "-", "dummy_dataset"], [58, 0, 0, "-", "dummy_dataset_v2"], [59, 0, 0, "-", "imagenet_dataset"], [61, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, 1, 1, "", "InputFeatures"], [54, 1, 1, "", "ONNXRTBertDataset"], [54, 1, 1, "", "ParseDecodeBert"], [54, 1, 1, "", "PytorchBertDataset"], [54, 1, 1, "", "TensorflowBertDataset"], [54, 1, 1, "", "TensorflowModelZooBertDataset"], [54, 2, 1, "", "convert_examples_to_features"], [54, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, 1, 1, "", "COCONpy"], [55, 1, 1, "", "COCORaw"], [55, 1, 1, "", "COCORecordDataset"], [55, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[56, 1, 1, "", "CIFAR10"], [56, 1, 1, "", "CIFAR100"], [56, 1, 1, "", "Dataset"], [56, 1, 1, "", "Datasets"], [56, 1, 1, "", "FashionMNIST"], [56, 1, 1, "", "ImageFolder"], [56, 1, 1, "", "IterableDataset"], [56, 1, 1, "", "MNIST"], [56, 1, 1, "", "MXNetCIFAR10"], [56, 1, 1, "", "MXNetCIFAR100"], [56, 1, 1, "", "MXNetDatasets"], [56, 1, 1, "", "MXNetFashionMNIST"], [56, 1, 1, "", "MXNetImageFolder"], [56, 1, 1, "", "MXNetMNIST"], [56, 1, 1, "", "ONNXRTITDatasets"], [56, 1, 1, "", "ONNXRTQLDatasets"], [56, 1, 1, "", "PyTorchDatasets"], [56, 1, 1, "", "PytorchCIFAR10"], [56, 1, 1, "", "PytorchCIFAR100"], [56, 1, 1, "", "PytorchFashionMNIST"], [56, 1, 1, "", "PytorchMNIST"], [56, 1, 1, "", "PytorchMxnetWrapDataset"], [56, 1, 1, "", "PytorchMxnetWrapFunction"], [56, 1, 1, "", "TensorflowCIFAR10"], [56, 1, 1, "", "TensorflowCIFAR100"], [56, 1, 1, "", "TensorflowDatasets"], [56, 1, 1, "", "TensorflowFashionMNIST"], [56, 1, 1, "", "TensorflowImageFolder"], [56, 1, 1, "", "TensorflowImageRecord"], [56, 1, 1, "", "TensorflowMNIST"], [56, 1, 1, "", "TensorflowTFRecordDataset"], [56, 1, 1, "", "TensorflowVOCRecord"], [56, 2, 1, "", "calculate_md5"], [56, 2, 1, "", "check_integrity"], [56, 2, 1, "", "dataset_registry"], [56, 2, 1, "", "download_url"], [56, 3, 1, "", "framework_datasets"], [56, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, 1, 1, "", "DummyDataset"], [58, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, 1, 1, "", "ImagenetRaw"], [59, 1, 1, "", "MXNetImagenetRaw"], [59, 1, 1, "", "ONNXRTImagenetDataset"], [59, 1, 1, "", "PytorchImagenetRaw"], [59, 1, 1, "", "TensorflowImagenetDataset"], [59, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[62, 0, 0, "-", "coco_filter"], [63, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, 1, 1, "", "LabelBalanceCOCORawFilter"], [62, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[63, 1, 1, "", "FILTERS"], [63, 1, 1, "", "Filter"], [63, 1, 1, "", "MXNetFilters"], [63, 1, 1, "", "ONNXRTITFilters"], [63, 1, 1, "", "ONNXRTQLFilters"], [63, 1, 1, "", "PyTorchFilters"], [63, 1, 1, "", "TensorflowFilters"], [63, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[66, 0, 0, "-", "imagenet_transform"], [68, 0, 0, "-", "tokenization"], [69, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, 1, 1, "", "BilinearImagenetTransform"], [66, 1, 1, "", "LabelShift"], [66, 1, 1, "", "ONNXResizeCropImagenetTransform"], [66, 1, 1, "", "OnnxBilinearImagenetTransform"], [66, 1, 1, "", "ParseDecodeImagenet"], [66, 1, 1, "", "ParseDecodeImagenetTransform"], [66, 1, 1, "", "QuantizedInput"], [66, 1, 1, "", "ResizeWithAspectRatio"], [66, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, 1, 1, "", "BasicTokenizer"], [68, 1, 1, "", "FullTokenizer"], [68, 1, 1, "", "WordpieceTokenizer"], [68, 2, 1, "", "convert_by_vocab"], [68, 2, 1, "", "convert_to_unicode"], [68, 2, 1, "", "load_vocab"], [68, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[69, 1, 1, "", "AlignImageChannelTransform"], [69, 1, 1, "", "BaseTransform"], [69, 1, 1, "", "CastONNXTransform"], [69, 1, 1, "", "CastPyTorchTransform"], [69, 1, 1, "", "CastTFTransform"], [69, 1, 1, "", "CenterCropTFTransform"], [69, 1, 1, "", "CenterCropTransform"], [69, 1, 1, "", "CollectTransform"], [69, 1, 1, "", "ComposeTransform"], [69, 1, 1, "", "CropResizeTFTransform"], [69, 1, 1, "", "CropResizeTransform"], [69, 1, 1, "", "CropToBoundingBox"], [69, 1, 1, "", "InputFeatures"], [69, 1, 1, "", "MXNetCropResizeTransform"], [69, 1, 1, "", "MXNetCropToBoundingBox"], [69, 1, 1, "", "MXNetNormalizeTransform"], [69, 1, 1, "", "MXNetTransforms"], [69, 1, 1, "", "MXNetTranspose"], [69, 1, 1, "", "NormalizeTFTransform"], [69, 1, 1, "", "NormalizeTransform"], [69, 1, 1, "", "ONNXRTCropToBoundingBox"], [69, 1, 1, "", "ONNXRTITTransforms"], [69, 1, 1, "", "ONNXRTQLTransforms"], [69, 1, 1, "", "PaddedCenterCropTransform"], [69, 1, 1, "", "ParseDecodeVocTransform"], [69, 1, 1, "", "PyTorchAlignImageChannel"], [69, 1, 1, "", "PyTorchCropResizeTransform"], [69, 1, 1, "", "PyTorchNormalizeTransform"], [69, 1, 1, "", "PyTorchTransforms"], [69, 1, 1, "", "PyTorchTranspose"], [69, 1, 1, "", "PytorchMxnetTransform"], [69, 1, 1, "", "PytorchMxnetWrapFunction"], [69, 1, 1, "", "RandomCropTFTransform"], [69, 1, 1, "", "RandomCropTransform"], [69, 1, 1, "", "RandomHorizontalFlip"], [69, 1, 1, "", "RandomResizedCropMXNetTransform"], [69, 1, 1, "", "RandomResizedCropPytorchTransform"], [69, 1, 1, "", "RandomResizedCropTFTransform"], [69, 1, 1, "", "RandomResizedCropTransform"], [69, 1, 1, "", "RandomVerticalFlip"], [69, 1, 1, "", "RescaleKerasPretrainTransform"], [69, 1, 1, "", "RescaleTFTransform"], [69, 1, 1, "", "RescaleTransform"], [69, 1, 1, "", "ResizeMXNetTransform"], [69, 1, 1, "", "ResizePytorchTransform"], [69, 1, 1, "", "ResizeTFTransform"], [69, 1, 1, "", "ResizeTransform"], [69, 1, 1, "", "ResizeWithRatio"], [69, 1, 1, "", "SquadExample"], [69, 1, 1, "", "TFModelZooCollectTransform"], [69, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [69, 1, 1, "", "TFSquadV1PostTransform"], [69, 1, 1, "", "TRANSFORMS"], [69, 1, 1, "", "TensorflowCropToBoundingBox"], [69, 1, 1, "", "TensorflowRandomHorizontalFlip"], [69, 1, 1, "", "TensorflowRandomVerticalFlip"], [69, 1, 1, "", "TensorflowResizeWithRatio"], [69, 1, 1, "", "TensorflowTransform"], [69, 1, 1, "", "TensorflowTransforms"], [69, 1, 1, "", "TensorflowTranspose"], [69, 1, 1, "", "TensorflowWrapFunction"], [69, 1, 1, "", "ToArray"], [69, 1, 1, "", "ToNDArrayTransform"], [69, 1, 1, "", "Transforms"], [69, 1, 1, "", "Transpose"], [69, 2, 1, "", "convert_examples_to_features"], [69, 2, 1, "", "get_final_text"], [69, 2, 1, "", "get_torchvision_map"], [69, 2, 1, "", "read_squad_examples"], [69, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[70, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[70, 4, 1, "", "_epoch_ran"], [70, 4, 1, "", "best_model"], [70, 4, 1, "", "best_score"], [70, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[72, 0, 0, "-", "qlinear2qdq"], [73, 0, 0, "-", "tf2onnx"], [74, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, 2, 1, "", "check_model"], [72, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, 2, 1, "", "tf_to_fp32_onnx"], [73, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[74, 2, 1, "", "dynamic_quant_export"], [74, 2, 1, "", "get_node_mapping"], [74, 2, 1, "", "get_quantizable_onnx_ops"], [74, 2, 1, "", "static_quant_export"], [74, 2, 1, "", "torch_to_fp32_onnx"], [74, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[75, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[77, 0, 0, "-", "bleu"], [78, 0, 0, "-", "bleu_util"], [79, 0, 0, "-", "coco_label_map"], [80, 0, 0, "-", "coco_tools"], [81, 0, 0, "-", "evaluate_squad"], [82, 0, 0, "-", "f1"], [84, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[77, 1, 1, "", "BLEU"], [77, 1, 1, "", "UnicodeRegex"], [77, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[77, 4, 1, "", "labels"], [77, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[77, 4, 1, "", "nondigit_punct_re"], [77, 4, 1, "", "punct_nondigit_re"], [77, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[78, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[80, 1, 1, "", "COCOEvalWrapper"], [80, 1, 1, "", "COCOWrapper"], [80, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [80, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [80, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[80, 4, 1, "", "dataset"], [80, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, 2, 1, "", "evaluate"], [81, 2, 1, "", "exact_match_score"], [81, 2, 1, "", "f1_score"], [81, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[82, 2, 1, "", "evaluate"], [82, 2, 1, "", "f1_score"], [82, 2, 1, "", "metric_max_over_ground_truths"], [82, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[84, 1, 1, "", "Accuracy"], [84, 1, 1, "", "BaseMetric"], [84, 1, 1, "", "COCOmAPv2"], [84, 1, 1, "", "F1"], [84, 1, 1, "", "GeneralTopK"], [84, 1, 1, "", "Loss"], [84, 1, 1, "", "MAE"], [84, 1, 1, "", "METRICS"], [84, 1, 1, "", "MSE"], [84, 1, 1, "", "MXNetMetrics"], [84, 1, 1, "", "ONNXRTGLUE"], [84, 1, 1, "", "ONNXRTITMetrics"], [84, 1, 1, "", "ONNXRTQLMetrics"], [84, 1, 1, "", "PyTorchLoss"], [84, 1, 1, "", "PyTorchMetrics"], [84, 1, 1, "", "RMSE"], [84, 1, 1, "", "ROC"], [84, 1, 1, "", "SquadF1"], [84, 1, 1, "", "TensorflowCOCOMAP"], [84, 1, 1, "", "TensorflowMAP"], [84, 1, 1, "", "TensorflowMetrics"], [84, 1, 1, "", "TensorflowTopK"], [84, 1, 1, "", "TensorflowVOCMAP"], [84, 1, 1, "", "WrapMXNetMetric"], [84, 1, 1, "", "WrapONNXRTMetric"], [84, 1, 1, "", "WrapPyTorchMetric"], [84, 1, 1, "", "mIOU"], [84, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"], [84, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[84, 4, 1, "", "k"], [84, 4, 1, "", "num_correct"], [84, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[84, 4, 1, "", "sample"], [84, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[84, 4, 1, "", "compare_label"], [84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[84, 4, 1, "", "compare_label"], [84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[84, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[84, 4, 1, "", "k"], [84, 4, 1, "", "num_correct"], [84, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[85, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[86, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[87, 0, 0, "-", "basic_nas"], [88, 0, 0, "-", "dynas"], [90, 0, 0, "-", "nas"], [91, 0, 0, "-", "nas_utils"], [92, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[87, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[88, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[90, 1, 1, "", "NAS"], [90, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[91, 2, 1, "", "create_search_space_pool"], [91, 2, 1, "", "find_pareto_front"], [91, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[92, 1, 1, "", "BayesianOptimizationSearcher"], [92, 1, 1, "", "GridSearcher"], [92, 1, 1, "", "RandomSearcher"], [92, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[93, 0, 0, "-", "gradient_sensitivity"], [94, 0, 0, "-", "group_lasso"], [96, 0, 0, "-", "magnitude"], [97, 0, 0, "-", "pattern_lock"], [98, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, 1, 1, "", "Pruner"], [98, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[99, 1, 1, "", "Pruning"], [99, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[99, 4, 1, "", "conf"], [99, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[101, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[102, 0, 0, "-", "pattern"], [103, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, 1, 1, "", "PATTERNS"], [102, 1, 1, "", "PatternBase"], [102, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[102, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, 1, 1, "", "TilePatternBase"], [103, 1, 1, "", "TilePattern_1x1"], [103, 1, 1, "", "TilePattern_1x16"], [103, 1, 1, "", "TilePattern_1x2"], [103, 1, 1, "", "TilePattern_2x2"], [103, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[104, 1, 1, "", "Pruning"], [104, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[104, 4, 1, "", "conf"], [104, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[106, 0, 0, "-", "logger"], [107, 0, 0, "-", "patterns"], [108, 0, 0, "-", "prune_utils"], [109, 0, 0, "-", "pruner"], [110, 0, 0, "-", "pruning"], [111, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, 1, 1, "", "Pattern"], [107, 1, 1, "", "PatternNInM"], [107, 1, 1, "", "PatternNxM"], [107, 2, 1, "", "get_pattern"], [107, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[107, 4, 1, "", "is_global"], [107, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[107, 4, 1, "", "M"], [107, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[107, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, 2, 1, "", "check_config"], [108, 2, 1, "", "parse_not_to_prune"], [108, 2, 1, "", "parse_to_prune"], [108, 2, 1, "", "process_and_check_config"], [108, 2, 1, "", "process_config"], [108, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, 1, 1, "", "MagnitudePruner"], [109, 1, 1, "", "PatternLockPruner"], [109, 1, 1, "", "Pruner"], [109, 1, 1, "", "SnipMomentumPruner"], [109, 1, 1, "", "SnipPruner"], [109, 2, 1, "", "get_pruner"], [109, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[109, 4, 1, "", "config"], [109, 4, 1, "", "current_sparsity_ratio"], [109, 4, 1, "", "end_step"], [109, 4, 1, "", "global_step"], [109, 4, 1, "", "masks"], [109, 4, 1, "", "max_sparsity_ratio_per_layer"], [109, 4, 1, "", "modules"], [109, 4, 1, "", "pattern"], [109, 4, 1, "", "scheduler"], [109, 4, 1, "", "scores"], [109, 4, 1, "", "start_step"], [109, 4, 1, "", "target_sparsity_ratio"], [109, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[110, 4, 1, "", "config_file_path"], [110, 4, 1, "", "model"], [110, 4, 1, "", "pruner_info"], [110, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, 1, 1, "", "IterativeScheduler"], [111, 1, 1, "", "OneshotScheduler"], [111, 1, 1, "", "Scheduler"], [111, 2, 1, "", "get_scheduler"], [111, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[111, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[112, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[113, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[114, 0, 0, "-", "auto_mixed_precision"], [115, 0, 0, "-", "basic"], [116, 0, 0, "-", "bayesian"], [117, 0, 0, "-", "exhaustive"], [119, 0, 0, "-", "mse"], [120, 0, 0, "-", "mse_v2"], [121, 0, 0, "-", "random"], [122, 0, 0, "-", "strategy"], [124, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[115, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[116, 1, 1, "", "BayesianOptimization"], [116, 1, 1, "", "BayesianTuneStrategy"], [116, 1, 1, "", "TargetSpace"], [116, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[117, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[119, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[120, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[121, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[122, 1, 1, "", "TuneStrategy"], [122, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[123, 0, 0, "-", "constant"], [125, 0, 0, "-", "tuning_sampler"], [126, 0, 0, "-", "tuning_space"], [127, 0, 0, "-", "tuning_structs"], [128, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, 1, 1, "", "FallbackTuningSampler"], [125, 1, 1, "", "ModelWiseTuningSampler"], [125, 1, 1, "", "OpTypeWiseTuningSampler"], [125, 1, 1, "", "OpWiseTuningSampler"], [125, 1, 1, "", "SmoothQuantSampler"], [125, 1, 1, "", "TuningOrder"], [125, 1, 1, "", "TuningSampler"], [125, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, 1, 1, "", "TuningItem"], [126, 1, 1, "", "TuningSpace"], [126, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [126, 2, 1, "", "pattern_to_internal"], [126, 2, 1, "", "pattern_to_path"], [126, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[128, 1, 1, "", "OrderedDefaultDict"], [128, 2, 1, "", "extract_data_type"], [128, 2, 1, "", "get_adaptor_name"], [128, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[130, 0, 0, "-", "bleu"], [131, 0, 0, "-", "bleu_util"], [132, 0, 0, "-", "coco_label_map"], [133, 0, 0, "-", "coco_tools"], [134, 0, 0, "-", "evaluate_squad"], [135, 0, 0, "-", "f1"], [137, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[130, 1, 1, "", "BLEU"], [130, 1, 1, "", "UnicodeRegex"], [130, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[130, 4, 1, "", "labels"], [130, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[130, 4, 1, "", "nondigit_punct_re"], [130, 4, 1, "", "punct_nondigit_re"], [130, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[131, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[133, 1, 1, "", "COCOEvalWrapper"], [133, 1, 1, "", "COCOWrapper"], [133, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [133, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [133, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[133, 4, 1, "", "dataset"], [133, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[134, 2, 1, "", "evaluate"], [134, 2, 1, "", "exact_match_score"], [134, 2, 1, "", "f1_score"], [134, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[135, 2, 1, "", "evaluate"], [135, 2, 1, "", "f1_score"], [135, 2, 1, "", "metric_max_over_ground_truths"], [135, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[137, 1, 1, "", "Accuracy"], [137, 1, 1, "", "BaseMetric"], [137, 1, 1, "", "COCOmAPv2"], [137, 1, 1, "", "F1"], [137, 1, 1, "", "GeneralTopK"], [137, 1, 1, "", "Loss"], [137, 1, 1, "", "MAE"], [137, 1, 1, "", "METRICS"], [137, 1, 1, "", "MSE"], [137, 1, 1, "", "MXNetMetrics"], [137, 1, 1, "", "Metric"], [137, 1, 1, "", "ONNXRTGLUE"], [137, 1, 1, "", "ONNXRTITMetrics"], [137, 1, 1, "", "ONNXRTQLMetrics"], [137, 1, 1, "", "PyTorchLoss"], [137, 1, 1, "", "PyTorchMetrics"], [137, 1, 1, "", "RMSE"], [137, 1, 1, "", "ROC"], [137, 1, 1, "", "SquadF1"], [137, 1, 1, "", "TensorflowCOCOMAP"], [137, 1, 1, "", "TensorflowMAP"], [137, 1, 1, "", "TensorflowMetrics"], [137, 1, 1, "", "TensorflowTopK"], [137, 1, 1, "", "TensorflowVOCMAP"], [137, 1, 1, "", "WrapMXNetMetric"], [137, 1, 1, "", "WrapONNXRTMetric"], [137, 1, 1, "", "WrapPyTorchMetric"], [137, 1, 1, "", "mIOU"], [137, 2, 1, "", "metric_registry"], [137, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"], [137, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[137, 4, 1, "", "k"], [137, 4, 1, "", "num_correct"], [137, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[137, 4, 1, "", "sample"], [137, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[137, 4, 1, "", "compare_label"], [137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[137, 4, 1, "", "compare_label"], [137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[137, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[137, 4, 1, "", "k"], [137, 4, 1, "", "num_correct"], [137, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[138, 2, 1, "", "fit"]], "neural_compressor.model": [[139, 0, 0, "-", "base_model"], [141, 0, 0, "-", "keras_model"], [142, 0, 0, "-", "model"], [143, 0, 0, "-", "mxnet_model"], [144, 0, 0, "-", "nets_factory"], [145, 0, 0, "-", "onnx_model"], [146, 0, 0, "-", "tensorflow_model"], [147, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[139, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[141, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[142, 1, 1, "", "Model"], [142, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[143, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[144, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[145, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[146, 1, 1, "", "TensorflowBaseModel"], [146, 1, 1, "", "TensorflowCheckpointModel"], [146, 1, 1, "", "TensorflowLLMModel"], [146, 1, 1, "", "TensorflowModel"], [146, 1, 1, "", "TensorflowQATModel"], [146, 1, 1, "", "TensorflowSavedModelModel"], [146, 2, 1, "", "checkpoint_session"], [146, 2, 1, "", "estimator_session"], [146, 2, 1, "", "frozen_pb_session"], [146, 2, 1, "", "get_model_type"], [146, 2, 1, "", "graph_def_session"], [146, 2, 1, "", "graph_session"], [146, 2, 1, "", "keras_session"], [146, 2, 1, "", "load_saved_model"], [146, 2, 1, "", "saved_model_session"], [146, 2, 1, "", "slim_session"], [146, 2, 1, "", "try_loading_keras"], [146, 2, 1, "", "validate_and_inference_input_output"], [146, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[147, 1, 1, "", "IPEXModel"], [147, 1, 1, "", "PyTorchBaseModel"], [147, 1, 1, "", "PyTorchFXModel"], [147, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[148, 1, 1, "", "Accuracy"], [148, 1, 1, "", "Footprint"], [148, 1, 1, "", "ModelSize"], [148, 1, 1, "", "MultiObjective"], [148, 1, 1, "", "Objective"], [148, 1, 1, "", "Performance"], [148, 2, 1, "", "objective_custom_registry"], [148, 2, 1, "", "objective_registry"]], "neural_compressor.quantization": [[150, 2, 1, "", "fit"]], "neural_compressor.strategy": [[151, 0, 0, "-", "auto"], [152, 0, 0, "-", "auto_mixed_precision"], [153, 0, 0, "-", "basic"], [154, 0, 0, "-", "bayesian"], [155, 0, 0, "-", "conservative"], [156, 0, 0, "-", "exhaustive"], [157, 0, 0, "-", "hawq_v2"], [159, 0, 0, "-", "mse"], [160, 0, 0, "-", "mse_v2"], [161, 0, 0, "-", "random"], [162, 0, 0, "-", "strategy"], [164, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[151, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[152, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[153, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[154, 1, 1, "", "BayesianOptimization"], [154, 1, 1, "", "BayesianTuneStrategy"], [154, 1, 1, "", "TargetSpace"], [154, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[155, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[156, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[157, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[159, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[160, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[161, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[162, 1, 1, "", "TuneStrategy"], [162, 1, 1, "", "TuneStrategyMeta"], [162, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[163, 0, 0, "-", "constant"], [165, 0, 0, "-", "tuning_sampler"], [166, 0, 0, "-", "tuning_space"], [167, 0, 0, "-", "tuning_structs"], [168, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, 1, 1, "", "BlockFallbackTuningSampler"], [165, 1, 1, "", "FallbackTuningSampler"], [165, 1, 1, "", "LowerBitsSampler"], [165, 1, 1, "", "ModelWiseTuningSampler"], [165, 1, 1, "", "OpTypeWiseTuningSampler"], [165, 1, 1, "", "OpWiseTuningSampler"], [165, 1, 1, "", "SmoothQuantSampler"], [165, 1, 1, "", "TuningOrder"], [165, 1, 1, "", "TuningSampler"], [165, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[166, 1, 1, "", "TuningItem"], [166, 1, 1, "", "TuningSpace"], [166, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [166, 2, 1, "", "pattern_to_internal"], [166, 2, 1, "", "pattern_to_path"], [166, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[167, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[168, 1, 1, "", "ClassRegister"], [168, 1, 1, "", "OrderedDefaultDict"], [168, 1, 1, "", "QuantOptions"], [168, 1, 1, "", "QuantType"], [168, 2, 1, "", "build_slave_faker_model"], [168, 2, 1, "", "extract_data_type"], [168, 2, 1, "", "get_adaptor_name"], [168, 2, 1, "", "preprocess_user_cfg"], [168, 2, 1, "", "reverted_data_type"]], "neural_compressor.training": [[169, 1, 1, "", "CallBacks"], [169, 1, 1, "", "CompressionManager"], [169, 2, 1, "", "fit"], [169, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[170, 0, 0, "-", "collect_layer_histogram"], [171, 0, 0, "-", "constant"], [172, 0, 0, "-", "create_obj_from_config"], [174, 0, 0, "-", "kl_divergence"], [175, 0, 0, "-", "load_huggingface"], [176, 0, 0, "-", "logger"], [177, 0, 0, "-", "neural_insights_utils"], [178, 0, 0, "-", "options"], [179, 0, 0, "-", "pytorch"], [180, 0, 0, "-", "utility"], [181, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[170, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[172, 2, 1, "", "create_dataloader"], [172, 2, 1, "", "create_dataset"], [172, 2, 1, "", "create_eval_func"], [172, 2, 1, "", "create_train_func"], [172, 2, 1, "", "get_algorithm"], [172, 2, 1, "", "get_func_from_config"], [172, 2, 1, "", "get_metrics"], [172, 2, 1, "", "get_postprocess"], [172, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[174, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[175, 1, 1, "", "OptimizedModel"], [175, 2, 1, "", "export_compressed_model"], [175, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[176, 1, 1, "", "Logger"], [176, 2, 1, "", "debug"], [176, 2, 1, "", "error"], [176, 2, 1, "", "fatal"], [176, 2, 1, "", "info"], [176, 2, 1, "", "log"], [176, 2, 1, "", "warn"], [176, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[177, 2, 1, "", "get_model_path"], [177, 2, 1, "", "register_neural_insights_workload"], [177, 2, 1, "", "update_neural_insights_workload"], [177, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[178, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[179, 2, 1, "", "is_int8_model"], [179, 2, 1, "", "load"], [179, 2, 1, "", "load_weight_only"], [179, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[180, 1, 1, "", "CaptureOutputToFile"], [180, 1, 1, "", "CpuInfo"], [180, 2, 1, "", "Dequantize"], [180, 1, 1, "", "DotDict"], [180, 1, 1, "", "GLOBAL_STATE"], [180, 1, 1, "", "LazyImport"], [180, 1, 1, "", "MODE"], [180, 1, 1, "", "OpEntry"], [180, 1, 1, "", "Statistics"], [180, 2, 1, "", "alias_param"], [180, 2, 1, "", "calculate_mse"], [180, 2, 1, "", "check_key_exist"], [180, 2, 1, "", "combine_histogram"], [180, 2, 1, "", "compare_objects"], [180, 2, 1, "", "compute_sparsity"], [180, 2, 1, "", "dequantize_weight"], [180, 2, 1, "", "dump_class_attrs"], [180, 2, 1, "", "dump_data_to_local"], [180, 2, 1, "", "dump_elapsed_time"], [180, 2, 1, "", "dump_table"], [180, 2, 1, "", "dump_table_to_csv"], [180, 2, 1, "", "equal_dicts"], [180, 2, 1, "", "fault_tolerant_file"], [180, 2, 1, "", "get_all_fp32_data"], [180, 2, 1, "", "get_number_of_sockets"], [180, 2, 1, "", "get_op_list"], [180, 2, 1, "", "get_size"], [180, 2, 1, "", "get_tensor_histogram"], [180, 2, 1, "", "get_tensors_info"], [180, 2, 1, "", "get_tuning_history"], [180, 2, 1, "", "get_weights_details"], [180, 2, 1, "", "load_data_from_pkl"], [180, 2, 1, "", "mse_metric_gap"], [180, 2, 1, "", "print_op_list"], [180, 2, 1, "", "print_table"], [180, 2, 1, "", "recover"], [180, 2, 1, "", "set_random_seed"], [180, 2, 1, "", "set_resume_from"], [180, 2, 1, "", "set_tensorboard"], [180, 2, 1, "", "set_workspace"], [180, 2, 1, "", "show_memory_info"], [180, 2, 1, "", "singleton"], [180, 2, 1, "", "str2array"], [180, 2, 1, "", "time_limit"], [180, 2, 1, "", "version1_eq_version2"], [180, 2, 1, "", "version1_gt_version2"], [180, 2, 1, "", "version1_gte_version2"], [180, 2, 1, "", "version1_lt_version2"], [180, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[181, 1, 1, "", "WeightsDetails"], [181, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:data", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"block_mask": 0, "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], "algorithm": [1, 2, 3, 4, 5, 208, 274, 277, 280], "class": [1, 2, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 75, 77, 80, 84, 85, 86, 87, 88, 90, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 133, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 174, 175, 176, 178, 180, 181, 190, 259], "function": [1, 6, 12, 14, 21, 27, 28, 29, 30, 34, 35, 37, 46, 54, 56, 63, 68, 69, 72, 73, 74, 77, 78, 80, 81, 82, 84, 91, 98, 102, 107, 108, 109, 111, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 175, 176, 177, 179, 180, 216], "modul": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181], "content": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 189, 259], "fast_bias_correct": 2, "submodul": [3, 9, 18, 22, 25, 32, 41, 48, 60, 64, 67, 71, 76, 83, 89, 95, 101, 105, 118, 124, 129, 136, 140, 158, 164, 173], "smooth_quant": 4, "weight_correct": 5, "benchmark": [6, 29, 198, 207, 213, 228, 270], "config": [7, 200, 211, 266], "contrib": [8, 9, 10, 11, 40, 41, 42, 43], "subpackag": [8, 23, 40, 65, 76, 100, 118, 129, 158], "strategi": [9, 10, 11, 41, 42, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 205, 276, 280], "sigopt": [10, 42, 276, 280], "tpe": [11, 43, 280], "data": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 191, 192, 213, 217, 253], "dataset": [12, 13, 14, 15, 16, 17, 18, 19, 54, 55, 56, 57, 58, 59, 60, 61, 211, 213, 222, 254], "bert_dataset": [12, 54], "coco_dataset": [13, 55], "attribut": [14, 56, 184], "dummy_dataset": [15, 57], "dummy_dataset_v2": [16, 58], "imagenet_dataset": [17, 59], "style_transfer_dataset": [19, 61], "filter": [20, 21, 22, 62, 63, 64], "coco_filt": [20, 62], "transform": [24, 25, 26, 27, 28, 66, 67, 68, 69, 222, 279], "imagenet_transform": [24, 66], "postprocess": [26, 36], "token": [27, 68], "experiment": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "common": [30, 31, 32, 33, 34, 35, 36, 37, 186, 219], "criterion": 30, "dataload": [31, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 210, 211], "metric": [33, 77, 78, 79, 80, 81, 82, 83, 84, 130, 131, 132, 133, 134, 135, 136, 137, 222, 227], "model": [34, 139, 140, 141, 142, 143, 144, 145, 146, 147, 191, 202, 218, 221, 224, 226, 228, 230, 231, 238, 252, 253, 254, 262, 263, 264, 268, 272, 274, 277, 283], "optim": [35, 239, 249, 259, 262, 263, 264, 267, 268, 281], "torch_util": 37, "compon": 38, "compress": [39, 199, 274], "base_dataload": 44, "default_dataload": 46, "fetcher": 47, "mxnet_dataload": 49, "onnxrt_dataload": 50, "pytorch_dataload": 51, "sampler": 52, "tensorflow_dataload": 53, "distil": [70, 214, 215, 228, 270, 283], "export": [71, 72, 73, 74, 218, 274], "qlinear2qdq": 72, "tf2onnx": 73, "torch2onnx": 74, "graph_optim": 75, "bleu": [77, 130], "bleu_util": [78, 131], "coco_label_map": [79, 132], "coco_tool": [80, 133], "evaluate_squad": [81, 134], "f1": [82, 135], "mixed_precis": 85, "model_convers": 86, "na": [87, 88, 89, 90, 91, 92, 187, 270], "basic_na": 87, "dyna": 88, "nas_util": 91, "search_algorithm": 92, "pruner_legaci": [93, 94, 95, 96, 97, 98], "gradient_sensit": 93, "group_lasso": 94, "magnitud": 96, "pattern_lock": 97, "pruner": [98, 109], "prune": [99, 110, 228, 268, 270, 283], "pruning_recip": [100, 101, 102, 103], "pattern": [101, 102, 103, 107, 268], "tile_pattern": 103, "pruning_v2": 104, "pytorch_prun": [105, 106, 107, 108, 109, 110, 111], "logger": [106, 176, 209], "prune_util": 108, "schedul": [111, 113, 268], "quantiz": [112, 150, 186, 189, 191, 192, 204, 208, 213, 215, 218, 221, 224, 226, 228, 229, 231, 238, 249, 251, 252, 253, 254, 262, 263, 264, 270, 271, 272, 273, 274, 277, 283], "auto_mixed_precis": [114, 152], "basic": [115, 153, 187, 280], "bayesian": [116, 154, 280], "exhaust": [117, 156, 280], "mse": [119, 159, 280], "mse_v2": [120, 160, 280], "random": [121, 161, 280], "util": [123, 124, 125, 126, 127, 128, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 195], "constant": [123, 163, 171], "tuning_sampl": [125, 165], "tuning_spac": [126, 166], "tuning_struct": [127, 167], "mix_precis": 138, "base_model": 139, "keras_model": 141, "mxnet_model": 143, "nets_factori": 144, "onnx_model": 145, "tensorflow_model": 146, "torch_model": 147, "object": [148, 203, 262, 263, 264, 266], "profil": [149, 213], "auto": [151, 243, 249, 273, 277, 280], "conserv": [155, 280], "hawq_v2": [157, 280], "train": [169, 186, 206, 216, 228, 268, 271], "collect_layer_histogram": 170, "create_obj_from_config": 172, "kl_diverg": 174, "load_huggingfac": 175, "neural_insights_util": 177, "option": [178, 216, 237], "pytorch": [179, 211, 216, 218, 227, 253, 271, 272, 273, 278, 279, 283], "weights_detail": 181, "version": 182, "intel": [183, 189, 210, 213, 223, 224, 227, 228, 235, 243, 249, 284], "neural": [183, 186, 187, 189, 210, 213, 223, 224, 227, 228, 232, 236, 238, 243, 249, 251, 252, 253, 254, 256, 257, 258, 262, 263, 264, 268, 276, 281, 284], "compressor": [183, 186, 189, 210, 213, 223, 224, 227, 228, 243, 249, 276, 284], "document": [183, 189, 196, 284], "section": [183, 284], "contributor": [184, 185], "coven": [184, 185], "code": [184, 185, 187, 209, 228, 250, 255, 274, 281], "conduct": [184, 185], "our": [184, 277], "pledg": 184, "standard": 184, "respons": [184, 258], "scope": [184, 268], "enforc": 184, "contribut": [185, 242, 246], "guidelin": 185, "creat": [185, 255], "pull": 185, "request": [185, 229, 260], "step": [185, 251, 252, 253, 254], "checklist": 185, "templat": 185, "accept": 185, "criteria": [185, 268, 280], "statu": [185, 257, 258], "check": 185, "overview": [185, 259, 281], "support": [185, 186, 187, 190, 192, 207, 208, 210, 211, 213, 214, 215, 216, 218, 220, 223, 224, 227, 229, 230, 231, 233, 234, 238, 239, 266, 267, 268, 270, 271, 272, 274, 277, 278, 279, 282], "fx": 186, "introduct": [186, 187, 190, 191, 192, 207, 208, 210, 211, 213, 214, 215, 216, 218, 220, 223, 227, 229, 230, 231, 249, 252, 253, 254, 266, 267, 268, 270, 271, 272, 274, 276, 277, 278, 279, 280, 282], "mode": [186, 283], "matrix": [186, 187, 190, 207, 208, 210, 211, 213, 214, 215, 216, 218, 220, 223, 227, 229, 230, 231, 234, 266, 267, 268, 270, 271, 272, 274, 277, 278, 282], "get": [186, 187, 189, 190, 207, 210, 211, 213, 214, 215, 216, 220, 221, 227, 229, 231, 232, 243, 250, 251, 255, 256, 257, 258, 266, 267, 268, 270, 271, 278, 282], "start": [186, 187, 189, 190, 207, 210, 211, 213, 214, 215, 216, 220, 221, 227, 229, 231, 232, 233, 237, 243, 251, 255, 256, 257, 262, 263, 264, 266, 267, 268, 270, 271, 278, 282], "post": [186, 228, 258, 271], "static": [186, 189, 271], "dynam": [186, 187, 271], "awar": [186, 228, 268, 271], "exampl": [186, 187, 190, 196, 207, 210, 211, 213, 214, 215, 216, 217, 218, 227, 228, 229, 230, 231, 234, 238, 251, 252, 253, 254, 256, 261, 262, 263, 264, 266, 267, 268, 271, 272, 274, 277, 278, 283], "note": [186, 275], "detail": 186, "problem": 186, "architectur": [187, 212, 223, 224], "search": [187, 249], "api": [187, 190, 191, 196, 197, 207, 210, 211, 214, 215, 216, 221, 222, 227, 229, 231, 232, 236, 250, 251, 258, 264, 266, 267, 268, 270, 281], "usag": [187, 238, 249, 258, 277, 278, 280], "1": [187, 216, 219, 222, 228, 249, 256, 257, 269, 283], "python": [187, 210, 221, 227, 232, 236, 237, 244, 247, 251, 270, 281], "yaml": [187, 191, 211, 216, 220, 282], "2": [187, 216, 219, 222, 228, 249, 256, 257, 283], "onli": [187, 189, 274], "advanc": [187, 255, 281], "custom": [187, 210, 227, 262, 280], "secur": [188, 216], "polici": [188, 280], "report": 188, "vulner": 188, "what": [189, 232, 250, 256], "": [189, 224, 250, 256], "new": [189, 190, 192, 244, 247, 280], "instal": [189, 213, 224, 233, 235, 242, 243, 246, 251, 256, 257], "from": [189, 191, 224, 228, 251, 256, 257], "pypi": [189, 238, 251], "weight": [189, 252, 253, 254, 274], "llm": [189, 226], "non": 189, "select": [189, 243], "public": [189, 209, 269], "event": [189, 269], "addit": 189, "commun": 189, "adaptor": [190, 191, 193], "work": [190, 256, 271], "flow": [190, 271], "queri": [190, 257, 262, 263, 264], "background": [190, 209, 249], "ad": 190, "backend": [190, 271], "capabl": [190, 274], "implement": [190, 191], "onnxrtadaptor": 190, "how": [191, 192, 213, 252, 253, 254, 256], "add": [191, 257], "an": [191, 262, 263, 264], "list": [191, 217, 261, 279], "need": 191, "design": [191, 212, 259, 280], "framework": [191, 210, 211, 218, 220, 230, 231, 270, 272, 274, 277], "query_fw_cap": 191, "accord": [191, 192], "tune_cfg": 191, "prepar": [191, 213, 252, 253, 254, 276], "calibr": [191, 208], "fp32": [191, 218], "graph": 191, "run": [191, 213, 250, 252, 253, 254, 255], "sampl": [191, 221], "iter": 191, "oper": [191, 192], "calcul": 191, "rang": 191, "gener": 191, "type": [192, 209, 268], "like": 192, "int4": 192, "few": 192, "line": 192, "chang": [192, 222, 248, 250, 275], "defin": [192, 216], "abil": 192, "specif": [192, 211], "invok": 192, "kernel": 192, "tune": [192, 271, 274, 277, 280], "configur": [192, 216, 220, 255, 270, 276, 282], "us": [192, 210, 227, 256, 257, 277], "summari": [192, 252], "onnx": [194, 224, 271, 272, 283], "runtim": [194, 224, 271, 272, 283], "torch": [195, 283], "mix": [201, 228, 229, 273], "precis": [201, 228, 229, 273], "refer": [208, 209, 231, 268, 271, 274, 277], "inc": 209, "convent": 209, "rule": [209, 271], "import": 209, "string": 209, "annot": 209, "comment": 209, "todo": 209, "intern": 209, "interfac": 209, "folder": [209, 250], "structur": 209, "recommend": 209, "v": [209, 250], "set": [209, 213, 235, 249], "json": 209, "build": [210, 219, 227, 255, 256, 257], "tensorflow": [211, 216, 218, 227, 271, 273, 278, 279, 283], "mxnet": [211, 227, 271, 279], "onnxrt": [211, 227, 279], "file": [211, 220, 282], "user": [211, 216, 222, 270, 274, 281, 282], "workflow": [212, 259], "diagnosi": [213, 251], "featur": [213, 216, 220, 223, 238, 239, 243, 270, 271, 278, 282], "modifi": 213, "script": [213, 255], "see": 213, "do": [213, 232], "paramet": [213, 258], "descript": [213, 258, 260], "suggest": 213, "fallback": 213, "knowledg": [214, 283], "intermedi": 214, "layer": [214, 272, 277], "self": 214, "distribut": [216, 238, 280], "infer": 216, "evalu": 216, "pure": 216, "horovodrun": 216, "execut": 216, "releas": [217, 244, 247, 275], "int8": [218, 283], "appendix": 218, "op": 218, "frequent": 219, "ask": 219, "question": 219, "issu": [219, 275], "3": [219, 233, 249], "4": [219, 240, 249, 269], "quick": [221, 237], "valid": [221, 224, 277, 283], "incompat": [222, 275], "between": 222, "v1": 222, "face": [222, 263, 264], "built": [222, 224, 227], "infrastructur": 223, "prerequisit": [224, 256, 257], "binari": 224, "sourc": [224, 251, 253, 254, 256, 257], "ai": 224, "kit": 224, "system": 224, "requir": [224, 242, 246, 252, 253, 254, 262], "hardwar": [224, 229, 283], "environ": [224, 235], "cpu": [224, 235, 283], "base": [224, 258, 281], "64": 224, "compat": 224, "processor": 224, "gpu": 224, "xe": 224, "multipl": [224, 266, 283], "vendor": 224, "through": [224, 277, 283], "softwar": [224, 229], "legal": 225, "inform": 225, "licens": 225, "citat": 225, "trademark": 225, "recip": [226, 271], "larg": [226, 268], "languag": [226, 268], "accuraci": [226, 229, 252, 254, 271, 280], "migrat": 228, "x": 228, "orchestr": [228, 267], "bf16": 229, "fp16": 229, "dure": [229, 273], "driven": 229, "microsc": 231, "coder": [232, 236, 238, 249, 281], "we": 232, "offer": 232, "jupyt": [232, 233, 244, 247], "lab": [232, 233], "extens": [232, 242, 243, 246, 249, 250, 259], "launcher": [232, 237], "contact": [232, 256], "aw": 233, "amazon": 233, "sagemak": 233, "For": 233, "studio": 233, "notebook": 233, "instanc": 233, "guid": [233, 281], "bigdl": 234, "nano": 234, "platform": [235, 276], "best": [235, 243], "perform": [235, 276], "mkl": 235, "openmp": 235, "jemalloc": 235, "numa": 235, "control": 235, "variabl": 235, "frequenc": 235, "govern": 235, "enabl": [236, 243, 249], "bench": 236, "superbench": 236, "argument": 237, "v0": 240, "highlight": 240, "other": 240, "changelog": [241, 245], "neural_compressor_ext_lab": [242, 244], "uninstal": [242, 246], "develop": [242, 246], "packag": [242, 244, 246, 247], "jupyterlab": 243, "Or": 243, "let": 243, "u": 243, "help": 243, "you": 243, "pre": 243, "requisit": 243, "make": [244, 247, 250, 255], "manual": [244, 247], "npm": [244, 247, 255], "autom": [244, 247], "publish": [244, 247], "conda": [244, 247], "forg": [244, 247], "neural_compressor_ext_lab_alibaba": [246, 247], "log": [248, 257, 258], "unreleas": 248, "vscode": 249, "open": [249, 254], "icon": 249, "5": 249, "welcom": 250, "your": 250, "setup": 250, "up": 250, "straight": 250, "awai": 250, "explor": 250, "test": [250, 255], "go": 250, "further": 250, "insight": [251, 252, 253, 254], "tensor": [251, 277], "dump": [251, 253], "research": 251, "collabor": 251, "debug": [252, 254], "analyz": [252, 254, 255], "result": [252, 254, 262, 263, 264], "activ": 252, "histogram": 254, "react": 255, "app": 255, "avail": 255, "eject": 255, "learn": [255, 256], "more": [255, 256], "split": 255, "bundl": 255, "size": 255, "progress": 255, "web": 255, "deploy": [255, 268], "fail": 255, "minifi": 255, "solut": [256, 257, 258, 262, 263, 264], "why": 256, "doe": 256, "method": [256, 257], "pip": [256, 257], "end": [256, 262, 263, 264], "servic": [257, 259, 262, 263, 264], "submit": [257, 258, 262, 263, 264], "task": [257, 258, 260, 262, 263, 264], "stop": [257, 262, 263, 264], "inspect": 257, "manag": [257, 262, 263], "resourc": [257, 262, 263], "node": 257, "state": 257, "cluster": [257, 258], "remov": 257, "url": 258, "endpoint": 258, "task_id": 258, "websocket": 258, "screen": 258, "ping": 258, "download": [258, 262, 263], "doc": 259, "wip": 259, "oaa": 259, "definit": 259, "diagram": 259, "hug": [263, 264], "grpc": 264, "client": 265, "singl": 266, "One": 267, "shot": 267, "network": 268, "sparsiti": 268, "decai": 268, "regular": 268, "retrain": 268, "free": 268, "spars": 268, "hyperparamet": 268, "full": 269, "80": 269, "2024": 269, "2023": 269, "25": 269, "2022": 269, "35": 269, "2021": 269, "15": [269, 283], "2018": 269, "2020": 269, "style": 270, "access": 270, "fundament": [271, 277], "scheme": 271, "ipex": 271, "approach": 271, "With": 271, "without": 271, "specifi": 271, "devic": 271, "wise": 272, "lwq": 272, "turn": 273, "off": 273, "woq": [274, 283], "known": 275, "benefit": 276, "comparison": 276, "differ": 276, "smooth": 277, "quant": 277, "per": 277, "channel": 277, "matmul": 277, "limit": 277, "smoothquant": 277, "enhanc": 277, "alpha": 277, "engin": 277, "fix": 277, "determin": 277, "entir": 277, "each": 277, "block": 277, "tensorboard": 278, "space": 280, "exit": 280, "process": 280, "zero": 281, "topic": 281, "innov": 281, "product": 281, "0": 283, "ptq": 283, "qat": 283, "17": 283, "qdq": 283}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.algorithm.algorithm": [[1, "module-neural_compressor.algorithm.algorithm"]], "Classes": [[1, "classes"], [2, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [24, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [38, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [66, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [75, "classes"], [77, "classes"], [80, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [90, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [107, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [133, "classes"], [137, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [180, "classes"], [181, "classes"]], "Functions": [[1, "functions"], [6, "functions"], [12, "functions"], [14, "functions"], [21, "functions"], [27, "functions"], [28, "functions"], [29, "functions"], [30, "functions"], [34, "functions"], [35, "functions"], [37, "functions"], [46, "functions"], [54, "functions"], [56, "functions"], [63, "functions"], [68, "functions"], [69, "functions"], [72, "functions"], [73, "functions"], [74, "functions"], [77, "functions"], [78, "functions"], [80, "functions"], [81, "functions"], [82, "functions"], [84, "functions"], [91, "functions"], [98, "functions"], [102, "functions"], [107, "functions"], [108, "functions"], [109, "functions"], [111, "functions"], [116, "functions"], [122, "functions"], [126, "functions"], [128, "functions"], [130, "functions"], [131, "functions"], [133, "functions"], [134, "functions"], [135, "functions"], [137, "functions"], [138, "functions"], [142, "functions"], [146, "functions"], [148, "functions"], [150, "functions"], [154, "functions"], [162, "functions"], [166, "functions"], [168, "functions"], [169, "functions"], [172, "functions"], [175, "functions"], [176, "functions"], [177, "functions"], [179, "functions"], [180, "functions"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [24, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [66, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"]], "neural_compressor.algorithm.fast_bias_correction": [[2, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[3, "module-neural_compressor.algorithm"]], "Submodules": [[3, "submodules"], [9, "submodules"], [18, "submodules"], [22, "submodules"], [25, "submodules"], [32, "submodules"], [41, "submodules"], [48, "submodules"], [60, "submodules"], [64, "submodules"], [67, "submodules"], [71, "submodules"], [76, "submodules"], [83, "submodules"], [89, "submodules"], [95, "submodules"], [101, "submodules"], [105, "submodules"], [118, "submodules"], [124, "submodules"], [129, "submodules"], [136, "submodules"], [140, "submodules"], [158, "submodules"], [164, "submodules"], [173, "submodules"]], "neural_compressor.algorithm.smooth_quant": [[4, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[5, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[6, "module-neural_compressor.benchmark"]], "neural_compressor.config": [[7, "module-neural_compressor.config"]], "neural_compressor.contrib": [[8, "module-neural_compressor.contrib"]], "Subpackages": [[8, "subpackages"], [23, "subpackages"], [40, "subpackages"], [65, "subpackages"], [76, "subpackages"], [100, "subpackages"], [118, "subpackages"], [129, "subpackages"], [158, "subpackages"]], "neural_compressor.contrib.strategy": [[9, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[10, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[11, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.datasets.bert_dataset": [[12, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[13, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[14, "module-neural_compressor.data.datasets.dataset"]], "Attributes": [[14, "attributes"], [56, "attributes"]], "neural_compressor.data.datasets.dummy_dataset": [[15, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[18, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[20, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[21, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[22, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[23, "module-neural_compressor.data"]], "neural_compressor.data.transforms.imagenet_transform": [[24, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[25, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[26, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[27, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[28, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[29, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[30, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[31, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[32, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[33, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[34, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[35, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[36, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[37, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[38, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[39, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[40, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[41, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[45, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[48, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[56, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[60, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[63, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[64, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[65, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[67, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[69, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[70, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[71, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[74, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[75, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[76, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[77, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[78, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[79, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[80, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[82, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[83, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[84, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[85, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[86, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[87, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[88, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[89, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[90, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[91, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[92, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[95, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[99, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[100, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[101, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[104, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[105, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[106, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[112, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[113, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[115, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[116, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[117, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[118, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[119, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[120, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[121, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[122, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[123, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[124, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[128, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[129, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[130, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[131, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[132, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[133, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[134, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[135, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[136, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[137, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[138, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[139, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[140, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[141, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[142, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[143, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[144, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[145, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[146, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[147, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[148, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[149, "module-neural_compressor.profiling"]], "neural_compressor.quantization": [[150, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[151, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[152, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[153, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[154, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[155, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[156, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[157, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[158, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[159, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[160, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[161, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[162, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[163, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[164, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[166, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[167, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[168, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.training": [[169, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[170, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[171, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[172, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[173, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[174, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[175, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[176, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[177, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[178, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[179, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[180, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[181, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[182, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[183, "intel-neural-compressor-documentation"], [284, "intel-neural-compressor-documentation"]], "Sections": [[183, "sections"], [284, "sections"]], "Contributor Covenant Code of Conduct": [[184, "contributor-covenant-code-of-conduct"], [185, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[184, "our-pledge"]], "Our Standards": [[184, "our-standards"]], "Our Responsibilities": [[184, "our-responsibilities"]], "Scope": [[184, "scope"]], "Enforcement": [[184, "enforcement"]], "Attribution": [[184, "attribution"]], "Contribution Guidelines": [[185, "contribution-guidelines"]], "Create Pull Request": [[185, "create-pull-request"]], "Step-by-Step guidelines": [[185, "step-by-step-guidelines"]], "Pull Request Checklist": [[185, "pull-request-checklist"]], "Pull Request Template": [[185, "pull-request-template"]], "Pull Request Acceptance Criteria": [[185, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[185, "pull-request-status-checks-overview"]], "Support": [[185, "support"]], "FX": [[186, "fx"]], "Introduction": [[186, "introduction"], [187, "introduction"], [190, "introduction"], [191, "introduction"], [192, "introduction"], [207, "introduction"], [208, "introduction"], [210, "introduction"], [211, "introduction"], [214, "introduction"], [215, "introduction"], [216, "introduction"], [218, "introduction"], [220, "introduction"], [223, "introduction"], [227, "introduction"], [229, "introduction"], [230, "introduction"], [231, "introduction"], [252, "introduction"], [253, "introduction"], [254, "introduction"], [266, "introduction"], [267, "introduction"], [268, "introduction"], [270, "introduction"], [272, "introduction"], [274, "introduction"], [276, "introduction"], [277, "introduction"], [278, "introduction"], [279, "introduction"], [280, "introduction"], [282, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[186, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[186, "get-started"], [213, "get-started"], [256, "get-started"], [271, "get-started"]], "Post Training Static Quantization": [[186, "post-training-static-quantization"], [271, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[186, "post-training-dynamic-quantization"], [271, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[186, "quantization-aware-training"]], "Examples": [[186, "examples"], [187, "examples"], [207, "examples"], [210, "examples"], [211, "examples"], [214, "examples"], [215, "examples"], [216, "examples"], [217, "examples"], [218, "examples"], [228, "examples"], [229, "examples"], [230, "examples"], [231, "examples"], [267, "examples"], [268, "examples"], [271, "examples"], [272, "examples"], [274, "examples"], [278, "examples"]], "Note": [[186, "note"]], "Details": [[186, "details"]], "Common Problem": [[186, "common-problem"]], "Dynamic Quantization": [[186, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[186, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[187, "neural-architecture-search"]], "Basic NAS": [[187, "basic-nas"]], "Dynamic NAS": [[187, "dynamic-nas"]], "NAS Support Matrix": [[187, "nas-support-matrix"]], "Get Started with NAS API": [[187, "get-started-with-nas-api"]], "Basic Usage": [[187, "basic-usage"]], "1. Python code + YAML": [[187, "python-code-yaml"]], "2. Python code only": [[187, "python-code-only"]], "Advanced Usage (Custom NAS)": [[187, "advanced-usage-custom-nas"]], "Security Policy": [[188, "security-policy"]], "Report a Vulnerability": [[188, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[189, "intel-neural-compressor"], [249, "intel-neural-compressor"]], "What\u2019s New": [[189, "what-s-new"]], "Installation": [[189, "installation"], [224, "installation"], [224, "id1"], [243, "installation"], [251, "installation"], [256, "installation"]], "Install from pypi": [[189, "install-from-pypi"], [251, "install-from-pypi"]], "Getting Started": [[189, "getting-started"], [221, "getting-started"], [251, "getting-started"]], "Weight-Only Quantization (LLMs)": [[189, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[189, "static-quantization-non-llms"]], "Documentation": [[189, "documentation"]], "Selected Publications/Events": [[189, "selected-publications-events"]], "Additional Content": [[189, "additional-content"]], "Communication": [[189, "communication"]], "Adaptor": [[190, "adaptor"], [193, "adaptor"]], "Adaptor Support Matrix": [[190, "adaptor-support-matrix"]], "Working Flow": [[190, "working-flow"], [271, "working-flow"]], "Get Started with Adaptor API": [[190, "get-started-with-adaptor-api"]], "Query API": [[190, "query-api"]], "Background": [[190, "background"], [209, "background"]], "Query API Introduction": [[190, "query-api-introduction"]], "Example of Adding a New Backend Support": [[190, "example-of-adding-a-new-backend-support"]], "Capability": [[190, "capability"]], "Implement ONNXRTAdaptor Class": [[190, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[191, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[191, "api-list-that-need-to-implement"]], "Design the framework YAML": [[191, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[191, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[191, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[191, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[191, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[191, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[192, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[192, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[192, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[192, "use-the-new-data-type"]], "Summary": [[192, "summary"]], "ONNX Runtime": [[194, "onnx-runtime"]], "Torch Utils": [[195, "torch-utils"]], "API Document Example": [[196, "api-document-example"]], "APIs": [[197, "apis"]], "Benchmark": [[198, "benchmark"], [228, "benchmark"], [270, "benchmark"]], "Compression": [[199, "compression"]], "Config": [[200, "config"]], "Mix Precision": [[201, "mix-precision"], [228, "mix-precision"]], "Model": [[202, "model"], [230, "model"], [252, "model"], [254, "model"]], "Objective": [[203, "objective"], [262, "objective"], [263, "objective"], [264, "objective"], [266, "objective"]], "Quantization": [[204, "quantization"], [270, "quantization"], [271, "quantization"]], "Strategy": [[205, "strategy"]], "Training": [[206, "training"]], "Benchmarking": [[207, "benchmarking"]], "Benchmark Support Matrix": [[207, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[207, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[208, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[208, "calibration-algorithms"]], "Support Matrix": [[208, "support-matrix"], [234, "support-matrix"]], "Reference": [[208, "reference"], [209, "reference"], [231, "reference"], [268, "reference"], [271, "reference"], [274, "reference"], [277, "reference"]], "INC Coding Conventions": [[209, "inc-coding-conventions"]], "Rules": [[209, "rules"]], "Imports": [[209, "imports"]], "Strings": [[209, "strings"]], "Logger": [[209, "logger"]], "Type Annotations": [[209, "type-annotations"]], "Comments": [[209, "comments"]], "TODO Comments": [[209, "todo-comments"]], "Public and Internal Interfaces": [[209, "public-and-internal-interfaces"]], "Folder structure": [[209, "folder-structure"]], "Recommend VS Code settings.json": [[209, "recommend-vs-code-settings-json"]], "DataLoader": [[210, "dataloader"]], "Supported Framework Dataloader Matrix": [[210, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[210, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[210, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[210, "build-custom-dataloader-with-python-api"]], "Dataset": [[211, "dataset"]], "Supported Framework Dataset Matrix": [[211, "supported-framework-dataset-matrix"]], "TensorFlow": [[211, "tensorflow"], [227, "tensorflow"], [279, "tensorflow"]], "PyTorch": [[211, "pytorch"], [227, "pytorch"], [273, "pytorch"]], "MXNet": [[211, "mxnet"], [227, "mxnet"], [279, "mxnet"]], "ONNXRT": [[211, "onnxrt"], [227, "onnxrt"], [279, "onnxrt"]], "Get start with Dataset API": [[211, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[211, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[211, "user-specific-dataset"]], "Design": [[212, "design"], [280, "design"], [280, "id1"], [280, "id3"], [280, "id5"], [280, "id7"], [280, "id9"], [280, "id11"], [280, "id13"], [280, "id15"], [280, "id17"], [280, "id19"], [280, "id21"]], "Architecture": [[212, "architecture"], [223, "architecture"]], "Workflow": [[212, "workflow"]], "Diagnosis": [[213, "diagnosis"]], "Diagnosis Introduction": [[213, "diagnosis-introduction"]], "Supported Feature Matrix": [[213, "supported-feature-matrix"], [216, "supported-feature-matrix"], [220, "supported-feature-matrix"], [223, "supported-feature-matrix"], [270, "supported-feature-matrix"], [271, "supported-feature-matrix"], [278, "supported-feature-matrix"], [282, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[213, "install-intel-neural-compressor"]], "Modify script": [[213, "modify-script"]], "Quantization diagnosis": [[213, "quantization-diagnosis"]], "Benchmark diagnosis": [[213, "benchmark-diagnosis"]], "Example": [[213, "example"], [227, "example"], [234, "example"], [238, "example"], [266, "example"]], "Prepare dataset": [[213, "prepare-dataset"]], "Run quantization script": [[213, "run-quantization-script"]], "Run benchmark script": [[213, "run-benchmark-script"]], "See quantization data": [[213, "see-quantization-data"]], "How to do diagnosis": [[213, "how-to-do-diagnosis"]], "Parameter description": [[213, "parameter-description"]], "Diagnosis suggestions": [[213, "diagnosis-suggestions"]], "Fallback setting example": [[213, "fallback-setting-example"]], "See profiling data": [[213, "see-profiling-data"]], "Distillation": [[214, "distillation"], [228, "distillation"], [270, "distillation"]], "Knowledge Distillation": [[214, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[214, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[214, "self-distillation"]], "Distillation Support Matrix": [[214, "distillation-support-matrix"]], "Get Started with Distillation API": [[214, "get-started-with-distillation-api"]], "Distillation for Quantization": [[215, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[215, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[215, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[216, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[216, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[216, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[216, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[216, "horovodrun-execution"]], "Security": [[216, "security"]], "PyTorch Examples:": [[216, "pytorch-examples"]], "TensorFlow Examples:": [[216, "tensorflow-examples"]], "Example List": [[217, "example-list"]], "Release Data": [[217, "release-data"]], "Export": [[218, "export"]], "Supported Framework Model Matrix": [[218, "supported-framework-model-matrix"], [230, "supported-framework-model-matrix"], [231, "supported-framework-model-matrix"], [272, "supported-framework-model-matrix"], [274, "supported-framework-model-matrix"]], "PyTorch Model": [[218, "pytorch-model"]], "FP32 Model Export": [[218, "fp32-model-export"], [218, "id1"]], "INT8 Model Export": [[218, "int8-model-export"], [218, "id2"]], "Tensorflow Model": [[218, "tensorflow-model"]], "Appendix": [[218, "appendix"]], "Supported quantized ops": [[218, "supported-quantized-ops"]], "Frequently Asked Questions": [[219, "frequently-asked-questions"]], "Common Build Issues": [[219, "common-build-issues"]], "Issue 1:": [[219, "issue-1"]], "Issue 2:": [[219, "issue-2"]], "Issue 3:": [[219, "issue-3"]], "Issue 4:": [[219, "issue-4"]], "Framework YAML Configuration Files": [[220, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[220, "get-started-with-framework-yaml-files"]], "Quick Samples": [[221, "quick-samples"]], "Quantization with Python API": [[221, "quantization-with-python-api"], [251, "quantization-with-python-api"]], "Validated Models": [[221, "validated-models"], [277, "validated-models"], [283, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[222, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[222, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[222, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[223, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[224, "prerequisites"], [256, "prerequisites"], [257, "prerequisites"]], "Install from Binary": [[224, "install-from-binary"]], "Install from Source": [[224, "install-from-source"], [251, "install-from-source"]], "Install from AI Kit": [[224, "install-from-ai-kit"]], "System Requirements": [[224, "system-requirements"]], "Validated Hardware Environment": [[224, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[224, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[224, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[224, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[224, "validated-software-environment"]], "Legal Information": [[225, "legal-information"]], "License": [[225, "license"]], "Citation": [[225, "citation"]], "Trademarks": [[225, "trademarks"]], "LLMs Quantization Recipes": [[226, "llms-quantization-recipes"]], "Large Language Models Recipes": [[226, "large-language-models-recipes"]], "Large Language Models Accuracy": [[226, "large-language-models-accuracy"]], "Metrics": [[227, "metrics"]], "Supported Built-in Metric Matrix": [[227, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[227, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[227, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[227, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[228, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[228, "model-quantization"]], "Post-training Quantization": [[228, "post-training-quantization"]], "Quantization Aware Training": [[228, "quantization-aware-training"], [271, "quantization-aware-training"], [271, "id1"]], "Pruning": [[228, "pruning"], [268, "pruning"], [270, "pruning"]], "Orchestration": [[228, "orchestration"]], "Mixed Precision": [[229, "mixed-precision"]], "Mixed Precision Support Matrix": [[229, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[229, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[229, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[229, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[229, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[229, "get-started-with-mixed-precision-api"]], "Microscaling Quantization": [[231, "microscaling-quantization"]], "Get Started with Microscaling Quantization API": [[231, "get-started-with-microscaling-quantization-api"]], "Neural Coder": [[232, "neural-coder"], [249, "neural-coder"], [249, "id1"]], "What do we offer?": [[232, "what-do-we-offer"]], "Getting Started!": [[232, "getting-started"], [243, "getting-started"]], "Jupyter Lab Extension": [[232, "jupyter-lab-extension"]], "Python Launcher": [[232, "python-launcher"], [237, "python-launcher"]], "Python API": [[232, "python-api"]], "Contact": [[232, "contact"], [256, "contact"]], "AWS Amazon SageMaker Support": [[233, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[233, "start-jupyter-lab-3"]], "For SageMaker Studio": [[233, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[233, "for-sagemaker-notebook-instance"]], "Installation Guide": [[233, "installation-guide"]], "BigDL Nano Support": [[234, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[235, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[235, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[235, "install-numa-controller"]], "Environment Variables": [[235, "environment-variables"]], "Frequency Governers": [[235, "frequency-governers"]], "Neural Coder as Python API": [[236, "neural-coder-as-python-api"]], "Enable": [[236, "enable"]], "Bench": [[236, "bench"]], "SuperBench": [[236, "superbench"]], "Quick-Start": [[237, "quick-start"]], "Launcher Arguments (Optional)": [[237, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[238, "neural-coder-for-quantization"]], "Features Supported": [[238, "features-supported"]], "Models Supported": [[238, "models-supported"]], "Usage": [[238, "usage"], [258, "usage"], [258, "id2"], [258, "id6"], [258, "id9"], [258, "id16"], [258, "id19"], [258, "id22"], [258, "id25"], [277, "usage"], [278, "usage"], [278, "id1"], [280, "usage"], [280, "id2"], [280, "id4"], [280, "id6"], [280, "id8"], [280, "id10"], [280, "id12"], [280, "id14"], [280, "id16"], [280, "id18"], [280, "id20"], [280, "id22"]], "PyPI distribution:": [[238, "pypi-distribution"]], "Supported Optimization Features": [[239, "supported-optimization-features"]], "v0.4": [[240, "v0-4"]], "Highlights": [[240, "highlights"]], "Others": [[240, "others"]], "Changelog": [[241, "changelog"], [245, "changelog"]], "neural_compressor_ext_lab": [[242, "neural-compressor-ext-lab"]], "Requirements": [[242, "requirements"], [246, "requirements"], [252, "requirements"], [253, "requirements"], [254, "requirements"], [262, "requirements"]], "Install": [[242, "install"]], "Uninstall": [[242, "uninstall"]], "Contributing": [[242, "contributing"], [246, "contributing"]], "Development install": [[242, "development-install"], [246, "development-install"]], "Development uninstall": [[242, "development-uninstall"], [246, "development-uninstall"]], "Packaging the extension": [[242, "packaging-the-extension"], [246, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[243, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[243, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[243, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[243, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[244, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[244, "manual-release"], [247, "manual-release"]], "Python package": [[244, "python-package"], [247, "python-package"]], "NPM package": [[244, "npm-package"], [247, "npm-package"]], "Automated releases with the Jupyter Releaser": [[244, "automated-releases-with-the-jupyter-releaser"], [247, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[244, "publishing-to-conda-forge"], [247, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[246, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[247, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[248, "change-log"]], "[Unreleased]": [[248, "unreleased"]], "Background Introduction": [[249, "background-introduction"]], "Neural Coder Extension in VSCode": [[249, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[249, "neural-coder-extension-usage"]], "1. Open": [[249, "open"]], "2. Search": [[249, "search"]], "3. Setting": [[249, "setting"]], "4. Icon": [[249, "icon"]], "5. optimization (quantization)": [[249, "optimization-quantization"]], "5.1 Enable": [[249, "enable"]], "5.2 Auto": [[249, "auto"]], "Welcome to your VS Code Extension": [[250, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[250, "what-s-in-the-folder"]], "Setup": [[250, "setup"]], "Get up and running straight away": [[250, "get-up-and-running-straight-away"]], "Make changes": [[250, "make-changes"]], "Explore the API": [[250, "explore-the-api"]], "Run tests": [[250, "run-tests"]], "Go further": [[250, "go-further"]], "Neural Insights": [[251, "neural-insights"]], "Start the Neural Insights": [[251, "start-the-neural-insights"]], "Tensor dump examples": [[251, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[251, "step-by-step-diagnosis-example"]], "Research Collaborations": [[251, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[252, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [254, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[252, "preparation"], [253, "preparation"], [254, "preparation"], [276, "preparation"]], "Running the quantization": [[252, "running-the-quantization"], [253, "running-the-quantization"], [254, "running-the-quantization"]], "Analyzing the result of quantization": [[252, "analyzing-the-result-of-quantization"], [254, "analyzing-the-result-of-quantization"]], "Weights summary": [[252, "weights-summary"]], "Activations summary": [[252, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[253, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[253, "source"], [254, "source"]], "Prepare the dataset": [[254, "prepare-the-dataset"]], "Analyzing weight histograms": [[254, "analyzing-weight-histograms"]], "Open Neural Insights": [[254, "open-neural-insights"]], "Getting Started with Create React App": [[255, "getting-started-with-create-react-app"]], "Available Scripts": [[255, "available-scripts"]], "npm start": [[255, "npm-start"]], "npm test": [[255, "npm-test"]], "npm run build": [[255, "npm-run-build"]], "npm run eject": [[255, "npm-run-eject"]], "Learn More": [[255, "learn-more"], [256, "learn-more"]], "Code Splitting": [[255, "code-splitting"]], "Analyzing the Bundle Size": [[255, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[255, "making-a-progressive-web-app"]], "Advanced Configuration": [[255, "advanced-configuration"]], "Deployment": [[255, "deployment"]], "npm run build fails to minify": [[255, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[256, "what-s-neural-solution"]], "Why Neural Solution?": [[256, "why-neural-solution"]], "How does Neural Solution Work?": [[256, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[256, "method-1-using-pip"]], "Method 2. Building from source:": [[256, "method-2-building-from-source"]], "End-to-end examples": [[256, "end-to-end-examples"]], "Get started": [[257, "get-started"]], "Install Neural Solution": [[257, "install-neural-solution"]], "Method 1. Using pip": [[257, "method-1-using-pip"]], "Method 2. Building from source": [[257, "method-2-building-from-source"]], "Start service": [[257, "start-service"]], "Submit task": [[257, "submit-task"]], "Query task status": [[257, "query-task-status"]], "Stop service": [[257, "stop-service"]], "Inspect logs": [[257, "inspect-logs"]], "Manage resource": [[257, "manage-resource"], [262, "manage-resource"], [263, "manage-resource"]], "Node States": [[257, "node-states"]], "Query cluster": [[257, "query-cluster"]], "Add node": [[257, "add-node"]], "Remove node": [[257, "remove-node"]], "Neural Solution API": [[258, "neural-solution-api"]], "Base URL": [[258, "base-url"]], "Endpoints": [[258, "endpoints"]], "GET /": [[258, "get"]], "Description": [[258, "description"], [258, "id1"], [258, "id4"], [258, "id8"], [258, "id12"], [258, "id15"], [258, "id18"], [258, "id21"], [258, "id24"]], "Responses": [[258, "responses"], [258, "id3"], [258, "id7"], [258, "id11"], [258, "id14"], [258, "id17"], [258, "id20"], [258, "id23"], [258, "id26"]], "POST /task/submit": [[258, "post-task-submit"]], "Parameters": [[258, "parameters"], [258, "id5"], [258, "id10"], [258, "id13"]], "GET /task/status/{task_id}": [[258, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[258, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[258, "websocket-task-screen-task-id"]], "GET /ping": [[258, "get-ping"]], "GET /cluster": [[258, "get-cluster"]], "GET /download/{task_id}": [[258, "get-download-task-id"]], "GET /description": [[258, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[259, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[259, "contents"]], "Overview": [[259, "overview"], [281, "overview"]], "Workflow of OaaS": [[259, "workflow-of-oaas"]], "Class definition diagram": [[259, "class-definition-diagram"]], "Extensibility": [[259, "extensibility"]], "Task request description": [[260, "task-request-description"]], "Examples List": [[261, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[262, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[262, "start-the-neural-solution-service"], [263, "start-the-neural-solution-service"], [264, "start-the-neural-solution-service"]], "Submit optimization task": [[262, "submit-optimization-task"], [263, "submit-optimization-task"], [264, "submit-optimization-task"]], "Query optimization result": [[262, "query-optimization-result"], [263, "query-optimization-result"], [264, "query-optimization-result"]], "Download optimized model": [[262, "download-optimized-model"], [263, "download-optimized-model"]], "Stop the service": [[262, "stop-the-service"], [263, "stop-the-service"], [264, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[263, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[264, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[265, "client"]], "Single Objective": [[266, "single-objective"]], "Multiple Objectives": [[266, "multiple-objectives"]], "Objective Support Matrix": [[266, "objective-support-matrix"]], "Get Started with Objective API": [[266, "get-started-with-objective-api"]], "Config Single Objective": [[266, "config-single-objective"]], "Config Multiple Objectives": [[266, "config-multiple-objectives"]], "Optimization Orchestration": [[267, "optimization-orchestration"]], "One-shot": [[267, "one-shot"]], "Orchestration Support Matrix": [[267, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[267, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[268, "neural-network-pruning"]], "Pruning Patterns": [[268, "pruning-patterns"]], "Pruning Criteria": [[268, "pruning-criteria"]], "Pruning Types": [[268, "pruning-types"]], "Pruning Schedules": [[268, "pruning-schedules"]], "Pruning Scope": [[268, "pruning-scope"]], "Sparsity Decay Types": [[268, "sparsity-decay-types"]], "Regularization": [[268, "regularization"]], "Large Language Model Pruning": [[268, "large-language-model-pruning"]], "Pruning Support Matrix": [[268, "pruning-support-matrix"]], "Get Started with Pruning API": [[268, "get-started-with-pruning-api"]], "Training-aware pruning API": [[268, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[268, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[268, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[268, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (80)": [[269, "full-publications-events-80"]], "2024 (1)": [[269, "id1"]], "2023 (25)": [[269, "id2"]], "2022 (35)": [[269, "id3"]], "2021 (15)": [[269, "id4"]], "2018 - 2020 (4)": [[269, "id5"]], "Pythonic Style Access for Configurations": [[270, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[270, "pythonic-api-for-user-configurations"], [270, "id1"]], "Pythonic API for Framework Configurations": [[270, "pythonic-api-for-framework-configurations"], [270, "id2"]], "Get Started with Pythonic API for Configurations": [[270, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[270, "nas"]], "Quantization Introduction": [[271, "quantization-introduction"]], "Quantization Fundamentals": [[271, "quantization-fundamentals"], [277, "quantization-fundamentals"]], "Quantization Support Matrix": [[271, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[271, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[271, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[271, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[271, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[271, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[271, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[271, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[271, "post-training-quantization"]], "Specify Quantization Rules": [[271, "specify-quantization-rules"]], "Specify Quantization Recipes": [[271, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[271, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[272, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[272, "pytorch-framework-example"]], "ONNX Runtime framework example": [[272, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[273, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[273, "tensorflow"]], "Weight Only Quantization (WOQ)": [[274, "weight-only-quantization-woq"]], "Quantization Capability": [[274, "quantization-capability"]], "Export Compressed Model": [[274, "export-compressed-model"]], "User Code Example": [[274, "user-code-example"]], "WOQ Algorithms Tuning": [[274, "woq-algorithms-tuning"]], "User code example": [[274, "id1"]], "Release": [[275, "release"]], "Release Notes": [[275, "release-notes"]], "Known Issues": [[275, "known-issues"]], "Incompatible Changes": [[275, "incompatible-changes"]], "SigOpt Strategy": [[276, "sigopt-strategy"]], "SigOpt Platform": [[276, "sigopt-platform"]], "Neural Compressor Configuration": [[276, "neural-compressor-configuration"]], "Performance": [[276, "performance"]], "Benefit of SigOpt Strategy": [[276, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[276, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[277, "smooth-quant"]], "Per-tensor & Per-channel": [[277, "per-tensor-per-channel"]], "Per-tensor example": [[277, "per-tensor-example"]], "Per-channel example": [[277, "per-channel-example"]], "Matmul quantization example": [[277, "matmul-quantization-example"]], "Per-channel limitation": [[277, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[277, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[277, "smoothquant"]], "Our enhancement:": [[277, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[277, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[277, "engineering"]], "Using a fixed alpha": [[277, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[277, "determining-the-alpha-through-auto-tuning"]], "Auto-tune the alpha for the entire model": [[277, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[277, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[277, "supported-framework-matrix"]], "TensorBoard": [[278, "tensorboard"]], "Get Started with TensorBoard": [[278, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[278, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[278, "tensorflow-tensorboard"]], "PyTorch Examples": [[278, "pytorch-examples"]], "TensorFlow Examples": [[278, "tensorflow-examples"]], "Transform": [[279, "transform"]], "Transform Support List": [[279, "transform-support-list"]], "Pytorch": [[279, "pytorch"]], "Tuning Strategies": [[280, "tuning-strategies"]], "Strategy Design": [[280, "strategy-design"]], "Tuning Space": [[280, "tuning-space"]], "Exit Policy": [[280, "exit-policy"]], "Accuracy Criteria": [[280, "accuracy-criteria"]], "Tuning Process": [[280, "tuning-process"]], "Tuning Algorithms": [[280, "tuning-algorithms"]], "Auto": [[280, "auto"]], "Conservative Tuning": [[280, "conservative-tuning"]], "Basic": [[280, "basic"]], "MSE": [[280, "mse"]], "MSE_V2": [[280, "mse-v2"]], "HAWQ_V2": [[280, "hawq-v2"]], "Bayesian": [[280, "bayesian"]], "Exhaustive": [[280, "exhaustive"]], "Random": [[280, "random"]], "SigOpt": [[280, "sigopt"]], "TPE": [[280, "tpe"]], "Distributed Tuning": [[280, "distributed-tuning"]], "Customize a New Tuning Strategy": [[280, "customize-a-new-tuning-strategy"]], "User Guide": [[281, "user-guide"]], "Python-based APIs": [[281, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[281, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[281, "advanced-topics"]], "Innovations for Productivity": [[281, "innovations-for-productivity"]], "User YAML Configuration Files": [[282, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[282, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[283, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[283, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[283, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[283, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[283, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[283, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[283, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[283, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[283, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[283, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.algorithm.algorithm"], [2, "module-neural_compressor.algorithm.fast_bias_correction"], [3, "module-neural_compressor.algorithm"], [4, "module-neural_compressor.algorithm.smooth_quant"], [5, "module-neural_compressor.algorithm.weight_correction"], [6, "module-neural_compressor.benchmark"], [7, "module-neural_compressor.config"], [8, "module-neural_compressor.contrib"], [9, "module-neural_compressor.contrib.strategy"], [10, "module-neural_compressor.contrib.strategy.sigopt"], [11, "module-neural_compressor.contrib.strategy.tpe"], [12, "module-neural_compressor.data.datasets.bert_dataset"], [13, "module-neural_compressor.data.datasets.coco_dataset"], [14, "module-neural_compressor.data.datasets.dataset"], [15, "module-neural_compressor.data.datasets.dummy_dataset"], [16, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [17, "module-neural_compressor.data.datasets.imagenet_dataset"], [18, "module-neural_compressor.data.datasets"], [19, "module-neural_compressor.data.datasets.style_transfer_dataset"], [20, "module-neural_compressor.data.filters.coco_filter"], [21, "module-neural_compressor.data.filters.filter"], [22, "module-neural_compressor.data.filters"], [23, "module-neural_compressor.data"], [24, "module-neural_compressor.data.transforms.imagenet_transform"], [25, "module-neural_compressor.data.transforms"], [26, "module-neural_compressor.data.transforms.postprocess"], [27, "module-neural_compressor.data.transforms.tokenization"], [28, "module-neural_compressor.data.transforms.transform"], [29, "module-neural_compressor.experimental.benchmark"], [30, "module-neural_compressor.experimental.common.criterion"], [31, "module-neural_compressor.experimental.common.dataloader"], [32, "module-neural_compressor.experimental.common"], [33, "module-neural_compressor.experimental.common.metric"], [34, "module-neural_compressor.experimental.common.model"], [35, "module-neural_compressor.experimental.common.optimizer"], [36, "module-neural_compressor.experimental.common.postprocess"], [37, "module-neural_compressor.experimental.common.torch_utils"], [38, "module-neural_compressor.experimental.component"], [39, "module-neural_compressor.experimental.compression"], [40, "module-neural_compressor.experimental.contrib"], [41, "module-neural_compressor.experimental.contrib.strategy"], [42, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [43, "module-neural_compressor.experimental.contrib.strategy.tpe"], [44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [45, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [47, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [48, "module-neural_compressor.experimental.data.dataloaders"], [49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [52, "module-neural_compressor.experimental.data.dataloaders.sampler"], [53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [54, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [55, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [56, "module-neural_compressor.experimental.data.datasets.dataset"], [57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [60, "module-neural_compressor.experimental.data.datasets"], [61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [62, "module-neural_compressor.experimental.data.filters.coco_filter"], [63, "module-neural_compressor.experimental.data.filters.filter"], [64, "module-neural_compressor.experimental.data.filters"], [65, "module-neural_compressor.experimental.data"], [66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [67, "module-neural_compressor.experimental.data.transforms"], [68, "module-neural_compressor.experimental.data.transforms.tokenization"], [69, "module-neural_compressor.experimental.data.transforms.transform"], [70, "module-neural_compressor.experimental.distillation"], [71, "module-neural_compressor.experimental.export"], [72, "module-neural_compressor.experimental.export.qlinear2qdq"], [73, "module-neural_compressor.experimental.export.tf2onnx"], [74, "module-neural_compressor.experimental.export.torch2onnx"], [75, "module-neural_compressor.experimental.graph_optimization"], [76, "module-neural_compressor.experimental"], [77, "module-neural_compressor.experimental.metric.bleu"], [78, "module-neural_compressor.experimental.metric.bleu_util"], [79, "module-neural_compressor.experimental.metric.coco_label_map"], [80, "module-neural_compressor.experimental.metric.coco_tools"], [81, "module-neural_compressor.experimental.metric.evaluate_squad"], [82, "module-neural_compressor.experimental.metric.f1"], [83, "module-neural_compressor.experimental.metric"], [84, "module-neural_compressor.experimental.metric.metric"], [85, "module-neural_compressor.experimental.mixed_precision"], [86, "module-neural_compressor.experimental.model_conversion"], [87, "module-neural_compressor.experimental.nas.basic_nas"], [88, "module-neural_compressor.experimental.nas.dynas"], [89, "module-neural_compressor.experimental.nas"], [90, "module-neural_compressor.experimental.nas.nas"], [91, "module-neural_compressor.experimental.nas.nas_utils"], [92, "module-neural_compressor.experimental.nas.search_algorithms"], [93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [95, "module-neural_compressor.experimental.pruner_legacy"], [96, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [98, "module-neural_compressor.experimental.pruner_legacy.pruner"], [99, "module-neural_compressor.experimental.pruning"], [100, "module-neural_compressor.experimental.pruning_recipes"], [101, "module-neural_compressor.experimental.pruning_recipes.patterns"], [102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [104, "module-neural_compressor.experimental.pruning_v2"], [105, "module-neural_compressor.experimental.pytorch_pruner"], [106, "module-neural_compressor.experimental.pytorch_pruner.logger"], [107, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [109, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [110, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [112, "module-neural_compressor.experimental.quantization"], [113, "module-neural_compressor.experimental.scheduler"], [114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [115, "module-neural_compressor.experimental.strategy.basic"], [116, "module-neural_compressor.experimental.strategy.bayesian"], [117, "module-neural_compressor.experimental.strategy.exhaustive"], [118, "module-neural_compressor.experimental.strategy"], [119, "module-neural_compressor.experimental.strategy.mse"], [120, "module-neural_compressor.experimental.strategy.mse_v2"], [121, "module-neural_compressor.experimental.strategy.random"], [122, "module-neural_compressor.experimental.strategy.strategy"], [123, "module-neural_compressor.experimental.strategy.utils.constant"], [124, "module-neural_compressor.experimental.strategy.utils"], [125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [126, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [128, "module-neural_compressor.experimental.strategy.utils.utility"], [129, "module-neural_compressor"], [130, "module-neural_compressor.metric.bleu"], [131, "module-neural_compressor.metric.bleu_util"], [132, "module-neural_compressor.metric.coco_label_map"], [133, "module-neural_compressor.metric.coco_tools"], [134, "module-neural_compressor.metric.evaluate_squad"], [135, "module-neural_compressor.metric.f1"], [136, "module-neural_compressor.metric"], [137, "module-neural_compressor.metric.metric"], [138, "module-neural_compressor.mix_precision"], [139, "module-neural_compressor.model.base_model"], [140, "module-neural_compressor.model"], [141, "module-neural_compressor.model.keras_model"], [142, "module-neural_compressor.model.model"], [143, "module-neural_compressor.model.mxnet_model"], [144, "module-neural_compressor.model.nets_factory"], [145, "module-neural_compressor.model.onnx_model"], [146, "module-neural_compressor.model.tensorflow_model"], [147, "module-neural_compressor.model.torch_model"], [148, "module-neural_compressor.objective"], [149, "module-neural_compressor.profiling"], [150, "module-neural_compressor.quantization"], [151, "module-neural_compressor.strategy.auto"], [152, "module-neural_compressor.strategy.auto_mixed_precision"], [153, "module-neural_compressor.strategy.basic"], [154, "module-neural_compressor.strategy.bayesian"], [155, "module-neural_compressor.strategy.conservative"], [156, "module-neural_compressor.strategy.exhaustive"], [157, "module-neural_compressor.strategy.hawq_v2"], [158, "module-neural_compressor.strategy"], [159, "module-neural_compressor.strategy.mse"], [160, "module-neural_compressor.strategy.mse_v2"], [161, "module-neural_compressor.strategy.random"], [162, "module-neural_compressor.strategy.strategy"], [163, "module-neural_compressor.strategy.utils.constant"], [164, "module-neural_compressor.strategy.utils"], [165, "module-neural_compressor.strategy.utils.tuning_sampler"], [166, "module-neural_compressor.strategy.utils.tuning_space"], [167, "module-neural_compressor.strategy.utils.tuning_structs"], [168, "module-neural_compressor.strategy.utils.utility"], [169, "module-neural_compressor.training"], [170, "module-neural_compressor.utils.collect_layer_histogram"], [171, "module-neural_compressor.utils.constant"], [172, "module-neural_compressor.utils.create_obj_from_config"], [173, "module-neural_compressor.utils"], [174, "module-neural_compressor.utils.kl_divergence"], [175, "module-neural_compressor.utils.load_huggingface"], [176, "module-neural_compressor.utils.logger"], [177, "module-neural_compressor.utils.neural_insights_utils"], [178, "module-neural_compressor.utils.options"], [179, "module-neural_compressor.utils.pytorch"], [180, "module-neural_compressor.utils.utility"], [181, "module-neural_compressor.utils.weights_details"], [182, "module-neural_compressor.version"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[1, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[2, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[2, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[3, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[4, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[4, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[5, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[5, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[6, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.summary_benchmark"]], "accuracycriterion (class in neural_compressor.config)": [[7, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[7, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[7, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[7, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[7, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[7, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[7, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[7, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[7, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[7, "module-neural_compressor.config"]], "neural_compressor.contrib": [[8, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[9, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[10, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[10, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[11, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[11, "module-neural_compressor.contrib.strategy.tpe"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[12, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[13, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[14, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[15, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[15, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[16, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[16, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[18, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[19, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[20, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[20, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[20, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[21, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[22, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[23, "module-neural_compressor.data"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[24, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[25, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[26, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[26, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[27, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TRANSFORMS"], [28, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[28, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[29, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[30, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[31, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[31, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[32, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[33, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[33, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[34, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[34, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[34, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[35, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[36, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[36, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[37, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[37, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[37, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[38, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[38, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[39, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[40, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[41, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[42, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[43, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[44, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[45, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[46, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[46, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[48, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[49, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[50, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[50, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[51, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[56, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[57, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[58, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[58, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[60, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[61, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[62, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[62, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[63, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[64, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[65, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[67, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [69, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[69, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[70, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[70, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[71, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[72, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[72, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[73, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[73, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[74, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[75, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[75, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[76, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[77, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[77, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[77, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[78, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[78, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[79, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[80, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[82, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[83, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[84, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[84, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[84, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[84, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[84, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[85, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[85, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[86, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[86, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[87, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[87, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[88, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[88, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[89, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[90, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[90, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[90, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[91, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[92, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[93, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[94, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[95, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[96, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[97, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[98, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[98, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[99, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[99, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[99, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[99, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[99, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[100, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[101, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[104, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[104, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[104, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[104, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[104, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[105, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[106, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[112, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[112, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[113, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[113, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[114, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[115, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[115, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[116, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[117, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[117, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[118, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[119, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[119, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[120, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[120, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[121, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[121, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[122, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[122, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[122, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[123, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[124, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[127, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[128, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[129, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[130, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[130, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[130, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[131, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[131, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[132, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[133, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[134, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[135, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[136, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[137, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[137, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[137, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[137, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[137, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[137, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[137, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[137, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[137, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[137, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[138, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[138, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[139, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[139, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[140, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[141, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[141, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[142, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[142, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[142, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[143, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[143, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[144, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[144, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[145, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[145, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[146, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[147, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[148, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[148, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[148, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[148, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[148, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[149, "module-neural_compressor.profiling"]], "fit() (in module neural_compressor.quantization)": [[150, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[150, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[151, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[151, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[152, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[152, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[153, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[153, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[154, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[155, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[155, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[156, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[156, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[157, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[157, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[158, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[159, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[159, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[160, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[160, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[161, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[161, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[162, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[163, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[164, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[166, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[167, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[167, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[168, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "callbacks (class in neural_compressor.training)": [[169, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[169, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[169, "neural_compressor.training.fit"]], "neural_compressor.training": [[169, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[169, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[170, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[170, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[171, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[172, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[173, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[174, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[174, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[175, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[175, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[175, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[175, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[176, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[177, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[178, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[178, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[179, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[180, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[181, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[181, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[181, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[182, "module-neural_compressor.version"]]}})