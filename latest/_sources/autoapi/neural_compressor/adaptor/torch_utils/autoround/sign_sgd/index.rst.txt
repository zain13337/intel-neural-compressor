:orphan:

:py:mod:`neural_compressor.adaptor.torch_utils.autoround.sign_sgd`
==================================================================

.. py:module:: neural_compressor.adaptor.torch_utils.autoround.sign_sgd


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.adaptor.torch_utils.autoround.sign_sgd.SGD



Functions
~~~~~~~~~

.. autoapisummary::

   neural_compressor.adaptor.torch_utils.autoround.sign_sgd.sgd



.. py:class:: SGD(params, lr=required, momentum=0, dampening=0, weight_decay=0, nesterov=False, *, maximize=False, foreach: Optional[bool] = None, differentiable=False)




   Implements stochastic gradient descent (optionally with momentum).

   .. math::
      \begin{aligned}
           &\rule{110mm}{0.4pt}                                                                 \\
           &\textbf{input}      : \gamma \text{ (lr)}, \: \theta_0 \text{ (params)}, \: f(\theta)
               \text{ (objective)}, \: \lambda \text{ (weight decay)},                          \\
           &\hspace{13mm} \:\mu \text{ (momentum)}, \:\tau \text{ (dampening)},
           \:\textit{ nesterov,}\:\textit{ maximize}                                     \\[-1.ex]
           &\rule{110mm}{0.4pt}                                                                 \\
           &\textbf{for} \: t=1 \: \textbf{to} \: \ldots \: \textbf{do}                         \\
           &\hspace{5mm}g_t           \leftarrow   \nabla_{\theta} f_t (\theta_{t-1})           \\
           &\hspace{5mm}\textbf{if} \: \lambda \neq 0                                           \\
           &\hspace{10mm} g_t \leftarrow g_t + \lambda  \theta_{t-1}                            \\
           &\hspace{5mm}\textbf{if} \: \mu \neq 0                                               \\
           &\hspace{10mm}\textbf{if} \: t > 1                                                   \\
           &\hspace{15mm} \textbf{b}_t \leftarrow \mu \textbf{b}_{t-1} + (1-\tau) g_t           \\
           &\hspace{10mm}\textbf{else}                                                          \\
           &\hspace{15mm} \textbf{b}_t \leftarrow g_t                                           \\
           &\hspace{10mm}\textbf{if} \: \textit{nesterov}                                       \\
           &\hspace{15mm} g_t \leftarrow g_{t} + \mu \textbf{b}_t                             \\
           &\hspace{10mm}\textbf{else}                                                   \\[-1.ex]
           &\hspace{15mm} g_t  \leftarrow  \textbf{b}_t                                         \\
           &\hspace{5mm}\textbf{if} \: \textit{maximize}                                          \\
           &\hspace{10mm}\theta_t \leftarrow \theta_{t-1} + \gamma g_t                   \\[-1.ex]
           &\hspace{5mm}\textbf{else}                                                    \\[-1.ex]
           &\hspace{10mm}\theta_t \leftarrow \theta_{t-1} - \gamma g_t                   \\[-1.ex]
           &\rule{110mm}{0.4pt}                                                          \\[-1.ex]
           &\bf{return} \:  \theta_t                                                     \\[-1.ex]
           &\rule{110mm}{0.4pt}                                                          \\[-1.ex]
      \end{aligned}

   Nesterov momentum is based on the formula from
   `On the importance of initialization and momentum in deep learning`__.

   :param params: iterable of parameters to optimize or dicts defining
                  parameter groups
   :type params: iterable
   :param lr: learning rate
   :type lr: float
   :param momentum: momentum factor (default: 0)
   :type momentum: float, optional
   :param weight_decay: weight decay (L2 penalty) (default: 0)
   :type weight_decay: float, optional
   :param dampening: dampening for momentum (default: 0)
   :type dampening: float, optional
   :param nesterov: enables Nesterov momentum (default: False)
   :type nesterov: bool, optional
   :param maximize: maximize the params based on the objective, instead of
                    minimizing (default: False)
   :type maximize: bool, optional
   :param foreach: whether foreach implementation of optimizer
                   is used (default: None)
   :type foreach: bool, optional

   .. rubric:: Example

   >>> # xdoctest: +SKIP
   >>> optimizer = torch.optim.SGD(model.parameters(), lr=0.1, momentum=0.9)
   >>> optimizer.zero_grad()
   >>> loss_fn(model(input), target).backward()
   >>> optimizer.step()

   __ http://www.cs.toronto.edu/%7Ehinton/absps/momentum.pdf

   .. note::
       The implementation of SGD with Momentum/Nesterov subtly differs from
       Sutskever et. al. and implementations in some other frameworks.

       Considering the specific case of Momentum, the update can be written as

       .. math::
           \begin{aligned}
               v_{t+1} & = \mu * v_{t} + g_{t+1}, \\
               p_{t+1} & = p_{t} - \text{lr} * v_{t+1},
           \end{aligned}

       where :math:`p`, :math:`g`, :math:`v` and :math:`\mu` denote the
       parameters, gradient, velocity, and momentum respectively.

       This is in contrast to Sutskever et. al. and
       other frameworks which employ an update of the form

       .. math::
           \begin{aligned}
               v_{t+1} & = \mu * v_{t} + \text{lr} * g_{t+1}, \\
               p_{t+1} & = p_{t} - v_{t+1}.
           \end{aligned}

       The Nesterov version is analogously modified.


.. py:function:: sgd(params: List[torch.Tensor], d_p_list: List[torch.Tensor], momentum_buffer_list: List[Optional[torch.Tensor]], has_sparse_grad: bool = None, foreach: bool = None, *, weight_decay: float, momentum: float, lr: float, dampening: float, nesterov: bool, maximize: bool)

   Functional API that performs SGD algorithm computation.

   See :class:`~torch.optim.SGD` for details.


