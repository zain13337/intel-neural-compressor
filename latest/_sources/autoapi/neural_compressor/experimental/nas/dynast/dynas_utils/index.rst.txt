:py:mod:`neural_compressor.experimental.nas.dynast.dynas_utils`
===============================================================

.. py:module:: neural_compressor.experimental.nas.dynast.dynas_utils

.. autoapi-nested-parse::

   Common methods for DyNAS.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.experimental.nas.dynast.dynas_utils.Runner
   neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner
   neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner
   neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface
   neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50
   neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3
   neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT
   neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference



Functions
~~~~~~~~~

.. autoapisummary::

   neural_compressor.experimental.nas.dynast.dynas_utils.get_macs
   neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency
   neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model



.. py:function:: get_macs(model: torch, input_size: Tuple[int, int, int, int] = (1, 3, 224, 224), device: str = 'cpu') -> int

   Get the MACs of the model.

   :param model: The torch model.
   :type model: torch.nn.Module
   :param input_size: The input dimension.
   :type input_size: Tuple
   :param device: The device on which the model runs.
   :type device: str

   :returns: The MACs of the model.


.. py:function:: measure_latency(model: torch, input_size: Tuple[int, int, int, int] = (1, 3, 224, 224), warmup_steps: int = None, measure_steps: int = None, device: str = 'cpu') -> Tuple[float, float]

   Measure Torch model's latency.

   :param model: Torch model.
   :type model: torch.nn.Module
   :param input_size: a tuple (batch size, channels, resolution, resolution).
   :type input_size: Tuple
   :param warmup_steps: how many data batches to use to warm up the device.
                        If 'None' it will be adjusted automatically w.r.t batch size.
   :type warmup_steps: int
   :param measure_steps: how many data batches to use for latency measurement.
                         If 'None' it will be adjusted automatically w.r.t batch size.
   :type measure_steps: int
   :param device: which device is being used for latency measurement.
   :type device: str

   :returns: mean latency; std latency.


.. py:class:: Runner

   The Runner base class.


.. py:class:: OFARunner(supernet: str, acc_predictor: neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor, macs_predictor: neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor, latency_predictor: neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor, datasetpath: str, batch_size: int, num_workers: int = 20, **kwargs)

   Bases: :py:obj:`Runner`

   The OFARunner class.

   The OFARunner class manages the sub-network selection from the OFA super-network and
   the validation measurements of the sub-networks. ResNet50, MobileNetV3 w1.0, and MobileNetV3 w1.2
   are currently supported. Imagenet is required for these super-networks `imagenet-ilsvrc2012`.

   .. py:method:: estimate_accuracy_top1(subnet_cfg: dict) -> float

      Estimate the top1 accuracy of the subnet with the predictor.

      :param subnet_cfg: The dictionary describing the subnet.
      :type subnet_cfg: dict

      :returns: Top1 accuracy of the subnet.


   .. py:method:: estimate_macs(subnet_cfg: dict) -> int

      Estimate the MACs of the subnet with the predictor.

      :param subnet_cfg: The dictionary describing the subnet.
      :type subnet_cfg: dict

      :returns: MACs of the subnet.


   .. py:method:: estimate_latency(subnet_cfg: dict) -> float

      Estimate the latency of the subnet with the predictor.

      :param subnet_cfg: The dictionary describing the subnet.
      :type subnet_cfg: dict

      :returns: Latency of the subnet.


   .. py:method:: validate_top1(subnet_cfg: dict) -> float

      Validate the top1 accuracy of the subnet on the dataset.

      :param subnet_cfg: The dictionary describing the subnet.
      :type subnet_cfg: dict

      :returns: Top1 accuracy of the subnet.


   .. py:method:: validate_macs(subnet_cfg: dict) -> float

      Measure subnet's FLOPs/MACs as per FVCore calculation.

      :param subnet_cfg: The dictionary describing the subnet.
      :type subnet_cfg: dict

      :returns: MACs of the subnet.


   .. py:method:: measure_latency(subnet_cfg: dict, warmup_steps: int = None, measure_steps: int = None) -> Tuple[float, float]

      Measure subnet's latency.

      :param subnet_cfg: The dictionary describing the subnet.
      :type subnet_cfg: dict

      :returns: mean latency; std latency.


   .. py:method:: get_subnet(subnet_cfg: dict) -> torch

      Get subnet.

      :param subnet_cfg: The dictionary describing the subnet.
      :type subnet_cfg: dict

      :returns: The subnet.



.. py:class:: TransformerLTRunner(supernet: str, acc_predictor: neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor, macs_predictor: neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor, latency_predictor: neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor, datasetpath: str, batch_size: int, checkpoint_path: str, **kwargs)

   Bases: :py:obj:`Runner`

   The Runner base class.

   .. py:method:: validate_macs(subnet_cfg: dict) -> float

      Measure Torch model's FLOPs/MACs as per FVCore calculation.

      :param subnet_cfg: sub-network Torch model

      :returns: `macs`


   .. py:method:: measure_latency(subnet_cfg: dict) -> Tuple[float, float]

      Measure model's latency.

      :param subnet_cfg: sub-network Torch model

      :returns: mean latency; std latency



.. py:class:: EvaluationInterface(evaluator: Runner, manager: neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager, metrics: list = ['acc', 'macs'], predictor_mode: bool = False, csv_path: str = None)

   Evaluation Interface class.

   The interface class update is required to be updated for each unique SuperNetwork
   framework as it controls how evaluation calls are made from DyNAS-T.

   :param evaluator: The 'runner' that performs the validation or prediction.
   :type evaluator: class
   :param manager: The DyNAS-T manager that translates between PyMoo and the parameter dict.
   :type manager: class
   :param csv_path: The csv file that get written to during the subnetwork search.
   :type csv_path: str, Optional

   .. py:method:: eval_subnet(x: list) -> Tuple[dict, float, float]

      Evaluate the subnet.


   .. py:method:: clear_csv() -> None

      Clear the csv file.



.. py:class:: EvaluationInterfaceResNet50(evaluator: Runner, manager: neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager, metrics: list = ['acc', 'macs'], predictor_mode: bool = False, csv_path: str = None)

   Bases: :py:obj:`EvaluationInterface`

   Evaluation Interface class for ResNet50.

   :param evaluator: The 'runner' that performs the validation or prediction.
   :type evaluator: class
   :param manager: The DyNAS-T manager that translates between PyMoo and the parameter dict.
   :type manager: class
   :param csv_path: The csv file that get written to during the subnetwork search.
   :type csv_path: str, Optional

   .. py:method:: eval_subnet(x: list) -> Tuple[dict, float, float]

      Evaluate the subnet.



.. py:class:: EvaluationInterfaceMobileNetV3(evaluator: Runner, manager: neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager, metrics=['acc', 'macs'], predictor_mode=False, csv_path=None)

   Bases: :py:obj:`EvaluationInterface`

   Evaluation Interface class for MobileNetV3.

   :param evaluator: The 'runner' that performs the validation or prediction.
   :type evaluator: class
   :param manager: The DyNAS-T manager that translates between PyMoo and the parameter dict.
   :type manager: class
   :param csv_path: The csv file that get written to during the subnetwork search.
   :type csv_path: str, Optional

   .. py:method:: eval_subnet(x: list) -> Tuple[dict, float, float]

      Evaluate the subnet.



.. py:class:: EvaluationInterfaceTransformerLT(evaluator: Runner, manager: neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager, metrics=['acc', 'macs'], predictor_mode=False, csv_path=None)

   Bases: :py:obj:`EvaluationInterface`

   Evaluation Interface class.

   The interface class update is required to be updated for each unique SuperNetwork
   framework as it controls how evaluation calls are made from DyNAS-T.

   :param evaluator: The 'runner' that performs the validation or prediction.
   :type evaluator: class
   :param manager: The DyNAS-T manager that translates between PyMoo and the parameter dict.
   :type manager: class
   :param csv_path: The csv file that get written to during the subnetwork search.
   :type csv_path: str, Optional

   .. py:method:: eval_subnet(x: list) -> Tuple[dict, float, float]

      Evaluate the subnet.


   .. py:method:: clear_csv() -> None

      Clear the csv file.



.. py:function:: get_torchvision_model(model_name: str) -> torch

   Get the torchvision model.

   :param model_name: The name of the torchvision model.
   :type model_name: str

   :returns: The specified torch model.


.. py:class:: TorchVisionReference(model_name: str, dataset_path: str, batch_size: int, input_size: int = 224, num_workers: int = 20)

   Baseline of the torchvision model.

   :param model_name: The name of the torchvision model.
   :type model_name: str
   :param dataset_path: The path to the dataset.
   :type dataset_path: str
   :param batch_size: Batch size of the input.
   :type batch_size: int
   :param input_size: Input image's width and height.
   :type input_size: int
   :param num_workers: How many subprocesses to use for data loading.
   :type num_workers: int

   .. py:method:: validate_top1() -> Tuple[float, float, float]

      Get the top1 accuracy of the model on the dataset.

      :returns: Top1 accuracy of the model.


   .. py:method:: validate_macs(device: str = 'cpu') -> int

      Get the MACs of the model.

      :returns: MACs of the model.


   .. py:method:: measure_latency(device: str = 'cpu', warmup_steps: int = None, measure_steps: int = None) -> Tuple[float, float]

      Measure the latency of the model.

      :returns: Latency of the model.



